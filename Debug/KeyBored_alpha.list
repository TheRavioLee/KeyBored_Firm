
KeyBored_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800b058  0800b058  0000c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f0  0800b1f0  0000d59c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b1f0  0800b1f0  0000d59c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b1f0  0800b1f0  0000d59c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f0  0800b1f0  0000c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1f4  0800b1f4  0000c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000059c  20000000  0800b1f8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be4  200005a0  0800b794  0000d5a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  0800b794  0000e184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d59c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b32  00000000  00000000  0000d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f5  00000000  00000000  000220f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecd  00000000  00000000  00027da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8cb  00000000  00000000  00028c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d0  00000000  00000000  00047540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b32d  00000000  00000000  00063a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fed3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  000fed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00103040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200005a0 	.word	0x200005a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b040 	.word	0x0800b040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200005a4 	.word	0x200005a4
 8000104:	0800b040 	.word	0x0800b040

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ProcessusKeys_Init>:

//Fonctions privees
void Process_KEYS(void);

void ProcessusKeys_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[PROCESSUS_KEYS_PHASE] = Process_KEYS;
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <ProcessusKeys_Init+0x10>)
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <ProcessusKeys_Init+0x14>)
 8000228:	609a      	str	r2, [r3, #8]
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000668 	.word	0x20000668
 8000234:	08000239 	.word	0x08000239

08000238 <Process_KEYS>:

void Process_KEYS(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	static uint8_t howManyKeysPressed = 0;
	static bool lastActionDone[64];

	Reset_HID_Report();
 800023e:	f000 fb5d 	bl	80008fc <Reset_HID_Report>

	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0b4      	b.n	80003b2 <Process_KEYS+0x17a>
	{
		if(key_map[key_index]->state == PRESSED)
 8000248:	4b75      	ldr	r3, [pc, #468]	@ (8000420 <Process_KEYS+0x1e8>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0092      	lsls	r2, r2, #2
 800024e:	58d3      	ldr	r3, [r2, r3]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d000      	beq.n	8000258 <Process_KEYS+0x20>
 8000256:	e097      	b.n	8000388 <Process_KEYS+0x150>
		{
			howManyKeysPressed++;
 8000258:	4b72      	ldr	r3, [pc, #456]	@ (8000424 <Process_KEYS+0x1ec>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b70      	ldr	r3, [pc, #448]	@ (8000424 <Process_KEYS+0x1ec>)
 8000262:	701a      	strb	r2, [r3, #0]
			if(howManyKeysPressed > 6)
 8000264:	4b6f      	ldr	r3, [pc, #444]	@ (8000424 <Process_KEYS+0x1ec>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b06      	cmp	r3, #6
 800026a:	d900      	bls.n	800026e <Process_KEYS+0x36>
 800026c:	e081      	b.n	8000372 <Process_KEYS+0x13a>
			{
				//DO NOTHING
			}
			else
			{
				switch(key_map[FN_KEY]->state)
 800026e:	4b6c      	ldr	r3, [pc, #432]	@ (8000420 <Process_KEYS+0x1e8>)
 8000270:	22f0      	movs	r2, #240	@ 0xf0
 8000272:	589b      	ldr	r3, [r3, r2]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d000      	beq.n	800027c <Process_KEYS+0x44>
 800027a:	e06b      	b.n	8000354 <Process_KEYS+0x11c>
				{
				case PRESSED:
					switch(key_index)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000280:	d030      	beq.n	80002e4 <Process_KEYS+0xac>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b3f      	cmp	r3, #63	@ 0x3f
 8000286:	dc38      	bgt.n	80002fa <Process_KEYS+0xc2>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b3e      	cmp	r3, #62	@ 0x3e
 800028c:	d014      	beq.n	80002b8 <Process_KEYS+0x80>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b3e      	cmp	r3, #62	@ 0x3e
 8000292:	dc32      	bgt.n	80002fa <Process_KEYS+0xc2>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b35      	cmp	r3, #53	@ 0x35
 8000298:	d003      	beq.n	80002a2 <Process_KEYS+0x6a>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b3d      	cmp	r3, #61	@ 0x3d
 800029e:	d016      	beq.n	80002ce <Process_KEYS+0x96>
 80002a0:	e02b      	b.n	80002fa <Process_KEYS+0xc2>
					{
					case UP_KEY:
						if(lastActionDone[UP_KEY] == false)
 80002a2:	4b61      	ldr	r3, [pc, #388]	@ (8000428 <Process_KEYS+0x1f0>)
 80002a4:	2235      	movs	r2, #53	@ 0x35
 80002a6:	5c9b      	ldrb	r3, [r3, r2]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4053      	eors	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d048      	beq.n	8000344 <Process_KEYS+0x10c>
						{ LEDS_Increase_Brightness(); }
 80002b2:	f000 f8f3 	bl	800049c <LEDS_Increase_Brightness>
						break;
 80002b6:	e045      	b.n	8000344 <Process_KEYS+0x10c>
					case DOWN_KEY:
						if(lastActionDone[DOWN_KEY] == false)
 80002b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000428 <Process_KEYS+0x1f0>)
 80002ba:	223e      	movs	r2, #62	@ 0x3e
 80002bc:	5c9b      	ldrb	r3, [r3, r2]
 80002be:	2201      	movs	r2, #1
 80002c0:	4053      	eors	r3, r2
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d03f      	beq.n	8000348 <Process_KEYS+0x110>
						{ LEDS_Decrease_Brightness(); }
 80002c8:	f000 f904 	bl	80004d4 <LEDS_Decrease_Brightness>
						break;
 80002cc:	e03c      	b.n	8000348 <Process_KEYS+0x110>
					case LEFT_KEY:
						if(lastActionDone[LEFT_KEY] == false)
 80002ce:	4b56      	ldr	r3, [pc, #344]	@ (8000428 <Process_KEYS+0x1f0>)
 80002d0:	223d      	movs	r2, #61	@ 0x3d
 80002d2:	5c9b      	ldrb	r3, [r3, r2]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4053      	eors	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d036      	beq.n	800034c <Process_KEYS+0x114>
						{ LEDS_Cycle_Hue(); }
 80002de:	f000 f915 	bl	800050c <LEDS_Cycle_Hue>
						break;
 80002e2:	e033      	b.n	800034c <Process_KEYS+0x114>
					case RIGHT_KEY:
						if(lastActionDone[RIGHT_KEY] == false)
 80002e4:	4b50      	ldr	r3, [pc, #320]	@ (8000428 <Process_KEYS+0x1f0>)
 80002e6:	223f      	movs	r2, #63	@ 0x3f
 80002e8:	5c9b      	ldrb	r3, [r3, r2]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4053      	eors	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d02d      	beq.n	8000350 <Process_KEYS+0x118>
						{ LEDS_Cycle_Effect(); }
 80002f4:	f000 f92a 	bl	800054c <LEDS_Cycle_Effect>
						break;
 80002f8:	e02a      	b.n	8000350 <Process_KEYS+0x118>
					default:
						switch(key_map[R_ALT_KEY]->state)
 80002fa:	4b49      	ldr	r3, [pc, #292]	@ (8000420 <Process_KEYS+0x1e8>)
 80002fc:	22ec      	movs	r2, #236	@ 0xec
 80002fe:	589b      	ldr	r3, [r3, r2]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d10e      	bne.n	8000324 <Process_KEYS+0xec>
						{
						case PRESSED:
							Make_HID_Report(Get_Active_Keycode(FN_RALT_LAYER, key_index), howManyKeysPressed);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	0019      	movs	r1, r3
 800030c:	2002      	movs	r0, #2
 800030e:	f000 fcd7 	bl	8000cc0 <Get_Active_Keycode>
 8000312:	0003      	movs	r3, r0
 8000314:	001a      	movs	r2, r3
 8000316:	4b43      	ldr	r3, [pc, #268]	@ (8000424 <Process_KEYS+0x1ec>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	0019      	movs	r1, r3
 800031c:	0010      	movs	r0, r2
 800031e:	f000 fb5d 	bl	80009dc <Make_HID_Report>
							break;
 8000322:	e00e      	b.n	8000342 <Process_KEYS+0x10a>
						default:
							Make_HID_Report(Get_Active_Keycode(FN_LAYER, key_index), howManyKeysPressed);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	0019      	movs	r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fcc8 	bl	8000cc0 <Get_Active_Keycode>
 8000330:	0003      	movs	r3, r0
 8000332:	001a      	movs	r2, r3
 8000334:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <Process_KEYS+0x1ec>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	0019      	movs	r1, r3
 800033a:	0010      	movs	r0, r2
 800033c:	f000 fb4e 	bl	80009dc <Make_HID_Report>
							break;
 8000340:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8000342:	e006      	b.n	8000352 <Process_KEYS+0x11a>
						break;
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	e014      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e012      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	e010      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 8000350:	46c0      	nop			@ (mov r8, r8)
					}
					break;
 8000352:	e00e      	b.n	8000372 <Process_KEYS+0x13a>
				default:
					Make_HID_Report(Get_Active_Keycode(BASE_LAYER, key_index), howManyKeysPressed);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	0019      	movs	r1, r3
 800035a:	2000      	movs	r0, #0
 800035c:	f000 fcb0 	bl	8000cc0 <Get_Active_Keycode>
 8000360:	0003      	movs	r3, r0
 8000362:	001a      	movs	r2, r3
 8000364:	4b2f      	ldr	r3, [pc, #188]	@ (8000424 <Process_KEYS+0x1ec>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0019      	movs	r1, r3
 800036a:	0010      	movs	r0, r2
 800036c:	f000 fb36 	bl	80009dc <Make_HID_Report>
					break;
 8000370:	46c0      	nop			@ (mov r8, r8)
				}
			}
			lastActionDone[key_index] = true;
 8000372:	4a2d      	ldr	r2, [pc, #180]	@ (8000428 <Process_KEYS+0x1f0>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = true;
 800037c:	4a2b      	ldr	r2, [pc, #172]	@ (800042c <Process_KEYS+0x1f4>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	18d3      	adds	r3, r2, r3
 8000382:	3303      	adds	r3, #3
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
		}
		if(key_map[key_index]->state == IDLE)
 8000388:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <Process_KEYS+0x1e8>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	0092      	lsls	r2, r2, #2
 800038e:	58d3      	ldr	r3, [r2, r3]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <Process_KEYS+0x174>
		{
			lastActionDone[key_index] = false;
 8000396:	4a24      	ldr	r2, [pc, #144]	@ (8000428 <Process_KEYS+0x1f0>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	18d3      	adds	r3, r2, r3
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = false;
 80003a0:	4a22      	ldr	r2, [pc, #136]	@ (800042c <Process_KEYS+0x1f4>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	18d3      	adds	r3, r2, r3
 80003a6:	3303      	adds	r3, #3
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80003b6:	dc00      	bgt.n	80003ba <Process_KEYS+0x182>
 80003b8:	e746      	b.n	8000248 <Process_KEYS+0x10>
		}
	}

	if(!Check_HID_KeyboardReport(lastHIDkeyboard))
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <Process_KEYS+0x1f8>)
 80003bc:	6818      	ldr	r0, [r3, #0]
 80003be:	6859      	ldr	r1, [r3, #4]
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	f000 fabd 	bl	8000940 <Check_HID_KeyboardReport>
 80003c6:	0003      	movs	r3, r0
 80003c8:	001a      	movs	r2, r3
 80003ca:	2301      	movs	r3, #1
 80003cc:	4053      	eors	r3, r2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <Process_KEYS+0x1a0>
	{
		Send_HID_KeyboardReport();
 80003d4:	f000 fb9e 	bl	8000b14 <Send_HID_KeyboardReport>
	}

	if(!Check_HID_MediaReport(lastHIDmedia))
 80003d8:	4b16      	ldr	r3, [pc, #88]	@ (8000434 <Process_KEYS+0x1fc>)
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	f000 faea 	bl	80009b4 <Check_HID_MediaReport>
 80003e0:	0003      	movs	r3, r0
 80003e2:	001a      	movs	r2, r3
 80003e4:	2301      	movs	r3, #1
 80003e6:	4053      	eors	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <Process_KEYS+0x1ba>
	{
		Send_HID_MediaReport();
 80003ee:	f000 fba1 	bl	8000b34 <Send_HID_MediaReport>
	}

	lastHIDmedia = HIDmedia;
 80003f2:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <Process_KEYS+0x1fc>)
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <Process_KEYS+0x200>)
 80003f6:	0010      	movs	r0, r2
 80003f8:	0019      	movs	r1, r3
 80003fa:	2302      	movs	r3, #2
 80003fc:	001a      	movs	r2, r3
 80003fe:	f00a fe15 	bl	800b02c <memcpy>
	lastHIDkeyboard = HIDkeyboard;
 8000402:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <Process_KEYS+0x1f8>)
 8000404:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <Process_KEYS+0x204>)
 8000406:	0010      	movs	r0, r2
 8000408:	0019      	movs	r1, r3
 800040a:	2309      	movs	r3, #9
 800040c:	001a      	movs	r2, r3
 800040e:	f00a fe0d 	bl	800b02c <memcpy>
	howManyKeysPressed = 0;
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <Process_KEYS+0x1ec>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	200005ca 	.word	0x200005ca
 8000428:	200005cc 	.word	0x200005cc
 800042c:	20000624 	.word	0x20000624
 8000430:	200005bc 	.word	0x200005bc
 8000434:	200005c8 	.word	0x200005c8
 8000438:	2000012c 	.word	0x2000012c
 800043c:	20000120 	.word	0x20000120

08000440 <Process_LEDS>:

//Fonctions privees
void Process_LEDS(void);

void Process_LEDS(void)
{
 8000440:	b5b0      	push	{r4, r5, r7, lr}
 8000442:	b08e      	sub	sp, #56	@ 0x38
 8000444:	af0e      	add	r7, sp, #56	@ 0x38
	static uint8_t compteur_LEDS;

	compteur_LEDS++;
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <Process_LEDS+0x50>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <Process_LEDS+0x50>)
 8000450:	701a      	strb	r2, [r3, #0]

	if(compteur_LEDS > 30)//update 30ms = ~30fps
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <Process_LEDS+0x50>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b1e      	cmp	r3, #30
 8000458:	d916      	bls.n	8000488 <Process_LEDS+0x48>
	{
		Processus_LEDS_execute[leds.phase](leds);
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <Process_LEDS+0x54>)
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	001a      	movs	r2, r3
 8000460:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <Process_LEDS+0x58>)
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	58d5      	ldr	r5, [r2, r3]
 8000466:	4c0b      	ldr	r4, [pc, #44]	@ (8000494 <Process_LEDS+0x54>)
 8000468:	466b      	mov	r3, sp
 800046a:	0018      	movs	r0, r3
 800046c:	0023      	movs	r3, r4
 800046e:	3310      	adds	r3, #16
 8000470:	2233      	movs	r2, #51	@ 0x33
 8000472:	0019      	movs	r1, r3
 8000474:	f00a fdda 	bl	800b02c <memcpy>
 8000478:	6820      	ldr	r0, [r4, #0]
 800047a:	6861      	ldr	r1, [r4, #4]
 800047c:	68a2      	ldr	r2, [r4, #8]
 800047e:	68e3      	ldr	r3, [r4, #12]
 8000480:	47a8      	blx	r5
		compteur_LEDS = 0;
 8000482:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <Process_LEDS+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
	}

}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bdb0      	pop	{r4, r5, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	20000667 	.word	0x20000667
 8000494:	20000624 	.word	0x20000624
 8000498:	20000610 	.word	0x20000610

0800049c <LEDS_Increase_Brightness>:

LEDS leds;

//Fonctions publiques
void LEDS_Increase_Brightness(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	if(brightness_index < 11)
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b0a      	cmp	r3, #10
 80004a6:	d805      	bhi.n	80004b4 <LEDS_Increase_Brightness+0x18>
	{ brightness_index++; }
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004b2:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <LEDS_Increase_Brightness+0x30>)
 80004bc:	5c9a      	ldrb	r2, [r3, r2]
 80004be:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <LEDS_Increase_Brightness+0x34>)
 80004c0:	705a      	strb	r2, [r3, #1]
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000011d 	.word	0x2000011d
 80004cc:	2000010c 	.word	0x2000010c
 80004d0:	20000624 	.word	0x20000624

080004d4 <LEDS_Decrease_Brightness>:

void LEDS_Decrease_Brightness(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	if(brightness_index > 0)
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d005      	beq.n	80004ec <LEDS_Decrease_Brightness+0x18>
	{ brightness_index--; }
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004ea:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	001a      	movs	r2, r3
 80004f2:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <LEDS_Decrease_Brightness+0x30>)
 80004f4:	5c9a      	ldrb	r2, [r3, r2]
 80004f6:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <LEDS_Decrease_Brightness+0x34>)
 80004f8:	705a      	strb	r2, [r3, #1]
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000011d 	.word	0x2000011d
 8000504:	2000010c 	.word	0x2000010c
 8000508:	20000624 	.word	0x20000624

0800050c <LEDS_Cycle_Hue>:

void LEDS_Cycle_Hue(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	hue_index++;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800051a:	701a      	strb	r2, [r3, #0]
	if(hue_index > 11)
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b0b      	cmp	r3, #11
 8000522:	d902      	bls.n	800052a <LEDS_Cycle_Hue+0x1e>
	{ hue_index = 0; }
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	leds.hue = hue_table[hue_index];
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	001a      	movs	r2, r3
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <LEDS_Cycle_Hue+0x38>)
 8000532:	5c9a      	ldrb	r2, [r3, r2]
 8000534:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <LEDS_Cycle_Hue+0x3c>)
 8000536:	701a      	strb	r2, [r3, #0]
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000060c 	.word	0x2000060c
 8000544:	20000100 	.word	0x20000100
 8000548:	20000624 	.word	0x20000624

0800054c <LEDS_Cycle_Effect>:

void LEDS_Cycle_Effect(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	phase_index++;
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800055a:	701a      	strb	r2, [r3, #0]
	if(phase_index > 4)
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	d902      	bls.n	800056a <LEDS_Cycle_Effect+0x1e>
	{ phase_index = 0; }
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	leds.phase = phase_table[phase_index];
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LEDS_Cycle_Effect+0x38>)
 8000572:	5c9a      	ldrb	r2, [r3, r2]
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LEDS_Cycle_Effect+0x3c>)
 8000576:	709a      	strb	r2, [r3, #2]
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	2000060d 	.word	0x2000060d
 8000584:	20000118 	.word	0x20000118
 8000588:	20000624 	.word	0x20000624

0800058c <ProcessusLEDS_init>:


void ProcessusLEDS_init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  serviceBaseDeTemps_execute[PROCESSUS_LEDS_PHASE] = Process_LEDS;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <ProcessusLEDS_init+0x7c>)
 8000594:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <ProcessusLEDS_init+0x80>)
 8000596:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_RAINBOW_PHASE] = effet_Rainbow;
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <ProcessusLEDS_init+0x84>)
 800059a:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <ProcessusLEDS_init+0x88>)
 800059c:	601a      	str	r2, [r3, #0]
  Processus_LEDS_execute[LEDS_BREATHING_PHASE] = effet_Breathing;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <ProcessusLEDS_init+0x8c>)
 80005a2:	605a      	str	r2, [r3, #4]
  Processus_LEDS_execute[LEDS_STATIC_PHASE] = effet_StaticColor;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005a6:	4a1d      	ldr	r2, [pc, #116]	@ (800061c <ProcessusLEDS_init+0x90>)
 80005a8:	609a      	str	r2, [r3, #8]
  Processus_LEDS_execute[LEDS_RAINBOW_BREATHING_PHASE] = effet_Rainbow_Breathing;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000620 <ProcessusLEDS_init+0x94>)
 80005ae:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_KEY_RESPONSE_PHASE] = effet_Key_Responsive;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000624 <ProcessusLEDS_init+0x98>)
 80005b4:	611a      	str	r2, [r3, #16]

  leds.hue = hue_table[hue_index];
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <ProcessusLEDS_init+0x9c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <ProcessusLEDS_init+0xa0>)
 80005be:	5c9a      	ldrb	r2, [r3, r2]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005c2:	701a      	strb	r2, [r3, #0]
  leds.phase = phase_table[phase_index];
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <ProcessusLEDS_init+0xa8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <ProcessusLEDS_init+0xac>)
 80005cc:	5c9a      	ldrb	r2, [r3, r2]
 80005ce:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005d0:	709a      	strb	r2, [r3, #2]
  leds.brightness = brightness_table[brightness_index];
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <ProcessusLEDS_init+0xb0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	001a      	movs	r2, r3
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <ProcessusLEDS_init+0xb4>)
 80005da:	5c9a      	ldrb	r2, [r3, r2]
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005de:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < 64; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e008      	b.n	80005f8 <ProcessusLEDS_init+0x6c>
  { leds.position[i] = false; }
 80005e6:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	18d3      	adds	r3, r2, r3
 80005ec:	3303      	adds	r3, #3
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 64; i++)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80005fc:	ddf3      	ble.n	80005e6 <ProcessusLEDS_init+0x5a>
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000668 	.word	0x20000668
 800060c:	08000441 	.word	0x08000441
 8000610:	20000610 	.word	0x20000610
 8000614:	080010b1 	.word	0x080010b1
 8000618:	08001169 	.word	0x08001169
 800061c:	08001409 	.word	0x08001409
 8000620:	08001211 	.word	0x08001211
 8000624:	08001309 	.word	0x08001309
 8000628:	2000060c 	.word	0x2000060c
 800062c:	20000100 	.word	0x20000100
 8000630:	20000624 	.word	0x20000624
 8000634:	2000060d 	.word	0x2000060d
 8000638:	20000118 	.word	0x20000118
 800063c:	2000011d 	.word	0x2000011d
 8000640:	2000010c 	.word	0x2000010c

08000644 <serviceBaseDeTemps_gere>:
//Definitions de variables privees:
//pas de variables privees

//Definitions de fonctions privees:
void serviceBaseDeTemps_gere(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e00a      	b.n	8000668 <serviceBaseDeTemps_gere+0x24>
  {
    serviceBaseDeTemps_execute[i]();
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <serviceBaseDeTemps_gere+0x38>)
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	58d3      	ldr	r3, [r2, r3]
 800065c:	4798      	blx	r3
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	3201      	adds	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d9f0      	bls.n	8000652 <serviceBaseDeTemps_gere+0xe>
  }
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	20000668 	.word	0x20000668

08000680 <serviceBaseDeTemps_initialise>:
//Definitions de variables publiques:
void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);

//Definitions de fonctions publiques:
void serviceBaseDeTemps_initialise(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e00a      	b.n	80006a4 <serviceBaseDeTemps_initialise+0x24>
  {
    serviceBaseDeTemps_execute[i] = doNothing;
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <serviceBaseDeTemps_initialise+0x3c>)
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	490a      	ldr	r1, [pc, #40]	@ (80006c0 <serviceBaseDeTemps_initialise+0x40>)
 8000698:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	3201      	adds	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d9f0      	bls.n	800068e <serviceBaseDeTemps_initialise+0xe>
  }
  piloteTimer14_execute = serviceBaseDeTemps_gere;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <serviceBaseDeTemps_initialise+0x44>)
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <serviceBaseDeTemps_initialise+0x48>)
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000668 	.word	0x20000668
 80006c0:	0800147d 	.word	0x0800147d
 80006c4:	20000920 	.word	0x20000920
 80006c8:	08000645 	.word	0x08000645

080006cc <Debounce_Switch_Matrix>:


KeyState matriceDebouncing[NUM_ROWS][NUM_COLS];

//Definitions fonctions publiques
void Debounce_Switch_Matrix(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e07e      	b.n	80007d6 <Debounce_Switch_Matrix+0x10a>
        for (int col = 0; col < NUM_COLS; col++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	e075      	b.n	80007ca <Debounce_Switch_Matrix+0xfe>
            bool physicalState = matrice[row][col];
 80006de:	1df9      	adds	r1, r7, #7
 80006e0:	4841      	ldr	r0, [pc, #260]	@ (80007e8 <Debounce_Switch_Matrix+0x11c>)
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	0013      	movs	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	18c2      	adds	r2, r0, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	700b      	strb	r3, [r1, #0]
            KeyState *key = &matriceDebouncing[row][col];
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	0013      	movs	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	1a9b      	subs	r3, r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	189b      	adds	r3, r3, r2
 8000704:	005a      	lsls	r2, r3, #1
 8000706:	4b39      	ldr	r3, [pc, #228]	@ (80007ec <Debounce_Switch_Matrix+0x120>)
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	603b      	str	r3, [r7, #0]

            switch (key->state) {
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d037      	beq.n	8000784 <Debounce_Switch_Matrix+0xb8>
 8000714:	dc56      	bgt.n	80007c4 <Debounce_Switch_Matrix+0xf8>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d026      	beq.n	8000768 <Debounce_Switch_Matrix+0x9c>
 800071a:	dc53      	bgt.n	80007c4 <Debounce_Switch_Matrix+0xf8>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <Debounce_Switch_Matrix+0x5a>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d00b      	beq.n	800073c <Debounce_Switch_Matrix+0x70>
 8000724:	e04e      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                case IDLE:
                    if (physicalState) {
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d043      	beq.n	80007b6 <Debounce_Switch_Matrix+0xea>
                        key->state = BOUNCE_PRESS;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 800073a:	e03c      	b.n	80007b6 <Debounce_Switch_Matrix+0xea>
                case BOUNCE_PRESS:
                    if (physicalState) {
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00d      	beq.n	8000760 <Debounce_Switch_Matrix+0x94>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	3301      	adds	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	705a      	strb	r2, [r3, #1]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b04      	cmp	r3, #4
 8000756:	d930      	bls.n	80007ba <Debounce_Switch_Matrix+0xee>
                            key->state = PRESSED;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = IDLE;
                    }
                    break;
 800075e:	e02c      	b.n	80007ba <Debounce_Switch_Matrix+0xee>
                        key->state = IDLE;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
                    break;
 8000766:	e028      	b.n	80007ba <Debounce_Switch_Matrix+0xee>
                case PRESSED:
                    if (!physicalState) {
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2201      	movs	r2, #1
 800076e:	4053      	eors	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d023      	beq.n	80007be <Debounce_Switch_Matrix+0xf2>
                        key->state = BOUNCE_RELEASE;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2203      	movs	r2, #3
 800077a:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 8000782:	e01c      	b.n	80007be <Debounce_Switch_Matrix+0xf2>
                case BOUNCE_RELEASE:
                    if (!physicalState) {
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2201      	movs	r2, #1
 800078a:	4053      	eors	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00d      	beq.n	80007ae <Debounce_Switch_Matrix+0xe2>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	705a      	strb	r2, [r3, #1]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d90d      	bls.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                            key->state = IDLE;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = PRESSED;
                    }
                    break;
 80007ac:	e009      	b.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                        key->state = PRESSED;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
                    break;
 80007b4:	e005      	b.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                    break;
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	e004      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e002      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	e000      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007c2:	46c0      	nop			@ (mov r8, r8)
        for (int col = 0; col < NUM_COLS; col++) {
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b0d      	cmp	r3, #13
 80007ce:	dd86      	ble.n	80006de <Debounce_Switch_Matrix+0x12>
    for (int row = 0; row < NUM_ROWS; row++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	dc00      	bgt.n	80007de <Debounce_Switch_Matrix+0x112>
 80007dc:	e77c      	b.n	80006d8 <Debounce_Switch_Matrix+0xc>
            }
        }
    }
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000704 	.word	0x20000704
 80007ec:	20000678 	.word	0x20000678

080007f0 <InterfaceDebouncing_Init>:

void InterfaceDebouncing_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[DEBOUNCE_MATRICE_PHASE] = Debounce_Switch_Matrix;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <InterfaceDebouncing_Init+0x10>)
 80007f6:	4a03      	ldr	r2, [pc, #12]	@ (8000804 <InterfaceDebouncing_Init+0x14>)
 80007f8:	605a      	str	r2, [r3, #4]
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000668 	.word	0x20000668
 8000804:	080006cd 	.word	0x080006cd

08000808 <ScanMatrice>:
#include "ServiceBaseTemps_1ms.h"

bool matrice[NUM_ROWS][NUM_COLS];

void ScanMatrice(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	Set_All_Rows();
 800080e:	f001 f845 	bl	800189c <Set_All_Rows>

	for (int row = 0; row < NUM_ROWS; row++)
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e030      	b.n	800087a <ScanMatrice+0x72>
	{
		Reset_Row(row);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b29b      	uxth	r3, r3
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f825 	bl	800186c <Reset_Row>

		for(int col = 0; col < NUM_COLS; col++)
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	e01d      	b.n	8000864 <ScanMatrice+0x5c>
		{
			matrice[row][col] = (Read_Col(col) == 0) ? 1 : 0;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	0018      	movs	r0, r3
 800082e:	f000 ffe9 	bl	8001804 <Read_Col>
 8000832:	0003      	movs	r3, r0
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2201      	movs	r2, #1
 800083c:	4053      	eors	r3, r2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	1c1a      	adds	r2, r3, #0
 8000842:	2301      	movs	r3, #1
 8000844:	4013      	ands	r3, r2
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	4910      	ldr	r1, [pc, #64]	@ (800088c <ScanMatrice+0x84>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	0013      	movs	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	18ca      	adds	r2, r1, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	1c02      	adds	r2, r0, #0
 800085c:	701a      	strb	r2, [r3, #0]
		for(int col = 0; col < NUM_COLS; col++)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b0d      	cmp	r3, #13
 8000868:	ddde      	ble.n	8000828 <ScanMatrice+0x20>
		}

		Set_Row(row);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	b29b      	uxth	r3, r3
 800086e:	0018      	movs	r0, r3
 8000870:	f000 ffe4 	bl	800183c <Set_Row>
	for (int row = 0; row < NUM_ROWS; row++)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b04      	cmp	r3, #4
 800087e:	ddcb      	ble.n	8000818 <ScanMatrice+0x10>
	}
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000704 	.word	0x20000704

08000890 <InterfaceMatrice_Init>:

void InterfaceMatrice_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[SCAN_MATRICE_PHASE] = ScanMatrice;
 8000894:	4b02      	ldr	r3, [pc, #8]	@ (80008a0 <InterfaceMatrice_Init+0x10>)
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <InterfaceMatrice_Init+0x14>)
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000668 	.word	0x20000668
 80008a4:	08000809 	.word	0x08000809

080008a8 <isMediaKey>:

keyboardReport HIDkeyboard = {0x01, 0, 0, 0, 0, 0, 0, 0, 0};
mediaReport HIDmedia = {0x02, 0};

bool isMediaKey(uint8_t keycode)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
    switch (keycode)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2bea      	cmp	r3, #234	@ 0xea
 80008ba:	dc17      	bgt.n	80008ec <isMediaKey+0x44>
 80008bc:	2bcd      	cmp	r3, #205	@ 0xcd
 80008be:	da04      	bge.n	80008ca <isMediaKey+0x22>
 80008c0:	2b70      	cmp	r3, #112	@ 0x70
 80008c2:	dc0e      	bgt.n	80008e2 <isMediaKey+0x3a>
 80008c4:	2b6f      	cmp	r3, #111	@ 0x6f
 80008c6:	da0f      	bge.n	80008e8 <isMediaKey+0x40>
 80008c8:	e010      	b.n	80008ec <isMediaKey+0x44>
 80008ca:	3bcd      	subs	r3, #205	@ 0xcd
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <isMediaKey+0x50>)
 80008ce:	40da      	lsrs	r2, r3
 80008d0:	0013      	movs	r3, r2
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	4193      	sbcs	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <isMediaKey+0x40>
 80008e0:	e004      	b.n	80008ec <isMediaKey+0x44>
 80008e2:	3bb5      	subs	r3, #181	@ 0xb5
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d801      	bhi.n	80008ec <isMediaKey+0x44>
        case KC_MUTE:
        case KC_NEXT:
        case KC_PREVIOUS:
        case KC_BRIGHT_UP:
        case KC_BRIGHT_DOWN:
            return true;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <isMediaKey+0x46>
        default:
            return false;
 80008ec:	2300      	movs	r3, #0
    }
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	30200001 	.word	0x30200001

080008fc <Reset_HID_Report>:

void Reset_HID_Report(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	HIDmedia.MEDIA_KEY = 0;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <Reset_HID_Report+0x3c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.MODIFIER = 0;
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <Reset_HID_Report+0x40>)
 8000908:	2200      	movs	r2, #0
 800090a:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.KEYCODE1 = 0;
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <Reset_HID_Report+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	70da      	strb	r2, [r3, #3]
	HIDkeyboard.KEYCODE2 = 0;
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <Reset_HID_Report+0x40>)
 8000914:	2200      	movs	r2, #0
 8000916:	711a      	strb	r2, [r3, #4]
	HIDkeyboard.KEYCODE3 = 0;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Reset_HID_Report+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]
	HIDkeyboard.KEYCODE4 = 0;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <Reset_HID_Report+0x40>)
 8000920:	2200      	movs	r2, #0
 8000922:	719a      	strb	r2, [r3, #6]
	HIDkeyboard.KEYCODE5 = 0;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <Reset_HID_Report+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	71da      	strb	r2, [r3, #7]
	HIDkeyboard.KEYCODE6 = 0;
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <Reset_HID_Report+0x40>)
 800092c:	2200      	movs	r2, #0
 800092e:	721a      	strb	r2, [r3, #8]
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	2000012c 	.word	0x2000012c
 800093c:	20000120 	.word	0x20000120

08000940 <Check_HID_KeyboardReport>:

bool Check_HID_KeyboardReport(keyboardReport lastReport)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	6018      	str	r0, [r3, #0]
 800094a:	6059      	str	r1, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
	if(lastReport.MODIFIER == HIDkeyboard.MODIFIER && lastReport.KEYCODE1 == HIDkeyboard.KEYCODE1 && lastReport.KEYCODE2 == HIDkeyboard.KEYCODE2
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	429a      	cmp	r2, r3
 8000958:	d125      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	78da      	ldrb	r2, [r3, #3]
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	429a      	cmp	r2, r3
 8000964:	d11f      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	791a      	ldrb	r2, [r3, #4]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d119      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE3 == HIDkeyboard.KEYCODE3 && lastReport.KEYCODE4 == HIDkeyboard.KEYCODE4 && lastReport.KEYCODE5 == HIDkeyboard.KEYCODE5
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	795a      	ldrb	r2, [r3, #5]
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000978:	795b      	ldrb	r3, [r3, #5]
 800097a:	429a      	cmp	r2, r3
 800097c:	d113      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	799a      	ldrb	r2, [r3, #6]
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d10d      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	79da      	ldrb	r2, [r3, #7]
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000990:	79db      	ldrb	r3, [r3, #7]
 8000992:	429a      	cmp	r2, r3
 8000994:	d107      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE6 == HIDkeyboard.KEYCODE6)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	7a1a      	ldrb	r2, [r3, #8]
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 800099c:	7a1b      	ldrb	r3, [r3, #8]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
	{
		return true;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <Check_HID_KeyboardReport+0x68>
	}
	else
	{
		return false;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000120 	.word	0x20000120

080009b4 <Check_HID_MediaReport>:

bool Check_HID_MediaReport(mediaReport lastReport)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	8018      	strh	r0, [r3, #0]
	if(lastReport.MEDIA_KEY == HIDmedia.MEDIA_KEY)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	785a      	ldrb	r2, [r3, #1]
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <Check_HID_MediaReport+0x24>)
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d101      	bne.n	80009ce <Check_HID_MediaReport+0x1a>
	{
		return true;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <Check_HID_MediaReport+0x1c>
	}
	else
	{
		return false;
 80009ce:	2300      	movs	r3, #0
	}
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000012c 	.word	0x2000012c

080009dc <Make_HID_Report>:

void Make_HID_Report(uint8_t keycode, uint8_t position)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	1c0a      	adds	r2, r1, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	if(isMediaKey(keycode))
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ff58 	bl	80008a8 <isMediaKey>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d004      	beq.n	8000a06 <Make_HID_Report+0x2a>
	{
		HIDmedia.MEDIA_KEY = keycode;
 80009fc:	4b41      	ldr	r3, [pc, #260]	@ (8000b04 <Make_HID_Report+0x128>)
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	705a      	strb	r2, [r3, #1]
				break;

			}
		}
	}
}
 8000a04:	e07a      	b.n	8000afc <Make_HID_Report+0x120>
		if(keycode >= 0xE0 && keycode <= 0xE7)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2bdf      	cmp	r3, #223	@ 0xdf
 8000a0c:	d94f      	bls.n	8000aae <Make_HID_Report+0xd2>
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2be7      	cmp	r3, #231	@ 0xe7
 8000a14:	d84b      	bhi.n	8000aae <Make_HID_Report+0xd2>
			switch(keycode)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	3be0      	subs	r3, #224	@ 0xe0
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	d86d      	bhi.n	8000afc <Make_HID_Report+0x120>
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <Make_HID_Report+0x12c>)
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	469f      	mov	pc, r3
				HIDkeyboard.MODIFIER |= 0x01;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b35      	ldr	r3, [pc, #212]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a36:	705a      	strb	r2, [r3, #1]
				break;
 8000a38:	e038      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x02;
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a46:	705a      	strb	r2, [r3, #1]
				break;
 8000a48:	e030      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x04;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a56:	705a      	strb	r2, [r3, #1]
				break;
 8000a58:	e028      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x08;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a66:	705a      	strb	r2, [r3, #1]
				break;
 8000a68:	e020      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x10;
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	2210      	movs	r2, #16
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a76:	705a      	strb	r2, [r3, #1]
				break;
 8000a78:	e018      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x20;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a7c:	785b      	ldrb	r3, [r3, #1]
 8000a7e:	2220      	movs	r2, #32
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a86:	705a      	strb	r2, [r3, #1]
				break;
 8000a88:	e010      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x40;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2240      	movs	r2, #64	@ 0x40
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a96:	705a      	strb	r2, [r3, #1]
				break;
 8000a98:	e008      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x80;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	4252      	negs	r2, r2
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <Make_HID_Report+0x130>)
 8000aa8:	705a      	strb	r2, [r3, #1]
				break;
 8000aaa:	46c0      	nop			@ (mov r8, r8)
			switch(keycode)
 8000aac:	e026      	b.n	8000afc <Make_HID_Report+0x120>
			switch(position)
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d822      	bhi.n	8000afc <Make_HID_Report+0x120>
 8000ab6:	009a      	lsls	r2, r3, #2
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <Make_HID_Report+0x134>)
 8000aba:	18d3      	adds	r3, r2, r3
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	469f      	mov	pc, r3
				HIDkeyboard.KEYCODE1 = keycode;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	70da      	strb	r2, [r3, #3]
				break;
 8000ac8:	e018      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE2 = keycode;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <Make_HID_Report+0x130>)
 8000acc:	1dfa      	adds	r2, r7, #7
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	711a      	strb	r2, [r3, #4]
				break;
 8000ad2:	e013      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE3 = keycode;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	715a      	strb	r2, [r3, #5]
				break;
 8000adc:	e00e      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE4 = keycode;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ae0:	1dfa      	adds	r2, r7, #7
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	719a      	strb	r2, [r3, #6]
				break;
 8000ae6:	e009      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE5 = keycode;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <Make_HID_Report+0x130>)
 8000aea:	1dfa      	adds	r2, r7, #7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	71da      	strb	r2, [r3, #7]
				break;
 8000af0:	e004      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE6 = keycode;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <Make_HID_Report+0x130>)
 8000af4:	1dfa      	adds	r2, r7, #7
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	721a      	strb	r2, [r3, #8]
				break;
 8000afa:	46c0      	nop			@ (mov r8, r8)
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000012c 	.word	0x2000012c
 8000b08:	0800b0a0 	.word	0x0800b0a0
 8000b0c:	20000120 	.word	0x20000120
 8000b10:	0800b0c0 	.word	0x0800b0c0

08000b14 <Send_HID_KeyboardReport>:


void Send_HID_KeyboardReport(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &HIDkeyboard, sizeof(HIDkeyboard));
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <Send_HID_KeyboardReport+0x18>)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <Send_HID_KeyboardReport+0x1c>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f008 fa7a 	bl	8009018 <USBD_CUSTOM_HID_SendReport>
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	2000094c 	.word	0x2000094c

08000b34 <Send_HID_MediaReport>:

void Send_HID_MediaReport(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &HIDmedia, sizeof(HIDmedia));
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <Send_HID_MediaReport+0x18>)
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <Send_HID_MediaReport+0x1c>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f008 fa6a 	bl	8009018 <USBD_CUSTOM_HID_SendReport>
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	2000094c 	.word	0x2000094c

08000b54 <Write_KeyConfig_To_Flash>:

				}
};

void Write_KeyConfig_To_Flash(uint32_t flash_address, uint8_t *buffer)
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();

	status = HAL_FLASH_Unlock();
 8000b66:	231b      	movs	r3, #27
 8000b68:	18fe      	adds	r6, r7, r3
 8000b6a:	f001 fe15 	bl	8002798 <HAL_FLASH_Unlock>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7033      	strb	r3, [r6, #0]
	if (status != HAL_OK) {
 8000b72:	231b      	movs	r3, #27
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <Write_KeyConfig_To_Flash+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7c:	b662      	cpsie	i
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();
		return;
 8000b80:	e059      	b.n	8000c36 <Write_KeyConfig_To_Flash+0xe2>
	}

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000b82:	210c      	movs	r1, #12
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = flash_address;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = 1;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2201      	movs	r2, #1
 8000b94:	609a      	str	r2, [r3, #8]

	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000b96:	231b      	movs	r3, #27
 8000b98:	18fe      	adds	r6, r7, r3
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 feb8 	bl	8002918 <HAL_FLASHEx_Erase>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	7033      	strb	r3, [r6, #0]
	if (status != HAL_OK) {
 8000bac:	231b      	movs	r3, #27
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <Write_KeyConfig_To_Flash+0x6c>
		HAL_FLASH_Lock();
 8000bb6:	f001 fe15 	bl	80027e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bba:	b662      	cpsie	i
}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();
		return;
 8000bbe:	e03a      	b.n	8000c36 <Write_KeyConfig_To_Flash+0xe2>
	}

	for (uint32_t i = 1; i < 64; i += 2) {
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	e030      	b.n	8000c28 <Write_KeyConfig_To_Flash+0xd4>
		uint16_t halfWord = (uint16_t)(buffer[i] | (buffer[i+1] << 8));
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	18cb      	adds	r3, r1, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	2018      	movs	r0, #24
 8000be6:	183b      	adds	r3, r7, r0
 8000be8:	801a      	strh	r2, [r3, #0]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	18d1      	adds	r1, r2, r3
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	001c      	movs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	001d      	movs	r5, r3
 8000bfc:	231b      	movs	r3, #27
 8000bfe:	18fe      	adds	r6, r7, r3
 8000c00:	0022      	movs	r2, r4
 8000c02:	002b      	movs	r3, r5
 8000c04:	2001      	movs	r0, #1
 8000c06:	f001 fd31 	bl	800266c <HAL_FLASH_Program>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	7033      	strb	r3, [r6, #0]
								   flash_address + (i),
								  (uint64_t)halfWord);
		if (status != HAL_OK) {
 8000c0e:	231b      	movs	r3, #27
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d004      	beq.n	8000c22 <Write_KeyConfig_To_Flash+0xce>
			HAL_FLASH_Lock();
 8000c18:	f001 fde4 	bl	80027e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c1c:	b662      	cpsie	i
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			return;
 8000c20:	e009      	b.n	8000c36 <Write_KeyConfig_To_Flash+0xe2>
	for (uint32_t i = 1; i < 64; i += 2) {
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3302      	adds	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c2c:	d9cb      	bls.n	8000bc6 <Write_KeyConfig_To_Flash+0x72>
		}
	}


	HAL_FLASH_Lock();
 8000c2e:	f001 fdd9 	bl	80027e4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c32:	b662      	cpsie	i
}
 8000c34:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
}
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b009      	add	sp, #36	@ 0x24
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c3c <Read_KeyConfig_From_Flash>:


void Read_KeyConfig_From_Flash(uint32_t flash_address, uint8_t config_id)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	000a      	movs	r2, r1
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	701a      	strb	r2, [r3, #0]
	uint8_t (*out_buf)[NUM_KEYS] = NULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]

	switch(config_id)
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d011      	beq.n	8000c7a <Read_KeyConfig_From_Flash+0x3e>
 8000c56:	dc13      	bgt.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
 8000c58:	2b05      	cmp	r3, #5
 8000c5a:	d00b      	beq.n	8000c74 <Read_KeyConfig_From_Flash+0x38>
 8000c5c:	dc10      	bgt.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d002      	beq.n	8000c68 <Read_KeyConfig_From_Flash+0x2c>
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d003      	beq.n	8000c6e <Read_KeyConfig_From_Flash+0x32>
 8000c66:	e00b      	b.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
	{
	case ID_CONFIG_2_FN:
		out_buf = &config2_keycodes_map[FN_LAYER];
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <Read_KeyConfig_From_Flash+0x74>)
 8000c6a:	60fb      	str	r3, [r7, #12]
		break;
 8000c6c:	e008      	b.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_2_ALT:
		out_buf = &config2_keycodes_map[FN_RALT_LAYER];
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <Read_KeyConfig_From_Flash+0x78>)
 8000c70:	60fb      	str	r3, [r7, #12]
		break;
 8000c72:	e005      	b.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_3_FN:
		out_buf = &config3_keycodes_map[FN_LAYER];
 8000c74:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <Read_KeyConfig_From_Flash+0x7c>)
 8000c76:	60fb      	str	r3, [r7, #12]
		break;
 8000c78:	e002      	b.n	8000c80 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_3_ALT:
		out_buf = &config3_keycodes_map[FN_RALT_LAYER];
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <Read_KeyConfig_From_Flash+0x80>)
 8000c7c:	60fb      	str	r3, [r7, #12]
		break;
 8000c7e:	46c0      	nop			@ (mov r8, r8)
	}
    for (uint32_t i = 0; i < NUM_KEYS; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	e00c      	b.n	8000ca0 <Read_KeyConfig_From_Flash+0x64>
        (*out_buf)[i] = *(__IO uint8_t *)(flash_address + i);
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2d9      	uxtb	r1, r3
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	1c0a      	adds	r2, r1, #0
 8000c98:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_KEYS; i++) {
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ca4:	d9ef      	bls.n	8000c86 <Read_KeyConfig_From_Flash+0x4a>
    }
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b004      	add	sp, #16
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000230 	.word	0x20000230
 8000cb4:	20000270 	.word	0x20000270
 8000cb8:	200002f0 	.word	0x200002f0
 8000cbc:	20000330 	.word	0x20000330

08000cc0 <Get_Active_Keycode>:


uint8_t Get_Active_Keycode(uint8_t layer, uint8_t key_index)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	1c0a      	adds	r2, r1, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    if (current_keycodes_map == NULL)
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <Get_Active_Keycode+0x48>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d108      	bne.n	8000cec <Get_Active_Keycode+0x2c>
    {
        return default_keycodes_map[layer][key_index];
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	490a      	ldr	r1, [pc, #40]	@ (8000d0c <Get_Active_Keycode+0x4c>)
 8000ce4:	0192      	lsls	r2, r2, #6
 8000ce6:	188a      	adds	r2, r1, r2
 8000ce8:	5cd3      	ldrb	r3, [r2, r3]
 8000cea:	e008      	b.n	8000cfe <Get_Active_Keycode+0x3e>
    }
    return (*current_keycodes_map)[layer][key_index];
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Get_Active_Keycode+0x48>)
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0192      	lsls	r2, r2, #6
 8000cfa:	188a      	adds	r2, r1, r2
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	2000074c 	.word	0x2000074c
 8000d0c:	20000130 	.word	0x20000130

08000d10 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2280      	movs	r2, #128	@ 0x80
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d01c      	beq.n	8000d62 <HAL_GPIO_EXTI_Callback+0x52>
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	dc26      	bgt.n	8000d7e <HAL_GPIO_EXTI_Callback+0x6e>
 8000d30:	2b80      	cmp	r3, #128	@ 0x80
 8000d32:	d004      	beq.n	8000d3e <HAL_GPIO_EXTI_Callback+0x2e>
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	0052      	lsls	r2, r2, #1
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d004      	beq.n	8000d46 <HAL_GPIO_EXTI_Callback+0x36>
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
		current_keycodes_map = &config3_keycodes_map;
		break;
	}
}
 8000d3c:	e01f      	b.n	8000d7e <HAL_GPIO_EXTI_Callback+0x6e>
		current_keycodes_map = &default_keycodes_map;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d42:	601a      	str	r2, [r3, #0]
		break;
 8000d44:	e01b      	b.n	8000d7e <HAL_GPIO_EXTI_Callback+0x6e>
		Read_KeyConfig_From_Flash(CONFIG_2_FN_FLASH_ADDRESS, ID_CONFIG_2_FN);
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d48:	2103      	movs	r1, #3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff76 	bl	8000c3c <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_2_ALT_FLASH_ADDRESS, ID_CONFIG_2_ALT);
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d52:	2104      	movs	r1, #4
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff71 	bl	8000c3c <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config2_keycodes_map;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d5e:	601a      	str	r2, [r3, #0]
		break;
 8000d60:	e00d      	b.n	8000d7e <HAL_GPIO_EXTI_Callback+0x6e>
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d64:	2105      	movs	r1, #5
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff ff68 	bl	8000c3c <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d6e:	2106      	movs	r1, #6
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff63 	bl	8000c3c <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config3_keycodes_map;
 8000d76:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d7a:	601a      	str	r2, [r3, #0]
		break;
 8000d7c:	46c0      	nop			@ (mov r8, r8)
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	2000074c 	.word	0x2000074c
 8000d8c:	20000130 	.word	0x20000130
 8000d90:	0801e000 	.word	0x0801e000
 8000d94:	0801e800 	.word	0x0801e800
 8000d98:	200001f0 	.word	0x200001f0
 8000d9c:	0801f000 	.word	0x0801f000
 8000da0:	0801f800 	.word	0x0801f800
 8000da4:	200002b0 	.word	0x200002b0

08000da8 <Key_Config_Init>:


void Key_Config_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(OS_PORT, OS1) == GPIO_PIN_RESET)
 8000dac:	2390      	movs	r3, #144	@ 0x90
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 ffd4 	bl	8002d60 <HAL_GPIO_ReadPin>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d102      	bne.n	8000dc2 <Key_Config_Init+0x1a>
	{
		current_keycodes_map = &default_keycodes_map;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <Key_Config_Init+0x7c>)
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <Key_Config_Init+0x80>)
 8000dc0:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OS_PORT, OS2) == GPIO_PIN_RESET)
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	005a      	lsls	r2, r3, #1
 8000dc6:	2390      	movs	r3, #144	@ 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 ffc7 	bl	8002d60 <HAL_GPIO_ReadPin>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d10c      	bne.n	8000df0 <Key_Config_Init+0x48>
	{
		Read_KeyConfig_From_Flash(CONFIG_2_FN_FLASH_ADDRESS, ID_CONFIG_2_FN);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <Key_Config_Init+0x84>)
 8000dd8:	2103      	movs	r1, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff2e 	bl	8000c3c <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_2_ALT_FLASH_ADDRESS, ID_CONFIG_2_ALT);
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <Key_Config_Init+0x88>)
 8000de2:	2104      	movs	r1, #4
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff29 	bl	8000c3c <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config2_keycodes_map;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <Key_Config_Init+0x7c>)
 8000dec:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <Key_Config_Init+0x8c>)
 8000dee:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OS_PORT, OS3) == GPIO_PIN_RESET)
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	009a      	lsls	r2, r3, #2
 8000df4:	2390      	movs	r3, #144	@ 0x90
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 ffb0 	bl	8002d60 <HAL_GPIO_ReadPin>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d10c      	bne.n	8000e1e <Key_Config_Init+0x76>
	{
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <Key_Config_Init+0x90>)
 8000e06:	2105      	movs	r1, #5
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff17 	bl	8000c3c <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <Key_Config_Init+0x94>)
 8000e10:	2106      	movs	r1, #6
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff ff12 	bl	8000c3c <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config3_keycodes_map;
 8000e18:	4b02      	ldr	r3, [pc, #8]	@ (8000e24 <Key_Config_Init+0x7c>)
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <Key_Config_Init+0x98>)
 8000e1c:	601a      	str	r2, [r3, #0]
	}
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000074c 	.word	0x2000074c
 8000e28:	20000130 	.word	0x20000130
 8000e2c:	0801e000 	.word	0x0801e000
 8000e30:	0801e800 	.word	0x0801e800
 8000e34:	200001f0 	.word	0x200001f0
 8000e38:	0801f000 	.word	0x0801f000
 8000e3c:	0801f800 	.word	0x0801f800
 8000e40:	200002b0 	.word	0x200002b0

08000e44 <hsl_to_rgb>:
  55, 56, 57, 58, 59, 60, 61, 62, 63
};


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0004      	movs	r4, r0
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	0011      	movs	r1, r2
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	1c22      	adds	r2, r4, #0
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	1c02      	adds	r2, r0, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	1d7b      	adds	r3, r7, #5
 8000e5e:	1c0a      	adds	r2, r1, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	if(l == 0) return 0;
 8000e62:	1d7b      	adds	r3, r7, #5
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <hsl_to_rgb+0x2a>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e119      	b.n	80010a2 <hsl_to_rgb+0x25e>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000e6e:	1d7b      	adds	r3, r7, #5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	210c      	movs	r1, #12
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	801a      	strh	r2, [r3, #0]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000e7e:	1d7b      	adds	r3, r7, #5
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0c      	blt.n	8000ea2 <hsl_to_rgb+0x5e>
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1dba      	adds	r2, r7, #6
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	4353      	muls	r3, r2
 8000e96:	121b      	asrs	r3, r3, #8
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	2313      	movs	r3, #19
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e00f      	b.n	8000ec2 <hsl_to_rgb+0x7e>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	1dba      	adds	r2, r7, #6
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	4353      	muls	r3, r2
 8000eb8:	121b      	asrs	r3, r3, #8
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	2313      	movs	r3, #19
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	701a      	strb	r2, [r3, #0]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	1c1a      	adds	r2, r3, #0
 8000eca:	1c13      	adds	r3, r2, #0
 8000ecc:	18db      	adds	r3, r3, r3
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	18db      	adds	r3, r3, r3
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	210a      	movs	r1, #10
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	801a      	strh	r2, [r3, #0]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	2014      	movs	r0, #20
 8000ee4:	183b      	adds	r3, r7, r0
 8000ee6:	701a      	strb	r2, [r3, #0]
	h1 = lo + 1;
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	200e      	movs	r0, #14
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	801a      	strh	r2, [r3, #0]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	001a      	movs	r2, r3
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	d10e      	bne.n	8000f26 <hsl_to_rgb+0xe2>
 8000f08:	183b      	adds	r3, r7, r0
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2313      	movs	r3, #19
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4353      	muls	r3, r2
 8000f1a:	121b      	asrs	r3, r3, #8
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	2312      	movs	r3, #18
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e011      	b.n	8000f4a <hsl_to_rgb+0x106>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8000f26:	230e      	movs	r3, #14
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	2213      	movs	r2, #19
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	4353      	muls	r3, r2
 8000f40:	121b      	asrs	r3, r3, #8
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	2312      	movs	r3, #18
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	701a      	strb	r2, [r3, #0]

	m = l - (c >> 1);
 8000f4a:	2313      	movs	r3, #19
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	1d7a      	adds	r2, r7, #5
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	2311      	movs	r3, #17
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	701a      	strb	r2, [r3, #0]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000f64:	230a      	movs	r3, #10
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d863      	bhi.n	800103c <hsl_to_rgb+0x1f8>
 8000f74:	009a      	lsls	r2, r3, #2
 8000f76:	4b4d      	ldr	r3, [pc, #308]	@ (80010ac <hsl_to_rgb+0x268>)
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	469f      	mov	pc, r3
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8000f7e:	2313      	movs	r3, #19
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	2317      	movs	r3, #23
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	2316      	movs	r3, #22
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	2315      	movs	r3, #21
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e05e      	b.n	8001062 <hsl_to_rgb+0x21e>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	2317      	movs	r3, #23
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	2313      	movs	r3, #19
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	2316      	movs	r3, #22
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	2315      	movs	r3, #21
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e04b      	b.n	8001062 <hsl_to_rgb+0x21e>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8000fca:	2317      	movs	r3, #23
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	2313      	movs	r3, #19
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	2316      	movs	r3, #22
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	2315      	movs	r3, #21
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e038      	b.n	8001062 <hsl_to_rgb+0x21e>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8000ff0:	2317      	movs	r3, #23
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	2316      	movs	r3, #22
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	2313      	movs	r3, #19
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	2315      	movs	r3, #21
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e025      	b.n	8001062 <hsl_to_rgb+0x21e>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001016:	2312      	movs	r3, #18
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	2317      	movs	r3, #23
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	2316      	movs	r3, #22
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	2313      	movs	r3, #19
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	2315      	movs	r3, #21
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e012      	b.n	8001062 <hsl_to_rgb+0x21e>
	 default: r = c; g = 0; b = x; break; // M to R
 800103c:	2313      	movs	r3, #19
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	2317      	movs	r3, #23
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	2316      	movs	r3, #22
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	2312      	movs	r3, #18
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	2315      	movs	r3, #21
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	46c0      	nop			@ (mov r8, r8)
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001062:	2317      	movs	r3, #23
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	001a      	movs	r2, r3
 800106c:	2011      	movs	r0, #17
 800106e:	183b      	adds	r3, r7, r0
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	2316      	movs	r3, #22
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	0019      	movs	r1, r3
 8001082:	183b      	adds	r3, r7, r0
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	18cb      	adds	r3, r1, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	431a      	orrs	r2, r3
 800108e:	2315      	movs	r3, #21
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	0019      	movs	r1, r3
 8001098:	183b      	adds	r3, r7, r0
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	18cb      	adds	r3, r1, r3
 80010a0:	4313      	orrs	r3, r2
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b007      	add	sp, #28
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	0800b11c 	.word	0x0800b11c

080010b0 <effet_Rainbow>:


void effet_Rainbow(LEDS led_param)
{
 80010b0:	b084      	sub	sp, #16
 80010b2:	b590      	push	{r4, r7, lr}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	2418      	movs	r4, #24
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	6020      	str	r0, [r4, #0]
 80010be:	6061      	str	r1, [r4, #4]
 80010c0:	60a2      	str	r2, [r4, #8]
 80010c2:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	2212      	movs	r2, #18
 80010c8:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e02f      	b.n	8001132 <effet_Rainbow+0x82>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	1d7b      	adds	r3, r7, #5
 80010d8:	4921      	ldr	r1, [pc, #132]	@ (8001160 <effet_Rainbow+0xb0>)
 80010da:	5c8a      	ldrb	r2, [r1, r2]
 80010dc:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, led_param.brightness);
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	223f      	movs	r2, #63	@ 0x3f
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	1dba      	adds	r2, r7, #6
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	4353      	muls	r3, r2
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <effet_Rainbow+0xb4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	b2d8      	uxtb	r0, r3
 80010fc:	2318      	movs	r3, #24
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	001a      	movs	r2, r3
 8001104:	21ff      	movs	r1, #255	@ 0xff
 8001106:	f7ff fe9d 	bl	8000e44 <hsl_to_rgb>
 800110a:	0003      	movs	r3, r0
 800110c:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2dc      	uxtb	r4, r3
 800111e:	1d7b      	adds	r3, r7, #5
 8001120:	7818      	ldrb	r0, [r3, #0]
 8001122:	0023      	movs	r3, r4
 8001124:	f000 fbe4 	bl	80018f0 <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	3201      	adds	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b3f      	cmp	r3, #63	@ 0x3f
 8001138:	d9cb      	bls.n	80010d2 <effet_Rainbow+0x22>
	}

	// Write to LED
	++angle;
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <effet_Rainbow+0xb4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3301      	adds	r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25a      	sxtb	r2, r3
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <effet_Rainbow+0xb4>)
 800114a:	701a      	strb	r2, [r3, #0]
	led_render();
 800114c:	f000 fc3a 	bl	80019c4 <led_render>
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bc90      	pop	{r4, r7}
 8001158:	bc08      	pop	{r3}
 800115a:	b004      	add	sp, #16
 800115c:	4718      	bx	r3
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	0800b0dc 	.word	0x0800b0dc
 8001164:	20000750 	.word	0x20000750

08001168 <effet_Breathing>:


void effet_Breathing(LEDS led_param)
{
 8001168:	b084      	sub	sp, #16
 800116a:	b5b0      	push	{r4, r5, r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	2518      	movs	r5, #24
 8001172:	197c      	adds	r4, r7, r5
 8001174:	6020      	str	r0, [r4, #0]
 8001176:	6061      	str	r1, [r4, #4]
 8001178:	60a2      	str	r2, [r4, #8]
 800117a:	60e3      	str	r3, [r4, #12]
    static uint8_t current_brightness = 0;
    static int8_t direction = 1;

    // Adjust brightness
    current_brightness += direction;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <effet_Breathing+0xa0>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <effet_Breathing+0xa4>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <effet_Breathing+0xa0>)
 800118e:	701a      	strb	r2, [r3, #0]
    if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <effet_Breathing+0xa0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <effet_Breathing+0x3c>
 8001198:	197b      	adds	r3, r7, r5
 800119a:	785a      	ldrb	r2, [r3, #1]
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <effet_Breathing+0xa0>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d108      	bne.n	80011b6 <effet_Breathing+0x4e>
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <effet_Breathing+0xa4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	425b      	negs	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <effet_Breathing+0xa4>)
 80011b4:	701a      	strb	r2, [r3, #0]

    // Set all LEDs to the same color with fading
    uint32_t rgb = hsl_to_rgb(led_param.hue, 255, current_brightness); // Static hue
 80011b6:	2318      	movs	r3, #24
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	7818      	ldrb	r0, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <effet_Breathing+0xa0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	001a      	movs	r2, r3
 80011c2:	21ff      	movs	r1, #255	@ 0xff
 80011c4:	f7ff fe3e 	bl	8000e44 <hsl_to_rgb>
 80011c8:	0003      	movs	r3, r0
 80011ca:	607b      	str	r3, [r7, #4]
    uint8_t r = (rgb >> 16) & 0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0c1a      	lsrs	r2, r3, #16
 80011d0:	1cfb      	adds	r3, r7, #3
 80011d2:	701a      	strb	r2, [r3, #0]
    uint8_t g = (rgb >> 8) & 0xFF;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0a1a      	lsrs	r2, r3, #8
 80011d8:	1cbb      	adds	r3, r7, #2
 80011da:	701a      	strb	r2, [r3, #0]
    uint8_t b = rgb & 0xFF;
 80011dc:	1c7b      	adds	r3, r7, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	701a      	strb	r2, [r3, #0]

    led_set_all_RGB(r, g, b);
 80011e2:	1c7b      	adds	r3, r7, #1
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	7819      	ldrb	r1, [r3, #0]
 80011ea:	1cfb      	adds	r3, r7, #3
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 fbc0 	bl	8001974 <led_set_all_RGB>
    led_render();
 80011f4:	f000 fbe6 	bl	80019c4 <led_render>
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bcb0      	pop	{r4, r5, r7}
 8001200:	bc08      	pop	{r3}
 8001202:	b004      	add	sp, #16
 8001204:	4718      	bx	r3
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	20000751 	.word	0x20000751
 800120c:	20000370 	.word	0x20000370

08001210 <effet_Rainbow_Breathing>:


void effet_Rainbow_Breathing(LEDS led_param)
{
 8001210:	b084      	sub	sp, #16
 8001212:	b5b0      	push	{r4, r5, r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	2518      	movs	r5, #24
 800121a:	197c      	adds	r4, r7, r5
 800121c:	6020      	str	r0, [r4, #0]
 800121e:	6061      	str	r1, [r4, #4]
 8001220:	60a2      	str	r2, [r4, #8]
 8001222:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 8001224:	1dbb      	adds	r3, r7, #6
 8001226:	2212      	movs	r2, #18
 8001228:	701a      	strb	r2, [r3, #0]

	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 800122a:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <effet_Rainbow_Breathing+0xe8>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <effet_Rainbow_Breathing+0xec>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b25b      	sxtb	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <effet_Rainbow_Breathing+0xe8>)
 800123c:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 800123e:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <effet_Rainbow_Breathing+0xe8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <effet_Rainbow_Breathing+0x42>
 8001246:	197b      	adds	r3, r7, r5
 8001248:	785a      	ldrb	r2, [r3, #1]
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <effet_Rainbow_Breathing+0xe8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d108      	bne.n	8001264 <effet_Rainbow_Breathing+0x54>
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <effet_Rainbow_Breathing+0xec>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	b25a      	sxtb	r2, r3
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <effet_Rainbow_Breathing+0xec>)
 8001262:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e02e      	b.n	80012ca <effet_Rainbow_Breathing+0xba>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	1d7b      	adds	r3, r7, #5
 8001272:	4923      	ldr	r1, [pc, #140]	@ (8001300 <effet_Rainbow_Breathing+0xf0>)
 8001274:	5c8a      	ldrb	r2, [r1, r2]
 8001276:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, current_brightness);
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	223f      	movs	r2, #63	@ 0x3f
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	1dba      	adds	r2, r7, #6
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4353      	muls	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <effet_Rainbow_Breathing+0xf4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	18d3      	adds	r3, r2, r3
 8001294:	b2d8      	uxtb	r0, r3
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <effet_Rainbow_Breathing+0xe8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	001a      	movs	r2, r3
 800129c:	21ff      	movs	r1, #255	@ 0xff
 800129e:	f7ff fdd1 	bl	8000e44 <hsl_to_rgb>
 80012a2:	0003      	movs	r3, r0
 80012a4:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2dc      	uxtb	r4, r3
 80012b6:	1d7b      	adds	r3, r7, #5
 80012b8:	7818      	ldrb	r0, [r3, #0]
 80012ba:	0023      	movs	r3, r4
 80012bc:	f000 fb18 	bl	80018f0 <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	3201      	adds	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80012d0:	d9cc      	bls.n	800126c <effet_Rainbow_Breathing+0x5c>
	}

	// Write to LED
	++angle;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <effet_Rainbow_Breathing+0xf4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <effet_Rainbow_Breathing+0xf4>)
 80012e2:	701a      	strb	r2, [r3, #0]
	led_render();
 80012e4:	f000 fb6e 	bl	80019c4 <led_render>
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bcb0      	pop	{r4, r5, r7}
 80012f0:	bc08      	pop	{r3}
 80012f2:	b004      	add	sp, #16
 80012f4:	4718      	bx	r3
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	20000752 	.word	0x20000752
 80012fc:	20000371 	.word	0x20000371
 8001300:	0800b0dc 	.word	0x0800b0dc
 8001304:	20000753 	.word	0x20000753

08001308 <effet_Key_Responsive>:


void effet_Key_Responsive(LEDS led_param)
{
 8001308:	b084      	sub	sp, #16
 800130a:	b5b0      	push	{r4, r5, r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	2520      	movs	r5, #32
 8001312:	197c      	adds	r4, r7, r5
 8001314:	6020      	str	r0, [r4, #0]
 8001316:	6061      	str	r1, [r4, #4]
 8001318:	60a2      	str	r2, [r4, #8]
 800131a:	60e3      	str	r3, [r4, #12]
	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 800131c:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <effet_Key_Responsive+0xf0>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <effet_Key_Responsive+0xf4>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b32      	ldr	r3, [pc, #200]	@ (80013f8 <effet_Key_Responsive+0xf0>)
 800132e:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001330:	4b31      	ldr	r3, [pc, #196]	@ (80013f8 <effet_Key_Responsive+0xf0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <effet_Key_Responsive+0x3c>
 8001338:	197b      	adds	r3, r7, r5
 800133a:	785a      	ldrb	r2, [r3, #1]
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <effet_Key_Responsive+0xf0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d108      	bne.n	8001356 <effet_Key_Responsive+0x4e>
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <effet_Key_Responsive+0xf4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	425b      	negs	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <effet_Key_Responsive+0xf4>)
 8001354:	701a      	strb	r2, [r3, #0]

	// Set all LEDs to the same color with fading
	uint32_t rgb = hsl_to_rgb(led_param.hue, 255, led_param.brightness); // Static hue
 8001356:	2220      	movs	r2, #32
 8001358:	18bb      	adds	r3, r7, r2
 800135a:	7818      	ldrb	r0, [r3, #0]
 800135c:	18bb      	adds	r3, r7, r2
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	001a      	movs	r2, r3
 8001362:	21ff      	movs	r1, #255	@ 0xff
 8001364:	f7ff fd6e 	bl	8000e44 <hsl_to_rgb>
 8001368:	0003      	movs	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]
	uint8_t r = (rgb >> 16) & 0xFF;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0c1a      	lsrs	r2, r3, #16
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	701a      	strb	r2, [r3, #0]
	uint8_t g = (rgb >> 8) & 0xFF;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	0a1a      	lsrs	r2, r3, #8
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	701a      	strb	r2, [r3, #0]
	uint8_t b = rgb & 0xFF;
 800137c:	1d7b      	adds	r3, r7, #5
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < LED_CNT; i++)
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e027      	b.n	80013dc <effet_Key_Responsive+0xd4>
	{
		uint8_t led_index = led_map[i];
 800138c:	200f      	movs	r0, #15
 800138e:	183b      	adds	r3, r7, r0
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	491a      	ldr	r1, [pc, #104]	@ (8001400 <effet_Key_Responsive+0xf8>)
 8001396:	5c8a      	ldrb	r2, [r1, r2]
 8001398:	701a      	strb	r2, [r3, #0]

		switch(leds.position[i])
 800139a:	183b      	adds	r3, r7, r0
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <effet_Key_Responsive+0xfc>)
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10b      	bne.n	80013c0 <effet_Key_Responsive+0xb8>
		{
		case true:
			led_set_RGB(led_index, r, g, b);
 80013a8:	1d7b      	adds	r3, r7, #5
 80013aa:	781c      	ldrb	r4, [r3, #0]
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	7818      	ldrb	r0, [r3, #0]
 80013b8:	0023      	movs	r3, r4
 80013ba:	f000 fa99 	bl	80018f0 <led_set_RGB>
			break;
 80013be:	e007      	b.n	80013d0 <effet_Key_Responsive+0xc8>
		case false:
			led_set_RGB(led_index, 0, 0, 0);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	7818      	ldrb	r0, [r3, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	f000 fa91 	bl	80018f0 <led_set_RGB>
			break;
 80013ce:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < LED_CNT; i++)
 80013d0:	210f      	movs	r1, #15
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	3201      	adds	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e4:	d9d2      	bls.n	800138c <effet_Key_Responsive+0x84>
		}
	}

	led_render();
 80013e6:	f000 faed 	bl	80019c4 <led_render>
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bcb0      	pop	{r4, r5, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	b004      	add	sp, #16
 80013f6:	4718      	bx	r3
 80013f8:	20000754 	.word	0x20000754
 80013fc:	20000372 	.word	0x20000372
 8001400:	0800b0dc 	.word	0x0800b0dc
 8001404:	20000624 	.word	0x20000624

08001408 <effet_StaticColor>:


void effet_StaticColor(LEDS led_param)
{
 8001408:	b084      	sub	sp, #16
 800140a:	b5b0      	push	{r4, r5, r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	2518      	movs	r5, #24
 8001412:	197c      	adds	r4, r7, r5
 8001414:	6020      	str	r0, [r4, #0]
 8001416:	6061      	str	r1, [r4, #4]
 8001418:	60a2      	str	r2, [r4, #8]
 800141a:	60e3      	str	r3, [r4, #12]
	uint32_t rgb_color = hsl_to_rgb(led_param.hue, 255, led_param.brightness);
 800141c:	002a      	movs	r2, r5
 800141e:	18bb      	adds	r3, r7, r2
 8001420:	7818      	ldrb	r0, [r3, #0]
 8001422:	18bb      	adds	r3, r7, r2
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	001a      	movs	r2, r3
 8001428:	21ff      	movs	r1, #255	@ 0xff
 800142a:	f7ff fd0b 	bl	8000e44 <hsl_to_rgb>
 800142e:	0003      	movs	r3, r0
 8001430:	607b      	str	r3, [r7, #4]
	led_set_all_RGB((rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	b2d8      	uxtb	r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b2db      	uxtb	r3, r3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	0019      	movs	r1, r3
 8001444:	f000 fa96 	bl	8001974 <led_set_all_RGB>
	led_render();
 8001448:	f000 fabc 	bl	80019c4 <led_render>
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bcb0      	pop	{r4, r5, r7}
 8001454:	bc08      	pop	{r3}
 8001456:	b004      	add	sp, #16
 8001458:	4718      	bx	r3

0800145a <Main_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Main_Init(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
	piloteTimer14_initialise();
 800145e:	f000 fc91 	bl	8001d84 <piloteTimer14_initialise>
	serviceBaseDeTemps_initialise();
 8001462:	f7ff f90d 	bl	8000680 <serviceBaseDeTemps_initialise>
	InterfaceMatrice_Init();
 8001466:	f7ff fa13 	bl	8000890 <InterfaceMatrice_Init>
	InterfaceDebouncing_Init();
 800146a:	f7ff f9c1 	bl	80007f0 <InterfaceDebouncing_Init>
	ProcessusKeys_Init();
 800146e:	f7fe fed7 	bl	8000220 <ProcessusKeys_Init>
	ProcessusLEDS_init();
 8001472:	f7ff f88b 	bl	800058c <ProcessusLEDS_init>
}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <doNothing>:

void doNothing(void){}
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f000 fdcf 	bl	800202c <HAL_Init>

  /* USER CODE BEGIN Init */

  Main_Init();
 800148e:	f7ff ffe4 	bl	800145a <Main_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001492:	f000 f810 	bl	80014b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f000 f925 	bl	80016e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800149a:	f000 f905 	bl	80016a8 <MX_DMA_Init>
  MX_TIM2_Init();
 800149e:	f000 f85f 	bl	8001560 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80014a2:	f009 f899 	bl	800a5d8 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 80014a6:	f000 f8d9 	bl	800165c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  Key_Config_Init();
 80014aa:	f7ff fc7d 	bl	8000da8 <Key_Config_Init>
  piloteTimer14_permetLesInterruptions();
 80014ae:	f000 fc5d 	bl	8001d6c <piloteTimer14_permetLesInterruptions>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	e7fd      	b.n	80014b2 <main+0x2c>

080014b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b6:	b590      	push	{r4, r7, lr}
 80014b8:	b099      	sub	sp, #100	@ 0x64
 80014ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014bc:	242c      	movs	r4, #44	@ 0x2c
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	0018      	movs	r0, r3
 80014c2:	2334      	movs	r3, #52	@ 0x34
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f009 fd84 	bl	800afd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	231c      	movs	r3, #28
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	0018      	movs	r0, r3
 80014d2:	2310      	movs	r3, #16
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f009 fd7c 	bl	800afd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	003b      	movs	r3, r7
 80014de:	0018      	movs	r0, r3
 80014e0:	231c      	movs	r3, #28
 80014e2:	001a      	movs	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	f009 fd75 	bl	800afd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2220      	movs	r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2201      	movs	r2, #1
 80014f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	0018      	movs	r0, r3
 8001500:	f003 faae 	bl	8004a60 <HAL_RCC_OscConfig>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001508:	f000 f976 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	211c      	movs	r1, #28
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2203      	movs	r2, #3
 8001518:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2101      	movs	r1, #1
 800152a:	0018      	movs	r0, r3
 800152c:	f003 fe1e 	bl	800516c <HAL_RCC_ClockConfig>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001534:	f000 f960 	bl	80017f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001538:	003b      	movs	r3, r7
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	0292      	lsls	r2, r2, #10
 800153e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001540:	003b      	movs	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	003b      	movs	r3, r7
 8001548:	0018      	movs	r0, r3
 800154a:	f003 ff5b 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001552:	f000 f951 	bl	80017f8 <Error_Handler>
  }
}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b019      	add	sp, #100	@ 0x64
 800155c:	bd90      	pop	{r4, r7, pc}
	...

08001560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	@ 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	2328      	movs	r3, #40	@ 0x28
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	0018      	movs	r0, r3
 800156c:	2310      	movs	r3, #16
 800156e:	001a      	movs	r2, r3
 8001570:	2100      	movs	r1, #0
 8001572:	f009 fd2f 	bl	800afd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	2320      	movs	r3, #32
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	0018      	movs	r0, r3
 800157c:	2308      	movs	r3, #8
 800157e:	001a      	movs	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	f009 fd27 	bl	800afd4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	0018      	movs	r0, r3
 800158a:	231c      	movs	r3, #28
 800158c:	001a      	movs	r2, r3
 800158e:	2100      	movs	r1, #0
 8001590:	f009 fd20 	bl	800afd4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <MX_TIM2_Init+0xf8>)
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	05d2      	lsls	r2, r2, #23
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800159c:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <MX_TIM2_Init+0xf8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015aa:	223b      	movs	r2, #59	@ 0x3b
 80015ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015bc:	0018      	movs	r0, r3
 80015be:	f004 f81f 	bl	8005600 <HAL_TIM_Base_Init>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015c6:	f000 f917 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	2128      	movs	r1, #40	@ 0x28
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	0152      	lsls	r2, r2, #5
 80015d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	187a      	adds	r2, r7, r1
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f004 fd54 	bl	8006088 <HAL_TIM_ConfigClockSource>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80015e4:	f000 f908 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_TIM2_Init+0xf8>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f004 f8aa 	bl	8005744 <HAL_TIM_PWM_Init>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015f4:	f000 f900 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2120      	movs	r1, #32
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001606:	187a      	adds	r2, r7, r1
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_TIM2_Init+0xf8>)
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f005 fa4b 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001616:	f000 f8ef 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2260      	movs	r2, #96	@ 0x60
 800161e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1d39      	adds	r1, r7, #4
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_TIM2_Init+0xf8>)
 8001636:	2200      	movs	r2, #0
 8001638:	0018      	movs	r0, r3
 800163a:	f004 fc5f 	bl	8005efc <HAL_TIM_PWM_ConfigChannel>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001642:	f000 f8d9 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <MX_TIM2_Init+0xf8>)
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fc31 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b00e      	add	sp, #56	@ 0x38
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	20000758 	.word	0x20000758

0800165c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_TIM14_Init+0x40>)
 8001662:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <MX_TIM14_Init+0x44>)
 8001664:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <MX_TIM14_Init+0x40>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_TIM14_Init+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 47999;
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_TIM14_Init+0x40>)
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <MX_TIM14_Init+0x48>)
 8001676:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_TIM14_Init+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <MX_TIM14_Init+0x40>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <MX_TIM14_Init+0x40>)
 8001686:	0018      	movs	r0, r3
 8001688:	f003 ffba 	bl	8005600 <HAL_TIM_Base_Init>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001690:	f000 f8b2 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	200007a0 	.word	0x200007a0
 80016a0:	40002000 	.word	0x40002000
 80016a4:	0000bb7f 	.word	0x0000bb7f

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_DMA_Init+0x38>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <MX_DMA_Init+0x38>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_DMA_Init+0x38>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	200b      	movs	r0, #11
 80016cc:	f000 fdbe 	bl	800224c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80016d0:	200b      	movs	r0, #11
 80016d2:	f000 fdd0 	bl	8002276 <HAL_NVIC_EnableIRQ>

}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	240c      	movs	r4, #12
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	0018      	movs	r0, r3
 80016f0:	2314      	movs	r3, #20
 80016f2:	001a      	movs	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	f009 fc6d 	bl	800afd4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b3c      	ldr	r3, [pc, #240]	@ (80017ec <MX_GPIO_Init+0x108>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <MX_GPIO_Init+0x108>)
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0289      	lsls	r1, r1, #10
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b38      	ldr	r3, [pc, #224]	@ (80017ec <MX_GPIO_Init+0x108>)
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	2380      	movs	r3, #128	@ 0x80
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <MX_GPIO_Init+0x108>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b34      	ldr	r3, [pc, #208]	@ (80017ec <MX_GPIO_Init+0x108>)
 800171c:	2180      	movs	r1, #128	@ 0x80
 800171e:	02c9      	lsls	r1, r1, #11
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <MX_GPIO_Init+0x108>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	02db      	lsls	r3, r3, #11
 800172c:	4013      	ands	r3, r2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001732:	2390      	movs	r3, #144	@ 0x90
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	2200      	movs	r2, #0
 8001738:	211f      	movs	r1, #31
 800173a:	0018      	movs	r0, r3
 800173c:	f001 fb2d 	bl	8002d9a <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001740:	193b      	adds	r3, r7, r4
 8001742:	221f      	movs	r2, #31
 8001744:	601a      	str	r2, [r3, #0]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2201      	movs	r2, #1
 800174a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	193a      	adds	r2, r7, r4
 800175a:	2390      	movs	r3, #144	@ 0x90
 800175c:	05db      	lsls	r3, r3, #23
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f001 f985 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDS_STAT_Pin */
  GPIO_InitStruct.Pin = LEDS_STAT_Pin;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2240      	movs	r2, #64	@ 0x40
 800176a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2202      	movs	r2, #2
 8001770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2201      	movs	r2, #1
 8001782:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(LEDS_STAT_GPIO_Port, &GPIO_InitStruct);
 8001784:	193a      	adds	r2, r7, r4
 8001786:	2390      	movs	r3, #144	@ 0x90
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f001 f96f 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OS1_Pin OS2_Pin OS3_Pin */
  GPIO_InitStruct.Pin = OS1_Pin|OS2_Pin|OS3_Pin;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	22e0      	movs	r2, #224	@ 0xe0
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	2284      	movs	r2, #132	@ 0x84
 800179e:	0392      	lsls	r2, r2, #14
 80017a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	193a      	adds	r2, r7, r4
 80017aa:	2390      	movs	r3, #144	@ 0x90
 80017ac:	05db      	lsls	r3, r3, #23
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f001 f95d 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL11_Pin
                           COL12_Pin COL13_Pin COL14_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           COL9_Pin COL10_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL11_Pin
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <MX_GPIO_Init+0x10c>)
 80017ba:	601a      	str	r2, [r3, #0]
                          |COL12_Pin|COL13_Pin|COL14_Pin|COL4_Pin
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |COL9_Pin|COL10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2201      	movs	r2, #1
 80017c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <MX_GPIO_Init+0x110>)
 80017cc:	0019      	movs	r1, r3
 80017ce:	0010      	movs	r0, r2
 80017d0:	f001 f94e 	bl	8002a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2102      	movs	r1, #2
 80017d8:	2007      	movs	r0, #7
 80017da:	f000 fd37 	bl	800224c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017de:	2007      	movs	r0, #7
 80017e0:	f000 fd49 	bl	8002276 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e4:	46c0      	nop			@ (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b009      	add	sp, #36	@ 0x24
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	00003fff 	.word	0x00003fff
 80017f4:	48000400 	.word	0x48000400

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <Read_Col>:

uint16_t col_pin[NUM_COLS] = { COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,
							COL10, COL11, COL12, COL13, COL14 };

bool Read_Col(uint16_t col_index)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	0002      	movs	r2, r0
 800180c:	1dbb      	adds	r3, r7, #6
 800180e:	801a      	strh	r2, [r3, #0]
	return HAL_GPIO_ReadPin(COL_PORT, col_pin[col_index]);
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <Read_Col+0x30>)
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	5ad3      	ldrh	r3, [r2, r3]
 800181a:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <Read_Col+0x34>)
 800181c:	0019      	movs	r1, r3
 800181e:	0010      	movs	r0, r2
 8001820:	f001 fa9e 	bl	8002d60 <HAL_GPIO_ReadPin>
 8001824:	0003      	movs	r3, r0
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	4193      	sbcs	r3, r2
 800182a:	b2db      	uxtb	r3, r3
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000374 	.word	0x20000374
 8001838:	48000400 	.word	0x48000400

0800183c <Set_Row>:
#include "pilote_ROW.h"

uint16_t row_pin[NUM_ROWS] = { ROW1, ROW2, ROW3, ROW4, ROW5};

void Set_Row(uint16_t row_index)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	1dbb      	adds	r3, r7, #6
 8001846:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_SET);
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	881a      	ldrh	r2, [r3, #0]
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <Set_Row+0x2c>)
 800184e:	0052      	lsls	r2, r2, #1
 8001850:	5ad1      	ldrh	r1, [r2, r3]
 8001852:	2390      	movs	r3, #144	@ 0x90
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	2201      	movs	r2, #1
 8001858:	0018      	movs	r0, r3
 800185a:	f001 fa9e 	bl	8002d9a <HAL_GPIO_WritePin>
}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	20000390 	.word	0x20000390

0800186c <Reset_Row>:

void Reset_Row(uint16_t row_index)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_RESET);
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <Reset_Row+0x2c>)
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	5ad1      	ldrh	r1, [r2, r3]
 8001882:	2390      	movs	r3, #144	@ 0x90
 8001884:	05db      	lsls	r3, r3, #23
 8001886:	2200      	movs	r2, #0
 8001888:	0018      	movs	r0, r3
 800188a:	f001 fa86 	bl	8002d9a <HAL_GPIO_WritePin>
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	20000390 	.word	0x20000390

0800189c <Set_All_Rows>:

void Set_All_Rows(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e007      	b.n	80018b8 <Set_All_Rows+0x1c>
	{
		Set_Row(i);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff ffc5 	bl	800183c <Set_Row>
	for(int i = 0; i < NUM_ROWS; i++)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	ddf4      	ble.n	80018a8 <Set_All_Rows+0xc>
	}
}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <scale8>:
// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0002      	movs	r2, r0
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	1dbb      	adds	r3, r7, #6
 80018d6:	1c0a      	adds	r2, r1, #0
 80018d8:	701a      	strb	r2, [r3, #0]
  return ((uint16_t)x * scale) >> 8;
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	1dba      	adds	r2, r7, #6
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	4353      	muls	r3, r2
 80018e4:	121b      	asrs	r3, r3, #8
 80018e6:	b2db      	uxtb	r3, r3
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <led_set_RGB>:


// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0005      	movs	r5, r0
 80018f8:	000c      	movs	r4, r1
 80018fa:	0010      	movs	r0, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	1c2a      	adds	r2, r5, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	1dbb      	adds	r3, r7, #6
 8001906:	1c22      	adds	r2, r4, #0
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	1d7b      	adds	r3, r7, #5
 800190c:	1c02      	adds	r2, r0, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	1c0a      	adds	r2, r1, #0
 8001914:	701a      	strb	r2, [r3, #0]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	0013      	movs	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	189c      	adds	r4, r3, r2
 8001920:	1d7b      	adds	r3, r7, #5
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	21b0      	movs	r1, #176	@ 0xb0
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff ffce 	bl	80018c8 <scale8>
 800192c:	0003      	movs	r3, r0
 800192e:	001a      	movs	r2, r3
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <led_set_RGB+0x80>)
 8001932:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	0013      	movs	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	189b      	adds	r3, r3, r2
 800193e:	3301      	adds	r3, #1
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <led_set_RGB+0x80>)
 8001942:	1db9      	adds	r1, r7, #6
 8001944:	7809      	ldrb	r1, [r1, #0]
 8001946:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	0013      	movs	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	189b      	adds	r3, r3, r2
 8001952:	1c9c      	adds	r4, r3, #2
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	21f0      	movs	r1, #240	@ 0xf0
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff ffb4 	bl	80018c8 <scale8>
 8001960:	0003      	movs	r3, r0
 8001962:	001a      	movs	r2, r3
 8001964:	4b02      	ldr	r3, [pc, #8]	@ (8001970 <led_set_RGB+0x80>)
 8001966:	551a      	strb	r2, [r3, r4]
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	2000082c 	.word	0x2000082c

08001974 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	0004      	movs	r4, r0
 800197c:	0008      	movs	r0, r1
 800197e:	0011      	movs	r1, r2
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	1c22      	adds	r2, r4, #0
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	1dbb      	adds	r3, r7, #6
 8001988:	1c02      	adds	r2, r0, #0
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	1d7b      	adds	r3, r7, #5
 800198e:	1c0a      	adds	r2, r1, #0
 8001990:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < LED_CNT; ++i) led_set_RGB(i, r, g, b);
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e00d      	b.n	80019b4 <led_set_all_RGB+0x40>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	b2d8      	uxtb	r0, r3
 800199c:	1d7b      	adds	r3, r7, #5
 800199e:	781c      	ldrb	r4, [r3, #0]
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	7819      	ldrb	r1, [r3, #0]
 80019a8:	0023      	movs	r3, r4
 80019aa:	f7ff ffa1 	bl	80018f0 <led_set_RGB>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b8:	d9ee      	bls.n	8001998 <led_set_all_RGB+0x24>
}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b005      	add	sp, #20
 80019c2:	bd90      	pop	{r4, r7, pc}

080019c4 <led_render>:

// Shuttle the data to the LEDs!
void led_render()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 80019ca:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <led_render+0x148>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <led_render+0x1a>
 80019d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001b10 <led_render+0x14c>)
 80019d4:	2221      	movs	r2, #33	@ 0x21
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d01a      	beq.n	8001a14 <led_render+0x50>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e009      	b.n	80019fa <led_render+0x36>
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001b14 <led_render+0x150>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	54d1      	strb	r1, [r2, r3]
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	1dfa      	adds	r2, r7, #7
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	3201      	adds	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a00:	d9f1      	bls.n	80019e6 <led_render+0x22>
    wr_buf_p = 0;
 8001a02:	4b42      	ldr	r3, [pc, #264]	@ (8001b0c <led_render+0x148>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001a08:	4b43      	ldr	r3, [pc, #268]	@ (8001b18 <led_render+0x154>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f004 f8a7 	bl	8005b60 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001a12:	e078      	b.n	8001b06 <led_render+0x142>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	e069      	b.n	8001aee <led_render+0x12a>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001a1a:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <led_render+0x158>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	001a      	movs	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dd01      	ble.n	8001a32 <led_render+0x6e>
 8001a2e:	2126      	movs	r1, #38	@ 0x26
 8001a30:	e000      	b.n	8001a34 <led_render+0x70>
 8001a32:	2113      	movs	r1, #19
 8001a34:	4a37      	ldr	r2, [pc, #220]	@ (8001b14 <led_render+0x150>)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <led_render+0x158>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	001a      	movs	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dd01      	ble.n	8001a56 <led_render+0x92>
 8001a52:	2126      	movs	r1, #38	@ 0x26
 8001a54:	e000      	b.n	8001a58 <led_render+0x94>
 8001a56:	2113      	movs	r1, #19
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b14 <led_render+0x150>)
 8001a5e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <led_render+0x158>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	001a      	movs	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dd01      	ble.n	8001a78 <led_render+0xb4>
 8001a74:	2126      	movs	r1, #38	@ 0x26
 8001a76:	e000      	b.n	8001a7a <led_render+0xb6>
 8001a78:	2113      	movs	r1, #19
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3310      	adds	r3, #16
 8001a7e:	4a25      	ldr	r2, [pc, #148]	@ (8001b14 <led_render+0x150>)
 8001a80:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <led_render+0x158>)
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	001a      	movs	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dd01      	ble.n	8001a9a <led_render+0xd6>
 8001a96:	2126      	movs	r1, #38	@ 0x26
 8001a98:	e000      	b.n	8001a9c <led_render+0xd8>
 8001a9a:	2113      	movs	r1, #19
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <led_render+0x150>)
 8001aa2:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <led_render+0x158>)
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	dd01      	ble.n	8001abc <led_render+0xf8>
 8001ab8:	2126      	movs	r1, #38	@ 0x26
 8001aba:	e000      	b.n	8001abe <led_render+0xfa>
 8001abc:	2113      	movs	r1, #19
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	3320      	adds	r3, #32
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <led_render+0x150>)
 8001ac4:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <led_render+0x158>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	001a      	movs	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dd01      	ble.n	8001ade <led_render+0x11a>
 8001ada:	2126      	movs	r1, #38	@ 0x26
 8001adc:	e000      	b.n	8001ae0 <led_render+0x11c>
 8001ade:	2113      	movs	r1, #19
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3328      	adds	r3, #40	@ 0x28
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b14 <led_render+0x150>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b07      	cmp	r3, #7
 8001af2:	d992      	bls.n	8001a1a <led_render+0x56>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001af4:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <led_render+0x150>)
 8001af6:	4808      	ldr	r0, [pc, #32]	@ (8001b18 <led_render+0x154>)
 8001af8:	2330      	movs	r3, #48	@ 0x30
 8001afa:	2100      	movs	r1, #0
 8001afc:	f003 fe7a 	bl	80057f4 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001b00:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <led_render+0x148>)
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000091c 	.word	0x2000091c
 8001b10:	200007e8 	.word	0x200007e8
 8001b14:	200008ec 	.word	0x200008ec
 8001b18:	20000758 	.word	0x20000758
 8001b1c:	2000082c 	.word	0x2000082c

08001b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001b28:	4b3c      	ldr	r3, [pc, #240]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b2e:	d853      	bhi.n	8001bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e047      	b.n	8001bc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001b36:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	189b      	adds	r3, r3, r2
 8001b40:	4a37      	ldr	r2, [pc, #220]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	001a      	movs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dd01      	ble.n	8001b58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001b54:	2126      	movs	r1, #38	@ 0x26
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001b58:	2113      	movs	r1, #19
 8001b5a:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	1c0a      	adds	r2, r1, #0
 8001b62:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	189b      	adds	r3, r3, r2
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	001a      	movs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dd01      	ble.n	8001b88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001b84:	2126      	movs	r1, #38	@ 0x26
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001b88:	2113      	movs	r1, #19
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001b90:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	0013      	movs	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	2280      	movs	r2, #128	@ 0x80
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	dd01      	ble.n	8001bb6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001bb2:	2126      	movs	r1, #38	@ 0x26
 8001bb4:	e000      	b.n	8001bb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001bb6:	2113      	movs	r1, #19
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3310      	adds	r3, #16
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001bbe:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	d9b4      	bls.n	8001b36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bd4:	601a      	str	r2, [r3, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001bd6:	e01d      	b.n	8001c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
  } else if (wr_buf_p < LED_CNT + 2) {
 8001bd8:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b41      	cmp	r3, #65	@ 0x41
 8001bde:	d819      	bhi.n	8001c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001be0:	230b      	movs	r3, #11
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e00a      	b.n	8001c00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>
 8001bea:	200b      	movs	r0, #11
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	54d1      	strb	r1, [r2, r3]
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	183a      	adds	r2, r7, r0
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	3201      	adds	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	230b      	movs	r3, #11
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b17      	cmp	r3, #23
 8001c08:	d9ef      	bls.n	8001bea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xca>
    wr_buf_p++;
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	4b02      	ldr	r3, [pc, #8]	@ (8001c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000091c 	.word	0x2000091c
 8001c20:	2000082c 	.word	0x2000082c
 8001c24:	200008ec 	.word	0x200008ec

08001c28 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001c30:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c36:	d852      	bhi.n	8001cde <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    //Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e046      	b.n	8001ccc <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	0013      	movs	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	189b      	adds	r3, r3, r2
 8001c48:	4a3b      	ldr	r2, [pc, #236]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	409a      	lsls	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	dd01      	ble.n	8001c60 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001c5c:	2126      	movs	r1, #38	@ 0x26
 8001c5e:	e000      	b.n	8001c62 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001c60:	2113      	movs	r1, #19
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3318      	adds	r3, #24
 8001c66:	4a35      	ldr	r2, [pc, #212]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001c68:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001c6a:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	0013      	movs	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	189b      	adds	r3, r3, r2
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a30      	ldr	r2, [pc, #192]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	dd01      	ble.n	8001c8e <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001c8a:	2126      	movs	r1, #38	@ 0x26
 8001c8c:	e000      	b.n	8001c90 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001c8e:	2113      	movs	r1, #19
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3320      	adds	r3, #32
 8001c94:	4a29      	ldr	r2, [pc, #164]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001c96:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	189b      	adds	r3, r3, r2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	dd01      	ble.n	8001cbc <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001cb8:	2126      	movs	r1, #38	@ 0x26
 8001cba:	e000      	b.n	8001cbe <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001cbc:	2113      	movs	r1, #19
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3328      	adds	r3, #40	@ 0x28
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001cc4:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	d9b5      	bls.n	8001c3e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cda:	601a      	str	r2, [r3, #0]
  } else {

    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8001cdc:	e026      	b.n	8001d2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>
  } else if (wr_buf_p < LED_CNT + 2) {
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b41      	cmp	r3, #65	@ 0x41
 8001ce4:	d81a      	bhi.n	8001d1c <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001ce6:	230b      	movs	r3, #11
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2218      	movs	r2, #24
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e00a      	b.n	8001d06 <HAL_TIM_PWM_PulseFinishedCallback+0xde>
 8001cf0:	200b      	movs	r0, #11
 8001cf2:	183b      	adds	r3, r7, r0
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	54d1      	strb	r1, [r2, r3]
 8001cfc:	183b      	adds	r3, r7, r0
 8001cfe:	183a      	adds	r2, r7, r0
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	3201      	adds	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	230b      	movs	r3, #11
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d0e:	d9ef      	bls.n	8001cf0 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
    ++wr_buf_p;
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	e007      	b.n	8001d2c <HAL_TIM_PWM_PulseFinishedCallback+0x104>
    wr_buf_p = 0;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001d24:	2100      	movs	r1, #0
 8001d26:	0018      	movs	r0, r3
 8001d28:	f003 ff1a 	bl	8005b60 <HAL_TIM_PWM_Stop_DMA>
}
 8001d2c:	46c0      	nop			@ (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000091c 	.word	0x2000091c
 8001d38:	2000082c 	.word	0x2000082c
 8001d3c:	200008ec 	.word	0x200008ec
 8001d40:	20000758 	.word	0x20000758

08001d44 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer14_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d102      	bne.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  piloteTimer14_execute();
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4798      	blx	r3
  }
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	200007a0 	.word	0x200007a0
 8001d68:	20000920 	.word	0x20000920

08001d6c <piloteTimer14_permetLesInterruptions>:

void piloteTimer14_permetLesInterruptions(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim14);
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <piloteTimer14_permetLesInterruptions+0x14>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f003 fc94 	bl	80056a0 <HAL_TIM_Base_Start_IT>
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	200007a0 	.word	0x200007a0

08001d84 <piloteTimer14_initialise>:

void piloteTimer14_initialise(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  piloteTimer14_execute = doNothing;
 8001d88:	4b02      	ldr	r3, [pc, #8]	@ (8001d94 <piloteTimer14_initialise+0x10>)
 8001d8a:	4a03      	ldr	r2, [pc, #12]	@ (8001d98 <piloteTimer14_initialise+0x14>)
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000920 	.word	0x20000920
 8001d98:	0800147d 	.word	0x0800147d

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_MspInit+0x44>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	0549      	lsls	r1, r1, #21
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	61da      	str	r2, [r3, #28]
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	055b      	lsls	r3, r3, #21
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	05db      	lsls	r3, r3, #23
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d133      	bne.n	8001e60 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
 8001e04:	4b26      	ldr	r3, [pc, #152]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e12:	4a25      	ldr	r2, [pc, #148]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc4>)
 8001e14:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e18:	2210      	movs	r2, #16
 8001e1a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e24:	2280      	movs	r2, #128	@ 0x80
 8001e26:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e38:	2220      	movs	r2, #32
 8001e3a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fa33 	bl	80022b0 <HAL_DMA_Init>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001e4e:	f7ff fcd3 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e5e:	e01a      	b.n	8001e96 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM14)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <HAL_TIM_Base_MspInit+0xc8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d115      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0049      	lsls	r1, r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2102      	movs	r1, #2
 8001e8a:	2013      	movs	r0, #19
 8001e8c:	f000 f9de 	bl	800224c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001e90:	2013      	movs	r0, #19
 8001e92:	f000 f9f0 	bl	8002276 <HAL_NVIC_EnableIRQ>
}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	200007e8 	.word	0x200007e8
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	40002000 	.word	0x40002000

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	240c      	movs	r4, #12
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f009 f886 	bl	800afd4 <memset>
  if(htim->Instance==TIM2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	05db      	lsls	r3, r3, #23
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d125      	bne.n	8001f20 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_TIM_MspPostInit+0x78>)
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_TIM_MspPostInit+0x78>)
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	0289      	lsls	r1, r1, #10
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_TIM_MspPostInit+0x78>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_OUT_Pin;
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	0212      	lsls	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	0021      	movs	r1, r4
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2202      	movs	r2, #2
 8001efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2202      	movs	r2, #2
 8001f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f12:	187a      	adds	r2, r7, r1
 8001f14:	2390      	movs	r3, #144	@ 0x90
 8001f16:	05db      	lsls	r3, r3, #23
 8001f18:	0011      	movs	r1, r2
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fda8 	bl	8002a70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b009      	add	sp, #36	@ 0x24
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	46c0      	nop			@ (mov r8, r8)
 8001f32:	e7fd      	b.n	8001f30 <NMI_Handler+0x4>

08001f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	e7fd      	b.n	8001f38 <HardFault_Handler+0x4>

08001f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 f8b2 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	46c0      	nop			@ (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OS1_Pin);
 8001f62:	2080      	movs	r0, #128	@ 0x80
 8001f64:	f000 ff36 	bl	8002dd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OS2_Pin);
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 ff31 	bl	8002dd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OS3_Pin);
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 ff2c 	bl	8002dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 fa83 	bl	8002496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	200007e8 	.word	0x200007e8

08001f9c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <TIM14_IRQHandler+0x14>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f003 febc 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	200007a0 	.word	0x200007a0

08001fb4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <USB_IRQHandler+0x14>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f001 f840 	bl	8003040 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	20000e50 	.word	0x20000e50

08001fcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd8:	480d      	ldr	r0, [pc, #52]	@ (8002010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fdc:	f7ff fff6 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe2:	490d      	ldr	r1, [pc, #52]	@ (8002018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <LoopForever+0xe>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8002024 <LoopForever+0x16>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002006:	f008 ffed 	bl	800afe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200a:	f7ff fa3c 	bl	8001486 <main>

0800200e <LoopForever>:

LoopForever:
    b LoopForever
 800200e:	e7fe      	b.n	800200e <LoopForever>
  ldr   r0, =_estack
 8002010:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002018:	2000059c 	.word	0x2000059c
  ldr r2, =_sidata
 800201c:	0800b1f8 	.word	0x0800b1f8
  ldr r2, =_sbss
 8002020:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8002024:	20001184 	.word	0x20001184

08002028 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC1_COMP_IRQHandler>
	...

0800202c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_Init+0x24>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_Init+0x24>)
 8002036:	2110      	movs	r1, #16
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 f809 	bl	8002054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002042:	f7ff feab 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_InitTick+0x5c>)
 800205e:	681c      	ldr	r4, [r3, #0]
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_InitTick+0x60>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	0019      	movs	r1, r3
 8002066:	23fa      	movs	r3, #250	@ 0xfa
 8002068:	0098      	lsls	r0, r3, #2
 800206a:	f7fe f84d 	bl	8000108 <__udivsi3>
 800206e:	0003      	movs	r3, r0
 8002070:	0019      	movs	r1, r3
 8002072:	0020      	movs	r0, r4
 8002074:	f7fe f848 	bl	8000108 <__udivsi3>
 8002078:	0003      	movs	r3, r0
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f90b 	bl	8002296 <HAL_SYSTICK_Config>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d001      	beq.n	8002088 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00f      	b.n	80020a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d80b      	bhi.n	80020a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	2301      	movs	r3, #1
 8002092:	425b      	negs	r3, r3
 8002094:	2200      	movs	r2, #0
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f8d8 	bl	800224c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_InitTick+0x64>)
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b003      	add	sp, #12
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	200003a4 	.word	0x200003a4
 80020b8:	200003a0 	.word	0x200003a0

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_IncTick+0x1c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	001a      	movs	r2, r3
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_IncTick+0x20>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	18d2      	adds	r2, r2, r3
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_IncTick+0x20>)
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	200003a4 	.word	0x200003a4
 80020dc:	20000924 	.word	0x20000924

080020e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <HAL_GetTick+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	20000924 	.word	0x20000924

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	0002      	movs	r2, r0
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b7f      	cmp	r3, #127	@ 0x7f
 8002106:	d809      	bhi.n	800211c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	001a      	movs	r2, r3
 800210e:	231f      	movs	r3, #31
 8002110:	401a      	ands	r2, r3
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_EnableIRQ+0x30>)
 8002114:	2101      	movs	r1, #1
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
  }
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	0002      	movs	r2, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b7f      	cmp	r3, #127	@ 0x7f
 800213c:	d828      	bhi.n	8002190 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213e:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <__NVIC_SetPriority+0xd4>)
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	33c0      	adds	r3, #192	@ 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	589b      	ldr	r3, [r3, r2]
 800214e:	1dfa      	adds	r2, r7, #7
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	0011      	movs	r1, r2
 8002154:	2203      	movs	r2, #3
 8002156:	400a      	ands	r2, r1
 8002158:	00d2      	lsls	r2, r2, #3
 800215a:	21ff      	movs	r1, #255	@ 0xff
 800215c:	4091      	lsls	r1, r2
 800215e:	000a      	movs	r2, r1
 8002160:	43d2      	mvns	r2, r2
 8002162:	401a      	ands	r2, r3
 8002164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	401a      	ands	r2, r3
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	0018      	movs	r0, r3
 8002174:	2303      	movs	r3, #3
 8002176:	4003      	ands	r3, r0
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217c:	481f      	ldr	r0, [pc, #124]	@ (80021fc <__NVIC_SetPriority+0xd4>)
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	430a      	orrs	r2, r1
 8002188:	33c0      	adds	r3, #192	@ 0xc0
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800218e:	e031      	b.n	80021f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <__NVIC_SetPriority+0xd8>)
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	0019      	movs	r1, r3
 8002198:	230f      	movs	r3, #15
 800219a:	400b      	ands	r3, r1
 800219c:	3b08      	subs	r3, #8
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3306      	adds	r3, #6
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1dfa      	adds	r2, r7, #7
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	0011      	movs	r1, r2
 80021b0:	2203      	movs	r2, #3
 80021b2:	400a      	ands	r2, r1
 80021b4:	00d2      	lsls	r2, r2, #3
 80021b6:	21ff      	movs	r1, #255	@ 0xff
 80021b8:	4091      	lsls	r1, r2
 80021ba:	000a      	movs	r2, r1
 80021bc:	43d2      	mvns	r2, r2
 80021be:	401a      	ands	r2, r3
 80021c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	019b      	lsls	r3, r3, #6
 80021c6:	22ff      	movs	r2, #255	@ 0xff
 80021c8:	401a      	ands	r2, r3
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	0018      	movs	r0, r3
 80021d0:	2303      	movs	r3, #3
 80021d2:	4003      	ands	r3, r0
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d8:	4809      	ldr	r0, [pc, #36]	@ (8002200 <__NVIC_SetPriority+0xd8>)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	001c      	movs	r4, r3
 80021e0:	230f      	movs	r3, #15
 80021e2:	4023      	ands	r3, r4
 80021e4:	3b08      	subs	r3, #8
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	430a      	orrs	r2, r1
 80021ea:	3306      	adds	r3, #6
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	18c3      	adds	r3, r0, r3
 80021f0:	3304      	adds	r3, #4
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b003      	add	sp, #12
 80021fa:	bd90      	pop	{r4, r7, pc}
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	045b      	lsls	r3, r3, #17
 8002214:	429a      	cmp	r2, r3
 8002216:	d301      	bcc.n	800221c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002218:	2301      	movs	r3, #1
 800221a:	e010      	b.n	800223e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <SysTick_Config+0x44>)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	3a01      	subs	r2, #1
 8002222:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002224:	2301      	movs	r3, #1
 8002226:	425b      	negs	r3, r3
 8002228:	2103      	movs	r1, #3
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff ff7c 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <SysTick_Config+0x44>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <SysTick_Config+0x44>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	210f      	movs	r1, #15
 8002258:	187b      	adds	r3, r7, r1
 800225a:	1c02      	adds	r2, r0, #0
 800225c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	187b      	adds	r3, r7, r1
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b25b      	sxtb	r3, r3
 8002266:	0011      	movs	r1, r2
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	0002      	movs	r2, r0
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b25b      	sxtb	r3, r3
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff ff33 	bl	80020f4 <__NVIC_EnableIRQ>
}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff ffaf 	bl	8002204 <SysTick_Config>
 80022a6:	0003      	movs	r3, r0
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e036      	b.n	8002334 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2221      	movs	r2, #33	@ 0x21
 80022ca:	2102      	movs	r1, #2
 80022cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a18      	ldr	r2, [pc, #96]	@ (800233c <HAL_DMA_Init+0x8c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f98c 	bl	8002634 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2221      	movs	r2, #33	@ 0x21
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}
 800233c:	ffffc00f 	.word	0xffffc00f

08002340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2317      	movs	r3, #23
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	5c9b      	ldrb	r3, [r3, r2]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Start_IT+0x24>
 8002360:	2302      	movs	r3, #2
 8002362:	e04f      	b.n	8002404 <HAL_DMA_Start_IT+0xc4>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	2101      	movs	r1, #1
 800236a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	@ 0x21
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d13a      	bne.n	80023ee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2221      	movs	r2, #33	@ 0x21
 800237c:	2102      	movs	r1, #2
 800237e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	438a      	bics	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f91c 	bl	80025da <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	210e      	movs	r1, #14
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e00f      	b.n	80023dc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	210a      	movs	r1, #10
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2104      	movs	r1, #4
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e007      	b.n	80023fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023f6:	2317      	movs	r3, #23
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b006      	add	sp, #24
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	210f      	movs	r1, #15
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2221      	movs	r2, #33	@ 0x21
 8002420:	5c9b      	ldrb	r3, [r3, r2]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d006      	beq.n	8002436 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2204      	movs	r2, #4
 800242c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e028      	b.n	8002488 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	210e      	movs	r1, #14
 8002442:	438a      	bics	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245e:	2101      	movs	r1, #1
 8002460:	4091      	lsls	r1, r2
 8002462:	000a      	movs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2221      	movs	r2, #33	@ 0x21
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	0010      	movs	r0, r2
 8002486:	4798      	blx	r3
    }
  }
  return status;
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	2204      	movs	r2, #4
 80024b4:	409a      	lsls	r2, r3
 80024b6:	0013      	movs	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	d024      	beq.n	8002508 <HAL_DMA_IRQHandler+0x72>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d020      	beq.n	8002508 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2220      	movs	r2, #32
 80024ce:	4013      	ands	r3, r2
 80024d0:	d107      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2104      	movs	r1, #4
 80024de:	438a      	bics	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ea:	2104      	movs	r1, #4
 80024ec:	4091      	lsls	r1, r2
 80024ee:	000a      	movs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <HAL_DMA_IRQHandler+0x66>
 80024fa:	e06a      	b.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	0010      	movs	r0, r2
 8002504:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002506:	e064      	b.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	2202      	movs	r2, #2
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	d02b      	beq.n	8002570 <HAL_DMA_IRQHandler+0xda>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d027      	beq.n	8002570 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	4013      	ands	r3, r2
 800252a:	d10b      	bne.n	8002544 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	210a      	movs	r1, #10
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2221      	movs	r2, #33	@ 0x21
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	2102      	movs	r1, #2
 800254e:	4091      	lsls	r1, r2
 8002550:	000a      	movs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d036      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	0010      	movs	r0, r2
 800256c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800256e:	e030      	b.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	2208      	movs	r2, #8
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	d028      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2208      	movs	r2, #8
 8002584:	4013      	ands	r3, r2
 8002586:	d024      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	210e      	movs	r1, #14
 8002594:	438a      	bics	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	2101      	movs	r1, #1
 80025a2:	4091      	lsls	r1, r2
 80025a4:	000a      	movs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2221      	movs	r2, #33	@ 0x21
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	0010      	movs	r0, r2
 80025ce:	4798      	blx	r3
    }
  }
}
 80025d0:	e7ff      	b.n	80025d2 <HAL_DMA_IRQHandler+0x13c>
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	2101      	movs	r1, #1
 80025f2:	4091      	lsls	r1, r2
 80025f4:	000a      	movs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b10      	cmp	r3, #16
 8002606:	d108      	bne.n	800261a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002618:	e007      	b.n	800262a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	60da      	str	r2, [r3, #12]
}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <DMA_CalcBaseAndBitshift+0x30>)
 8002642:	4694      	mov	ip, r2
 8002644:	4463      	add	r3, ip
 8002646:	2114      	movs	r1, #20
 8002648:	0018      	movs	r0, r3
 800264a:	f7fd fd5d 	bl	8000108 <__udivsi3>
 800264e:	0003      	movs	r3, r0
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a03      	ldr	r2, [pc, #12]	@ (8002668 <DMA_CalcBaseAndBitshift+0x34>)
 800265a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	bffdfff8 	.word	0xbffdfff8
 8002668:	40020000 	.word	0x40020000

0800266c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603a      	str	r2, [r7, #0]
 8002678:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800267a:	2317      	movs	r3, #23
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002682:	2316      	movs	r3, #22
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800268a:	2315      	movs	r3, #21
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <HAL_FLASH_Program+0x120>)
 8002694:	7e1b      	ldrb	r3, [r3, #24]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_FLASH_Program+0x32>
 800269a:	2302      	movs	r3, #2
 800269c:	e072      	b.n	8002784 <HAL_FLASH_Program+0x118>
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_FLASH_Program+0x120>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026a4:	2317      	movs	r3, #23
 80026a6:	18fe      	adds	r6, r7, r3
 80026a8:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_FLASH_Program+0x124>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f8c4 	bl	8002838 <FLASH_WaitForLastOperation>
 80026b0:	0003      	movs	r3, r0
 80026b2:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80026b4:	2317      	movs	r3, #23
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d15c      	bne.n	8002778 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d104      	bne.n	80026ce <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80026c4:	2315      	movs	r3, #21
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e00b      	b.n	80026e6 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d104      	bne.n	80026de <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80026d4:	2315      	movs	r3, #21
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e003      	b.n	80026e6 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80026de:	2315      	movs	r3, #21
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2204      	movs	r2, #4
 80026e4:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80026e6:	2316      	movs	r3, #22
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e039      	b.n	8002764 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026f0:	2116      	movs	r1, #22
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	005a      	lsls	r2, r3, #1
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	18d0      	adds	r0, r2, r3
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	001a      	movs	r2, r3
 8002704:	3a20      	subs	r2, #32
 8002706:	2a00      	cmp	r2, #0
 8002708:	db03      	blt.n	8002712 <HAL_FLASH_Program+0xa6>
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	40d1      	lsrs	r1, r2
 800270e:	000c      	movs	r4, r1
 8002710:	e008      	b.n	8002724 <HAL_FLASH_Program+0xb8>
 8002712:	2220      	movs	r2, #32
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4091      	lsls	r1, r2
 800271a:	000a      	movs	r2, r1
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	40d9      	lsrs	r1, r3
 8002720:	000c      	movs	r4, r1
 8002722:	4314      	orrs	r4, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	40da      	lsrs	r2, r3
 8002728:	0015      	movs	r5, r2
 800272a:	b2a3      	uxth	r3, r4
 800272c:	0019      	movs	r1, r3
 800272e:	f000 f867 	bl	8002800 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002732:	2317      	movs	r3, #23
 8002734:	18fe      	adds	r6, r7, r3
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_FLASH_Program+0x124>)
 8002738:	0018      	movs	r0, r3
 800273a:	f000 f87d 	bl	8002838 <FLASH_WaitForLastOperation>
 800273e:	0003      	movs	r3, r0
 8002740:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <HAL_FLASH_Program+0x128>)
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_FLASH_Program+0x128>)
 8002748:	2101      	movs	r1, #1
 800274a:	438a      	bics	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800274e:	2317      	movs	r3, #23
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10e      	bne.n	8002776 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8002758:	2116      	movs	r1, #22
 800275a:	187b      	adds	r3, r7, r1
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	187b      	adds	r3, r7, r1
 8002760:	3201      	adds	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	2316      	movs	r3, #22
 8002766:	18fa      	adds	r2, r7, r3
 8002768:	2315      	movs	r3, #21
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3bd      	bcc.n	80026f0 <HAL_FLASH_Program+0x84>
 8002774:	e000      	b.n	8002778 <HAL_FLASH_Program+0x10c>
      {
        break;
 8002776:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <HAL_FLASH_Program+0x120>)
 800277a:	2200      	movs	r2, #0
 800277c:	761a      	strb	r2, [r3, #24]

  return status;
 800277e:	2317      	movs	r3, #23
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b007      	add	sp, #28
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278c:	20000928 	.word	0x20000928
 8002790:	0000c350 	.word	0x0000c350
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <HAL_FLASH_Unlock+0x40>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	4013      	ands	r3, r2
 80027ac:	d00d      	beq.n	80027ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_FLASH_Unlock+0x40>)
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <HAL_FLASH_Unlock+0x44>)
 80027b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_FLASH_Unlock+0x40>)
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <HAL_FLASH_Unlock+0x48>)
 80027b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027ba:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_FLASH_Unlock+0x40>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	4013      	ands	r3, r2
 80027c2:	d002      	beq.n	80027ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	40022000 	.word	0x40022000
 80027dc:	45670123 	.word	0x45670123
 80027e0:	cdef89ab 	.word	0xcdef89ab

080027e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <HAL_FLASH_Lock+0x18>)
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <HAL_FLASH_Lock+0x18>)
 80027ee:	2180      	movs	r1, #128	@ 0x80
 80027f0:	430a      	orrs	r2, r1
 80027f2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40022000 	.word	0x40022000

08002800 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	000a      	movs	r2, r1
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <FLASH_Program_HalfWord+0x30>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <FLASH_Program_HalfWord+0x34>)
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <FLASH_Program_HalfWord+0x34>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1cba      	adds	r2, r7, #2
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	801a      	strh	r2, [r3, #0]
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000928 	.word	0x20000928
 8002834:	40022000 	.word	0x40022000

08002838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fc4e 	bl	80020e0 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002848:	e00f      	b.n	800286a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3301      	adds	r3, #1
 800284e:	d00c      	beq.n	800286a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <FLASH_WaitForLastOperation+0x2e>
 8002856:	f7ff fc43 	bl	80020e0 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d201      	bcs.n	800286a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e01f      	b.n	80028aa <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800286a:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	2b01      	cmp	r3, #1
 8002874:	d0e9      	beq.n	800284a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	4013      	ands	r3, r2
 800287e:	2b20      	cmp	r3, #32
 8002880:	d102      	bne.n	8002888 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002884:	2220      	movs	r2, #32
 8002886:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	4013      	ands	r3, r2
 8002890:	2b10      	cmp	r3, #16
 8002892:	d005      	beq.n	80028a0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <FLASH_WaitForLastOperation+0x7c>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800289c:	2b04      	cmp	r3, #4
 800289e:	d103      	bne.n	80028a8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028a0:	f000 f80a 	bl	80028b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	40022000 	.word	0x40022000

080028b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <FLASH_SetErrorCode+0x58>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2210      	movs	r2, #16
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d109      	bne.n	80028e2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <FLASH_SetErrorCode+0x5c>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2202      	movs	r2, #2
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <FLASH_SetErrorCode+0x5c>)
 80028d8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2210      	movs	r2, #16
 80028de:	4313      	orrs	r3, r2
 80028e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <FLASH_SetErrorCode+0x58>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d109      	bne.n	8002902 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <FLASH_SetErrorCode+0x5c>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	2201      	movs	r2, #1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <FLASH_SetErrorCode+0x5c>)
 80028f8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4313      	orrs	r3, r2
 8002900:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002902:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <FLASH_SetErrorCode+0x58>)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}  
 8002908:	46c0      	nop			@ (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40022000 	.word	0x40022000
 8002914:	20000928 	.word	0x20000928

08002918 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002922:	230f      	movs	r3, #15
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800292e:	4b32      	ldr	r3, [pc, #200]	@ (80029f8 <HAL_FLASHEx_Erase+0xe0>)
 8002930:	7e1b      	ldrb	r3, [r3, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_FLASHEx_Erase+0x22>
 8002936:	2302      	movs	r3, #2
 8002938:	e05a      	b.n	80029f0 <HAL_FLASHEx_Erase+0xd8>
 800293a:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <HAL_FLASHEx_Erase+0xe0>)
 800293c:	2201      	movs	r2, #1
 800293e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d116      	bne.n	8002976 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002948:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <HAL_FLASHEx_Erase+0xe4>)
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff ff74 	bl	8002838 <FLASH_WaitForLastOperation>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d147      	bne.n	80029e4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002954:	f000 f856 	bl	8002a04 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002958:	230f      	movs	r3, #15
 800295a:	18fc      	adds	r4, r7, r3
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_FLASHEx_Erase+0xe4>)
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff6a 	bl	8002838 <FLASH_WaitForLastOperation>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002968:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_FLASHEx_Erase+0xe8>)
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_FLASHEx_Erase+0xe8>)
 800296e:	2104      	movs	r1, #4
 8002970:	438a      	bics	r2, r1
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	e036      	b.n	80029e4 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <HAL_FLASHEx_Erase+0xe4>)
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <FLASH_WaitForLastOperation>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d130      	bne.n	80029e4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	4252      	negs	r2, r2
 8002988:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	e01f      	b.n	80029d2 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 f84d 	bl	8002a34 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800299a:	250f      	movs	r5, #15
 800299c:	197c      	adds	r4, r7, r5
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <HAL_FLASHEx_Erase+0xe4>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff ff49 	bl	8002838 <FLASH_WaitForLastOperation>
 80029a6:	0003      	movs	r3, r0
 80029a8:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_FLASHEx_Erase+0xe8>)
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_FLASHEx_Erase+0xe8>)
 80029b0:	2102      	movs	r1, #2
 80029b2:	438a      	bics	r2, r1
 80029b4:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80029b6:	197b      	adds	r3, r7, r5
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	601a      	str	r2, [r3, #0]
            break;
 80029c4:	e00e      	b.n	80029e4 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	4694      	mov	ip, r2
 80029ce:	4463      	add	r3, ip
 80029d0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	02da      	lsls	r2, r3, #11
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	18d3      	adds	r3, r2, r3
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3d6      	bcc.n	8002992 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <HAL_FLASHEx_Erase+0xe0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	761a      	strb	r2, [r3, #24]

  return status;
 80029ea:	230f      	movs	r3, #15
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	781b      	ldrb	r3, [r3, #0]
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bdb0      	pop	{r4, r5, r7, pc}
 80029f8:	20000928 	.word	0x20000928
 80029fc:	0000c350 	.word	0x0000c350
 8002a00:	40022000 	.word	0x40022000

08002a04 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a08:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <FLASH_MassErase+0x28>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <FLASH_MassErase+0x2c>)
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <FLASH_MassErase+0x2c>)
 8002a14:	2104      	movs	r1, #4
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <FLASH_MassErase+0x2c>)
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <FLASH_MassErase+0x2c>)
 8002a20:	2140      	movs	r1, #64	@ 0x40
 8002a22:	430a      	orrs	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000928 	.word	0x20000928
 8002a30:	40022000 	.word	0x40022000

08002a34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <FLASH_PageErase+0x34>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <FLASH_PageErase+0x38>)
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <FLASH_PageErase+0x38>)
 8002a48:	2102      	movs	r1, #2
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a4e:	4b07      	ldr	r3, [pc, #28]	@ (8002a6c <FLASH_PageErase+0x38>)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <FLASH_PageErase+0x38>)
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <FLASH_PageErase+0x38>)
 8002a5a:	2140      	movs	r1, #64	@ 0x40
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000928 	.word	0x20000928
 8002a6c:	40022000 	.word	0x40022000

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7e:	e155      	b.n	8002d2c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4091      	lsls	r1, r2
 8002a8a:	000a      	movs	r2, r1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d100      	bne.n	8002a98 <HAL_GPIO_Init+0x28>
 8002a96:	e146      	b.n	8002d26 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d005      	beq.n	8002ab0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d130      	bne.n	8002b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	409a      	lsls	r2, r3
 8002abe:	0013      	movs	r3, r2
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	0013      	movs	r3, r2
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	43da      	mvns	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	2201      	movs	r2, #1
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
 8002b04:	0013      	movs	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d017      	beq.n	8002b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d123      	bne.n	8002ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	58d3      	ldr	r3, [r2, r3]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2107      	movs	r1, #7
 8002b86:	400b      	ands	r3, r1
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	6939      	ldr	r1, [r7, #16]
 8002ba0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	23c0      	movs	r3, #192	@ 0xc0
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d100      	bne.n	8002be4 <HAL_GPIO_Init+0x174>
 8002be2:	e0a0      	b.n	8002d26 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be4:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <HAL_GPIO_Init+0x2d4>)
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_GPIO_Init+0x2d4>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	430a      	orrs	r2, r1
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <HAL_GPIO_Init+0x2d4>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bfc:	4a52      	ldr	r2, [pc, #328]	@ (8002d48 <HAL_GPIO_Init+0x2d8>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	589b      	ldr	r3, [r3, r2]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	409a      	lsls	r2, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	2390      	movs	r3, #144	@ 0x90
 8002c24:	05db      	lsls	r3, r3, #23
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x1ee>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a47      	ldr	r2, [pc, #284]	@ (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1ea>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a46      	ldr	r2, [pc, #280]	@ (8002d50 <HAL_GPIO_Init+0x2e0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1e6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	@ (8002d54 <HAL_GPIO_Init+0x2e4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1e2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a44      	ldr	r2, [pc, #272]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1de>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e008      	b.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c4e:	2305      	movs	r3, #5
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	2103      	movs	r1, #3
 8002c64:	400a      	ands	r2, r1
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c70:	4935      	ldr	r1, [pc, #212]	@ (8002d48 <HAL_GPIO_Init+0x2d8>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b37      	ldr	r3, [pc, #220]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	035b      	lsls	r3, r3, #13
 8002c96:	4013      	ands	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	039b      	lsls	r3, r3, #14
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002cd2:	4b22      	ldr	r3, [pc, #136]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	2380      	movs	r3, #128	@ 0x80
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	4013      	ands	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	4013      	ands	r3, r2
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d20:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	1e13      	subs	r3, r2, #0
 8002d36:	d000      	beq.n	8002d3a <HAL_GPIO_Init+0x2ca>
 8002d38:	e6a2      	b.n	8002a80 <HAL_GPIO_Init+0x10>
  } 
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b006      	add	sp, #24
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	48000800 	.word	0x48000800
 8002d54:	48000c00 	.word	0x48000c00
 8002d58:	48001000 	.word	0x48001000
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	000a      	movs	r2, r1
 8002d6a:	1cbb      	adds	r3, r7, #2
 8002d6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	1cba      	adds	r2, r7, #2
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	4013      	ands	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
  }
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	0008      	movs	r0, r1
 8002da4:	0011      	movs	r1, r2
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	1c02      	adds	r2, r0, #0
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	1c7b      	adds	r3, r7, #1
 8002dae:	1c0a      	adds	r2, r1, #0
 8002db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db2:	1c7b      	adds	r3, r7, #1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dba:	1cbb      	adds	r3, r7, #2
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc4:	1cbb      	adds	r3, r7, #2
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	0002      	movs	r2, r0
 8002ddc:	1dbb      	adds	r3, r7, #6
 8002dde:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002de0:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	1dba      	adds	r2, r7, #6
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	4013      	ands	r3, r2
 8002dea:	d008      	beq.n	8002dfe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dee:	1dba      	adds	r2, r7, #6
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df4:	1dbb      	adds	r3, r7, #6
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fd ff89 	bl	8000d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e4      	b.n	8002fe8 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a73      	ldr	r2, [pc, #460]	@ (8002ff0 <HAL_PCD_Init+0x1e4>)
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	23a4      	movs	r3, #164	@ 0xa4
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	2100      	movs	r1, #0
 8002e32:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f007 fd92 	bl	800a960 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff0 <HAL_PCD_Init+0x1e4>)
 8002e40:	2103      	movs	r1, #3
 8002e42:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f003 feb1 	bl	8006bb0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	230f      	movs	r3, #15
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e047      	b.n	8002ee8 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e58:	200f      	movs	r0, #15
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	0013      	movs	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	18cb      	adds	r3, r1, r3
 8002e6a:	3311      	adds	r3, #17
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	0013      	movs	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	18cb      	adds	r3, r1, r3
 8002e80:	3310      	adds	r3, #16
 8002e82:	183a      	adds	r2, r7, r0
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	0013      	movs	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	18cb      	adds	r3, r1, r3
 8002e98:	3313      	adds	r3, #19
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	189b      	adds	r3, r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	18cb      	adds	r3, r1, r3
 8002eae:	3320      	adds	r3, #32
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	0013      	movs	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	18cb      	adds	r3, r1, r3
 8002ec4:	3324      	adds	r3, #36	@ 0x24
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eca:	183b      	adds	r3, r7, r0
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	0013      	movs	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	2200      	movs	r2, #0
 8002edc:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	3201      	adds	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	210f      	movs	r1, #15
 8002eee:	187a      	adds	r2, r7, r1
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3b0      	bcc.n	8002e58 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e056      	b.n	8002fac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002efe:	240f      	movs	r4, #15
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	2352      	movs	r3, #82	@ 0x52
 8002f08:	33ff      	adds	r3, #255	@ 0xff
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	189b      	adds	r3, r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	18c3      	adds	r3, r0, r3
 8002f16:	185b      	adds	r3, r3, r1
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	23a8      	movs	r3, #168	@ 0xa8
 8002f24:	0059      	lsls	r1, r3, #1
 8002f26:	0013      	movs	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	189b      	adds	r3, r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	18c3      	adds	r3, r0, r3
 8002f30:	185b      	adds	r3, r3, r1
 8002f32:	193a      	adds	r2, r7, r4
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	2354      	movs	r3, #84	@ 0x54
 8002f40:	33ff      	adds	r3, #255	@ 0xff
 8002f42:	0019      	movs	r1, r3
 8002f44:	0013      	movs	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	18c3      	adds	r3, r0, r3
 8002f4e:	185b      	adds	r3, r3, r1
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	23b0      	movs	r3, #176	@ 0xb0
 8002f5c:	0059      	lsls	r1, r3, #1
 8002f5e:	0013      	movs	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	18c3      	adds	r3, r0, r3
 8002f68:	185b      	adds	r3, r3, r1
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	23b2      	movs	r3, #178	@ 0xb2
 8002f76:	0059      	lsls	r1, r3, #1
 8002f78:	0013      	movs	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	189b      	adds	r3, r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	18c3      	adds	r3, r0, r3
 8002f82:	185b      	adds	r3, r3, r1
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	23b4      	movs	r3, #180	@ 0xb4
 8002f90:	0059      	lsls	r1, r3, #1
 8002f92:	0013      	movs	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	18c3      	adds	r3, r0, r3
 8002f9c:	185b      	adds	r3, r3, r1
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	3201      	adds	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	791b      	ldrb	r3, [r3, #4]
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	18ba      	adds	r2, r7, r2
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3a1      	bcc.n	8002efe <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	f003 fe0e 	bl	8006be4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <HAL_PCD_Init+0x1e4>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7a9b      	ldrb	r3, [r3, #10]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d103      	bne.n	8002fe6 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f001 fd07 	bl	80049f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b005      	add	sp, #20
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	00000291 	.word	0x00000291

08002ff4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	23a4      	movs	r3, #164	@ 0xa4
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	5cd3      	ldrb	r3, [r2, r3]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_PCD_Start+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e014      	b.n	8003036 <HAL_PCD_Start+0x42>
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	23a4      	movs	r3, #164	@ 0xa4
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	2101      	movs	r1, #1
 8003014:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	f003 fdb2 	bl	8006b84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0018      	movs	r0, r3
 8003026:	f005 fda7 	bl	8008b78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	23a4      	movs	r3, #164	@ 0xa4
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	2100      	movs	r1, #0
 8003032:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0018      	movs	r0, r3
 800304e:	f005 fda9 	bl	8008ba4 <USB_ReadInterrupts>
 8003052:	0003      	movs	r3, r0
 8003054:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	4013      	ands	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fb48 	bl	80036f8 <PCD_EP_ISR_Handler>

    return;
 8003068:	e11d      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4013      	ands	r3, r2
 8003072:	d015      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2244      	movs	r2, #68	@ 0x44
 800307a:	5a9b      	ldrh	r3, [r3, r2]
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	498a      	ldr	r1, [pc, #552]	@ (80032ac <HAL_PCD_IRQHandler+0x26c>)
 8003084:	400a      	ands	r2, r1
 8003086:	b291      	uxth	r1, r2
 8003088:	2244      	movs	r2, #68	@ 0x44
 800308a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0018      	movs	r0, r3
 8003090:	f007 fcf1 	bl	800aa76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2100      	movs	r1, #0
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f915 	bl	80032c8 <HAL_PCD_SetAddress>

    return;
 800309e:	e102      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	01db      	lsls	r3, r3, #7
 80030a6:	4013      	ands	r3, r2
 80030a8:	d00c      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2244      	movs	r2, #68	@ 0x44
 80030b0:	5a9b      	ldrh	r3, [r3, r2]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	497d      	ldr	r1, [pc, #500]	@ (80032b0 <HAL_PCD_IRQHandler+0x270>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	b291      	uxth	r1, r2
 80030be:	2244      	movs	r2, #68	@ 0x44
 80030c0:	5299      	strh	r1, [r3, r2]

    return;
 80030c2:	e0f0      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00c      	beq.n	80030e8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2244      	movs	r2, #68	@ 0x44
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4975      	ldr	r1, [pc, #468]	@ (80032b4 <HAL_PCD_IRQHandler+0x274>)
 80030de:	400a      	ands	r2, r1
 80030e0:	b291      	uxth	r1, r2
 80030e2:	2244      	movs	r2, #68	@ 0x44
 80030e4:	5299      	strh	r1, [r3, r2]

    return;
 80030e6:	e0de      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	015b      	lsls	r3, r3, #5
 80030ee:	4013      	ands	r3, r2
 80030f0:	d038      	beq.n	8003164 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	5a9b      	ldrh	r3, [r3, r2]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2104      	movs	r1, #4
 8003102:	438a      	bics	r2, r1
 8003104:	b291      	uxth	r1, r2
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	5a9b      	ldrh	r3, [r3, r2]
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2108      	movs	r1, #8
 800311a:	438a      	bics	r2, r1
 800311c:	b291      	uxth	r1, r2
 800311e:	2240      	movs	r2, #64	@ 0x40
 8003120:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	23b2      	movs	r3, #178	@ 0xb2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d109      	bne.n	8003142 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	23b2      	movs	r3, #178	@ 0xb2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	2100      	movs	r1, #0
 8003136:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2100      	movs	r1, #0
 800313c:	0018      	movs	r0, r3
 800313e:	f001 fc83 	bl	8004a48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f007 fcd7 	bl	800aaf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2244      	movs	r2, #68	@ 0x44
 8003150:	5a9b      	ldrh	r3, [r3, r2]
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4957      	ldr	r1, [pc, #348]	@ (80032b8 <HAL_PCD_IRQHandler+0x278>)
 800315a:	400a      	ands	r2, r1
 800315c:	b291      	uxth	r1, r2
 800315e:	2244      	movs	r2, #68	@ 0x44
 8003160:	5299      	strh	r1, [r3, r2]

    return;
 8003162:	e0a0      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4013      	ands	r3, r2
 800316c:	d028      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	5a9b      	ldrh	r3, [r3, r2]
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2108      	movs	r1, #8
 800317e:	430a      	orrs	r2, r1
 8003180:	b291      	uxth	r1, r2
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2244      	movs	r2, #68	@ 0x44
 800318c:	5a9b      	ldrh	r3, [r3, r2]
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4949      	ldr	r1, [pc, #292]	@ (80032bc <HAL_PCD_IRQHandler+0x27c>)
 8003196:	400a      	ands	r2, r1
 8003198:	b291      	uxth	r1, r2
 800319a:	2244      	movs	r2, #68	@ 0x44
 800319c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	5a9b      	ldrh	r3, [r3, r2]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2104      	movs	r1, #4
 80031ae:	430a      	orrs	r2, r1
 80031b0:	b291      	uxth	r1, r2
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f007 fc81 	bl	800aac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031be:	e072      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	4013      	ands	r3, r2
 80031c6:	d046      	beq.n	8003256 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2244      	movs	r2, #68	@ 0x44
 80031ce:	5a9b      	ldrh	r3, [r3, r2]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2180      	movs	r1, #128	@ 0x80
 80031d8:	438a      	bics	r2, r1
 80031da:	b291      	uxth	r1, r2
 80031dc:	2244      	movs	r2, #68	@ 0x44
 80031de:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	23b2      	movs	r3, #178	@ 0xb2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d12f      	bne.n	800324c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2240      	movs	r2, #64	@ 0x40
 80031f2:	5a9b      	ldrh	r3, [r3, r2]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2104      	movs	r1, #4
 80031fc:	430a      	orrs	r2, r1
 80031fe:	b291      	uxth	r1, r2
 8003200:	2240      	movs	r2, #64	@ 0x40
 8003202:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2240      	movs	r2, #64	@ 0x40
 800320a:	5a9b      	ldrh	r3, [r3, r2]
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2108      	movs	r1, #8
 8003214:	430a      	orrs	r2, r1
 8003216:	b291      	uxth	r1, r2
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	23b2      	movs	r3, #178	@ 0xb2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	2101      	movs	r1, #1
 8003224:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2254      	movs	r2, #84	@ 0x54
 800322c:	5a9b      	ldrh	r3, [r3, r2]
 800322e:	b29b      	uxth	r3, r3
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	223c      	movs	r2, #60	@ 0x3c
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	23b3      	movs	r3, #179	@ 0xb3
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2101      	movs	r1, #1
 8003244:	0018      	movs	r0, r3
 8003246:	f001 fbff 	bl	8004a48 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800324a:	e02c      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f007 fc36 	bl	800aac0 <HAL_PCD_SuspendCallback>
    return;
 8003254:	e027      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d010      	beq.n	8003282 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2244      	movs	r2, #68	@ 0x44
 8003266:	5a9b      	ldrh	r3, [r3, r2]
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4914      	ldr	r1, [pc, #80]	@ (80032c0 <HAL_PCD_IRQHandler+0x280>)
 8003270:	400a      	ands	r2, r1
 8003272:	b291      	uxth	r1, r2
 8003274:	2244      	movs	r2, #68	@ 0x44
 8003276:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f007 fbec 	bl	800aa58 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003280:	e011      	b.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d00c      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2244      	movs	r2, #68	@ 0x44
 8003292:	5a9b      	ldrh	r3, [r3, r2]
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	490a      	ldr	r1, [pc, #40]	@ (80032c4 <HAL_PCD_IRQHandler+0x284>)
 800329c:	400a      	ands	r2, r1
 800329e:	b291      	uxth	r1, r2
 80032a0:	2244      	movs	r2, #68	@ 0x44
 80032a2:	5299      	strh	r1, [r3, r2]

    return;
 80032a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b004      	add	sp, #16
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	fffffbff 	.word	0xfffffbff
 80032b0:	ffffbfff 	.word	0xffffbfff
 80032b4:	ffffdfff 	.word	0xffffdfff
 80032b8:	ffffefff 	.word	0xffffefff
 80032bc:	fffff7ff 	.word	0xfffff7ff
 80032c0:	fffffdff 	.word	0xfffffdff
 80032c4:	fffffeff 	.word	0xfffffeff

080032c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	000a      	movs	r2, r1
 80032d2:	1cfb      	adds	r3, r7, #3
 80032d4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	23a4      	movs	r3, #164	@ 0xa4
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_SetAddress+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e016      	b.n	8003314 <HAL_PCD_SetAddress+0x4c>
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	23a4      	movs	r3, #164	@ 0xa4
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	2101      	movs	r1, #1
 80032ee:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1cfa      	adds	r2, r7, #3
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	1cfb      	adds	r3, r7, #3
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	0019      	movs	r1, r3
 8003302:	0010      	movs	r0, r2
 8003304:	f005 fc24 	bl	8008b50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	23a4      	movs	r3, #164	@ 0xa4
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	2100      	movs	r1, #0
 8003310:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	000c      	movs	r4, r1
 8003326:	0010      	movs	r0, r2
 8003328:	0019      	movs	r1, r3
 800332a:	1cfb      	adds	r3, r7, #3
 800332c:	1c22      	adds	r2, r4, #0
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	003b      	movs	r3, r7
 8003332:	1c02      	adds	r2, r0, #0
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	1cbb      	adds	r3, r7, #2
 8003338:	1c0a      	adds	r2, r1, #0
 800333a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800333c:	230b      	movs	r3, #11
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003344:	1cfb      	adds	r3, r7, #3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b25b      	sxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	da0f      	bge.n	800336e <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334e:	1cfb      	adds	r3, r7, #3
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2207      	movs	r2, #7
 8003354:	401a      	ands	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	189b      	adds	r3, r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	3310      	adds	r3, #16
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	705a      	strb	r2, [r3, #1]
 800336c:	e00f      	b.n	800338e <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2207      	movs	r2, #7
 8003374:	401a      	ands	r2, r3
 8003376:	0013      	movs	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	189b      	adds	r3, r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3351      	adds	r3, #81	@ 0x51
 8003380:	33ff      	adds	r3, #255	@ 0xff
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800338e:	1cfb      	adds	r3, r7, #3
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2207      	movs	r2, #7
 8003394:	4013      	ands	r3, r2
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800339c:	003b      	movs	r3, r7
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1cba      	adds	r2, r7, #2
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033ac:	1cbb      	adds	r3, r7, #2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d102      	bne.n	80033ba <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	23a4      	movs	r3, #164	@ 0xa4
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_PCD_EP_Open+0xae>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e013      	b.n	80033f2 <HAL_PCD_EP_Open+0xd6>
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	23a4      	movs	r3, #164	@ 0xa4
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	2101      	movs	r1, #1
 80033d2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f003 fc1d 	bl	8006c1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	23a4      	movs	r3, #164	@ 0xa4
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	2100      	movs	r1, #0
 80033ea:	54d1      	strb	r1, [r2, r3]

  return ret;
 80033ec:	230b      	movs	r3, #11
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b005      	add	sp, #20
 80033f8:	bd90      	pop	{r4, r7, pc}

080033fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	000a      	movs	r2, r1
 8003404:	1cfb      	adds	r3, r7, #3
 8003406:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003408:	1cfb      	adds	r3, r7, #3
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	da0f      	bge.n	8003432 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	1cfb      	adds	r3, r7, #3
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2207      	movs	r2, #7
 8003418:	401a      	ands	r2, r3
 800341a:	0013      	movs	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	189b      	adds	r3, r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3310      	adds	r3, #16
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
 8003430:	e00f      	b.n	8003452 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003432:	1cfb      	adds	r3, r7, #3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2207      	movs	r2, #7
 8003438:	401a      	ands	r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	189b      	adds	r3, r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	3351      	adds	r3, #81	@ 0x51
 8003444:	33ff      	adds	r3, #255	@ 0xff
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003452:	1cfb      	adds	r3, r7, #3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2207      	movs	r2, #7
 8003458:	4013      	ands	r3, r2
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	23a4      	movs	r3, #164	@ 0xa4
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_EP_Close+0x76>
 800346c:	2302      	movs	r3, #2
 800346e:	e011      	b.n	8003494 <HAL_PCD_EP_Close+0x9a>
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	23a4      	movs	r3, #164	@ 0xa4
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	2101      	movs	r1, #1
 8003478:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	0011      	movs	r1, r2
 8003482:	0018      	movs	r0, r3
 8003484:	f003 ff72 	bl	800736c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	23a4      	movs	r3, #164	@ 0xa4
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	2100      	movs	r1, #0
 8003490:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	200b      	movs	r0, #11
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	1c0a      	adds	r2, r1, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	0001      	movs	r1, r0
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2207      	movs	r2, #7
 80034b8:	401a      	ands	r2, r3
 80034ba:	0013      	movs	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	3351      	adds	r3, #81	@ 0x51
 80034c4:	33ff      	adds	r3, #255	@ 0xff
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	18d3      	adds	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2207      	movs	r2, #7
 80034ea:	4013      	ands	r3, r2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	0011      	movs	r1, r2
 80034fa:	0018      	movs	r0, r3
 80034fc:	f004 f8f6 	bl	80076ec <USB_EPStartXfer>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b006      	add	sp, #24
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	200b      	movs	r0, #11
 8003518:	183b      	adds	r3, r7, r0
 800351a:	1c0a      	adds	r2, r1, #0
 800351c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351e:	183b      	adds	r3, r7, r0
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2207      	movs	r2, #7
 8003524:	401a      	ands	r2, r3
 8003526:	0013      	movs	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	189b      	adds	r3, r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	3310      	adds	r3, #16
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	18d3      	adds	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2224      	movs	r2, #36	@ 0x24
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	183b      	adds	r3, r7, r0
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2207      	movs	r2, #7
 8003562:	4013      	ands	r3, r2
 8003564:	b2da      	uxtb	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f004 f8ba 	bl	80076ec <USB_EPStartXfer>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b006      	add	sp, #24
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	000a      	movs	r2, r1
 800358c:	1cfb      	adds	r3, r7, #3
 800358e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003590:	1cfb      	adds	r3, r7, #3
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2207      	movs	r2, #7
 8003596:	4013      	ands	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	7912      	ldrb	r2, [r2, #4]
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e046      	b.n	8003632 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a4:	1cfb      	adds	r3, r7, #3
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0f      	bge.n	80035ce <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	1cfb      	adds	r3, r7, #3
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2207      	movs	r2, #7
 80035b4:	401a      	ands	r2, r3
 80035b6:	0013      	movs	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	3310      	adds	r3, #16
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	18d3      	adds	r3, r2, r3
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	705a      	strb	r2, [r3, #1]
 80035cc:	e00d      	b.n	80035ea <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ce:	1cfb      	adds	r3, r7, #3
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	0013      	movs	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	3351      	adds	r3, #81	@ 0x51
 80035dc:	33ff      	adds	r3, #255	@ 0xff
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f0:	1cfb      	adds	r3, r7, #3
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	23a4      	movs	r3, #164	@ 0xa4
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_PCD_EP_SetStall+0x8c>
 800360a:	2302      	movs	r3, #2
 800360c:	e011      	b.n	8003632 <HAL_PCD_EP_SetStall+0xb0>
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	23a4      	movs	r3, #164	@ 0xa4
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	2101      	movs	r1, #1
 8003616:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f005 f993 	bl	800894c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	23a4      	movs	r3, #164	@ 0xa4
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	2100      	movs	r1, #0
 800362e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	000a      	movs	r2, r1
 8003644:	1cfb      	adds	r3, r7, #3
 8003646:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003648:	1cfb      	adds	r3, r7, #3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	220f      	movs	r2, #15
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	7912      	ldrb	r2, [r2, #4]
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e048      	b.n	80036ee <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800365c:	1cfb      	adds	r3, r7, #3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b25b      	sxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	da0f      	bge.n	8003686 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003666:	1cfb      	adds	r3, r7, #3
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2207      	movs	r2, #7
 800366c:	401a      	ands	r2, r3
 800366e:	0013      	movs	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	189b      	adds	r3, r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	3310      	adds	r3, #16
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	705a      	strb	r2, [r3, #1]
 8003684:	e00f      	b.n	80036a6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003686:	1cfb      	adds	r3, r7, #3
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2207      	movs	r2, #7
 800368c:	401a      	ands	r2, r3
 800368e:	0013      	movs	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	189b      	adds	r3, r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	3351      	adds	r3, #81	@ 0x51
 8003698:	33ff      	adds	r3, #255	@ 0xff
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ac:	1cfb      	adds	r3, r7, #3
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2207      	movs	r2, #7
 80036b2:	4013      	ands	r3, r2
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	23a4      	movs	r3, #164	@ 0xa4
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_PCD_EP_ClrStall+0x90>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e011      	b.n	80036ee <HAL_PCD_EP_ClrStall+0xb4>
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	23a4      	movs	r3, #164	@ 0xa4
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	2101      	movs	r1, #1
 80036d2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f005 f985 	bl	80089ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	23a4      	movs	r3, #164	@ 0xa4
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	2100      	movs	r1, #0
 80036ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b096      	sub	sp, #88	@ 0x58
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003700:	f000 fbea 	bl	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2048      	movs	r0, #72	@ 0x48
 800370a:	183b      	adds	r3, r7, r0
 800370c:	2144      	movs	r1, #68	@ 0x44
 800370e:	5a52      	ldrh	r2, [r2, r1]
 8003710:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	244f      	movs	r4, #79	@ 0x4f
 800371a:	193b      	adds	r3, r7, r4
 800371c:	210f      	movs	r1, #15
 800371e:	400a      	ands	r2, r1
 8003720:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003722:	193b      	adds	r3, r7, r4
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d000      	beq.n	800372c <PCD_EP_ISR_Handler+0x34>
 800372a:	e18d      	b.n	8003a48 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800372c:	183b      	adds	r3, r7, r0
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	4013      	ands	r3, r2
 8003734:	d152      	bne.n	80037dc <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	b29a      	uxth	r2, r3
 800373e:	200e      	movs	r0, #14
 8003740:	183b      	adds	r3, r7, r0
 8003742:	49ba      	ldr	r1, [pc, #744]	@ (8003a2c <PCD_EP_ISR_Handler+0x334>)
 8003744:	400a      	ands	r2, r1
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	183a      	adds	r2, r7, r0
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	49b7      	ldr	r1, [pc, #732]	@ (8003a30 <PCD_EP_ISR_Handler+0x338>)
 8003752:	430a      	orrs	r2, r1
 8003754:	b292      	uxth	r2, r2
 8003756:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3310      	adds	r3, #16
 800375c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2250      	movs	r2, #80	@ 0x50
 8003764:	5a9b      	ldrh	r3, [r3, r2]
 8003766:	b29b      	uxth	r3, r3
 8003768:	001a      	movs	r2, r3
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	4aae      	ldr	r2, [pc, #696]	@ (8003a34 <PCD_EP_ISR_Handler+0x33c>)
 800377a:	4694      	mov	ip, r2
 800377c:	4463      	add	r3, ip
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	059b      	lsls	r3, r3, #22
 8003782:	0d9a      	lsrs	r2, r3, #22
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2100      	movs	r1, #0
 800379a:	0018      	movs	r0, r3
 800379c:	f007 f93e 	bl	800aa1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7b1b      	ldrb	r3, [r3, #12]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <PCD_EP_ISR_Handler+0xb6>
 80037aa:	f000 fb95 	bl	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <PCD_EP_ISR_Handler+0xc2>
 80037b6:	f000 fb8f 	bl	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7b1b      	ldrb	r3, [r3, #12]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2280      	movs	r2, #128	@ 0x80
 80037c2:	4252      	negs	r2, r2
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0011      	movs	r1, r2
 80037ce:	224c      	movs	r2, #76	@ 0x4c
 80037d0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	731a      	strb	r2, [r3, #12]
 80037d8:	f000 fb7e 	bl	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3351      	adds	r3, #81	@ 0x51
 80037e0:	33ff      	adds	r3, #255	@ 0xff
 80037e2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	214c      	movs	r1, #76	@ 0x4c
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4013      	ands	r3, r2
 80037fa:	d037      	beq.n	800386c <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2250      	movs	r2, #80	@ 0x50
 8003802:	5a9b      	ldrh	r3, [r3, r2]
 8003804:	b29b      	uxth	r3, r3
 8003806:	001a      	movs	r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	18d2      	adds	r2, r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	4a88      	ldr	r2, [pc, #544]	@ (8003a38 <PCD_EP_ISR_Handler+0x340>)
 8003818:	4694      	mov	ip, r2
 800381a:	4463      	add	r3, ip
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	059b      	lsls	r3, r3, #22
 8003820:	0d9a      	lsrs	r2, r3, #22
 8003822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003824:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	22a6      	movs	r2, #166	@ 0xa6
 800382e:	0092      	lsls	r2, r2, #2
 8003830:	1899      	adds	r1, r3, r2
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800383a:	b29b      	uxth	r3, r3
 800383c:	f005 fa0a 	bl	8008c54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29a      	uxth	r2, r3
 8003848:	2010      	movs	r0, #16
 800384a:	183b      	adds	r3, r7, r0
 800384c:	497b      	ldr	r1, [pc, #492]	@ (8003a3c <PCD_EP_ISR_Handler+0x344>)
 800384e:	400a      	ands	r2, r1
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	183a      	adds	r2, r7, r0
 8003858:	8812      	ldrh	r2, [r2, #0]
 800385a:	2180      	movs	r1, #128	@ 0x80
 800385c:	430a      	orrs	r2, r1
 800385e:	b292      	uxth	r2, r2
 8003860:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f007 f8a3 	bl	800a9b0 <HAL_PCD_SetupStageCallback>
 800386a:	e335      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800386c:	234c      	movs	r3, #76	@ 0x4c
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2200      	movs	r2, #0
 8003872:	5e9b      	ldrsh	r3, [r3, r2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db00      	blt.n	800387a <PCD_EP_ISR_Handler+0x182>
 8003878:	e32e      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29a      	uxth	r2, r3
 8003882:	201e      	movs	r0, #30
 8003884:	183b      	adds	r3, r7, r0
 8003886:	496d      	ldr	r1, [pc, #436]	@ (8003a3c <PCD_EP_ISR_Handler+0x344>)
 8003888:	400a      	ands	r2, r1
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	183a      	adds	r2, r7, r0
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	430a      	orrs	r2, r1
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2250      	movs	r2, #80	@ 0x50
 80038a2:	5a9b      	ldrh	r3, [r3, r2]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	001a      	movs	r2, r3
 80038a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	18d2      	adds	r2, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	18d3      	adds	r3, r2, r3
 80038b6:	4a60      	ldr	r2, [pc, #384]	@ (8003a38 <PCD_EP_ISR_Handler+0x340>)
 80038b8:	4694      	mov	ip, r2
 80038ba:	4463      	add	r3, ip
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	059b      	lsls	r3, r3, #22
 80038c0:	0d9a      	lsrs	r2, r3, #22
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01a      	beq.n	8003904 <PCD_EP_ISR_Handler+0x20c>
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	6959      	ldr	r1, [r3, #20]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f005 f9b4 	bl	8008c54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	18d2      	adds	r2, r2, r3
 80038f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2100      	movs	r1, #0
 80038fe:	0018      	movs	r0, r3
 8003900:	f007 f86b 	bl	800a9da <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	214c      	movs	r1, #76	@ 0x4c
 800390a:	187b      	adds	r3, r7, r1
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003910:	187b      	adds	r3, r7, r1
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d000      	beq.n	800391e <PCD_EP_ISR_Handler+0x226>
 800391c:	e2dc      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
 800391e:	187b      	adds	r3, r7, r1
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	23c0      	movs	r3, #192	@ 0xc0
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	401a      	ands	r2, r3
 8003928:	23c0      	movs	r3, #192	@ 0xc0
 800392a:	019b      	lsls	r3, r3, #6
 800392c:	429a      	cmp	r2, r3
 800392e:	d100      	bne.n	8003932 <PCD_EP_ISR_Handler+0x23a>
 8003930:	e2d2      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2250      	movs	r2, #80	@ 0x50
 800393e:	5a9b      	ldrh	r3, [r3, r2]
 8003940:	b29b      	uxth	r3, r3
 8003942:	001a      	movs	r2, r3
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	189b      	adds	r3, r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a38 <PCD_EP_ISR_Handler+0x340>)
 800394e:	4694      	mov	ip, r2
 8003950:	4463      	add	r3, ip
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	059b      	lsls	r3, r3, #22
 800395c:	0d9b      	lsrs	r3, r3, #22
 800395e:	b29a      	uxth	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <PCD_EP_ISR_Handler+0x286>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4a2f      	ldr	r2, [pc, #188]	@ (8003a30 <PCD_EP_ISR_Handler+0x338>)
 8003974:	4313      	orrs	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e035      	b.n	80039ea <PCD_EP_ISR_Handler+0x2f2>
 800397e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b3e      	cmp	r3, #62	@ 0x3e
 8003984:	d817      	bhi.n	80039b6 <PCD_EP_ISR_Handler+0x2be>
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2201      	movs	r2, #1
 8003994:	4013      	ands	r3, r2
 8003996:	d002      	beq.n	800399e <PCD_EP_ISR_Handler+0x2a6>
 8003998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399a:	3301      	adds	r3, #1
 800399c:	647b      	str	r3, [r7, #68]	@ 0x44
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	e019      	b.n	80039ea <PCD_EP_ISR_Handler+0x2f2>
 80039b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	221f      	movs	r2, #31
 80039c4:	4013      	ands	r3, r2
 80039c6:	d102      	bne.n	80039ce <PCD_EP_ISR_Handler+0x2d6>
 80039c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ca:	3b01      	subs	r3, #1
 80039cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	029b      	lsls	r3, r3, #10
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <PCD_EP_ISR_Handler+0x338>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	2012      	movs	r0, #18
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	4912      	ldr	r1, [pc, #72]	@ (8003a40 <PCD_EP_ISR_Handler+0x348>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	801a      	strh	r2, [r3, #0]
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	183a      	adds	r2, r7, r0
 8003a00:	8812      	ldrh	r2, [r2, #0]
 8003a02:	2180      	movs	r1, #128	@ 0x80
 8003a04:	0149      	lsls	r1, r1, #5
 8003a06:	404a      	eors	r2, r1
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	183a      	adds	r2, r7, r0
 8003a0e:	8812      	ldrh	r2, [r2, #0]
 8003a10:	2180      	movs	r1, #128	@ 0x80
 8003a12:	0189      	lsls	r1, r1, #6
 8003a14:	404a      	eors	r2, r1
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	183a      	adds	r2, r7, r0
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <PCD_EP_ISR_Handler+0x34c>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	b292      	uxth	r2, r2
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	e256      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	ffff8f0f 	.word	0xffff8f0f
 8003a30:	ffff8000 	.word	0xffff8000
 8003a34:	00000402 	.word	0x00000402
 8003a38:	00000406 	.word	0x00000406
 8003a3c:	00000f8f 	.word	0x00000f8f
 8003a40:	ffffbf8f 	.word	0xffffbf8f
 8003a44:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	204f      	movs	r0, #79	@ 0x4f
 8003a50:	183b      	adds	r3, r7, r0
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	18d2      	adds	r2, r2, r3
 8003a58:	214c      	movs	r1, #76	@ 0x4c
 8003a5a:	187b      	adds	r3, r7, r1
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	2200      	movs	r2, #0
 8003a64:	5e9b      	ldrsh	r3, [r3, r2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	db00      	blt.n	8003a6c <PCD_EP_ISR_Handler+0x374>
 8003a6a:	e0fa      	b.n	8003c62 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	001a      	movs	r2, r3
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	244a      	movs	r4, #74	@ 0x4a
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	49d1      	ldr	r1, [pc, #836]	@ (8003dc8 <PCD_EP_ISR_Handler+0x6d0>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	193a      	adds	r2, r7, r4
 8003a98:	8812      	ldrh	r2, [r2, #0]
 8003a9a:	2180      	movs	r1, #128	@ 0x80
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	189b      	adds	r3, r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	3351      	adds	r3, #81	@ 0x51
 8003ab0:	33ff      	adds	r3, #255	@ 0xff
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	18d3      	adds	r3, r2, r3
 8003ab6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aba:	7b1b      	ldrb	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d125      	bne.n	8003b0c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2250      	movs	r2, #80	@ 0x50
 8003ac6:	5a9b      	ldrh	r3, [r3, r2]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	18d2      	adds	r2, r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	18d3      	adds	r3, r2, r3
 8003ada:	4abc      	ldr	r2, [pc, #752]	@ (8003dcc <PCD_EP_ISR_Handler+0x6d4>)
 8003adc:	4694      	mov	ip, r2
 8003ade:	4463      	add	r3, ip
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	2450      	movs	r4, #80	@ 0x50
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	0592      	lsls	r2, r2, #22
 8003ae8:	0d92      	lsrs	r2, r2, #22
 8003aea:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d100      	bne.n	8003af6 <PCD_EP_ISR_Handler+0x3fe>
 8003af4:	e08d      	b.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afc:	6959      	ldr	r1, [r3, #20]
 8003afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b00:	88da      	ldrh	r2, [r3, #6]
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	f005 f8a5 	bl	8008c54 <USB_ReadPMA>
 8003b0a:	e082      	b.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d10c      	bne.n	8003b2e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b14:	2350      	movs	r3, #80	@ 0x50
 8003b16:	18fc      	adds	r4, r7, r3
 8003b18:	234c      	movs	r3, #76	@ 0x4c
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f9ec 	bl	8003f00 <HAL_PCD_EP_DB_Receive>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	8023      	strh	r3, [r4, #0]
 8003b2c:	e071      	b.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	001a      	movs	r2, r3
 8003b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	2052      	movs	r0, #82	@ 0x52
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	49a2      	ldr	r1, [pc, #648]	@ (8003dd0 <PCD_EP_ISR_Handler+0x6d8>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	001a      	movs	r2, r3
 8003b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	18d3      	adds	r3, r2, r3
 8003b58:	183a      	adds	r2, r7, r0
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	499d      	ldr	r1, [pc, #628]	@ (8003dd4 <PCD_EP_ISR_Handler+0x6dc>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	b292      	uxth	r2, r2
 8003b62:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	18d3      	adds	r3, r2, r3
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	001a      	movs	r2, r3
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	01db      	lsls	r3, r3, #7
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d024      	beq.n	8003bca <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2250      	movs	r2, #80	@ 0x50
 8003b86:	5a9b      	ldrh	r3, [r3, r2]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	18d2      	adds	r2, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	4a8f      	ldr	r2, [pc, #572]	@ (8003dd8 <PCD_EP_ISR_Handler+0x6e0>)
 8003b9c:	4694      	mov	ip, r2
 8003b9e:	4463      	add	r3, ip
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	2450      	movs	r4, #80	@ 0x50
 8003ba4:	193b      	adds	r3, r7, r4
 8003ba6:	0592      	lsls	r2, r2, #22
 8003ba8:	0d92      	lsrs	r2, r2, #22
 8003baa:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02e      	beq.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bba:	6959      	ldr	r1, [r3, #20]
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbe:	891a      	ldrh	r2, [r3, #8]
 8003bc0:	193b      	adds	r3, r7, r4
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	f005 f846 	bl	8008c54 <USB_ReadPMA>
 8003bc8:	e023      	b.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2250      	movs	r2, #80	@ 0x50
 8003bd0:	5a9b      	ldrh	r3, [r3, r2]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	001a      	movs	r2, r3
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	18d2      	adds	r2, r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	18d3      	adds	r3, r2, r3
 8003be4:	4a79      	ldr	r2, [pc, #484]	@ (8003dcc <PCD_EP_ISR_Handler+0x6d4>)
 8003be6:	4694      	mov	ip, r2
 8003be8:	4463      	add	r3, ip
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	2450      	movs	r4, #80	@ 0x50
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	0592      	lsls	r2, r2, #22
 8003bf2:	0d92      	lsrs	r2, r2, #22
 8003bf4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c04:	6959      	ldr	r1, [r3, #20]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	895a      	ldrh	r2, [r3, #10]
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	f005 f821 	bl	8008c54 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	2150      	movs	r1, #80	@ 0x50
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	18d2      	adds	r2, r2, r3
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	18d2      	adds	r2, r2, r3
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x54c>
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d207      	bcs.n	8003c54 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f006 fec4 	bl	800a9da <HAL_PCD_DataOutStageCallback>
 8003c52:	e006      	b.n	8003c62 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f003 fd45 	bl	80076ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c62:	244c      	movs	r4, #76	@ 0x4c
 8003c64:	193b      	adds	r3, r7, r4
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d100      	bne.n	8003c70 <PCD_EP_ISR_Handler+0x578>
 8003c6e:	e133      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c70:	204f      	movs	r0, #79	@ 0x4f
 8003c72:	183b      	adds	r3, r7, r0
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	0013      	movs	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	3310      	adds	r3, #16
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	001a      	movs	r2, r3
 8003c8c:	183b      	adds	r3, r7, r0
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	18d3      	adds	r3, r2, r3
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	2542      	movs	r5, #66	@ 0x42
 8003c9a:	197b      	adds	r3, r7, r5
 8003c9c:	494f      	ldr	r1, [pc, #316]	@ (8003ddc <PCD_EP_ISR_Handler+0x6e4>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	183b      	adds	r3, r7, r0
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	18d3      	adds	r3, r2, r3
 8003cb0:	197a      	adds	r2, r7, r5
 8003cb2:	8812      	ldrh	r2, [r2, #0]
 8003cb4:	494a      	ldr	r1, [pc, #296]	@ (8003de0 <PCD_EP_ISR_Handler+0x6e8>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbe:	78db      	ldrb	r3, [r3, #3]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d000      	beq.n	8003cc6 <PCD_EP_ISR_Handler+0x5ce>
 8003cc4:	e0af      	b.n	8003e26 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	7b1b      	ldrb	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d100      	bne.n	8003cd6 <PCD_EP_ISR_Handler+0x5de>
 8003cd4:	e09f      	b.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	2240      	movs	r2, #64	@ 0x40
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d046      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d125      	bne.n	8003d34 <PCD_EP_ISR_Handler+0x63c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2250      	movs	r2, #80	@ 0x50
 8003cf4:	5a9b      	ldrh	r3, [r3, r2]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00da      	lsls	r2, r3, #3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	4a33      	ldr	r2, [pc, #204]	@ (8003dd8 <PCD_EP_ISR_Handler+0x6e0>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	0d9b      	lsrs	r3, r3, #22
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <PCD_EP_ISR_Handler+0x6e8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	e070      	b.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d16c      	bne.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2250      	movs	r2, #80	@ 0x50
 8003d48:	5a9b      	ldrh	r3, [r3, r2]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	00da      	lsls	r2, r3, #3
 8003d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd8 <PCD_EP_ISR_Handler+0x6e0>)
 8003d60:	4694      	mov	ip, r2
 8003d62:	4463      	add	r3, ip
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	2200      	movs	r2, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e053      	b.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d133      	bne.n	8003de4 <PCD_EP_ISR_Handler+0x6ec>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2250      	movs	r2, #80	@ 0x50
 8003d88:	5a9b      	ldrh	r3, [r3, r2]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00da      	lsls	r2, r3, #3
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9c:	18d3      	adds	r3, r2, r3
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <PCD_EP_ISR_Handler+0x6d4>)
 8003da0:	4694      	mov	ip, r2
 8003da2:	4463      	add	r3, ip
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	059b      	lsls	r3, r3, #22
 8003dae:	0d9b      	lsrs	r3, r3, #22
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <PCD_EP_ISR_Handler+0x6e8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	e026      	b.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
 8003dc8:	00000f8f 	.word	0x00000f8f
 8003dcc:	00000406 	.word	0x00000406
 8003dd0:	ffff8f8f 	.word	0xffff8f8f
 8003dd4:	ffff80c0 	.word	0xffff80c0
 8003dd8:	00000402 	.word	0x00000402
 8003ddc:	ffff8f0f 	.word	0xffff8f0f
 8003de0:	ffff8000 	.word	0xffff8000
 8003de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d114      	bne.n	8003e16 <PCD_EP_ISR_Handler+0x71e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2250      	movs	r2, #80	@ 0x50
 8003df2:	5a9b      	ldrh	r3, [r3, r2]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	001a      	movs	r2, r3
 8003df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	00da      	lsls	r2, r3, #3
 8003e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef8 <PCD_EP_ISR_Handler+0x800>)
 8003e0a:	4694      	mov	ip, r2
 8003e0c:	4463      	add	r3, ip
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	2200      	movs	r2, #0
 8003e14:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f006 fdfc 	bl	800aa1c <HAL_PCD_DataInStageCallback>
 8003e24:	e058      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e26:	234c      	movs	r3, #76	@ 0x4c
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4013      	ands	r3, r2
 8003e32:	d149      	bne.n	8003ec8 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2250      	movs	r2, #80	@ 0x50
 8003e3a:	5a9b      	ldrh	r3, [r3, r2]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	001a      	movs	r2, r3
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	18d2      	adds	r2, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	18d3      	adds	r3, r2, r3
 8003e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003efc <PCD_EP_ISR_Handler+0x804>)
 8003e50:	4694      	mov	ip, r2
 8003e52:	4463      	add	r3, ip
 8003e54:	881a      	ldrh	r2, [r3, #0]
 8003e56:	2140      	movs	r1, #64	@ 0x40
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	0592      	lsls	r2, r2, #22
 8003e5c:	0d92      	lsrs	r2, r2, #22
 8003e5e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d907      	bls.n	8003e7c <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	e002      	b.n	8003e82 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	0011      	movs	r1, r2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f006 fdc2 	bl	800aa1c <HAL_PCD_DataInStageCallback>
 8003e98:	e01e      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	2140      	movs	r1, #64	@ 0x40
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	18d2      	adds	r2, r2, r3
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	18d2      	adds	r2, r2, r3
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f003 fc13 	bl	80076ec <USB_EPStartXfer>
 8003ec6:	e007      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ec8:	234c      	movs	r3, #76	@ 0x4c
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f930 	bl	8004138 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2244      	movs	r2, #68	@ 0x44
 8003ede:	5a9b      	ldrh	r3, [r3, r2]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da01      	bge.n	8003eec <PCD_EP_ISR_Handler+0x7f4>
 8003ee8:	f7ff fc0c 	bl	8003704 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b016      	add	sp, #88	@ 0x58
 8003ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	00000406 	.word	0x00000406
 8003efc:	00000402 	.word	0x00000402

08003f00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	1dbb      	adds	r3, r7, #6
 8003f0c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f0e:	1dbb      	adds	r3, r7, #6
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	01db      	lsls	r3, r3, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	d100      	bne.n	8003f1c <HAL_PCD_EP_DB_Receive+0x1c>
 8003f1a:	e07d      	b.n	8004018 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2250      	movs	r2, #80	@ 0x50
 8003f22:	5a9b      	ldrh	r3, [r3, r2]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	001a      	movs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	18d2      	adds	r2, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	4a7a      	ldr	r2, [pc, #488]	@ (8004120 <HAL_PCD_EP_DB_Receive+0x220>)
 8003f38:	4694      	mov	ip, r2
 8003f3a:	4463      	add	r3, ip
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	211a      	movs	r1, #26
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	0592      	lsls	r2, r2, #22
 8003f44:	0d92      	lsrs	r2, r2, #22
 8003f46:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d307      	bcc.n	8003f64 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	1ad2      	subs	r2, r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	619a      	str	r2, [r3, #24]
 8003f62:	e002      	b.n	8003f6a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d121      	bne.n	8003fb6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	001a      	movs	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	18d3      	adds	r3, r2, r3
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	2018      	movs	r0, #24
 8003f86:	183b      	adds	r3, r7, r0
 8003f88:	4966      	ldr	r1, [pc, #408]	@ (8004124 <HAL_PCD_EP_DB_Receive+0x224>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	183b      	adds	r3, r7, r0
 8003f90:	183a      	adds	r2, r7, r0
 8003f92:	8812      	ldrh	r2, [r2, #0]
 8003f94:	2180      	movs	r1, #128	@ 0x80
 8003f96:	0189      	lsls	r1, r1, #6
 8003f98:	404a      	eors	r2, r1
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	183a      	adds	r2, r7, r0
 8003fac:	8812      	ldrh	r2, [r2, #0]
 8003fae:	495e      	ldr	r1, [pc, #376]	@ (8004128 <HAL_PCD_EP_DB_Receive+0x228>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fb6:	1dbb      	adds	r3, r7, #6
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	2240      	movs	r2, #64	@ 0x40
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	2016      	movs	r0, #22
 8003fd4:	183b      	adds	r3, r7, r0
 8003fd6:	4955      	ldr	r1, [pc, #340]	@ (800412c <HAL_PCD_EP_DB_Receive+0x22c>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	183a      	adds	r2, r7, r0
 8003fec:	8812      	ldrh	r2, [r2, #0]
 8003fee:	4950      	ldr	r1, [pc, #320]	@ (8004130 <HAL_PCD_EP_DB_Receive+0x230>)
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003ff6:	241a      	movs	r4, #26
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d100      	bne.n	8004002 <HAL_PCD_EP_DB_Receive+0x102>
 8004000:	e086      	b.n	8004110 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6959      	ldr	r1, [r3, #20]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	891a      	ldrh	r2, [r3, #8]
 800400e:	193b      	adds	r3, r7, r4
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	f004 fe1f 	bl	8008c54 <USB_ReadPMA>
 8004016:	e07b      	b.n	8004110 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2250      	movs	r2, #80	@ 0x50
 800401e:	5a9b      	ldrh	r3, [r3, r2]
 8004020:	b29b      	uxth	r3, r3
 8004022:	001a      	movs	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	18d2      	adds	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	4a40      	ldr	r2, [pc, #256]	@ (8004134 <HAL_PCD_EP_DB_Receive+0x234>)
 8004034:	4694      	mov	ip, r2
 8004036:	4463      	add	r3, ip
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	211a      	movs	r1, #26
 800403c:	187b      	adds	r3, r7, r1
 800403e:	0592      	lsls	r2, r2, #22
 8004040:	0d92      	lsrs	r2, r2, #22
 8004042:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	187b      	adds	r3, r7, r1
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d307      	bcc.n	8004060 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	187b      	adds	r3, r7, r1
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	1ad2      	subs	r2, r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	619a      	str	r2, [r3, #24]
 800405e:	e002      	b.n	8004066 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d121      	bne.n	80040b2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	001a      	movs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	18d3      	adds	r3, r2, r3
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29a      	uxth	r2, r3
 8004080:	201e      	movs	r0, #30
 8004082:	183b      	adds	r3, r7, r0
 8004084:	4927      	ldr	r1, [pc, #156]	@ (8004124 <HAL_PCD_EP_DB_Receive+0x224>)
 8004086:	400a      	ands	r2, r1
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	183b      	adds	r3, r7, r0
 800408c:	183a      	adds	r2, r7, r0
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	0189      	lsls	r1, r1, #6
 8004094:	404a      	eors	r2, r1
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	001a      	movs	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	183a      	adds	r2, r7, r0
 80040a8:	8812      	ldrh	r2, [r2, #0]
 80040aa:	491f      	ldr	r1, [pc, #124]	@ (8004128 <HAL_PCD_EP_DB_Receive+0x228>)
 80040ac:	430a      	orrs	r2, r1
 80040ae:	b292      	uxth	r2, r2
 80040b0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040b2:	1dbb      	adds	r3, r7, #6
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2240      	movs	r2, #64	@ 0x40
 80040b8:	4013      	ands	r3, r2
 80040ba:	d11a      	bne.n	80040f2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	001a      	movs	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	18d3      	adds	r3, r2, r3
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	201c      	movs	r0, #28
 80040d0:	183b      	adds	r3, r7, r0
 80040d2:	4916      	ldr	r1, [pc, #88]	@ (800412c <HAL_PCD_EP_DB_Receive+0x22c>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	001a      	movs	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	183a      	adds	r2, r7, r0
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	4911      	ldr	r1, [pc, #68]	@ (8004130 <HAL_PCD_EP_DB_Receive+0x230>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	b292      	uxth	r2, r2
 80040f0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80040f2:	241a      	movs	r4, #26
 80040f4:	193b      	adds	r3, r7, r4
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d009      	beq.n	8004110 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6959      	ldr	r1, [r3, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	895a      	ldrh	r2, [r3, #10]
 8004108:	193b      	adds	r3, r7, r4
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	f004 fda2 	bl	8008c54 <USB_ReadPMA>
    }
  }

  return count;
 8004110:	231a      	movs	r3, #26
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	881b      	ldrh	r3, [r3, #0]
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b009      	add	sp, #36	@ 0x24
 800411c:	bd90      	pop	{r4, r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	00000402 	.word	0x00000402
 8004124:	ffffbf8f 	.word	0xffffbf8f
 8004128:	ffff8080 	.word	0xffff8080
 800412c:	ffff8f8f 	.word	0xffff8f8f
 8004130:	ffff80c0 	.word	0xffff80c0
 8004134:	00000406 	.word	0x00000406

08004138 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b0a4      	sub	sp, #144	@ 0x90
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	1dbb      	adds	r3, r7, #6
 8004144:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004146:	1dbb      	adds	r3, r7, #6
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	2240      	movs	r2, #64	@ 0x40
 800414c:	4013      	ands	r3, r2
 800414e:	d100      	bne.n	8004152 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004150:	e1e4      	b.n	800451c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2250      	movs	r2, #80	@ 0x50
 8004158:	5a9b      	ldrh	r3, [r3, r2]
 800415a:	b29b      	uxth	r3, r3
 800415c:	001a      	movs	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	18d2      	adds	r2, r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	4ad0      	ldr	r2, [pc, #832]	@ (80044b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800416e:	4694      	mov	ip, r2
 8004170:	4463      	add	r3, ip
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	2188      	movs	r1, #136	@ 0x88
 8004176:	187b      	adds	r3, r7, r1
 8004178:	0592      	lsls	r2, r2, #22
 800417a:	0d92      	lsrs	r2, r2, #22
 800417c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	187b      	adds	r3, r7, r1
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d907      	bls.n	800419a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	187b      	adds	r3, r7, r1
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	619a      	str	r2, [r3, #24]
 8004198:	e002      	b.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d000      	beq.n	80041aa <HAL_PCD_EP_DB_Transmit+0x72>
 80041a8:	e0b5      	b.n	8004316 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	785b      	ldrb	r3, [r3, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d125      	bne.n	80041fe <HAL_PCD_EP_DB_Transmit+0xc6>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2250      	movs	r2, #80	@ 0x50
 80041be:	5a9b      	ldrh	r3, [r3, r2]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	001a      	movs	r2, r3
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	00da      	lsls	r2, r3, #3
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	18d3      	adds	r3, r2, r3
 80041d4:	4ab6      	ldr	r2, [pc, #728]	@ (80044b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80041d6:	4694      	mov	ip, r2
 80041d8:	4463      	add	r3, ip
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	059b      	lsls	r3, r3, #22
 80041e4:	0d9b      	lsrs	r3, r3, #22
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4ab0      	ldr	r2, [pc, #704]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e01b      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d117      	bne.n	8004236 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2250      	movs	r2, #80	@ 0x50
 8004212:	5a9b      	ldrh	r3, [r3, r2]
 8004214:	b29b      	uxth	r3, r3
 8004216:	001a      	movs	r2, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	189b      	adds	r3, r3, r2
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	00da      	lsls	r2, r3, #3
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	4aa1      	ldr	r2, [pc, #644]	@ (80044b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800422a:	4694      	mov	ip, r2
 800422c:	4463      	add	r3, ip
 800422e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d125      	bne.n	8004290 <HAL_PCD_EP_DB_Transmit+0x158>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2250      	movs	r2, #80	@ 0x50
 8004250:	5a9b      	ldrh	r3, [r3, r2]
 8004252:	b29b      	uxth	r3, r3
 8004254:	001a      	movs	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	189b      	adds	r3, r3, r2
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00da      	lsls	r2, r3, #3
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	4a94      	ldr	r2, [pc, #592]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004268:	4694      	mov	ip, r2
 800426a:	4463      	add	r3, ip
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	059b      	lsls	r3, r3, #22
 8004276:	0d9b      	lsrs	r3, r3, #22
 8004278:	b29a      	uxth	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	4a8b      	ldr	r2, [pc, #556]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	b29a      	uxth	r2, r3
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e018      	b.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d114      	bne.n	80042c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2250      	movs	r2, #80	@ 0x50
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	001a      	movs	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00da      	lsls	r2, r3, #3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	4a80      	ldr	r2, [pc, #512]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x380>)
 80042b6:	4694      	mov	ip, r2
 80042b8:	4463      	add	r3, ip
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2200      	movs	r2, #0
 80042c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	0011      	movs	r1, r2
 80042ca:	0018      	movs	r0, r3
 80042cc:	f006 fba6 	bl	800aa1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042d0:	1dbb      	adds	r3, r7, #6
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	01db      	lsls	r3, r3, #7
 80042d8:	4013      	ands	r3, r2
 80042da:	d100      	bne.n	80042de <HAL_PCD_EP_DB_Transmit+0x1a6>
 80042dc:	e308      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	001a      	movs	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	18d3      	adds	r3, r2, r3
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	2016      	movs	r0, #22
 80042f2:	183b      	adds	r3, r7, r0
 80042f4:	4971      	ldr	r1, [pc, #452]	@ (80044bc <HAL_PCD_EP_DB_Transmit+0x384>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	001a      	movs	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	18d3      	adds	r3, r2, r3
 8004308:	183a      	adds	r2, r7, r0
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	496c      	ldr	r1, [pc, #432]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x388>)
 800430e:	430a      	orrs	r2, r1
 8004310:	b292      	uxth	r2, r2
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	e2ec      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004316:	1dbb      	adds	r3, r7, #6
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	01db      	lsls	r3, r3, #7
 800431e:	4013      	ands	r3, r2
 8004320:	d01a      	beq.n	8004358 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	001a      	movs	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29a      	uxth	r2, r3
 8004334:	208a      	movs	r0, #138	@ 0x8a
 8004336:	183b      	adds	r3, r7, r0
 8004338:	4960      	ldr	r1, [pc, #384]	@ (80044bc <HAL_PCD_EP_DB_Transmit+0x384>)
 800433a:	400a      	ands	r2, r1
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	001a      	movs	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	18d3      	adds	r3, r2, r3
 800434c:	183a      	adds	r2, r7, r0
 800434e:	8812      	ldrh	r2, [r2, #0]
 8004350:	495b      	ldr	r1, [pc, #364]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004352:	430a      	orrs	r2, r1
 8004354:	b292      	uxth	r2, r2
 8004356:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	5c9b      	ldrb	r3, [r3, r2]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d000      	beq.n	8004364 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004362:	e2c5      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	2188      	movs	r1, #136	@ 0x88
 800436a:	187b      	adds	r3, r7, r1
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	18d2      	adds	r2, r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	187b      	adds	r3, r7, r1
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	18d2      	adds	r2, r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	d30c      	bcc.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	218c      	movs	r1, #140	@ 0x8c
 8004394:	187a      	adds	r2, r7, r1
 8004396:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	187b      	adds	r3, r7, r1
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	621a      	str	r2, [r3, #32]
 80043a6:	e01a      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80043b0:	2388      	movs	r3, #136	@ 0x88
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	228c      	movs	r2, #140	@ 0x8c
 80043b8:	18ba      	adds	r2, r7, r2
 80043ba:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2224      	movs	r2, #36	@ 0x24
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]
 80043c4:	e00b      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2224      	movs	r2, #36	@ 0x24
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	228c      	movs	r2, #140	@ 0x8c
 80043d4:	18ba      	adds	r2, r7, r2
 80043d6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d000      	beq.n	80043e8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80043e6:	e06d      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x38c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2250      	movs	r2, #80	@ 0x50
 80043f4:	5a9b      	ldrh	r3, [r3, r2]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	001a      	movs	r2, r3
 80043fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00da      	lsls	r2, r3, #3
 8004406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004408:	18d3      	adds	r3, r2, r3
 800440a:	4a29      	ldr	r2, [pc, #164]	@ (80044b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800440c:	4694      	mov	ip, r2
 800440e:	4463      	add	r3, ip
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	059b      	lsls	r3, r3, #22
 800441a:	0d9b      	lsrs	r3, r3, #22
 800441c:	b29a      	uxth	r2, r3
 800441e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	238c      	movs	r3, #140	@ 0x8c
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <HAL_PCD_EP_DB_Transmit+0x306>
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	4a20      	ldr	r2, [pc, #128]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	b29a      	uxth	r2, r3
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e061      	b.n	8004502 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800443e:	228c      	movs	r2, #140	@ 0x8c
 8004440:	18bb      	adds	r3, r7, r2
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b3e      	cmp	r3, #62	@ 0x3e
 8004446:	d817      	bhi.n	8004478 <HAL_PCD_EP_DB_Transmit+0x340>
 8004448:	18bb      	adds	r3, r7, r2
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004450:	18bb      	adds	r3, r7, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	4013      	ands	r3, r2
 8004458:	d002      	beq.n	8004460 <HAL_PCD_EP_DB_Transmit+0x328>
 800445a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800445c:	3301      	adds	r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004468:	b29b      	uxth	r3, r3
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	b29b      	uxth	r3, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e044      	b.n	8004502 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004478:	228c      	movs	r2, #140	@ 0x8c
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004482:	18bb      	adds	r3, r7, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	221f      	movs	r2, #31
 8004488:	4013      	ands	r3, r2
 800448a:	d102      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x35a>
 800448c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800448e:	3b01      	subs	r3, #1
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29a      	uxth	r2, r3
 8004498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449a:	b29b      	uxth	r3, r3
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4a03      	ldr	r2, [pc, #12]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e028      	b.n	8004502 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044b0:	00000402 	.word	0x00000402
 80044b4:	ffff8000 	.word	0xffff8000
 80044b8:	00000406 	.word	0x00000406
 80044bc:	ffff8f8f 	.word	0xffff8f8f
 80044c0:	ffffc080 	.word	0xffffc080
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d11a      	bne.n	8004502 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2250      	movs	r2, #80	@ 0x50
 80044d8:	5a9b      	ldrh	r3, [r3, r2]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	001a      	movs	r2, r3
 80044de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	00da      	lsls	r2, r3, #3
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	18d3      	adds	r3, r2, r3
 80044ee:	4ad9      	ldr	r2, [pc, #868]	@ (8004854 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80044f0:	4694      	mov	ip, r2
 80044f2:	4463      	add	r3, ip
 80044f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044f6:	238c      	movs	r3, #140	@ 0x8c
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004500:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	891a      	ldrh	r2, [r3, #8]
 800450e:	238c      	movs	r3, #140	@ 0x8c
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f004 fb53 	bl	8008bc0 <USB_WritePMA>
 800451a:	e1e9      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2250      	movs	r2, #80	@ 0x50
 8004522:	5a9b      	ldrh	r3, [r3, r2]
 8004524:	b29b      	uxth	r3, r3
 8004526:	001a      	movs	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	18d2      	adds	r2, r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	18d3      	adds	r3, r2, r3
 8004536:	4ac8      	ldr	r2, [pc, #800]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004538:	4694      	mov	ip, r2
 800453a:	4463      	add	r3, ip
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	2188      	movs	r1, #136	@ 0x88
 8004540:	187b      	adds	r3, r7, r1
 8004542:	0592      	lsls	r2, r2, #22
 8004544:	0d92      	lsrs	r2, r2, #22
 8004546:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	187b      	adds	r3, r7, r1
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d307      	bcc.n	8004564 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	187b      	adds	r3, r7, r1
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	1ad2      	subs	r2, r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	619a      	str	r2, [r3, #24]
 8004562:	e002      	b.n	800456a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d000      	beq.n	8004574 <HAL_PCD_EP_DB_Transmit+0x43c>
 8004572:	e0bb      	b.n	80046ec <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d125      	bne.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x490>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2250      	movs	r2, #80	@ 0x50
 8004588:	5a9b      	ldrh	r3, [r3, r2]
 800458a:	b29b      	uxth	r3, r3
 800458c:	001a      	movs	r2, r3
 800458e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004590:	189b      	adds	r3, r3, r2
 8004592:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	00da      	lsls	r2, r3, #3
 800459a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	4aad      	ldr	r2, [pc, #692]	@ (8004854 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80045a0:	4694      	mov	ip, r2
 80045a2:	4463      	add	r3, ip
 80045a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	059b      	lsls	r3, r3, #22
 80045ae:	0d9b      	lsrs	r3, r3, #22
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	4aa7      	ldr	r2, [pc, #668]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x724>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	e01b      	b.n	8004600 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d117      	bne.n	8004600 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2250      	movs	r2, #80	@ 0x50
 80045dc:	5a9b      	ldrh	r3, [r3, r2]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	001a      	movs	r2, r3
 80045e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00da      	lsls	r2, r3, #3
 80045ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	4a98      	ldr	r2, [pc, #608]	@ (8004854 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80045f4:	4694      	mov	ip, r2
 80045f6:	4463      	add	r3, ip
 80045f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045fc:	2200      	movs	r2, #0
 80045fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	677b      	str	r3, [r7, #116]	@ 0x74
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d12b      	bne.n	8004666 <HAL_PCD_EP_DB_Transmit+0x52e>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2250      	movs	r2, #80	@ 0x50
 800461a:	5a9b      	ldrh	r3, [r3, r2]
 800461c:	b29b      	uxth	r3, r3
 800461e:	001a      	movs	r2, r3
 8004620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004622:	189b      	adds	r3, r3, r2
 8004624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	00da      	lsls	r2, r3, #3
 800462c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	4a89      	ldr	r2, [pc, #548]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004632:	4694      	mov	ip, r2
 8004634:	4463      	add	r3, ip
 8004636:	2184      	movs	r1, #132	@ 0x84
 8004638:	187a      	adds	r2, r7, r1
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	187b      	adds	r3, r7, r1
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	059b      	lsls	r3, r3, #22
 8004646:	0d9b      	lsrs	r3, r3, #22
 8004648:	b29a      	uxth	r2, r3
 800464a:	187b      	adds	r3, r7, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	187b      	adds	r3, r7, r1
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4a80      	ldr	r2, [pc, #512]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x724>)
 800465a:	4313      	orrs	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	187b      	adds	r3, r7, r1
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e018      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x560>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d114      	bne.n	8004698 <HAL_PCD_EP_DB_Transmit+0x560>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2250      	movs	r2, #80	@ 0x50
 8004674:	5a9b      	ldrh	r3, [r3, r2]
 8004676:	b29b      	uxth	r3, r3
 8004678:	001a      	movs	r2, r3
 800467a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800467c:	189b      	adds	r3, r3, r2
 800467e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00da      	lsls	r2, r3, #3
 8004686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	4a73      	ldr	r2, [pc, #460]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x720>)
 800468c:	4694      	mov	ip, r2
 800468e:	4463      	add	r3, ip
 8004690:	673b      	str	r3, [r7, #112]	@ 0x70
 8004692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004694:	2200      	movs	r2, #0
 8004696:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f006 f9bb 	bl	800aa1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046a6:	1dbb      	adds	r3, r7, #6
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	@ 0x80
 80046ac:	01db      	lsls	r3, r3, #7
 80046ae:	4013      	ands	r3, r2
 80046b0:	d000      	beq.n	80046b4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80046b2:	e11d      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	001a      	movs	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	18d3      	adds	r3, r2, r3
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	2082      	movs	r0, #130	@ 0x82
 80046c8:	183b      	adds	r3, r7, r0
 80046ca:	4965      	ldr	r1, [pc, #404]	@ (8004860 <HAL_PCD_EP_DB_Transmit+0x728>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	001a      	movs	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	183a      	adds	r2, r7, r0
 80046e0:	8812      	ldrh	r2, [r2, #0]
 80046e2:	4960      	ldr	r1, [pc, #384]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	b292      	uxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e101      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	@ 0x80
 80046f2:	01db      	lsls	r3, r3, #7
 80046f4:	4013      	ands	r3, r2
 80046f6:	d11a      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	001a      	movs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	18d3      	adds	r3, r2, r3
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29a      	uxth	r2, r3
 800470a:	204e      	movs	r0, #78	@ 0x4e
 800470c:	183b      	adds	r3, r7, r0
 800470e:	4954      	ldr	r1, [pc, #336]	@ (8004860 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004710:	400a      	ands	r2, r1
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	001a      	movs	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	183a      	adds	r2, r7, r0
 8004724:	8812      	ldrh	r2, [r2, #0]
 8004726:	494f      	ldr	r1, [pc, #316]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004728:	430a      	orrs	r2, r1
 800472a:	b292      	uxth	r2, r2
 800472c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2224      	movs	r2, #36	@ 0x24
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d000      	beq.n	800473a <HAL_PCD_EP_DB_Transmit+0x602>
 8004738:	e0da      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	2188      	movs	r1, #136	@ 0x88
 8004740:	187b      	adds	r3, r7, r1
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	187b      	adds	r3, r7, r1
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	18d2      	adds	r2, r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d30c      	bcc.n	800477e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	218c      	movs	r1, #140	@ 0x8c
 800476a:	187a      	adds	r2, r7, r1
 800476c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	187b      	adds	r3, r7, r1
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	621a      	str	r2, [r3, #32]
 800477c:	e01a      	b.n	80047b4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8004786:	2388      	movs	r3, #136	@ 0x88
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	228c      	movs	r2, #140	@ 0x8c
 800478e:	18ba      	adds	r2, r7, r2
 8004790:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2224      	movs	r2, #36	@ 0x24
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]
 800479a:	e00b      	b.n	80047b4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	228c      	movs	r2, #140	@ 0x8c
 80047a2:	18ba      	adds	r2, r7, r2
 80047a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2224      	movs	r2, #36	@ 0x24
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d000      	beq.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80047c2:	e06d      	b.n	80048a0 <HAL_PCD_EP_DB_Transmit+0x768>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2250      	movs	r2, #80	@ 0x50
 80047d0:	5a9b      	ldrh	r3, [r3, r2]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	001a      	movs	r2, r3
 80047d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	00da      	lsls	r2, r3, #3
 80047e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x720>)
 80047e8:	4694      	mov	ip, r2
 80047ea:	4463      	add	r3, ip
 80047ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	059b      	lsls	r3, r3, #22
 80047f6:	0d9b      	lsrs	r3, r3, #22
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	238c      	movs	r3, #140	@ 0x8c
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8004808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	4a13      	ldr	r2, [pc, #76]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x724>)
 8004810:	4313      	orrs	r3, r2
 8004812:	b29a      	uxth	r2, r3
 8004814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	e05e      	b.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800481a:	228c      	movs	r2, #140	@ 0x8c
 800481c:	18bb      	adds	r3, r7, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b3e      	cmp	r3, #62	@ 0x3e
 8004822:	d821      	bhi.n	8004868 <HAL_PCD_EP_DB_Transmit+0x730>
 8004824:	18bb      	adds	r3, r7, r2
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482c:	18bb      	adds	r3, r7, r2
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	4013      	ands	r3, r2
 8004834:	d002      	beq.n	800483c <HAL_PCD_EP_DB_Transmit+0x704>
 8004836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004838:	3301      	adds	r3, #1
 800483a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29a      	uxth	r2, r3
 8004842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004844:	b29b      	uxth	r3, r3
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	b29b      	uxth	r3, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e041      	b.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004854:	00000402 	.word	0x00000402
 8004858:	00000406 	.word	0x00000406
 800485c:	ffff8000 	.word	0xffff8000
 8004860:	ffff8f8f 	.word	0xffff8f8f
 8004864:	ffffc080 	.word	0xffffc080
 8004868:	228c      	movs	r2, #140	@ 0x8c
 800486a:	18bb      	adds	r3, r7, r2
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004872:	18bb      	adds	r3, r7, r2
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	221f      	movs	r2, #31
 8004878:	4013      	ands	r3, r2
 800487a:	d102      	bne.n	8004882 <HAL_PCD_EP_DB_Transmit+0x74a>
 800487c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800487e:	3b01      	subs	r3, #1
 8004880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488a:	b29b      	uxth	r3, r3
 800488c:	029b      	lsls	r3, r3, #10
 800488e:	b29b      	uxth	r3, r3
 8004890:	4313      	orrs	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <HAL_PCD_EP_DB_Transmit+0x810>)
 8004896:	4313      	orrs	r3, r2
 8004898:	b29a      	uxth	r2, r3
 800489a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e01b      	b.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d117      	bne.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2250      	movs	r2, #80	@ 0x50
 80048ae:	5a9b      	ldrh	r3, [r3, r2]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	001a      	movs	r2, r3
 80048b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	00da      	lsls	r2, r3, #3
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	18d3      	adds	r3, r2, r3
 80048c4:	4a21      	ldr	r2, [pc, #132]	@ (800494c <HAL_PCD_EP_DB_Transmit+0x814>)
 80048c6:	4694      	mov	ip, r2
 80048c8:	4463      	add	r3, ip
 80048ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80048cc:	238c      	movs	r3, #140	@ 0x8c
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6959      	ldr	r1, [r3, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	895a      	ldrh	r2, [r3, #10]
 80048e4:	238c      	movs	r3, #140	@ 0x8c
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f004 f968 	bl	8008bc0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	001a      	movs	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	18d3      	adds	r3, r2, r3
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29a      	uxth	r2, r3
 8004902:	2014      	movs	r0, #20
 8004904:	183b      	adds	r3, r7, r0
 8004906:	4912      	ldr	r1, [pc, #72]	@ (8004950 <HAL_PCD_EP_DB_Transmit+0x818>)
 8004908:	400a      	ands	r2, r1
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	183b      	adds	r3, r7, r0
 800490e:	183a      	adds	r2, r7, r0
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	2110      	movs	r1, #16
 8004914:	404a      	eors	r2, r1
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	183b      	adds	r3, r7, r0
 800491a:	183a      	adds	r2, r7, r0
 800491c:	8812      	ldrh	r2, [r2, #0]
 800491e:	2120      	movs	r1, #32
 8004920:	404a      	eors	r2, r1
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	001a      	movs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	18d3      	adds	r3, r2, r3
 8004932:	183a      	adds	r2, r7, r0
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	4907      	ldr	r1, [pc, #28]	@ (8004954 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8004938:	430a      	orrs	r2, r1
 800493a:	b292      	uxth	r2, r2
 800493c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b024      	add	sp, #144	@ 0x90
 8004946:	bd80      	pop	{r7, pc}
 8004948:	ffff8000 	.word	0xffff8000
 800494c:	00000406 	.word	0x00000406
 8004950:	ffff8fbf 	.word	0xffff8fbf
 8004954:	ffff8080 	.word	0xffff8080

08004958 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	0008      	movs	r0, r1
 8004962:	0011      	movs	r1, r2
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	240a      	movs	r4, #10
 8004968:	193b      	adds	r3, r7, r4
 800496a:	1c02      	adds	r2, r0, #0
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	2308      	movs	r3, #8
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	1c0a      	adds	r2, r1, #0
 8004974:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004976:	0021      	movs	r1, r4
 8004978:	187b      	adds	r3, r7, r1
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	4013      	ands	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004986:	187b      	adds	r3, r7, r1
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2207      	movs	r2, #7
 800498c:	401a      	ands	r2, r3
 800498e:	0013      	movs	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	189b      	adds	r3, r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	3310      	adds	r3, #16
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	18d3      	adds	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e00b      	b.n	80049b8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049a0:	230a      	movs	r3, #10
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	0013      	movs	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	3351      	adds	r3, #81	@ 0x51
 80049b0:	33ff      	adds	r3, #255	@ 0xff
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	18d3      	adds	r3, r2, r3
 80049b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049b8:	2308      	movs	r3, #8
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	80da      	strh	r2, [r3, #6]
 80049d0:	e00b      	b.n	80049ea <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2201      	movs	r2, #1
 80049d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0c1b      	lsrs	r3, r3, #16
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b007      	add	sp, #28
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	23b4      	movs	r3, #180	@ 0xb4
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	2101      	movs	r1, #1
 8004a0a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	23b2      	movs	r3, #178	@ 0xb2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	2100      	movs	r1, #0
 8004a14:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2254      	movs	r2, #84	@ 0x54
 8004a1a:	5a9b      	ldrh	r3, [r3, r2]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	b299      	uxth	r1, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2254      	movs	r2, #84	@ 0x54
 8004a28:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2254      	movs	r2, #84	@ 0x54
 8004a2e:	5a9b      	ldrh	r3, [r3, r2]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2202      	movs	r2, #2
 8004a34:	4313      	orrs	r3, r2
 8004a36:	b299      	uxth	r1, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2254      	movs	r2, #84	@ 0x54
 8004a3c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b004      	add	sp, #16
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	000a      	movs	r2, r1
 8004a52:	1cfb      	adds	r3, r7, #3
 8004a54:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f000 fb76 	bl	8005160 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d100      	bne.n	8004a80 <HAL_RCC_OscConfig+0x20>
 8004a7e:	e08e      	b.n	8004b9e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a80:	4bc5      	ldr	r3, [pc, #788]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	220c      	movs	r2, #12
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d00e      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a8c:	4bc2      	ldr	r3, [pc, #776]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	220c      	movs	r2, #12
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d117      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x68>
 8004a98:	4bbf      	ldr	r3, [pc, #764]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	23c0      	movs	r3, #192	@ 0xc0
 8004a9e:	025b      	lsls	r3, r3, #9
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	025b      	lsls	r3, r3, #9
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	4bbb      	ldr	r3, [pc, #748]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x58>
 8004ab6:	e071      	b.n	8004b9c <HAL_RCC_OscConfig+0x13c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d000      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x62>
 8004ac0:	e06c      	b.n	8004b9c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f000 fb4c 	bl	8005160 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x80>
 8004ad0:	4bb1      	ldr	r3, [pc, #708]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	0249      	lsls	r1, r1, #9
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e02f      	b.n	8004b40 <HAL_RCC_OscConfig+0xe0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCC_OscConfig+0xa2>
 8004ae8:	4bab      	ldr	r3, [pc, #684]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4baa      	ldr	r3, [pc, #680]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004aee:	49ab      	ldr	r1, [pc, #684]	@ (8004d9c <HAL_RCC_OscConfig+0x33c>)
 8004af0:	400a      	ands	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	4ba8      	ldr	r3, [pc, #672]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4ba7      	ldr	r3, [pc, #668]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004afa:	49a9      	ldr	r1, [pc, #676]	@ (8004da0 <HAL_RCC_OscConfig+0x340>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e01e      	b.n	8004b40 <HAL_RCC_OscConfig+0xe0>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d10e      	bne.n	8004b28 <HAL_RCC_OscConfig+0xc8>
 8004b0a:	4ba3      	ldr	r3, [pc, #652]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4ba2      	ldr	r3, [pc, #648]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b10:	2180      	movs	r1, #128	@ 0x80
 8004b12:	02c9      	lsls	r1, r1, #11
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	4b9f      	ldr	r3, [pc, #636]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b1e:	2180      	movs	r1, #128	@ 0x80
 8004b20:	0249      	lsls	r1, r1, #9
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0xe0>
 8004b28:	4b9b      	ldr	r3, [pc, #620]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b2e:	499b      	ldr	r1, [pc, #620]	@ (8004d9c <HAL_RCC_OscConfig+0x33c>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	4b98      	ldr	r3, [pc, #608]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b97      	ldr	r3, [pc, #604]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b3a:	4999      	ldr	r1, [pc, #612]	@ (8004da0 <HAL_RCC_OscConfig+0x340>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d014      	beq.n	8004b72 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd faca 	bl	80020e0 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b52:	f7fd fac5 	bl	80020e0 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	@ 0x64
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e2fd      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b64:	4b8c      	ldr	r3, [pc, #560]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	@ 0x80
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0xf2>
 8004b70:	e015      	b.n	8004b9e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b72:	f7fd fab5 	bl	80020e0 <HAL_GetTick>
 8004b76:	0003      	movs	r3, r0
 8004b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd fab0 	bl	80020e0 <HAL_GetTick>
 8004b80:	0002      	movs	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e2e8      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8e:	4b82      	ldr	r3, [pc, #520]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	4013      	ands	r3, r2
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x11c>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d100      	bne.n	8004baa <HAL_RCC_OscConfig+0x14a>
 8004ba8:	e06c      	b.n	8004c84 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004baa:	4b7b      	ldr	r3, [pc, #492]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	220c      	movs	r2, #12
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bb4:	4b78      	ldr	r3, [pc, #480]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	220c      	movs	r2, #12
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d11f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1a0>
 8004bc0:	4b75      	ldr	r3, [pc, #468]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	23c0      	movs	r3, #192	@ 0xc0
 8004bc6:	025b      	lsls	r3, r3, #9
 8004bc8:	401a      	ands	r2, r3
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d116      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	4b71      	ldr	r3, [pc, #452]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_OscConfig+0x188>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e2bb      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	22f8      	movs	r2, #248	@ 0xf8
 8004bee:	4393      	bics	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00da      	lsls	r2, r3, #3
 8004bf8:	4b67      	ldr	r3, [pc, #412]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	e041      	b.n	8004c84 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d024      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c08:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b62      	ldr	r3, [pc, #392]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd fa64 	bl	80020e0 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1e:	f7fd fa5f 	bl	80020e0 <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e297      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2202      	movs	r2, #2
 8004c36:	4013      	ands	r3, r2
 8004c38:	d0f1      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b57      	ldr	r3, [pc, #348]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	22f8      	movs	r2, #248	@ 0xf8
 8004c40:	4393      	bics	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	00da      	lsls	r2, r3, #3
 8004c4a:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e018      	b.n	8004c84 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c52:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b50      	ldr	r3, [pc, #320]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	438a      	bics	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fd fa3f 	bl	80020e0 <HAL_GetTick>
 8004c62:	0003      	movs	r3, r0
 8004c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c68:	f7fd fa3a 	bl	80020e0 <HAL_GetTick>
 8004c6c:	0002      	movs	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e272      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d1f1      	bne.n	8004c68 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d036      	beq.n	8004cfc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d019      	beq.n	8004cca <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b40      	ldr	r3, [pc, #256]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fa1d 	bl	80020e0 <HAL_GetTick>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fd fa18 	bl	80020e0 <HAL_GetTick>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e250      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	4b36      	ldr	r3, [pc, #216]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d0f1      	beq.n	8004cac <HAL_RCC_OscConfig+0x24c>
 8004cc8:	e018      	b.n	8004cfc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cce:	4b32      	ldr	r3, [pc, #200]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fa03 	bl	80020e0 <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd f9fe 	bl	80020e0 <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e236      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf2:	4b29      	ldr	r3, [pc, #164]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d1f1      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2204      	movs	r2, #4
 8004d02:	4013      	ands	r3, r2
 8004d04:	d100      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2a8>
 8004d06:	e0b5      	b.n	8004e74 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d08:	201f      	movs	r0, #31
 8004d0a:	183b      	adds	r3, r7, r0
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	055b      	lsls	r3, r3, #21
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d110      	bne.n	8004d3e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	4b1d      	ldr	r3, [pc, #116]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d22:	2180      	movs	r1, #128	@ 0x80
 8004d24:	0549      	lsls	r1, r1, #21
 8004d26:	430a      	orrs	r2, r1
 8004d28:	61da      	str	r2, [r3, #28]
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	055b      	lsls	r3, r3, #21
 8004d32:	4013      	ands	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3e:	4b19      	ldr	r3, [pc, #100]	@ (8004da4 <HAL_RCC_OscConfig+0x344>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	d11a      	bne.n	8004d80 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d4a:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <HAL_RCC_OscConfig+0x344>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <HAL_RCC_OscConfig+0x344>)
 8004d50:	2180      	movs	r1, #128	@ 0x80
 8004d52:	0049      	lsls	r1, r1, #1
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d58:	f7fd f9c2 	bl	80020e0 <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7fd f9bd 	bl	80020e0 <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1f5      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d74:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <HAL_RCC_OscConfig+0x344>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10f      	bne.n	8004da8 <HAL_RCC_OscConfig+0x348>
 8004d88:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	4b02      	ldr	r3, [pc, #8]	@ (8004d98 <HAL_RCC_OscConfig+0x338>)
 8004d8e:	2101      	movs	r1, #1
 8004d90:	430a      	orrs	r2, r1
 8004d92:	621a      	str	r2, [r3, #32]
 8004d94:	e036      	b.n	8004e04 <HAL_RCC_OscConfig+0x3a4>
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	fffeffff 	.word	0xfffeffff
 8004da0:	fffbffff 	.word	0xfffbffff
 8004da4:	40007000 	.word	0x40007000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10c      	bne.n	8004dca <HAL_RCC_OscConfig+0x36a>
 8004db0:	4bca      	ldr	r3, [pc, #808]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	4bc9      	ldr	r3, [pc, #804]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004db6:	2101      	movs	r1, #1
 8004db8:	438a      	bics	r2, r1
 8004dba:	621a      	str	r2, [r3, #32]
 8004dbc:	4bc7      	ldr	r3, [pc, #796]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	4bc6      	ldr	r3, [pc, #792]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	621a      	str	r2, [r3, #32]
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x3a4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x38c>
 8004dd2:	4bc2      	ldr	r3, [pc, #776]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	4bc1      	ldr	r3, [pc, #772]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dd8:	2104      	movs	r1, #4
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	621a      	str	r2, [r3, #32]
 8004dde:	4bbf      	ldr	r3, [pc, #764]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	4bbe      	ldr	r3, [pc, #760]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004de4:	2101      	movs	r1, #1
 8004de6:	430a      	orrs	r2, r1
 8004de8:	621a      	str	r2, [r3, #32]
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0x3a4>
 8004dec:	4bbb      	ldr	r3, [pc, #748]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	4bba      	ldr	r3, [pc, #744]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004df2:	2101      	movs	r1, #1
 8004df4:	438a      	bics	r2, r1
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	4bb8      	ldr	r3, [pc, #736]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	4bb7      	ldr	r3, [pc, #732]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004dfe:	2104      	movs	r1, #4
 8004e00:	438a      	bics	r2, r1
 8004e02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d014      	beq.n	8004e36 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0c:	f7fd f968 	bl	80020e0 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	e009      	b.n	8004e2a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e16:	f7fd f963 	bl	80020e0 <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	4aaf      	ldr	r2, [pc, #700]	@ (80050e0 <HAL_RCC_OscConfig+0x680>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e19a      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	4bac      	ldr	r3, [pc, #688]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	4013      	ands	r3, r2
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x3b6>
 8004e34:	e013      	b.n	8004e5e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e36:	f7fd f953 	bl	80020e0 <HAL_GetTick>
 8004e3a:	0003      	movs	r3, r0
 8004e3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	e009      	b.n	8004e54 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fd f94e 	bl	80020e0 <HAL_GetTick>
 8004e44:	0002      	movs	r2, r0
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	4aa5      	ldr	r2, [pc, #660]	@ (80050e0 <HAL_RCC_OscConfig+0x680>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e185      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	4ba1      	ldr	r3, [pc, #644]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e5e:	231f      	movs	r3, #31
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b9c      	ldr	r3, [pc, #624]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	4b9b      	ldr	r3, [pc, #620]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e6e:	499d      	ldr	r1, [pc, #628]	@ (80050e4 <HAL_RCC_OscConfig+0x684>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2210      	movs	r2, #16
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d12a      	bne.n	8004edc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e86:	4b95      	ldr	r3, [pc, #596]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8a:	4b94      	ldr	r3, [pc, #592]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e8c:	2104      	movs	r1, #4
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e92:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e96:	4b91      	ldr	r3, [pc, #580]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004e98:	2101      	movs	r1, #1
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fd f91f 	bl	80020e0 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ea8:	f7fd f91a 	bl	80020e0 <HAL_GetTick>
 8004eac:	0002      	movs	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e152      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004eba:	4b88      	ldr	r3, [pc, #544]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d0f1      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ec4:	4b85      	ldr	r3, [pc, #532]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	22f8      	movs	r2, #248	@ 0xf8
 8004eca:	4393      	bics	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	00da      	lsls	r2, r3, #3
 8004ed4:	4b81      	ldr	r3, [pc, #516]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eda:	e034      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	3305      	adds	r3, #5
 8004ee2:	d111      	bne.n	8004f08 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004eea:	2104      	movs	r1, #4
 8004eec:	438a      	bics	r2, r1
 8004eee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef4:	22f8      	movs	r2, #248	@ 0xf8
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	00da      	lsls	r2, r3, #3
 8004f00:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f06:	e01e      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f08:	4b74      	ldr	r3, [pc, #464]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0c:	4b73      	ldr	r3, [pc, #460]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f0e:	2104      	movs	r1, #4
 8004f10:	430a      	orrs	r2, r1
 8004f12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f14:	4b71      	ldr	r3, [pc, #452]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f18:	4b70      	ldr	r3, [pc, #448]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f20:	f7fd f8de 	bl	80020e0 <HAL_GetTick>
 8004f24:	0003      	movs	r3, r0
 8004f26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f2a:	f7fd f8d9 	bl	80020e0 <HAL_GetTick>
 8004f2e:	0002      	movs	r2, r0
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e111      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f3c:	4b67      	ldr	r3, [pc, #412]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f40:	2202      	movs	r2, #2
 8004f42:	4013      	ands	r3, r2
 8004f44:	d1f1      	bne.n	8004f2a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d05c      	beq.n	800500a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f50:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	220c      	movs	r2, #12
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	d00e      	beq.n	8004f7a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	220c      	movs	r2, #12
 8004f62:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d114      	bne.n	8004f92 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f68:	4b5c      	ldr	r3, [pc, #368]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	23c0      	movs	r3, #192	@ 0xc0
 8004f6e:	025b      	lsls	r3, r3, #9
 8004f70:	401a      	ands	r2, r3
 8004f72:	23c0      	movs	r3, #192	@ 0xc0
 8004f74:	025b      	lsls	r3, r3, #9
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f7a:	4b58      	ldr	r3, [pc, #352]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f7e:	2380      	movs	r3, #128	@ 0x80
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	4013      	ands	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_RCC_OscConfig+0x5a8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d03c      	beq.n	8005008 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0e6      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f9a:	4b50      	ldr	r3, [pc, #320]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004fa0:	2180      	movs	r1, #128	@ 0x80
 8004fa2:	0249      	lsls	r1, r1, #9
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f89a 	bl	80020e0 <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb2:	f7fd f895 	bl	80020e0 <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0cd      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fc4:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x552>
 8004fd0:	e01b      	b.n	800500a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fd2:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fd6:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004fd8:	4943      	ldr	r1, [pc, #268]	@ (80050e8 <HAL_RCC_OscConfig+0x688>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fde:	f7fd f87f 	bl	80020e0 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe8:	f7fd f87a 	bl	80020e0 <HAL_GetTick>
 8004fec:	0002      	movs	r2, r0
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0b2      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ffa:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	4013      	ands	r3, r2
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x588>
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005008:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d100      	bne.n	8005014 <HAL_RCC_OscConfig+0x5b4>
 8005012:	e0a4      	b.n	800515e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005014:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	220c      	movs	r2, #12
 800501a:	4013      	ands	r3, r2
 800501c:	2b08      	cmp	r3, #8
 800501e:	d100      	bne.n	8005022 <HAL_RCC_OscConfig+0x5c2>
 8005020:	e078      	b.n	8005114 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	2b02      	cmp	r3, #2
 8005028:	d14c      	bne.n	80050c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b2b      	ldr	r3, [pc, #172]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005030:	492e      	ldr	r1, [pc, #184]	@ (80050ec <HAL_RCC_OscConfig+0x68c>)
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fd f853 	bl	80020e0 <HAL_GetTick>
 800503a:	0003      	movs	r3, r0
 800503c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fd f84e 	bl	80020e0 <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e086      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005052:	4b22      	ldr	r3, [pc, #136]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	049b      	lsls	r3, r3, #18
 800505a:	4013      	ands	r3, r2
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800505e:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	220f      	movs	r2, #15
 8005064:	4393      	bics	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 800506e:	430a      	orrs	r2, r1
 8005070:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005072:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a1e      	ldr	r2, [pc, #120]	@ (80050f0 <HAL_RCC_OscConfig+0x690>)
 8005078:	4013      	ands	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005084:	431a      	orrs	r2, r3
 8005086:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 8005092:	2180      	movs	r1, #128	@ 0x80
 8005094:	0449      	lsls	r1, r1, #17
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd f821 	bl	80020e0 <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd f81c 	bl	80020e0 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e054      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050b6:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	049b      	lsls	r3, r3, #18
 80050be:	4013      	ands	r3, r2
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x644>
 80050c2:	e04c      	b.n	800515e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <HAL_RCC_OscConfig+0x67c>)
 80050ca:	4908      	ldr	r1, [pc, #32]	@ (80050ec <HAL_RCC_OscConfig+0x68c>)
 80050cc:	400a      	ands	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fd f806 	bl	80020e0 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x6a6>
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	40021000 	.word	0x40021000
 80050e0:	00001388 	.word	0x00001388
 80050e4:	efffffff 	.word	0xefffffff
 80050e8:	fffeffff 	.word	0xfffeffff
 80050ec:	feffffff 	.word	0xfeffffff
 80050f0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fc fff4 	bl	80020e0 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e02c      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005106:	4b18      	ldr	r3, [pc, #96]	@ (8005168 <HAL_RCC_OscConfig+0x708>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	049b      	lsls	r3, r3, #18
 800510e:	4013      	ands	r3, r2
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x694>
 8005112:	e024      	b.n	800515e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e01f      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005120:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <HAL_RCC_OscConfig+0x708>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <HAL_RCC_OscConfig+0x708>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	23c0      	movs	r3, #192	@ 0xc0
 8005130:	025b      	lsls	r3, r3, #9
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	429a      	cmp	r2, r3
 800513a:	d10e      	bne.n	800515a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	220f      	movs	r2, #15
 8005140:	401a      	ands	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d107      	bne.n	800515a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	23f0      	movs	r3, #240	@ 0xf0
 800514e:	039b      	lsls	r3, r3, #14
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b008      	add	sp, #32
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0bf      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b61      	ldr	r3, [pc, #388]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	4013      	ands	r3, r2
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d911      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b5e      	ldr	r3, [pc, #376]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	4393      	bics	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	4b59      	ldr	r3, [pc, #356]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0a6      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2202      	movs	r2, #2
 80051b8:	4013      	ands	r3, r2
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2204      	movs	r2, #4
 80051c2:	4013      	ands	r3, r2
 80051c4:	d006      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051c6:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4b50      	ldr	r3, [pc, #320]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80051cc:	21e0      	movs	r1, #224	@ 0xe0
 80051ce:	00c9      	lsls	r1, r1, #3
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b4d      	ldr	r3, [pc, #308]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	22f0      	movs	r2, #240	@ 0xf0
 80051da:	4393      	bics	r3, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	4b4a      	ldr	r3, [pc, #296]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2201      	movs	r2, #1
 80051ee:	4013      	ands	r3, r2
 80051f0:	d04c      	beq.n	800528c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	2380      	movs	r3, #128	@ 0x80
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	4013      	ands	r3, r2
 8005204:	d120      	bne.n	8005248 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07a      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	4013      	ands	r3, r2
 800521c:	d114      	bne.n	8005248 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06e      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d107      	bne.n	800523a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800522a:	4b38      	ldr	r3, [pc, #224]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 800522c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	029b      	lsls	r3, r3, #10
 8005232:	4013      	ands	r3, r2
 8005234:	d108      	bne.n	8005248 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e062      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523a:	4b34      	ldr	r3, [pc, #208]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2202      	movs	r2, #2
 8005240:	4013      	ands	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e05b      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005248:	4b30      	ldr	r3, [pc, #192]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2203      	movs	r2, #3
 800524e:	4393      	bics	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4b2d      	ldr	r3, [pc, #180]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800525c:	f7fc ff40 	bl	80020e0 <HAL_GetTick>
 8005260:	0003      	movs	r3, r0
 8005262:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005264:	e009      	b.n	800527a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005266:	f7fc ff3b 	bl	80020e0 <HAL_GetTick>
 800526a:	0002      	movs	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	4a27      	ldr	r2, [pc, #156]	@ (8005310 <HAL_RCC_ClockConfig+0x1a4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e042      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	4b24      	ldr	r3, [pc, #144]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	220c      	movs	r2, #12
 8005280:	401a      	ands	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	429a      	cmp	r2, r3
 800528a:	d1ec      	bne.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800528c:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	4013      	ands	r3, r2
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d211      	bcs.n	80052be <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529a:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2201      	movs	r2, #1
 80052a0:	4393      	bics	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	4b18      	ldr	r3, [pc, #96]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ac:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <HAL_RCC_ClockConfig+0x19c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d001      	beq.n	80052be <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e020      	b.n	8005300 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2204      	movs	r2, #4
 80052c4:	4013      	ands	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052c8:	4b10      	ldr	r3, [pc, #64]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <HAL_RCC_ClockConfig+0x1a8>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052dc:	f000 f820 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052e0:	0001      	movs	r1, r0
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <HAL_RCC_ClockConfig+0x1a0>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	220f      	movs	r2, #15
 80052ea:	4013      	ands	r3, r2
 80052ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005318 <HAL_RCC_ClockConfig+0x1ac>)
 80052ee:	5cd3      	ldrb	r3, [r2, r3]
 80052f0:	000a      	movs	r2, r1
 80052f2:	40da      	lsrs	r2, r3
 80052f4:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_ClockConfig+0x1b0>)
 80052f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052f8:	2003      	movs	r0, #3
 80052fa:	f7fc feab 	bl	8002054 <HAL_InitTick>
  
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b004      	add	sp, #16
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40022000 	.word	0x40022000
 800530c:	40021000 	.word	0x40021000
 8005310:	00001388 	.word	0x00001388
 8005314:	fffff8ff 	.word	0xfffff8ff
 8005318:	0800b130 	.word	0x0800b130
 800531c:	2000039c 	.word	0x2000039c

08005320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800533a:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	220c      	movs	r2, #12
 8005344:	4013      	ands	r3, r2
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d046      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0xb8>
 800534a:	d848      	bhi.n	80053de <HAL_RCC_GetSysClockFreq+0xbe>
 800534c:	2b04      	cmp	r3, #4
 800534e:	d002      	beq.n	8005356 <HAL_RCC_GetSysClockFreq+0x36>
 8005350:	2b08      	cmp	r3, #8
 8005352:	d003      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x3c>
 8005354:	e043      	b.n	80053de <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005356:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005358:	613b      	str	r3, [r7, #16]
      break;
 800535a:	e043      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0c9b      	lsrs	r3, r3, #18
 8005360:	220f      	movs	r2, #15
 8005362:	4013      	ands	r3, r2
 8005364:	4a24      	ldr	r2, [pc, #144]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800536a:	4b21      	ldr	r3, [pc, #132]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	220f      	movs	r2, #15
 8005370:	4013      	ands	r3, r2
 8005372:	4a22      	ldr	r2, [pc, #136]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xdc>)
 8005374:	5cd3      	ldrb	r3, [r2, r3]
 8005376:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	23c0      	movs	r3, #192	@ 0xc0
 800537c:	025b      	lsls	r3, r3, #9
 800537e:	401a      	ands	r2, r3
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	025b      	lsls	r3, r3, #9
 8005384:	429a      	cmp	r2, r3
 8005386:	d109      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	481a      	ldr	r0, [pc, #104]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800538c:	f7fa febc 	bl	8000108 <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	001a      	movs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4353      	muls	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e01a      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	23c0      	movs	r3, #192	@ 0xc0
 80053a0:	025b      	lsls	r3, r3, #9
 80053a2:	401a      	ands	r2, r3
 80053a4:	23c0      	movs	r3, #192	@ 0xc0
 80053a6:	025b      	lsls	r3, r3, #9
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d109      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4814      	ldr	r0, [pc, #80]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053b0:	f7fa feaa 	bl	8000108 <__udivsi3>
 80053b4:	0003      	movs	r3, r0
 80053b6:	001a      	movs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4353      	muls	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e008      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	480c      	ldr	r0, [pc, #48]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053c4:	f7fa fea0 	bl	8000108 <__udivsi3>
 80053c8:	0003      	movs	r3, r0
 80053ca:	001a      	movs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4353      	muls	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	613b      	str	r3, [r7, #16]
      break;
 80053d6:	e005      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053da:	613b      	str	r3, [r7, #16]
      break;
 80053dc:	e002      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053e0:	613b      	str	r3, [r7, #16]
      break;
 80053e2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053e4:	693b      	ldr	r3, [r7, #16]
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b006      	add	sp, #24
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	40021000 	.word	0x40021000
 80053f4:	007a1200 	.word	0x007a1200
 80053f8:	0800b140 	.word	0x0800b140
 80053fc:	0800b150 	.word	0x0800b150
 8005400:	02dc6c00 	.word	0x02dc6c00

08005404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	025b      	lsls	r3, r3, #9
 800541c:	4013      	ands	r3, r2
 800541e:	d100      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005420:	e08e      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2017      	movs	r0, #23
 8005424:	183b      	adds	r3, r7, r0
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	4b6e      	ldr	r3, [pc, #440]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	055b      	lsls	r3, r3, #21
 8005432:	4013      	ands	r3, r2
 8005434:	d110      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	4b6b      	ldr	r3, [pc, #428]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	4b6a      	ldr	r3, [pc, #424]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800543c:	2180      	movs	r1, #128	@ 0x80
 800543e:	0549      	lsls	r1, r1, #21
 8005440:	430a      	orrs	r2, r1
 8005442:	61da      	str	r2, [r3, #28]
 8005444:	4b67      	ldr	r3, [pc, #412]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	055b      	lsls	r3, r3, #21
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005452:	183b      	adds	r3, r7, r0
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	4b63      	ldr	r3, [pc, #396]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4013      	ands	r3, r2
 8005462:	d11a      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005464:	4b60      	ldr	r3, [pc, #384]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b5f      	ldr	r3, [pc, #380]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800546a:	2180      	movs	r1, #128	@ 0x80
 800546c:	0049      	lsls	r1, r1, #1
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005472:	f7fc fe35 	bl	80020e0 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547a:	e008      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fc fe30 	bl	80020e0 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e0a6      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548e:	4b56      	ldr	r3, [pc, #344]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d0f0      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800549a:	4b52      	ldr	r3, [pc, #328]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	23c0      	movs	r3, #192	@ 0xc0
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4013      	ands	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d034      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	23c0      	movs	r3, #192	@ 0xc0
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d02c      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054bc:	4b49      	ldr	r3, [pc, #292]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	4a4a      	ldr	r2, [pc, #296]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	4b46      	ldr	r3, [pc, #280]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054cc:	2180      	movs	r1, #128	@ 0x80
 80054ce:	0249      	lsls	r1, r1, #9
 80054d0:	430a      	orrs	r2, r1
 80054d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054d4:	4b43      	ldr	r3, [pc, #268]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	4b42      	ldr	r3, [pc, #264]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054da:	4945      	ldr	r1, [pc, #276]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80054dc:	400a      	ands	r2, r1
 80054de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054e0:	4b40      	ldr	r3, [pc, #256]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fc fdf7 	bl	80020e0 <HAL_GetTick>
 80054f2:	0003      	movs	r3, r0
 80054f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	e009      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f8:	f7fc fdf2 	bl	80020e0 <HAL_GetTick>
 80054fc:	0002      	movs	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a3c      	ldr	r2, [pc, #240]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e067      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550c:	4b35      	ldr	r3, [pc, #212]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	2202      	movs	r2, #2
 8005512:	4013      	ands	r3, r2
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005516:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	4a34      	ldr	r2, [pc, #208]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b2f      	ldr	r3, [pc, #188]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005526:	430a      	orrs	r2, r1
 8005528:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800552a:	2317      	movs	r3, #23
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005534:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	4b2a      	ldr	r3, [pc, #168]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800553a:	492f      	ldr	r1, [pc, #188]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800553c:	400a      	ands	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	4013      	ands	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800554a:	4b26      	ldr	r3, [pc, #152]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	2203      	movs	r2, #3
 8005550:	4393      	bics	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b22      	ldr	r3, [pc, #136]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555a:	430a      	orrs	r2, r1
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2202      	movs	r2, #2
 8005564:	4013      	ands	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005568:	4b1e      	ldr	r3, [pc, #120]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556c:	4a23      	ldr	r2, [pc, #140]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005578:	430a      	orrs	r2, r1
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2220      	movs	r2, #32
 8005582:	4013      	ands	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005586:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	2210      	movs	r2, #16
 800558c:	4393      	bics	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005596:	430a      	orrs	r2, r1
 8005598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	4013      	ands	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055a6:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	2280      	movs	r2, #128	@ 0x80
 80055ac:	4393      	bics	r3, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055b6:	430a      	orrs	r2, r1
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4013      	ands	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055c6:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	2240      	movs	r2, #64	@ 0x40
 80055cc:	4393      	bics	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	4b03      	ldr	r3, [pc, #12]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b006      	add	sp, #24
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40007000 	.word	0x40007000
 80055ec:	fffffcff 	.word	0xfffffcff
 80055f0:	fffeffff 	.word	0xfffeffff
 80055f4:	00001388 	.word	0x00001388
 80055f8:	efffffff 	.word	0xefffffff
 80055fc:	fffcffff 	.word	0xfffcffff

08005600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e042      	b.n	8005698 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	223d      	movs	r2, #61	@ 0x3d
 8005616:	5c9b      	ldrb	r3, [r3, r2]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	223c      	movs	r2, #60	@ 0x3c
 8005622:	2100      	movs	r1, #0
 8005624:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0018      	movs	r0, r3
 800562a:	f7fc fbdb 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	@ 0x3d
 8005632:	2102      	movs	r1, #2
 8005634:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3304      	adds	r3, #4
 800563e:	0019      	movs	r1, r3
 8005640:	0010      	movs	r0, r2
 8005642:	f000 fee9 	bl	8006418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2246      	movs	r2, #70	@ 0x46
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	223e      	movs	r2, #62	@ 0x3e
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	223f      	movs	r2, #63	@ 0x3f
 800565a:	2101      	movs	r1, #1
 800565c:	5499      	strb	r1, [r3, r2]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2240      	movs	r2, #64	@ 0x40
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2241      	movs	r2, #65	@ 0x41
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2242      	movs	r2, #66	@ 0x42
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2243      	movs	r2, #67	@ 0x43
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2244      	movs	r2, #68	@ 0x44
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2245      	movs	r2, #69	@ 0x45
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	223d      	movs	r2, #61	@ 0x3d
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	223d      	movs	r2, #61	@ 0x3d
 80056ac:	5c9b      	ldrb	r3, [r3, r2]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e03b      	b.n	8005730 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	223d      	movs	r2, #61	@ 0x3d
 80056bc:	2102      	movs	r1, #2
 80056be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2101      	movs	r1, #1
 80056cc:	430a      	orrs	r2, r1
 80056ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <HAL_TIM_Base_Start_IT+0x98>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <HAL_TIM_Base_Start_IT+0x5a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	05db      	lsls	r3, r3, #23
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d009      	beq.n	80056fa <HAL_TIM_Base_Start_IT+0x5a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a14      	ldr	r2, [pc, #80]	@ (800573c <HAL_TIM_Base_Start_IT+0x9c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_Base_Start_IT+0x5a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a12      	ldr	r2, [pc, #72]	@ (8005740 <HAL_TIM_Base_Start_IT+0xa0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d111      	bne.n	800571e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2207      	movs	r2, #7
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d010      	beq.n	800572e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	e007      	b.n	800572e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b004      	add	sp, #16
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40000400 	.word	0x40000400
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e042      	b.n	80057dc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	223d      	movs	r2, #61	@ 0x3d
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	223c      	movs	r2, #60	@ 0x3c
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f839 	bl	80057e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	223d      	movs	r2, #61	@ 0x3d
 8005776:	2102      	movs	r1, #2
 8005778:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	0019      	movs	r1, r3
 8005784:	0010      	movs	r0, r2
 8005786:	f000 fe47 	bl	8006418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2246      	movs	r2, #70	@ 0x46
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	223e      	movs	r2, #62	@ 0x3e
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	223f      	movs	r2, #63	@ 0x3f
 800579e:	2101      	movs	r1, #1
 80057a0:	5499      	strb	r1, [r3, r2]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2240      	movs	r2, #64	@ 0x40
 80057a6:	2101      	movs	r1, #1
 80057a8:	5499      	strb	r1, [r3, r2]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2241      	movs	r2, #65	@ 0x41
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2242      	movs	r2, #66	@ 0x42
 80057b6:	2101      	movs	r1, #1
 80057b8:	5499      	strb	r1, [r3, r2]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2243      	movs	r2, #67	@ 0x43
 80057be:	2101      	movs	r1, #1
 80057c0:	5499      	strb	r1, [r3, r2]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2244      	movs	r2, #68	@ 0x44
 80057c6:	2101      	movs	r1, #1
 80057c8:	5499      	strb	r1, [r3, r2]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2245      	movs	r2, #69	@ 0x45
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	223d      	movs	r2, #61	@ 0x3d
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	0018      	movs	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ec:	46c0      	nop			@ (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b002      	add	sp, #8
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	001a      	movs	r2, r3
 8005802:	1cbb      	adds	r3, r7, #2
 8005804:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2317      	movs	r3, #23
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d108      	bne.n	8005826 <HAL_TIM_PWM_Start_DMA+0x32>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	223e      	movs	r2, #62	@ 0x3e
 8005818:	5c9b      	ldrb	r3, [r3, r2]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3b02      	subs	r3, #2
 800581e:	425a      	negs	r2, r3
 8005820:	4153      	adcs	r3, r2
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e01f      	b.n	8005866 <HAL_TIM_PWM_Start_DMA+0x72>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d108      	bne.n	800583e <HAL_TIM_PWM_Start_DMA+0x4a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	223f      	movs	r2, #63	@ 0x3f
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	3b02      	subs	r3, #2
 8005836:	425a      	negs	r2, r3
 8005838:	4153      	adcs	r3, r2
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e013      	b.n	8005866 <HAL_TIM_PWM_Start_DMA+0x72>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d108      	bne.n	8005856 <HAL_TIM_PWM_Start_DMA+0x62>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	3b02      	subs	r3, #2
 800584e:	425a      	negs	r2, r3
 8005850:	4153      	adcs	r3, r2
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e007      	b.n	8005866 <HAL_TIM_PWM_Start_DMA+0x72>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2241      	movs	r2, #65	@ 0x41
 800585a:	5c9b      	ldrb	r3, [r3, r2]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	3b02      	subs	r3, #2
 8005860:	425a      	negs	r2, r3
 8005862:	4153      	adcs	r3, r2
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
 800586c:	e164      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d108      	bne.n	8005886 <HAL_TIM_PWM_Start_DMA+0x92>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	223e      	movs	r2, #62	@ 0x3e
 8005878:	5c9b      	ldrb	r3, [r3, r2]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	425a      	negs	r2, r3
 8005880:	4153      	adcs	r3, r2
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e01f      	b.n	80058c6 <HAL_TIM_PWM_Start_DMA+0xd2>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d108      	bne.n	800589e <HAL_TIM_PWM_Start_DMA+0xaa>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	223f      	movs	r2, #63	@ 0x3f
 8005890:	5c9b      	ldrb	r3, [r3, r2]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	425a      	negs	r2, r3
 8005898:	4153      	adcs	r3, r2
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e013      	b.n	80058c6 <HAL_TIM_PWM_Start_DMA+0xd2>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d108      	bne.n	80058b6 <HAL_TIM_PWM_Start_DMA+0xc2>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2240      	movs	r2, #64	@ 0x40
 80058a8:	5c9b      	ldrb	r3, [r3, r2]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	425a      	negs	r2, r3
 80058b0:	4153      	adcs	r3, r2
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	e007      	b.n	80058c6 <HAL_TIM_PWM_Start_DMA+0xd2>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2241      	movs	r2, #65	@ 0x41
 80058ba:	5c9b      	ldrb	r3, [r3, r2]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	425a      	negs	r2, r3
 80058c2:	4153      	adcs	r3, r2
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d025      	beq.n	8005916 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_PWM_Start_DMA+0xe4>
 80058d0:	1cbb      	adds	r3, r7, #2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e12d      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <HAL_TIM_PWM_Start_DMA+0xf8>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	223e      	movs	r2, #62	@ 0x3e
 80058e6:	2102      	movs	r1, #2
 80058e8:	5499      	strb	r1, [r3, r2]
 80058ea:	e016      	b.n	800591a <HAL_TIM_PWM_Start_DMA+0x126>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d104      	bne.n	80058fc <HAL_TIM_PWM_Start_DMA+0x108>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	223f      	movs	r2, #63	@ 0x3f
 80058f6:	2102      	movs	r1, #2
 80058f8:	5499      	strb	r1, [r3, r2]
 80058fa:	e00e      	b.n	800591a <HAL_TIM_PWM_Start_DMA+0x126>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d104      	bne.n	800590c <HAL_TIM_PWM_Start_DMA+0x118>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2240      	movs	r2, #64	@ 0x40
 8005906:	2102      	movs	r1, #2
 8005908:	5499      	strb	r1, [r3, r2]
 800590a:	e006      	b.n	800591a <HAL_TIM_PWM_Start_DMA+0x126>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2241      	movs	r2, #65	@ 0x41
 8005910:	2102      	movs	r1, #2
 8005912:	5499      	strb	r1, [r3, r2]
 8005914:	e001      	b.n	800591a <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e10e      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d100      	bne.n	8005922 <HAL_TIM_PWM_Start_DMA+0x12e>
 8005920:	e080      	b.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x230>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b0c      	cmp	r3, #12
 8005926:	d900      	bls.n	800592a <HAL_TIM_PWM_Start_DMA+0x136>
 8005928:	e0a1      	b.n	8005a6e <HAL_TIM_PWM_Start_DMA+0x27a>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d054      	beq.n	80059da <HAL_TIM_PWM_Start_DMA+0x1e6>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b08      	cmp	r3, #8
 8005934:	d900      	bls.n	8005938 <HAL_TIM_PWM_Start_DMA+0x144>
 8005936:	e09a      	b.n	8005a6e <HAL_TIM_PWM_Start_DMA+0x27a>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_PWM_Start_DMA+0x152>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d025      	beq.n	8005990 <HAL_TIM_PWM_Start_DMA+0x19c>
 8005944:	e093      	b.n	8005a6e <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	4a7d      	ldr	r2, [pc, #500]	@ (8005b40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800594c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	4a7c      	ldr	r2, [pc, #496]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005954:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x354>)
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3334      	adds	r3, #52	@ 0x34
 800596a:	001a      	movs	r2, r3
 800596c:	1cbb      	adds	r3, r7, #2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	f7fc fce6 	bl	8002340 <HAL_DMA_Start_IT>
 8005974:	1e03      	subs	r3, r0, #0
 8005976:	d001      	beq.n	800597c <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0dd      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2180      	movs	r1, #128	@ 0x80
 8005988:	0089      	lsls	r1, r1, #2
 800598a:	430a      	orrs	r2, r1
 800598c:	60da      	str	r2, [r3, #12]
      break;
 800598e:	e073      	b.n	8005a78 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	4a6a      	ldr	r2, [pc, #424]	@ (8005b40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005996:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	4a69      	ldr	r2, [pc, #420]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x350>)
 800599e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	4a68      	ldr	r2, [pc, #416]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x354>)
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3338      	adds	r3, #56	@ 0x38
 80059b4:	001a      	movs	r2, r3
 80059b6:	1cbb      	adds	r3, r7, #2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	f7fc fcc1 	bl	8002340 <HAL_DMA_Start_IT>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0b8      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2180      	movs	r1, #128	@ 0x80
 80059d2:	00c9      	lsls	r1, r1, #3
 80059d4:	430a      	orrs	r2, r1
 80059d6:	60da      	str	r2, [r3, #12]
      break;
 80059d8:	e04e      	b.n	8005a78 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	4a58      	ldr	r2, [pc, #352]	@ (8005b40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	4a57      	ldr	r2, [pc, #348]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x350>)
 80059e8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	4a56      	ldr	r2, [pc, #344]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x354>)
 80059f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	333c      	adds	r3, #60	@ 0x3c
 80059fe:	001a      	movs	r2, r3
 8005a00:	1cbb      	adds	r3, r7, #2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	f7fc fc9c 	bl	8002340 <HAL_DMA_Start_IT>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e093      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2180      	movs	r1, #128	@ 0x80
 8005a1c:	0109      	lsls	r1, r1, #4
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	60da      	str	r2, [r3, #12]
      break;
 8005a22:	e029      	b.n	8005a78 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	4a45      	ldr	r2, [pc, #276]	@ (8005b40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	4a44      	ldr	r2, [pc, #272]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005a32:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	4a43      	ldr	r2, [pc, #268]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3340      	adds	r3, #64	@ 0x40
 8005a48:	001a      	movs	r2, r3
 8005a4a:	1cbb      	adds	r3, r7, #2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	f7fc fc77 	bl	8002340 <HAL_DMA_Start_IT>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e06e      	b.n	8005b38 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2180      	movs	r1, #128	@ 0x80
 8005a66:	0149      	lsls	r1, r1, #5
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	60da      	str	r2, [r3, #12]
      break;
 8005a6c:	e004      	b.n	8005a78 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8005a6e:	2317      	movs	r3, #23
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005a78:	2317      	movs	r3, #23
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d157      	bne.n	8005b32 <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 ffe8 	bl	8006a60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2d      	ldr	r2, [pc, #180]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x358>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b50 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b54 <HAL_TIM_PWM_Start_DMA+0x360>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a29      	ldr	r2, [pc, #164]	@ (8005b58 <HAL_TIM_PWM_Start_DMA+0x364>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_PWM_Start_DMA+0x2c8>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_TIM_PWM_Start_DMA+0x2ca>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2180      	movs	r1, #128	@ 0x80
 8005ace:	0209      	lsls	r1, r1, #8
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x358>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00f      	beq.n	8005afe <HAL_TIM_PWM_Start_DMA+0x30a>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	05db      	lsls	r3, r3, #23
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d009      	beq.n	8005afe <HAL_TIM_PWM_Start_DMA+0x30a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1b      	ldr	r2, [pc, #108]	@ (8005b5c <HAL_TIM_PWM_Start_DMA+0x368>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_TIM_PWM_Start_DMA+0x30a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d111      	bne.n	8005b22 <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2207      	movs	r2, #7
 8005b06:	4013      	ands	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d010      	beq.n	8005b32 <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b20:	e007      	b.n	8005b32 <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b32:	2317      	movs	r3, #23
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	781b      	ldrb	r3, [r3, #0]
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b006      	add	sp, #24
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08006305 	.word	0x08006305
 8005b44:	080063af 	.word	0x080063af
 8005b48:	08006271 	.word	0x08006271
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800
 8005b5c:	40000400 	.word	0x40000400

08005b60 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6a:	230f      	movs	r3, #15
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d039      	beq.n	8005bec <HAL_TIM_PWM_Stop_DMA+0x8c>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d844      	bhi.n	8005c08 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d025      	beq.n	8005bd0 <HAL_TIM_PWM_Stop_DMA+0x70>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d83e      	bhi.n	8005c08 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_PWM_Stop_DMA+0x38>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d00e      	beq.n	8005bb4 <HAL_TIM_PWM_Stop_DMA+0x54>
 8005b96:	e037      	b.n	8005c08 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4954      	ldr	r1, [pc, #336]	@ (8005cf4 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fc fc2d 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 8005bb2:	e02e      	b.n	8005c12 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	494e      	ldr	r1, [pc, #312]	@ (8005cf8 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7fc fc1f 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 8005bce:	e020      	b.n	8005c12 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4948      	ldr	r1, [pc, #288]	@ (8005cfc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005bdc:	400a      	ands	r2, r1
 8005bde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7fc fc11 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 8005bea:	e012      	b.n	8005c12 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4942      	ldr	r1, [pc, #264]	@ (8005d00 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7fc fc03 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 8005c06:	e004      	b.n	8005c12 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8005c08:	230f      	movs	r3, #15
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
      break;
 8005c10:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c12:	230f      	movs	r3, #15
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d000      	beq.n	8005c1e <HAL_TIM_PWM_Stop_DMA+0xbe>
 8005c1c:	e063      	b.n	8005ce6 <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 ff1a 	bl	8006a60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a34      	ldr	r2, [pc, #208]	@ (8005d04 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a33      	ldr	r2, [pc, #204]	@ (8005d08 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a31      	ldr	r2, [pc, #196]	@ (8005d0c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a30      	ldr	r2, [pc, #192]	@ (8005d10 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_TIM_PWM_Stop_DMA+0xfa>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4a2b      	ldr	r2, [pc, #172]	@ (8005d14 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	d10d      	bne.n	8005c86 <HAL_TIM_PWM_Stop_DMA+0x126>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	4a29      	ldr	r2, [pc, #164]	@ (8005d18 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_PWM_Stop_DMA+0x126>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4926      	ldr	r1, [pc, #152]	@ (8005d1c <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d10d      	bne.n	8005cae <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	438a      	bics	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Stop_DMA+0x15e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	223e      	movs	r2, #62	@ 0x3e
 8005cb8:	2101      	movs	r1, #1
 8005cba:	5499      	strb	r1, [r3, r2]
 8005cbc:	e013      	b.n	8005ce6 <HAL_TIM_PWM_Stop_DMA+0x186>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Stop_DMA+0x16e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	223f      	movs	r2, #63	@ 0x3f
 8005cc8:	2101      	movs	r1, #1
 8005cca:	5499      	strb	r1, [r3, r2]
 8005ccc:	e00b      	b.n	8005ce6 <HAL_TIM_PWM_Stop_DMA+0x186>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Stop_DMA+0x17e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	@ 0x40
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]
 8005cdc:	e003      	b.n	8005ce6 <HAL_TIM_PWM_Stop_DMA+0x186>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2241      	movs	r2, #65	@ 0x41
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005ce6:	230f      	movs	r3, #15
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	781b      	ldrb	r3, [r3, #0]
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	fffffdff 	.word	0xfffffdff
 8005cf8:	fffffbff 	.word	0xfffffbff
 8005cfc:	fffff7ff 	.word	0xfffff7ff
 8005d00:	ffffefff 	.word	0xffffefff
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800
 8005d14:	00001111 	.word	0x00001111
 8005d18:	00000444 	.word	0x00000444
 8005d1c:	ffff7fff 	.word	0xffff7fff

08005d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d021      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2202      	movs	r2, #2
 8005d44:	4013      	ands	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4252      	negs	r2, r2
 8005d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4013      	ands	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 fa6a 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e007      	b.n	8005d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 fa5d 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fb ff55 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2204      	movs	r2, #4
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d01e      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2205      	movs	r2, #5
 8005d9a:	4252      	negs	r2, r2
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	23c0      	movs	r3, #192	@ 0xc0
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 fa43 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f000 fa36 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fb ff2e 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d021      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4013      	ands	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2209      	movs	r2, #9
 8005de8:	4252      	negs	r2, r2
 8005dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 fa1d 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005e06:	e007      	b.n	8005e18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 fa10 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7fb ff08 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2210      	movs	r2, #16
 8005e22:	4013      	ands	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d01e      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2211      	movs	r2, #17
 8005e34:	4252      	negs	r2, r2
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	23c0      	movs	r3, #192	@ 0xc0
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f9f6 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 f9e9 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fb fee1 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4013      	ands	r3, r2
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d008      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4252      	negs	r2, r2
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fb ff5b 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	4013      	ands	r3, r2
 8005e94:	d00c      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2280      	movs	r2, #128	@ 0x80
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d008      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2281      	movs	r2, #129	@ 0x81
 8005ea4:	4252      	negs	r2, r2
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 fe62 	bl	8006b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2240      	movs	r2, #64	@ 0x40
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	@ 0x40
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d008      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2241      	movs	r2, #65	@ 0x41
 8005ec6:	4252      	negs	r2, r2
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 f9bf 	bl	8006250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d008      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2221      	movs	r2, #33	@ 0x21
 8005ee8:	4252      	negs	r2, r2
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fe38 	bl	8006b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	2317      	movs	r3, #23
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	223c      	movs	r2, #60	@ 0x3c
 8005f14:	5c9b      	ldrb	r3, [r3, r2]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0ad      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	223c      	movs	r2, #60	@ 0x3c
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d100      	bne.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8005f2c:	e076      	b.n	800601c <HAL_TIM_PWM_ConfigChannel+0x120>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d900      	bls.n	8005f36 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005f34:	e095      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d04e      	beq.n	8005fda <HAL_TIM_PWM_ConfigChannel+0xde>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d900      	bls.n	8005f44 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005f42:	e08e      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d021      	beq.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005f50:	e087      	b.n	8006062 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 faea 	bl	8006534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	438a      	bics	r2, r1
 8005f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	619a      	str	r2, [r3, #24]
      break;
 8005f92:	e06b      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 fb51 	bl	8006644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2180      	movs	r1, #128	@ 0x80
 8005fae:	0109      	lsls	r1, r1, #4
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4931      	ldr	r1, [pc, #196]	@ (8006084 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6999      	ldr	r1, [r3, #24]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	021a      	lsls	r2, r3, #8
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	619a      	str	r2, [r3, #24]
      break;
 8005fd8:	e048      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0011      	movs	r1, r2
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 fbb2 	bl	800674c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69da      	ldr	r2, [r3, #28]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2108      	movs	r1, #8
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69da      	ldr	r2, [r3, #28]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2104      	movs	r1, #4
 8006004:	438a      	bics	r2, r1
 8006006:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69d9      	ldr	r1, [r3, #28]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
      break;
 800601a:	e027      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f000 fc17 	bl	8006858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2180      	movs	r1, #128	@ 0x80
 8006036:	0109      	lsls	r1, r1, #4
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69da      	ldr	r2, [r3, #28]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	490f      	ldr	r1, [pc, #60]	@ (8006084 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006048:	400a      	ands	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69d9      	ldr	r1, [r3, #28]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	61da      	str	r2, [r3, #28]
      break;
 8006060:	e004      	b.n	800606c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006062:	2317      	movs	r3, #23
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
      break;
 800606a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	223c      	movs	r2, #60	@ 0x3c
 8006070:	2100      	movs	r1, #0
 8006072:	5499      	strb	r1, [r3, r2]

  return status;
 8006074:	2317      	movs	r3, #23
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	781b      	ldrb	r3, [r3, #0]
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b006      	add	sp, #24
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	fffffbff 	.word	0xfffffbff

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	230f      	movs	r3, #15
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	223c      	movs	r2, #60	@ 0x3c
 800609e:	5c9b      	ldrb	r3, [r3, r2]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_ConfigClockSource+0x20>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0bc      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x19a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	223c      	movs	r2, #60	@ 0x3c
 80060ac:	2101      	movs	r1, #1
 80060ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	223d      	movs	r2, #61	@ 0x3d
 80060b4:	2102      	movs	r1, #2
 80060b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2277      	movs	r2, #119	@ 0x77
 80060c4:	4393      	bics	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4a58      	ldr	r2, [pc, #352]	@ (800622c <HAL_TIM_ConfigClockSource+0x1a4>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2280      	movs	r2, #128	@ 0x80
 80060de:	0192      	lsls	r2, r2, #6
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d040      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xde>
 80060e4:	2280      	movs	r2, #128	@ 0x80
 80060e6:	0192      	lsls	r2, r2, #6
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d900      	bls.n	80060ee <HAL_TIM_ConfigClockSource+0x66>
 80060ec:	e088      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	0152      	lsls	r2, r2, #5
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d100      	bne.n	80060f8 <HAL_TIM_ConfigClockSource+0x70>
 80060f6:	e088      	b.n	800620a <HAL_TIM_ConfigClockSource+0x182>
 80060f8:	2280      	movs	r2, #128	@ 0x80
 80060fa:	0152      	lsls	r2, r2, #5
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d900      	bls.n	8006102 <HAL_TIM_ConfigClockSource+0x7a>
 8006100:	e07e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 8006102:	2b70      	cmp	r3, #112	@ 0x70
 8006104:	d018      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0xb0>
 8006106:	d900      	bls.n	800610a <HAL_TIM_ConfigClockSource+0x82>
 8006108:	e07a      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 800610a:	2b60      	cmp	r3, #96	@ 0x60
 800610c:	d04f      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x126>
 800610e:	d900      	bls.n	8006112 <HAL_TIM_ConfigClockSource+0x8a>
 8006110:	e076      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 8006112:	2b50      	cmp	r3, #80	@ 0x50
 8006114:	d03b      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x106>
 8006116:	d900      	bls.n	800611a <HAL_TIM_ConfigClockSource+0x92>
 8006118:	e072      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d057      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x146>
 800611e:	d900      	bls.n	8006122 <HAL_TIM_ConfigClockSource+0x9a>
 8006120:	e06e      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d063      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x166>
 8006126:	d86b      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d060      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x166>
 800612c:	d868      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d05d      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x166>
 8006132:	2b10      	cmp	r3, #16
 8006134:	d05b      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x166>
 8006136:	e063      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006148:	f000 fc6a 	bl	8006a20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2277      	movs	r2, #119	@ 0x77
 8006158:	4313      	orrs	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	609a      	str	r2, [r3, #8]
      break;
 8006164:	e052      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	f000 fc53 	bl	8006a20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2180      	movs	r1, #128	@ 0x80
 8006186:	01c9      	lsls	r1, r1, #7
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]
      break;
 800618c:	e03e      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	001a      	movs	r2, r3
 800619c:	f000 fbc6 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2150      	movs	r1, #80	@ 0x50
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 fc20 	bl	80069ec <TIM_ITRx_SetConfig>
      break;
 80061ac:	e02e      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ba:	001a      	movs	r2, r3
 80061bc:	f000 fbe4 	bl	8006988 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2160      	movs	r1, #96	@ 0x60
 80061c6:	0018      	movs	r0, r3
 80061c8:	f000 fc10 	bl	80069ec <TIM_ITRx_SetConfig>
      break;
 80061cc:	e01e      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061da:	001a      	movs	r2, r3
 80061dc:	f000 fba6 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2140      	movs	r1, #64	@ 0x40
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 fc00 	bl	80069ec <TIM_ITRx_SetConfig>
      break;
 80061ec:	e00e      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	0019      	movs	r1, r3
 80061f8:	0010      	movs	r0, r2
 80061fa:	f000 fbf7 	bl	80069ec <TIM_ITRx_SetConfig>
      break;
 80061fe:	e005      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006200:	230f      	movs	r3, #15
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
      break;
 8006208:	e000      	b.n	800620c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800620a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	223d      	movs	r2, #61	@ 0x3d
 8006210:	2101      	movs	r1, #1
 8006212:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	223c      	movs	r2, #60	@ 0x3c
 8006218:	2100      	movs	r1, #0
 800621a:	5499      	strb	r1, [r3, r2]

  return status;
 800621c:	230f      	movs	r3, #15
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	781b      	ldrb	r3, [r3, #0]
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bd80      	pop	{r7, pc}
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	ffff00ff 	.word	0xffff00ff

08006230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	46c0      	nop			@ (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006258:	46c0      	nop			@ (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006268:	46c0      	nop			@ (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}

08006270 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d107      	bne.n	8006298 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	223e      	movs	r2, #62	@ 0x3e
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]
 8006296:	e02a      	b.n	80062ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d107      	bne.n	80062b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2202      	movs	r2, #2
 80062a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	223f      	movs	r2, #63	@ 0x3f
 80062ac:	2101      	movs	r1, #1
 80062ae:	5499      	strb	r1, [r3, r2]
 80062b0:	e01d      	b.n	80062ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d107      	bne.n	80062cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2204      	movs	r2, #4
 80062c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2240      	movs	r2, #64	@ 0x40
 80062c6:	2101      	movs	r1, #1
 80062c8:	5499      	strb	r1, [r3, r2]
 80062ca:	e010      	b.n	80062ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d107      	bne.n	80062e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2208      	movs	r2, #8
 80062da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2241      	movs	r2, #65	@ 0x41
 80062e0:	2101      	movs	r1, #1
 80062e2:	5499      	strb	r1, [r3, r2]
 80062e4:	e003      	b.n	80062ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	223d      	movs	r2, #61	@ 0x3d
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7ff ffb5 	bl	8006260 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
}
 80062fc:	46c0      	nop			@ (mov r8, r8)
 80062fe:	46bd      	mov	sp, r7
 8006300:	b004      	add	sp, #16
 8006302:	bd80      	pop	{r7, pc}

08006304 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d10b      	bne.n	8006334 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d136      	bne.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	223e      	movs	r2, #62	@ 0x3e
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]
 8006332:	e031      	b.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d10b      	bne.n	8006356 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2202      	movs	r2, #2
 8006342:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d125      	bne.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	223f      	movs	r2, #63	@ 0x3f
 8006350:	2101      	movs	r1, #1
 8006352:	5499      	strb	r1, [r3, r2]
 8006354:	e020      	b.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d10b      	bne.n	8006378 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d114      	bne.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2240      	movs	r2, #64	@ 0x40
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
 8006376:	e00f      	b.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d10a      	bne.n	8006398 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2241      	movs	r2, #65	@ 0x41
 8006394:	2101      	movs	r1, #1
 8006396:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	0018      	movs	r0, r3
 800639c:	f7fb fc44 	bl	8001c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	771a      	strb	r2, [r3, #28]
}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b004      	add	sp, #16
 80063ac:	bd80      	pop	{r7, pc}

080063ae <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d103      	bne.n	80063ce <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]
 80063cc:	e019      	b.n	8006402 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d103      	bne.n	80063e0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2202      	movs	r2, #2
 80063dc:	771a      	strb	r2, [r3, #28]
 80063de:	e010      	b.n	8006402 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d103      	bne.n	80063f2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2204      	movs	r2, #4
 80063ee:	771a      	strb	r2, [r3, #28]
 80063f0:	e007      	b.n	8006402 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d102      	bne.n	8006402 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2208      	movs	r2, #8
 8006400:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	0018      	movs	r0, r3
 8006406:	f7fb fb8b 	bl	8001b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
}
 8006410:	46c0      	nop			@ (mov r8, r8)
 8006412:	46bd      	mov	sp, r7
 8006414:	b004      	add	sp, #16
 8006416:	bd80      	pop	{r7, pc}

08006418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3b      	ldr	r2, [pc, #236]	@ (8006518 <TIM_Base_SetConfig+0x100>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d008      	beq.n	8006442 <TIM_Base_SetConfig+0x2a>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2380      	movs	r3, #128	@ 0x80
 8006434:	05db      	lsls	r3, r3, #23
 8006436:	429a      	cmp	r2, r3
 8006438:	d003      	beq.n	8006442 <TIM_Base_SetConfig+0x2a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a37      	ldr	r2, [pc, #220]	@ (800651c <TIM_Base_SetConfig+0x104>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2270      	movs	r2, #112	@ 0x70
 8006446:	4393      	bics	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a30      	ldr	r2, [pc, #192]	@ (8006518 <TIM_Base_SetConfig+0x100>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	2380      	movs	r3, #128	@ 0x80
 8006460:	05db      	lsls	r3, r3, #23
 8006462:	429a      	cmp	r2, r3
 8006464:	d013      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2c      	ldr	r2, [pc, #176]	@ (800651c <TIM_Base_SetConfig+0x104>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <TIM_Base_SetConfig+0x108>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <TIM_Base_SetConfig+0x10c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a29      	ldr	r2, [pc, #164]	@ (8006528 <TIM_Base_SetConfig+0x110>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x76>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a28      	ldr	r2, [pc, #160]	@ (800652c <TIM_Base_SetConfig+0x114>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a27      	ldr	r2, [pc, #156]	@ (8006530 <TIM_Base_SetConfig+0x118>)
 8006492:	4013      	ands	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2280      	movs	r2, #128	@ 0x80
 80064a4:	4393      	bics	r3, r2
 80064a6:	001a      	movs	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a13      	ldr	r2, [pc, #76]	@ (8006518 <TIM_Base_SetConfig+0x100>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <TIM_Base_SetConfig+0xce>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a14      	ldr	r2, [pc, #80]	@ (8006524 <TIM_Base_SetConfig+0x10c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_Base_SetConfig+0xce>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a13      	ldr	r2, [pc, #76]	@ (8006528 <TIM_Base_SetConfig+0x110>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_Base_SetConfig+0xce>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a12      	ldr	r2, [pc, #72]	@ (800652c <TIM_Base_SetConfig+0x114>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d103      	bne.n	80064ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2201      	movs	r2, #1
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d106      	bne.n	800650e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2201      	movs	r2, #1
 8006506:	4393      	bics	r3, r2
 8006508:	001a      	movs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	611a      	str	r2, [r3, #16]
  }
}
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	46bd      	mov	sp, r7
 8006512:	b004      	add	sp, #16
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40000400 	.word	0x40000400
 8006520:	40002000 	.word	0x40002000
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800
 8006530:	fffffcff 	.word	0xfffffcff

08006534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	2201      	movs	r2, #1
 800654a:	4393      	bics	r3, r2
 800654c:	001a      	movs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2270      	movs	r2, #112	@ 0x70
 8006562:	4393      	bics	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2203      	movs	r2, #3
 800656a:	4393      	bics	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2202      	movs	r2, #2
 800657c:	4393      	bics	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a27      	ldr	r2, [pc, #156]	@ (800662c <TIM_OC1_SetConfig+0xf8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC1_SetConfig+0x76>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a26      	ldr	r2, [pc, #152]	@ (8006630 <TIM_OC1_SetConfig+0xfc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC1_SetConfig+0x76>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a25      	ldr	r2, [pc, #148]	@ (8006634 <TIM_OC1_SetConfig+0x100>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC1_SetConfig+0x76>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a24      	ldr	r2, [pc, #144]	@ (8006638 <TIM_OC1_SetConfig+0x104>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10c      	bne.n	80065c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2208      	movs	r2, #8
 80065ae:	4393      	bics	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2204      	movs	r2, #4
 80065c0:	4393      	bics	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a19      	ldr	r2, [pc, #100]	@ (800662c <TIM_OC1_SetConfig+0xf8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_OC1_SetConfig+0xb0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_OC1_SetConfig+0xfc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_OC1_SetConfig+0xb0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a17      	ldr	r2, [pc, #92]	@ (8006634 <TIM_OC1_SetConfig+0x100>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC1_SetConfig+0xb0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <TIM_OC1_SetConfig+0x104>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d111      	bne.n	8006608 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4a15      	ldr	r2, [pc, #84]	@ (800663c <TIM_OC1_SetConfig+0x108>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4a14      	ldr	r2, [pc, #80]	@ (8006640 <TIM_OC1_SetConfig+0x10c>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	46bd      	mov	sp, r7
 8006626:	b006      	add	sp, #24
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800
 800663c:	fffffeff 	.word	0xfffffeff
 8006640:	fffffdff 	.word	0xfffffdff

08006644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	2210      	movs	r2, #16
 800665a:	4393      	bics	r3, r2
 800665c:	001a      	movs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a2e      	ldr	r2, [pc, #184]	@ (800672c <TIM_OC2_SetConfig+0xe8>)
 8006672:	4013      	ands	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a2d      	ldr	r2, [pc, #180]	@ (8006730 <TIM_OC2_SetConfig+0xec>)
 800667a:	4013      	ands	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2220      	movs	r2, #32
 800668e:	4393      	bics	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a24      	ldr	r2, [pc, #144]	@ (8006734 <TIM_OC2_SetConfig+0xf0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10d      	bne.n	80066c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2280      	movs	r2, #128	@ 0x80
 80066aa:	4393      	bics	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2240      	movs	r2, #64	@ 0x40
 80066be:	4393      	bics	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006734 <TIM_OC2_SetConfig+0xf0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_OC2_SetConfig+0x9e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006738 <TIM_OC2_SetConfig+0xf4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_OC2_SetConfig+0x9e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a19      	ldr	r2, [pc, #100]	@ (800673c <TIM_OC2_SetConfig+0xf8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC2_SetConfig+0x9e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <TIM_OC2_SetConfig+0xfc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d113      	bne.n	800670a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4a17      	ldr	r2, [pc, #92]	@ (8006744 <TIM_OC2_SetConfig+0x100>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <TIM_OC2_SetConfig+0x104>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b006      	add	sp, #24
 800672a:	bd80      	pop	{r7, pc}
 800672c:	ffff8fff 	.word	0xffff8fff
 8006730:	fffffcff 	.word	0xfffffcff
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800
 8006744:	fffffbff 	.word	0xfffffbff
 8006748:	fffff7ff 	.word	0xfffff7ff

0800674c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	4a33      	ldr	r2, [pc, #204]	@ (8006830 <TIM_OC3_SetConfig+0xe4>)
 8006762:	401a      	ands	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2270      	movs	r2, #112	@ 0x70
 8006778:	4393      	bics	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2203      	movs	r2, #3
 8006780:	4393      	bics	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4a28      	ldr	r2, [pc, #160]	@ (8006834 <TIM_OC3_SetConfig+0xe8>)
 8006792:	4013      	ands	r3, r2
 8006794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <TIM_OC3_SetConfig+0xec>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10d      	bne.n	80067c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4a23      	ldr	r2, [pc, #140]	@ (800683c <TIM_OC3_SetConfig+0xf0>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006840 <TIM_OC3_SetConfig+0xf4>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <TIM_OC3_SetConfig+0xec>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_OC3_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <TIM_OC3_SetConfig+0xf8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_OC3_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <TIM_OC3_SetConfig+0xfc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_OC3_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <TIM_OC3_SetConfig+0x100>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d113      	bne.n	800680e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <TIM_OC3_SetConfig+0x104>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4a18      	ldr	r2, [pc, #96]	@ (8006854 <TIM_OC3_SetConfig+0x108>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	46c0      	nop			@ (mov r8, r8)
 800682a:	46bd      	mov	sp, r7
 800682c:	b006      	add	sp, #24
 800682e:	bd80      	pop	{r7, pc}
 8006830:	fffffeff 	.word	0xfffffeff
 8006834:	fffffdff 	.word	0xfffffdff
 8006838:	40012c00 	.word	0x40012c00
 800683c:	fffff7ff 	.word	0xfffff7ff
 8006840:	fffffbff 	.word	0xfffffbff
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800
 8006850:	ffffefff 	.word	0xffffefff
 8006854:	ffffdfff 	.word	0xffffdfff

08006858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	4a26      	ldr	r2, [pc, #152]	@ (8006908 <TIM_OC4_SetConfig+0xb0>)
 800686e:	401a      	ands	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a22      	ldr	r2, [pc, #136]	@ (800690c <TIM_OC4_SetConfig+0xb4>)
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <TIM_OC4_SetConfig+0xb8>)
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <TIM_OC4_SetConfig+0xbc>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a19      	ldr	r2, [pc, #100]	@ (8006918 <TIM_OC4_SetConfig+0xc0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <TIM_OC4_SetConfig+0x78>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a18      	ldr	r2, [pc, #96]	@ (800691c <TIM_OC4_SetConfig+0xc4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <TIM_OC4_SetConfig+0x78>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a17      	ldr	r2, [pc, #92]	@ (8006920 <TIM_OC4_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC4_SetConfig+0x78>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <TIM_OC4_SetConfig+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d109      	bne.n	80068e4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <TIM_OC4_SetConfig+0xd0>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	b006      	add	sp, #24
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			@ (mov r8, r8)
 8006908:	ffffefff 	.word	0xffffefff
 800690c:	ffff8fff 	.word	0xffff8fff
 8006910:	fffffcff 	.word	0xfffffcff
 8006914:	ffffdfff 	.word	0xffffdfff
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800
 8006928:	ffffbfff 	.word	0xffffbfff

0800692c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	2201      	movs	r2, #1
 8006944:	4393      	bics	r3, r2
 8006946:	001a      	movs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	22f0      	movs	r2, #240	@ 0xf0
 8006956:	4393      	bics	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	220a      	movs	r2, #10
 8006968:	4393      	bics	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	46c0      	nop			@ (mov r8, r8)
 8006982:	46bd      	mov	sp, r7
 8006984:	b006      	add	sp, #24
 8006986:	bd80      	pop	{r7, pc}

08006988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	2210      	movs	r2, #16
 80069a0:	4393      	bics	r3, r2
 80069a2:	001a      	movs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4a0d      	ldr	r2, [pc, #52]	@ (80069e8 <TIM_TI2_ConfigInputStage+0x60>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	22a0      	movs	r2, #160	@ 0xa0
 80069c4:	4393      	bics	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b006      	add	sp, #24
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	ffff0fff 	.word	0xffff0fff

080069ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2270      	movs	r2, #112	@ 0x70
 8006a00:	4393      	bics	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	2207      	movs	r2, #7
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	609a      	str	r2, [r3, #8]
}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b004      	add	sp, #16
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <TIM_ETR_SetConfig+0x3c>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	021a      	lsls	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	46c0      	nop			@ (mov r8, r8)
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b006      	add	sp, #24
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	ffff00ff 	.word	0xffff00ff

08006a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	221f      	movs	r2, #31
 8006a70:	4013      	ands	r3, r2
 8006a72:	2201      	movs	r2, #1
 8006a74:	409a      	lsls	r2, r3
 8006a76:	0013      	movs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	43d2      	mvns	r2, r2
 8006a82:	401a      	ands	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	211f      	movs	r1, #31
 8006a90:	400b      	ands	r3, r1
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4099      	lsls	r1, r3
 8006a96:	000b      	movs	r3, r1
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b006      	add	sp, #24
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223c      	movs	r2, #60	@ 0x3c
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e047      	b.n	8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	223c      	movs	r2, #60	@ 0x3c
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	223d      	movs	r2, #61	@ 0x3d
 8006acc:	2102      	movs	r1, #2
 8006ace:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2270      	movs	r2, #112	@ 0x70
 8006ae4:	4393      	bics	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	2380      	movs	r3, #128	@ 0x80
 8006b0a:	05db      	lsls	r3, r3, #23
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d009      	beq.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a11      	ldr	r2, [pc, #68]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a10      	ldr	r2, [pc, #64]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10c      	bne.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2280      	movs	r2, #128	@ 0x80
 8006b28:	4393      	bics	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	223d      	movs	r2, #61	@ 0x3d
 8006b42:	2101      	movs	r1, #1
 8006b44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	223c      	movs	r2, #60	@ 0x3c
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b004      	add	sp, #16
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40014000 	.word	0x40014000

08006b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b6c:	46c0      	nop			@ (mov r8, r8)
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	b002      	add	sp, #8
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b7c:	46c0      	nop			@ (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b002      	add	sp, #8
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2244      	movs	r2, #68	@ 0x44
 8006b90:	2100      	movs	r1, #0
 8006b92:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b94:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <USB_EnableGlobalInt+0x28>)
 8006b96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	b299      	uxth	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b004      	add	sp, #16
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	0000bf80 	.word	0x0000bf80

08006bb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bb8:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <USB_DisableGlobalInt+0x30>)
 8006bba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2240      	movs	r2, #64	@ 0x40
 8006bc0:	5a9b      	ldrh	r3, [r3, r2]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	43d2      	mvns	r2, r2
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b299      	uxth	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2240      	movs	r2, #64	@ 0x40
 8006bd4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	0018      	movs	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b004      	add	sp, #16
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	0000bf80 	.word	0x0000bf80

08006be4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	1d3b      	adds	r3, r7, #4
 8006bee:	6019      	str	r1, [r3, #0]
 8006bf0:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2240      	movs	r2, #64	@ 0x40
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2240      	movs	r2, #64	@ 0x40
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2244      	movs	r2, #68	@ 0x44
 8006c06:	2100      	movs	r1, #0
 8006c08:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2250      	movs	r2, #80	@ 0x50
 8006c0e:	2100      	movs	r1, #0
 8006c10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b09c      	sub	sp, #112	@ 0x70
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c26:	236f      	movs	r3, #111	@ 0x6f
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	18d3      	adds	r3, r2, r3
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	236c      	movs	r3, #108	@ 0x6c
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	49a1      	ldr	r1, [pc, #644]	@ (8006ec8 <USB_ActivateEndpoint+0x2ac>)
 8006c42:	400a      	ands	r2, r1
 8006c44:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	78db      	ldrb	r3, [r3, #3]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d017      	beq.n	8006c7e <USB_ActivateEndpoint+0x62>
 8006c4e:	dc28      	bgt.n	8006ca2 <USB_ActivateEndpoint+0x86>
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d00e      	beq.n	8006c72 <USB_ActivateEndpoint+0x56>
 8006c54:	dc25      	bgt.n	8006ca2 <USB_ActivateEndpoint+0x86>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <USB_ActivateEndpoint+0x44>
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d018      	beq.n	8006c90 <USB_ActivateEndpoint+0x74>
 8006c5e:	e020      	b.n	8006ca2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c60:	226c      	movs	r2, #108	@ 0x6c
 8006c62:	18bb      	adds	r3, r7, r2
 8006c64:	18ba      	adds	r2, r7, r2
 8006c66:	8812      	ldrh	r2, [r2, #0]
 8006c68:	2180      	movs	r1, #128	@ 0x80
 8006c6a:	0089      	lsls	r1, r1, #2
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	801a      	strh	r2, [r3, #0]
      break;
 8006c70:	e01c      	b.n	8006cac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8006c72:	226c      	movs	r2, #108	@ 0x6c
 8006c74:	18bb      	adds	r3, r7, r2
 8006c76:	18ba      	adds	r2, r7, r2
 8006c78:	8812      	ldrh	r2, [r2, #0]
 8006c7a:	801a      	strh	r2, [r3, #0]
      break;
 8006c7c:	e016      	b.n	8006cac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c7e:	226c      	movs	r2, #108	@ 0x6c
 8006c80:	18bb      	adds	r3, r7, r2
 8006c82:	18ba      	adds	r2, r7, r2
 8006c84:	8812      	ldrh	r2, [r2, #0]
 8006c86:	21c0      	movs	r1, #192	@ 0xc0
 8006c88:	00c9      	lsls	r1, r1, #3
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	801a      	strh	r2, [r3, #0]
      break;
 8006c8e:	e00d      	b.n	8006cac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c90:	226c      	movs	r2, #108	@ 0x6c
 8006c92:	18bb      	adds	r3, r7, r2
 8006c94:	18ba      	adds	r2, r7, r2
 8006c96:	8812      	ldrh	r2, [r2, #0]
 8006c98:	2180      	movs	r1, #128	@ 0x80
 8006c9a:	00c9      	lsls	r1, r1, #3
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	801a      	strh	r2, [r3, #0]
      break;
 8006ca0:	e004      	b.n	8006cac <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8006ca2:	236f      	movs	r3, #111	@ 0x6f
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	701a      	strb	r2, [r3, #0]
      break;
 8006caa:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18d3      	adds	r3, r2, r3
 8006cb6:	226c      	movs	r2, #108	@ 0x6c
 8006cb8:	18ba      	adds	r2, r7, r2
 8006cba:	8812      	ldrh	r2, [r2, #0]
 8006cbc:	4983      	ldr	r1, [pc, #524]	@ (8006ecc <USB_ActivateEndpoint+0x2b0>)
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	b292      	uxth	r2, r2
 8006cc2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	18d3      	adds	r3, r2, r3
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	b21b      	sxth	r3, r3
 8006cd4:	4a7e      	ldr	r2, [pc, #504]	@ (8006ed0 <USB_ActivateEndpoint+0x2b4>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b21a      	sxth	r2, r3
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	b21a      	sxth	r2, r3
 8006ce4:	2166      	movs	r1, #102	@ 0x66
 8006ce6:	187b      	adds	r3, r7, r1
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	18d3      	adds	r3, r2, r3
 8006cf4:	187a      	adds	r2, r7, r1
 8006cf6:	8812      	ldrh	r2, [r2, #0]
 8006cf8:	4974      	ldr	r1, [pc, #464]	@ (8006ecc <USB_ActivateEndpoint+0x2b0>)
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	7b1b      	ldrb	r3, [r3, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d000      	beq.n	8006d0a <USB_ActivateEndpoint+0xee>
 8006d08:	e177      	b.n	8006ffa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d100      	bne.n	8006d14 <USB_ActivateEndpoint+0xf8>
 8006d12:	e07a      	b.n	8006e0a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2250      	movs	r2, #80	@ 0x50
 8006d1c:	5a9b      	ldrh	r3, [r3, r2]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	001a      	movs	r2, r3
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	2280      	movs	r2, #128	@ 0x80
 8006d34:	00d2      	lsls	r2, r2, #3
 8006d36:	4694      	mov	ip, r2
 8006d38:	4463      	add	r3, ip
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	88db      	ldrh	r3, [r3, #6]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	18db      	adds	r3, r3, r3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	18d2      	adds	r2, r2, r3
 8006d56:	2112      	movs	r1, #18
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	8812      	ldrh	r2, [r2, #0]
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	2240      	movs	r2, #64	@ 0x40
 8006d64:	4013      	ands	r3, r2
 8006d66:	d016      	beq.n	8006d96 <USB_ActivateEndpoint+0x17a>
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	18d3      	adds	r3, r2, r3
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	2010      	movs	r0, #16
 8006d78:	183b      	adds	r3, r7, r0
 8006d7a:	4955      	ldr	r1, [pc, #340]	@ (8006ed0 <USB_ActivateEndpoint+0x2b4>)
 8006d7c:	400a      	ands	r2, r1
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	18d3      	adds	r3, r2, r3
 8006d8a:	183a      	adds	r2, r7, r0
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	4951      	ldr	r1, [pc, #324]	@ (8006ed4 <USB_ActivateEndpoint+0x2b8>)
 8006d90:	430a      	orrs	r2, r1
 8006d92:	b292      	uxth	r2, r2
 8006d94:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	78db      	ldrb	r3, [r3, #3]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d01d      	beq.n	8006dda <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	18d3      	adds	r3, r2, r3
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	200c      	movs	r0, #12
 8006dae:	183b      	adds	r3, r7, r0
 8006db0:	4949      	ldr	r1, [pc, #292]	@ (8006ed8 <USB_ActivateEndpoint+0x2bc>)
 8006db2:	400a      	ands	r2, r1
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	183b      	adds	r3, r7, r0
 8006db8:	183a      	adds	r2, r7, r0
 8006dba:	8812      	ldrh	r2, [r2, #0]
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	404a      	eors	r2, r1
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	183a      	adds	r2, r7, r0
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	493e      	ldr	r1, [pc, #248]	@ (8006ecc <USB_ActivateEndpoint+0x2b0>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	e2b5      	b.n	8007346 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	18d3      	adds	r3, r2, r3
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	200e      	movs	r0, #14
 8006dea:	183b      	adds	r3, r7, r0
 8006dec:	493a      	ldr	r1, [pc, #232]	@ (8006ed8 <USB_ActivateEndpoint+0x2bc>)
 8006dee:	400a      	ands	r2, r1
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	18d3      	adds	r3, r2, r3
 8006dfc:	183a      	adds	r2, r7, r0
 8006dfe:	8812      	ldrh	r2, [r2, #0]
 8006e00:	4932      	ldr	r1, [pc, #200]	@ (8006ecc <USB_ActivateEndpoint+0x2b0>)
 8006e02:	430a      	orrs	r2, r1
 8006e04:	b292      	uxth	r2, r2
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	e29d      	b.n	8007346 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2250      	movs	r2, #80	@ 0x50
 8006e12:	5a9b      	ldrh	r3, [r3, r2]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	001a      	movs	r2, r3
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	00da      	lsls	r2, r3, #3
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	18d3      	adds	r3, r2, r3
 8006e28:	4a2c      	ldr	r2, [pc, #176]	@ (8006edc <USB_ActivateEndpoint+0x2c0>)
 8006e2a:	4694      	mov	ip, r2
 8006e2c:	4463      	add	r3, ip
 8006e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	88db      	ldrh	r3, [r3, #6]
 8006e34:	085b      	lsrs	r3, r3, #1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	18db      	adds	r3, r3, r3
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2250      	movs	r2, #80	@ 0x50
 8006e48:	5a9b      	ldrh	r3, [r3, r2]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00da      	lsls	r2, r3, #3
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	18d3      	adds	r3, r2, r3
 8006e5e:	4a20      	ldr	r2, [pc, #128]	@ (8006ee0 <USB_ActivateEndpoint+0x2c4>)
 8006e60:	4694      	mov	ip, r2
 8006e62:	4463      	add	r3, ip
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	0d9b      	lsrs	r3, r3, #22
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <USB_ActivateEndpoint+0x274>
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4a17      	ldr	r2, [pc, #92]	@ (8006ee4 <USB_ActivateEndpoint+0x2c8>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e045      	b.n	8006f1c <USB_ActivateEndpoint+0x300>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e96:	d827      	bhi.n	8006ee8 <USB_ActivateEndpoint+0x2cc>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	d002      	beq.n	8006eb0 <USB_ActivateEndpoint+0x294>
 8006eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eac:	3301      	adds	r3, #1
 8006eae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	029b      	lsls	r3, r3, #10
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	e029      	b.n	8006f1c <USB_ActivateEndpoint+0x300>
 8006ec8:	ffff898f 	.word	0xffff898f
 8006ecc:	ffff8080 	.word	0xffff8080
 8006ed0:	ffff8f8f 	.word	0xffff8f8f
 8006ed4:	ffff80c0 	.word	0xffff80c0
 8006ed8:	ffff8fbf 	.word	0xffff8fbf
 8006edc:	00000404 	.word	0x00000404
 8006ee0:	00000406 	.word	0x00000406
 8006ee4:	ffff8000 	.word	0xffff8000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	221f      	movs	r2, #31
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d102      	bne.n	8006f00 <USB_ActivateEndpoint+0x2e4>
 8006efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006efc:	3b01      	subs	r3, #1
 8006efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	4ab5      	ldr	r2, [pc, #724]	@ (80071e8 <USB_ActivateEndpoint+0x5cc>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	18d2      	adds	r2, r2, r3
 8006f26:	2122      	movs	r1, #34	@ 0x22
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	8812      	ldrh	r2, [r2, #0]
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	2380      	movs	r3, #128	@ 0x80
 8006f34:	01db      	lsls	r3, r3, #7
 8006f36:	4013      	ands	r3, r2
 8006f38:	d016      	beq.n	8006f68 <USB_ActivateEndpoint+0x34c>
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	18d3      	adds	r3, r2, r3
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	2020      	movs	r0, #32
 8006f4a:	183b      	adds	r3, r7, r0
 8006f4c:	49a7      	ldr	r1, [pc, #668]	@ (80071ec <USB_ActivateEndpoint+0x5d0>)
 8006f4e:	400a      	ands	r2, r1
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	18d3      	adds	r3, r2, r3
 8006f5c:	183a      	adds	r2, r7, r0
 8006f5e:	8812      	ldrh	r2, [r2, #0]
 8006f60:	49a3      	ldr	r1, [pc, #652]	@ (80071f0 <USB_ActivateEndpoint+0x5d4>)
 8006f62:	430a      	orrs	r2, r1
 8006f64:	b292      	uxth	r2, r2
 8006f66:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d125      	bne.n	8006fbc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	18d3      	adds	r3, r2, r3
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	201c      	movs	r0, #28
 8006f80:	183b      	adds	r3, r7, r0
 8006f82:	499c      	ldr	r1, [pc, #624]	@ (80071f4 <USB_ActivateEndpoint+0x5d8>)
 8006f84:	400a      	ands	r2, r1
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	183b      	adds	r3, r7, r0
 8006f8a:	183a      	adds	r2, r7, r0
 8006f8c:	8812      	ldrh	r2, [r2, #0]
 8006f8e:	2180      	movs	r1, #128	@ 0x80
 8006f90:	0149      	lsls	r1, r1, #5
 8006f92:	404a      	eors	r2, r1
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	183b      	adds	r3, r7, r0
 8006f98:	183a      	adds	r2, r7, r0
 8006f9a:	8812      	ldrh	r2, [r2, #0]
 8006f9c:	2180      	movs	r1, #128	@ 0x80
 8006f9e:	0189      	lsls	r1, r1, #6
 8006fa0:	404a      	eors	r2, r1
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	18d3      	adds	r3, r2, r3
 8006fae:	183a      	adds	r2, r7, r0
 8006fb0:	8812      	ldrh	r2, [r2, #0]
 8006fb2:	4991      	ldr	r1, [pc, #580]	@ (80071f8 <USB_ActivateEndpoint+0x5dc>)
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e1c4      	b.n	8007346 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	18d3      	adds	r3, r2, r3
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	201e      	movs	r0, #30
 8006fcc:	183b      	adds	r3, r7, r0
 8006fce:	4989      	ldr	r1, [pc, #548]	@ (80071f4 <USB_ActivateEndpoint+0x5d8>)
 8006fd0:	400a      	ands	r2, r1
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	183b      	adds	r3, r7, r0
 8006fd6:	183a      	adds	r2, r7, r0
 8006fd8:	8812      	ldrh	r2, [r2, #0]
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	0189      	lsls	r1, r1, #6
 8006fde:	404a      	eors	r2, r1
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	18d3      	adds	r3, r2, r3
 8006fec:	183a      	adds	r2, r7, r0
 8006fee:	8812      	ldrh	r2, [r2, #0]
 8006ff0:	4981      	ldr	r1, [pc, #516]	@ (80071f8 <USB_ActivateEndpoint+0x5dc>)
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	e1a5      	b.n	8007346 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	78db      	ldrb	r3, [r3, #3]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d117      	bne.n	8007032 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	18d3      	adds	r3, r2, r3
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29a      	uxth	r2, r3
 8007010:	2062      	movs	r0, #98	@ 0x62
 8007012:	183b      	adds	r3, r7, r0
 8007014:	4975      	ldr	r1, [pc, #468]	@ (80071ec <USB_ActivateEndpoint+0x5d0>)
 8007016:	400a      	ands	r2, r1
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	18d3      	adds	r3, r2, r3
 8007024:	183a      	adds	r2, r7, r0
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	4974      	ldr	r1, [pc, #464]	@ (80071fc <USB_ActivateEndpoint+0x5e0>)
 800702a:	430a      	orrs	r2, r1
 800702c:	b292      	uxth	r2, r2
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e016      	b.n	8007060 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	18d3      	adds	r3, r2, r3
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29a      	uxth	r2, r3
 8007040:	2064      	movs	r0, #100	@ 0x64
 8007042:	183b      	adds	r3, r7, r0
 8007044:	496e      	ldr	r1, [pc, #440]	@ (8007200 <USB_ActivateEndpoint+0x5e4>)
 8007046:	400a      	ands	r2, r1
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	18d3      	adds	r3, r2, r3
 8007054:	183a      	adds	r2, r7, r0
 8007056:	8812      	ldrh	r2, [r2, #0]
 8007058:	4967      	ldr	r1, [pc, #412]	@ (80071f8 <USB_ActivateEndpoint+0x5dc>)
 800705a:	430a      	orrs	r2, r1
 800705c:	b292      	uxth	r2, r2
 800705e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2250      	movs	r2, #80	@ 0x50
 8007068:	5a9b      	ldrh	r3, [r3, r2]
 800706a:	b29b      	uxth	r3, r3
 800706c:	001a      	movs	r2, r3
 800706e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007070:	189b      	adds	r3, r3, r2
 8007072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	00da      	lsls	r2, r3, #3
 800707a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800707c:	18d3      	adds	r3, r2, r3
 800707e:	2280      	movs	r2, #128	@ 0x80
 8007080:	00d2      	lsls	r2, r2, #3
 8007082:	4694      	mov	ip, r2
 8007084:	4463      	add	r3, ip
 8007086:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	891b      	ldrh	r3, [r3, #8]
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	b29b      	uxth	r3, r3
 8007090:	18db      	adds	r3, r3, r3
 8007092:	b29a      	uxth	r2, r3
 8007094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	657b      	str	r3, [r7, #84]	@ 0x54
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2250      	movs	r2, #80	@ 0x50
 80070a0:	5a9b      	ldrh	r3, [r3, r2]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	001a      	movs	r2, r3
 80070a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a8:	189b      	adds	r3, r3, r2
 80070aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00da      	lsls	r2, r3, #3
 80070b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b4:	18d3      	adds	r3, r2, r3
 80070b6:	4a53      	ldr	r2, [pc, #332]	@ (8007204 <USB_ActivateEndpoint+0x5e8>)
 80070b8:	4694      	mov	ip, r2
 80070ba:	4463      	add	r3, ip
 80070bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	895b      	ldrh	r3, [r3, #10]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	18db      	adds	r3, r3, r3
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070cc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d000      	beq.n	80070d8 <USB_ActivateEndpoint+0x4bc>
 80070d6:	e09b      	b.n	8007210 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	18d2      	adds	r2, r2, r3
 80070e2:	2140      	movs	r1, #64	@ 0x40
 80070e4:	187b      	adds	r3, r7, r1
 80070e6:	8812      	ldrh	r2, [r2, #0]
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	@ 0x80
 80070f0:	01db      	lsls	r3, r3, #7
 80070f2:	4013      	ands	r3, r2
 80070f4:	d016      	beq.n	8007124 <USB_ActivateEndpoint+0x508>
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	18d3      	adds	r3, r2, r3
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	203e      	movs	r0, #62	@ 0x3e
 8007106:	183b      	adds	r3, r7, r0
 8007108:	4938      	ldr	r1, [pc, #224]	@ (80071ec <USB_ActivateEndpoint+0x5d0>)
 800710a:	400a      	ands	r2, r1
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	18d3      	adds	r3, r2, r3
 8007118:	183a      	adds	r2, r7, r0
 800711a:	8812      	ldrh	r2, [r2, #0]
 800711c:	4934      	ldr	r1, [pc, #208]	@ (80071f0 <USB_ActivateEndpoint+0x5d4>)
 800711e:	430a      	orrs	r2, r1
 8007120:	b292      	uxth	r2, r2
 8007122:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	18d2      	adds	r2, r2, r3
 800712e:	213c      	movs	r1, #60	@ 0x3c
 8007130:	187b      	adds	r3, r7, r1
 8007132:	8812      	ldrh	r2, [r2, #0]
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	187b      	adds	r3, r7, r1
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	2240      	movs	r2, #64	@ 0x40
 800713c:	4013      	ands	r3, r2
 800713e:	d016      	beq.n	800716e <USB_ActivateEndpoint+0x552>
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	18d3      	adds	r3, r2, r3
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	203a      	movs	r0, #58	@ 0x3a
 8007150:	183b      	adds	r3, r7, r0
 8007152:	4926      	ldr	r1, [pc, #152]	@ (80071ec <USB_ActivateEndpoint+0x5d0>)
 8007154:	400a      	ands	r2, r1
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	18d3      	adds	r3, r2, r3
 8007162:	183a      	adds	r2, r7, r0
 8007164:	8812      	ldrh	r2, [r2, #0]
 8007166:	4928      	ldr	r1, [pc, #160]	@ (8007208 <USB_ActivateEndpoint+0x5ec>)
 8007168:	430a      	orrs	r2, r1
 800716a:	b292      	uxth	r2, r2
 800716c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29a      	uxth	r2, r3
 800717c:	2038      	movs	r0, #56	@ 0x38
 800717e:	183b      	adds	r3, r7, r0
 8007180:	491c      	ldr	r1, [pc, #112]	@ (80071f4 <USB_ActivateEndpoint+0x5d8>)
 8007182:	400a      	ands	r2, r1
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	183b      	adds	r3, r7, r0
 8007188:	183a      	adds	r2, r7, r0
 800718a:	8812      	ldrh	r2, [r2, #0]
 800718c:	2180      	movs	r1, #128	@ 0x80
 800718e:	0149      	lsls	r1, r1, #5
 8007190:	404a      	eors	r2, r1
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	183b      	adds	r3, r7, r0
 8007196:	183a      	adds	r2, r7, r0
 8007198:	8812      	ldrh	r2, [r2, #0]
 800719a:	2180      	movs	r1, #128	@ 0x80
 800719c:	0189      	lsls	r1, r1, #6
 800719e:	404a      	eors	r2, r1
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	18d3      	adds	r3, r2, r3
 80071ac:	183a      	adds	r2, r7, r0
 80071ae:	8812      	ldrh	r2, [r2, #0]
 80071b0:	4911      	ldr	r1, [pc, #68]	@ (80071f8 <USB_ActivateEndpoint+0x5dc>)
 80071b2:	430a      	orrs	r2, r1
 80071b4:	b292      	uxth	r2, r2
 80071b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	18d3      	adds	r3, r2, r3
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	2036      	movs	r0, #54	@ 0x36
 80071c8:	183b      	adds	r3, r7, r0
 80071ca:	4910      	ldr	r1, [pc, #64]	@ (800720c <USB_ActivateEndpoint+0x5f0>)
 80071cc:	400a      	ands	r2, r1
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	18d3      	adds	r3, r2, r3
 80071da:	183a      	adds	r2, r7, r0
 80071dc:	8812      	ldrh	r2, [r2, #0]
 80071de:	4906      	ldr	r1, [pc, #24]	@ (80071f8 <USB_ActivateEndpoint+0x5dc>)
 80071e0:	430a      	orrs	r2, r1
 80071e2:	b292      	uxth	r2, r2
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e0ae      	b.n	8007346 <USB_ActivateEndpoint+0x72a>
 80071e8:	ffff8000 	.word	0xffff8000
 80071ec:	ffff8f8f 	.word	0xffff8f8f
 80071f0:	ffffc080 	.word	0xffffc080
 80071f4:	ffffbf8f 	.word	0xffffbf8f
 80071f8:	ffff8080 	.word	0xffff8080
 80071fc:	ffff8180 	.word	0xffff8180
 8007200:	ffff8e8f 	.word	0xffff8e8f
 8007204:	00000404 	.word	0x00000404
 8007208:	ffff80c0 	.word	0xffff80c0
 800720c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	18d2      	adds	r2, r2, r3
 800721a:	214e      	movs	r1, #78	@ 0x4e
 800721c:	187b      	adds	r3, r7, r1
 800721e:	8812      	ldrh	r2, [r2, #0]
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	187b      	adds	r3, r7, r1
 8007224:	881a      	ldrh	r2, [r3, #0]
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	01db      	lsls	r3, r3, #7
 800722a:	4013      	ands	r3, r2
 800722c:	d016      	beq.n	800725c <USB_ActivateEndpoint+0x640>
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	18d3      	adds	r3, r2, r3
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29a      	uxth	r2, r3
 800723c:	204c      	movs	r0, #76	@ 0x4c
 800723e:	183b      	adds	r3, r7, r0
 8007240:	4944      	ldr	r1, [pc, #272]	@ (8007354 <USB_ActivateEndpoint+0x738>)
 8007242:	400a      	ands	r2, r1
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	18d3      	adds	r3, r2, r3
 8007250:	183a      	adds	r2, r7, r0
 8007252:	8812      	ldrh	r2, [r2, #0]
 8007254:	4940      	ldr	r1, [pc, #256]	@ (8007358 <USB_ActivateEndpoint+0x73c>)
 8007256:	430a      	orrs	r2, r1
 8007258:	b292      	uxth	r2, r2
 800725a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	18d2      	adds	r2, r2, r3
 8007266:	214a      	movs	r1, #74	@ 0x4a
 8007268:	187b      	adds	r3, r7, r1
 800726a:	8812      	ldrh	r2, [r2, #0]
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	187b      	adds	r3, r7, r1
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	2240      	movs	r2, #64	@ 0x40
 8007274:	4013      	ands	r3, r2
 8007276:	d016      	beq.n	80072a6 <USB_ActivateEndpoint+0x68a>
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	18d3      	adds	r3, r2, r3
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29a      	uxth	r2, r3
 8007286:	2048      	movs	r0, #72	@ 0x48
 8007288:	183b      	adds	r3, r7, r0
 800728a:	4932      	ldr	r1, [pc, #200]	@ (8007354 <USB_ActivateEndpoint+0x738>)
 800728c:	400a      	ands	r2, r1
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	183a      	adds	r2, r7, r0
 800729c:	8812      	ldrh	r2, [r2, #0]
 800729e:	492f      	ldr	r1, [pc, #188]	@ (800735c <USB_ActivateEndpoint+0x740>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	b292      	uxth	r2, r2
 80072a4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	78db      	ldrb	r3, [r3, #3]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d01d      	beq.n	80072ea <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	18d3      	adds	r3, r2, r3
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	2044      	movs	r0, #68	@ 0x44
 80072be:	183b      	adds	r3, r7, r0
 80072c0:	4927      	ldr	r1, [pc, #156]	@ (8007360 <USB_ActivateEndpoint+0x744>)
 80072c2:	400a      	ands	r2, r1
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	183b      	adds	r3, r7, r0
 80072c8:	183a      	adds	r2, r7, r0
 80072ca:	8812      	ldrh	r2, [r2, #0]
 80072cc:	2120      	movs	r1, #32
 80072ce:	404a      	eors	r2, r1
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	18d3      	adds	r3, r2, r3
 80072dc:	183a      	adds	r2, r7, r0
 80072de:	8812      	ldrh	r2, [r2, #0]
 80072e0:	4920      	ldr	r1, [pc, #128]	@ (8007364 <USB_ActivateEndpoint+0x748>)
 80072e2:	430a      	orrs	r2, r1
 80072e4:	b292      	uxth	r2, r2
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e016      	b.n	8007318 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	18d3      	adds	r3, r2, r3
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	2046      	movs	r0, #70	@ 0x46
 80072fa:	183b      	adds	r3, r7, r0
 80072fc:	4918      	ldr	r1, [pc, #96]	@ (8007360 <USB_ActivateEndpoint+0x744>)
 80072fe:	400a      	ands	r2, r1
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	183a      	adds	r2, r7, r0
 800730e:	8812      	ldrh	r2, [r2, #0]
 8007310:	4914      	ldr	r1, [pc, #80]	@ (8007364 <USB_ActivateEndpoint+0x748>)
 8007312:	430a      	orrs	r2, r1
 8007314:	b292      	uxth	r2, r2
 8007316:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	18d3      	adds	r3, r2, r3
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29a      	uxth	r2, r3
 8007326:	2042      	movs	r0, #66	@ 0x42
 8007328:	183b      	adds	r3, r7, r0
 800732a:	490f      	ldr	r1, [pc, #60]	@ (8007368 <USB_ActivateEndpoint+0x74c>)
 800732c:	400a      	ands	r2, r1
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	18d3      	adds	r3, r2, r3
 800733a:	183a      	adds	r2, r7, r0
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	4909      	ldr	r1, [pc, #36]	@ (8007364 <USB_ActivateEndpoint+0x748>)
 8007340:	430a      	orrs	r2, r1
 8007342:	b292      	uxth	r2, r2
 8007344:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007346:	236f      	movs	r3, #111	@ 0x6f
 8007348:	18fb      	adds	r3, r7, r3
 800734a:	781b      	ldrb	r3, [r3, #0]
}
 800734c:	0018      	movs	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	b01c      	add	sp, #112	@ 0x70
 8007352:	bd80      	pop	{r7, pc}
 8007354:	ffff8f8f 	.word	0xffff8f8f
 8007358:	ffffc080 	.word	0xffffc080
 800735c:	ffff80c0 	.word	0xffff80c0
 8007360:	ffff8fbf 	.word	0xffff8fbf
 8007364:	ffff8080 	.word	0xffff8080
 8007368:	ffffbf8f 	.word	0xffffbf8f

0800736c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08c      	sub	sp, #48	@ 0x30
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	7b1b      	ldrb	r3, [r3, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d000      	beq.n	8007380 <USB_DeactivateEndpoint+0x14>
 800737e:	e07e      	b.n	800747e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d03c      	beq.n	8007402 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	18d2      	adds	r2, r2, r3
 8007392:	210c      	movs	r1, #12
 8007394:	187b      	adds	r3, r7, r1
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	187b      	adds	r3, r7, r1
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	4013      	ands	r3, r2
 80073a2:	d016      	beq.n	80073d2 <USB_DeactivateEndpoint+0x66>
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	200a      	movs	r0, #10
 80073b4:	183b      	adds	r3, r7, r0
 80073b6:	49c7      	ldr	r1, [pc, #796]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 80073b8:	400a      	ands	r2, r1
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	18d3      	adds	r3, r2, r3
 80073c6:	183a      	adds	r2, r7, r0
 80073c8:	8812      	ldrh	r2, [r2, #0]
 80073ca:	49c3      	ldr	r1, [pc, #780]	@ (80076d8 <USB_DeactivateEndpoint+0x36c>)
 80073cc:	430a      	orrs	r2, r1
 80073ce:	b292      	uxth	r2, r2
 80073d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	18d3      	adds	r3, r2, r3
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	2008      	movs	r0, #8
 80073e2:	183b      	adds	r3, r7, r0
 80073e4:	49bd      	ldr	r1, [pc, #756]	@ (80076dc <USB_DeactivateEndpoint+0x370>)
 80073e6:	400a      	ands	r2, r1
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	18d3      	adds	r3, r2, r3
 80073f4:	183a      	adds	r2, r7, r0
 80073f6:	8812      	ldrh	r2, [r2, #0]
 80073f8:	49b9      	ldr	r1, [pc, #740]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 80073fa:	430a      	orrs	r2, r1
 80073fc:	b292      	uxth	r2, r2
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e163      	b.n	80076ca <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	18d2      	adds	r2, r2, r3
 800740c:	2112      	movs	r1, #18
 800740e:	187b      	adds	r3, r7, r1
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	187b      	adds	r3, r7, r1
 8007416:	881a      	ldrh	r2, [r3, #0]
 8007418:	2380      	movs	r3, #128	@ 0x80
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	4013      	ands	r3, r2
 800741e:	d016      	beq.n	800744e <USB_DeactivateEndpoint+0xe2>
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29a      	uxth	r2, r3
 800742e:	2010      	movs	r0, #16
 8007430:	183b      	adds	r3, r7, r0
 8007432:	49a8      	ldr	r1, [pc, #672]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 8007434:	400a      	ands	r2, r1
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	18d3      	adds	r3, r2, r3
 8007442:	183a      	adds	r2, r7, r0
 8007444:	8812      	ldrh	r2, [r2, #0]
 8007446:	49a7      	ldr	r1, [pc, #668]	@ (80076e4 <USB_DeactivateEndpoint+0x378>)
 8007448:	430a      	orrs	r2, r1
 800744a:	b292      	uxth	r2, r2
 800744c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	200e      	movs	r0, #14
 800745e:	183b      	adds	r3, r7, r0
 8007460:	49a1      	ldr	r1, [pc, #644]	@ (80076e8 <USB_DeactivateEndpoint+0x37c>)
 8007462:	400a      	ands	r2, r1
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	18d3      	adds	r3, r2, r3
 8007470:	183a      	adds	r2, r7, r0
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	499a      	ldr	r1, [pc, #616]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 8007476:	430a      	orrs	r2, r1
 8007478:	b292      	uxth	r2, r2
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e125      	b.n	80076ca <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d000      	beq.n	8007488 <USB_DeactivateEndpoint+0x11c>
 8007486:	e090      	b.n	80075aa <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	18d2      	adds	r2, r2, r3
 8007492:	2120      	movs	r1, #32
 8007494:	187b      	adds	r3, r7, r1
 8007496:	8812      	ldrh	r2, [r2, #0]
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	187b      	adds	r3, r7, r1
 800749c:	881a      	ldrh	r2, [r3, #0]
 800749e:	2380      	movs	r3, #128	@ 0x80
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	4013      	ands	r3, r2
 80074a4:	d016      	beq.n	80074d4 <USB_DeactivateEndpoint+0x168>
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	18d3      	adds	r3, r2, r3
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	201e      	movs	r0, #30
 80074b6:	183b      	adds	r3, r7, r0
 80074b8:	4986      	ldr	r1, [pc, #536]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 80074ba:	400a      	ands	r2, r1
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	18d3      	adds	r3, r2, r3
 80074c8:	183a      	adds	r2, r7, r0
 80074ca:	8812      	ldrh	r2, [r2, #0]
 80074cc:	4985      	ldr	r1, [pc, #532]	@ (80076e4 <USB_DeactivateEndpoint+0x378>)
 80074ce:	430a      	orrs	r2, r1
 80074d0:	b292      	uxth	r2, r2
 80074d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	18d2      	adds	r2, r2, r3
 80074de:	211c      	movs	r1, #28
 80074e0:	187b      	adds	r3, r7, r1
 80074e2:	8812      	ldrh	r2, [r2, #0]
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	187b      	adds	r3, r7, r1
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2240      	movs	r2, #64	@ 0x40
 80074ec:	4013      	ands	r3, r2
 80074ee:	d016      	beq.n	800751e <USB_DeactivateEndpoint+0x1b2>
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	18d3      	adds	r3, r2, r3
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	201a      	movs	r0, #26
 8007500:	183b      	adds	r3, r7, r0
 8007502:	4974      	ldr	r1, [pc, #464]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 8007504:	400a      	ands	r2, r1
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	183a      	adds	r2, r7, r0
 8007514:	8812      	ldrh	r2, [r2, #0]
 8007516:	4970      	ldr	r1, [pc, #448]	@ (80076d8 <USB_DeactivateEndpoint+0x36c>)
 8007518:	430a      	orrs	r2, r1
 800751a:	b292      	uxth	r2, r2
 800751c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	18d3      	adds	r3, r2, r3
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29a      	uxth	r2, r3
 800752c:	2018      	movs	r0, #24
 800752e:	183b      	adds	r3, r7, r0
 8007530:	4968      	ldr	r1, [pc, #416]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 8007532:	400a      	ands	r2, r1
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	18d3      	adds	r3, r2, r3
 8007540:	183a      	adds	r2, r7, r0
 8007542:	8812      	ldrh	r2, [r2, #0]
 8007544:	4964      	ldr	r1, [pc, #400]	@ (80076d8 <USB_DeactivateEndpoint+0x36c>)
 8007546:	430a      	orrs	r2, r1
 8007548:	b292      	uxth	r2, r2
 800754a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	18d3      	adds	r3, r2, r3
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29a      	uxth	r2, r3
 800755a:	2016      	movs	r0, #22
 800755c:	183b      	adds	r3, r7, r0
 800755e:	4962      	ldr	r1, [pc, #392]	@ (80076e8 <USB_DeactivateEndpoint+0x37c>)
 8007560:	400a      	ands	r2, r1
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	18d3      	adds	r3, r2, r3
 800756e:	183a      	adds	r2, r7, r0
 8007570:	8812      	ldrh	r2, [r2, #0]
 8007572:	495b      	ldr	r1, [pc, #364]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 8007574:	430a      	orrs	r2, r1
 8007576:	b292      	uxth	r2, r2
 8007578:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	18d3      	adds	r3, r2, r3
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	2014      	movs	r0, #20
 800758a:	183b      	adds	r3, r7, r0
 800758c:	4953      	ldr	r1, [pc, #332]	@ (80076dc <USB_DeactivateEndpoint+0x370>)
 800758e:	400a      	ands	r2, r1
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	183a      	adds	r2, r7, r0
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	494f      	ldr	r1, [pc, #316]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 80075a2:	430a      	orrs	r2, r1
 80075a4:	b292      	uxth	r2, r2
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e08f      	b.n	80076ca <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	18d2      	adds	r2, r2, r3
 80075b4:	212e      	movs	r1, #46	@ 0x2e
 80075b6:	187b      	adds	r3, r7, r1
 80075b8:	8812      	ldrh	r2, [r2, #0]
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	187b      	adds	r3, r7, r1
 80075be:	881a      	ldrh	r2, [r3, #0]
 80075c0:	2380      	movs	r3, #128	@ 0x80
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	4013      	ands	r3, r2
 80075c6:	d016      	beq.n	80075f6 <USB_DeactivateEndpoint+0x28a>
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	18d3      	adds	r3, r2, r3
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	202c      	movs	r0, #44	@ 0x2c
 80075d8:	183b      	adds	r3, r7, r0
 80075da:	493e      	ldr	r1, [pc, #248]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 80075dc:	400a      	ands	r2, r1
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	18d3      	adds	r3, r2, r3
 80075ea:	183a      	adds	r2, r7, r0
 80075ec:	8812      	ldrh	r2, [r2, #0]
 80075ee:	493d      	ldr	r1, [pc, #244]	@ (80076e4 <USB_DeactivateEndpoint+0x378>)
 80075f0:	430a      	orrs	r2, r1
 80075f2:	b292      	uxth	r2, r2
 80075f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	18d2      	adds	r2, r2, r3
 8007600:	212a      	movs	r1, #42	@ 0x2a
 8007602:	187b      	adds	r3, r7, r1
 8007604:	8812      	ldrh	r2, [r2, #0]
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	187b      	adds	r3, r7, r1
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	2240      	movs	r2, #64	@ 0x40
 800760e:	4013      	ands	r3, r2
 8007610:	d016      	beq.n	8007640 <USB_DeactivateEndpoint+0x2d4>
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	18d3      	adds	r3, r2, r3
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29a      	uxth	r2, r3
 8007620:	2028      	movs	r0, #40	@ 0x28
 8007622:	183b      	adds	r3, r7, r0
 8007624:	492b      	ldr	r1, [pc, #172]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 8007626:	400a      	ands	r2, r1
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	18d3      	adds	r3, r2, r3
 8007634:	183a      	adds	r2, r7, r0
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	4927      	ldr	r1, [pc, #156]	@ (80076d8 <USB_DeactivateEndpoint+0x36c>)
 800763a:	430a      	orrs	r2, r1
 800763c:	b292      	uxth	r2, r2
 800763e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	18d3      	adds	r3, r2, r3
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29a      	uxth	r2, r3
 800764e:	2026      	movs	r0, #38	@ 0x26
 8007650:	183b      	adds	r3, r7, r0
 8007652:	4920      	ldr	r1, [pc, #128]	@ (80076d4 <USB_DeactivateEndpoint+0x368>)
 8007654:	400a      	ands	r2, r1
 8007656:	801a      	strh	r2, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	18d3      	adds	r3, r2, r3
 8007662:	183a      	adds	r2, r7, r0
 8007664:	8812      	ldrh	r2, [r2, #0]
 8007666:	491f      	ldr	r1, [pc, #124]	@ (80076e4 <USB_DeactivateEndpoint+0x378>)
 8007668:	430a      	orrs	r2, r1
 800766a:	b292      	uxth	r2, r2
 800766c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29a      	uxth	r2, r3
 800767c:	2024      	movs	r0, #36	@ 0x24
 800767e:	183b      	adds	r3, r7, r0
 8007680:	4916      	ldr	r1, [pc, #88]	@ (80076dc <USB_DeactivateEndpoint+0x370>)
 8007682:	400a      	ands	r2, r1
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	18d3      	adds	r3, r2, r3
 8007690:	183a      	adds	r2, r7, r0
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	4912      	ldr	r1, [pc, #72]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 8007696:	430a      	orrs	r2, r1
 8007698:	b292      	uxth	r2, r2
 800769a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	18d3      	adds	r3, r2, r3
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	2022      	movs	r0, #34	@ 0x22
 80076ac:	183b      	adds	r3, r7, r0
 80076ae:	490e      	ldr	r1, [pc, #56]	@ (80076e8 <USB_DeactivateEndpoint+0x37c>)
 80076b0:	400a      	ands	r2, r1
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	18d3      	adds	r3, r2, r3
 80076be:	183a      	adds	r2, r7, r0
 80076c0:	8812      	ldrh	r2, [r2, #0]
 80076c2:	4907      	ldr	r1, [pc, #28]	@ (80076e0 <USB_DeactivateEndpoint+0x374>)
 80076c4:	430a      	orrs	r2, r1
 80076c6:	b292      	uxth	r2, r2
 80076c8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b00c      	add	sp, #48	@ 0x30
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	ffff8f8f 	.word	0xffff8f8f
 80076d8:	ffff80c0 	.word	0xffff80c0
 80076dc:	ffff8fbf 	.word	0xffff8fbf
 80076e0:	ffff8080 	.word	0xffff8080
 80076e4:	ffffc080 	.word	0xffffc080
 80076e8:	ffffbf8f 	.word	0xffffbf8f

080076ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b0c3      	sub	sp, #268	@ 0x10c
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d001      	beq.n	8007702 <USB_EPStartXfer+0x16>
 80076fe:	f000 fd2d 	bl	800815c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	429a      	cmp	r2, r3
 800770c:	d905      	bls.n	800771a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	1d7a      	adds	r2, r7, #5
 8007714:	32ff      	adds	r2, #255	@ 0xff
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e004      	b.n	8007724 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	1d7a      	adds	r2, r7, #5
 8007720:	32ff      	adds	r2, #255	@ 0xff
 8007722:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d125      	bne.n	8007778 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	6959      	ldr	r1, [r3, #20]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88da      	ldrh	r2, [r3, #6]
 8007734:	1d7b      	adds	r3, r7, #5
 8007736:	33ff      	adds	r3, #255	@ 0xff
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fa3f 	bl	8008bc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2250      	movs	r2, #80	@ 0x50
 800774a:	5a9b      	ldrh	r3, [r3, r2]
 800774c:	b29b      	uxth	r3, r3
 800774e:	001a      	movs	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	189b      	adds	r3, r3, r2
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	00da      	lsls	r2, r3, #3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	18d3      	adds	r3, r2, r3
 8007760:	4ad7      	ldr	r2, [pc, #860]	@ (8007ac0 <USB_EPStartXfer+0x3d4>)
 8007762:	4694      	mov	ip, r2
 8007764:	4463      	add	r3, ip
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	1d7b      	adds	r3, r7, #5
 800776a:	33ff      	adds	r3, #255	@ 0xff
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	f000 fccd 	bl	8008112 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d000      	beq.n	8007782 <USB_EPStartXfer+0x96>
 8007780:	e362      	b.n	8007e48 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d800      	bhi.n	8007790 <USB_EPStartXfer+0xa4>
 800778e:	e309      	b.n	8007da4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	18d3      	adds	r3, r2, r3
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29a      	uxth	r2, r3
 800779e:	2056      	movs	r0, #86	@ 0x56
 80077a0:	183b      	adds	r3, r7, r0
 80077a2:	49c8      	ldr	r1, [pc, #800]	@ (8007ac4 <USB_EPStartXfer+0x3d8>)
 80077a4:	400a      	ands	r2, r1
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	18d3      	adds	r3, r2, r3
 80077b2:	183a      	adds	r2, r7, r0
 80077b4:	8812      	ldrh	r2, [r2, #0]
 80077b6:	49c4      	ldr	r1, [pc, #784]	@ (8007ac8 <USB_EPStartXfer+0x3dc>)
 80077b8:	430a      	orrs	r2, r1
 80077ba:	b292      	uxth	r2, r2
 80077bc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	1d7b      	adds	r3, r7, #5
 80077c4:	33ff      	adds	r3, #255	@ 0xff
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	1ad2      	subs	r2, r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	18d3      	adds	r3, r2, r3
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	001a      	movs	r2, r3
 80077de:	2340      	movs	r3, #64	@ 0x40
 80077e0:	4013      	ands	r3, r2
 80077e2:	d100      	bne.n	80077e6 <USB_EPStartXfer+0xfa>
 80077e4:	e176      	b.n	8007ad4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d000      	beq.n	80077f4 <USB_EPStartXfer+0x108>
 80077f2:	e074      	b.n	80078de <USB_EPStartXfer+0x1f2>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2250      	movs	r2, #80	@ 0x50
 80077fc:	5a9b      	ldrh	r3, [r3, r2]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	001a      	movs	r2, r3
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	189b      	adds	r3, r3, r2
 8007806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	00da      	lsls	r2, r3, #3
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	18d3      	adds	r3, r2, r3
 8007812:	4aae      	ldr	r2, [pc, #696]	@ (8007acc <USB_EPStartXfer+0x3e0>)
 8007814:	4694      	mov	ip, r2
 8007816:	4463      	add	r3, ip
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	059b      	lsls	r3, r3, #22
 8007822:	0d9b      	lsrs	r3, r3, #22
 8007824:	b29a      	uxth	r2, r3
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	1d7b      	adds	r3, r7, #5
 800782c:	33ff      	adds	r3, #255	@ 0xff
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <USB_EPStartXfer+0x15a>
 8007834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	4aa5      	ldr	r2, [pc, #660]	@ (8007ad0 <USB_EPStartXfer+0x3e4>)
 800783c:	4313      	orrs	r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e066      	b.n	8007914 <USB_EPStartXfer+0x228>
 8007846:	1d7b      	adds	r3, r7, #5
 8007848:	33ff      	adds	r3, #255	@ 0xff
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b3e      	cmp	r3, #62	@ 0x3e
 800784e:	d821      	bhi.n	8007894 <USB_EPStartXfer+0x1a8>
 8007850:	1d7b      	adds	r3, r7, #5
 8007852:	33ff      	adds	r3, #255	@ 0xff
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	1c7a      	adds	r2, r7, #1
 800785a:	32ff      	adds	r2, #255	@ 0xff
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	1d7b      	adds	r3, r7, #5
 8007860:	33ff      	adds	r3, #255	@ 0xff
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2201      	movs	r2, #1
 8007866:	4013      	ands	r3, r2
 8007868:	d006      	beq.n	8007878 <USB_EPStartXfer+0x18c>
 800786a:	1c7b      	adds	r3, r7, #1
 800786c:	33ff      	adds	r3, #255	@ 0xff
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	1c7a      	adds	r2, r7, #1
 8007874:	32ff      	adds	r2, #255	@ 0xff
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29a      	uxth	r2, r3
 800787e:	1c7b      	adds	r3, r7, #1
 8007880:	33ff      	adds	r3, #255	@ 0xff
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	b29b      	uxth	r3, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e03f      	b.n	8007914 <USB_EPStartXfer+0x228>
 8007894:	1d7b      	adds	r3, r7, #5
 8007896:	33ff      	adds	r3, #255	@ 0xff
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	1c7a      	adds	r2, r7, #1
 800789e:	32ff      	adds	r2, #255	@ 0xff
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	1d7b      	adds	r3, r7, #5
 80078a4:	33ff      	adds	r3, #255	@ 0xff
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	221f      	movs	r2, #31
 80078aa:	4013      	ands	r3, r2
 80078ac:	d106      	bne.n	80078bc <USB_EPStartXfer+0x1d0>
 80078ae:	1c7b      	adds	r3, r7, #1
 80078b0:	33ff      	adds	r3, #255	@ 0xff
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	1c7a      	adds	r2, r7, #1
 80078b8:	32ff      	adds	r2, #255	@ 0xff
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	1c7b      	adds	r3, r7, #1
 80078c4:	33ff      	adds	r3, #255	@ 0xff
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	029b      	lsls	r3, r3, #10
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4a7f      	ldr	r2, [pc, #508]	@ (8007ad0 <USB_EPStartXfer+0x3e4>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	e01a      	b.n	8007914 <USB_EPStartXfer+0x228>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d116      	bne.n	8007914 <USB_EPStartXfer+0x228>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2250      	movs	r2, #80	@ 0x50
 80078ea:	5a9b      	ldrh	r3, [r3, r2]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	001a      	movs	r2, r3
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	00da      	lsls	r2, r3, #3
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	18d3      	adds	r3, r2, r3
 8007900:	4a72      	ldr	r2, [pc, #456]	@ (8007acc <USB_EPStartXfer+0x3e0>)
 8007902:	4694      	mov	ip, r2
 8007904:	4463      	add	r3, ip
 8007906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007908:	1d7b      	adds	r3, r7, #5
 800790a:	33ff      	adds	r3, #255	@ 0xff
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	b29a      	uxth	r2, r3
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007914:	2076      	movs	r0, #118	@ 0x76
 8007916:	183b      	adds	r3, r7, r0
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	8952      	ldrh	r2, [r2, #10]
 800791c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6959      	ldr	r1, [r3, #20]
 8007922:	1d7b      	adds	r3, r7, #5
 8007924:	33ff      	adds	r3, #255	@ 0xff
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	b29c      	uxth	r4, r3
 800792a:	183b      	adds	r3, r7, r0
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	0023      	movs	r3, r4
 8007932:	f001 f945 	bl	8008bc0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	1d7b      	adds	r3, r7, #5
 800793c:	33ff      	adds	r3, #255	@ 0xff
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	18d2      	adds	r2, r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	429a      	cmp	r2, r3
 8007950:	d908      	bls.n	8007964 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	1d7b      	adds	r3, r7, #5
 8007958:	33ff      	adds	r3, #255	@ 0xff
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	1ad2      	subs	r2, r2, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	621a      	str	r2, [r3, #32]
 8007962:	e007      	b.n	8007974 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	1d7a      	adds	r2, r7, #5
 800796a:	32ff      	adds	r2, #255	@ 0xff
 800796c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2200      	movs	r2, #0
 8007972:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d000      	beq.n	800797e <USB_EPStartXfer+0x292>
 800797c:	e070      	b.n	8007a60 <USB_EPStartXfer+0x374>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2250      	movs	r2, #80	@ 0x50
 8007986:	5a9b      	ldrh	r3, [r3, r2]
 8007988:	b29b      	uxth	r3, r3
 800798a:	001a      	movs	r2, r3
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	189b      	adds	r3, r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	00da      	lsls	r2, r3, #3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	18d3      	adds	r3, r2, r3
 800799c:	4a48      	ldr	r2, [pc, #288]	@ (8007ac0 <USB_EPStartXfer+0x3d4>)
 800799e:	4694      	mov	ip, r2
 80079a0:	4463      	add	r3, ip
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	059b      	lsls	r3, r3, #22
 80079ac:	0d9b      	lsrs	r3, r3, #22
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	801a      	strh	r2, [r3, #0]
 80079b4:	1d7b      	adds	r3, r7, #5
 80079b6:	33ff      	adds	r3, #255	@ 0xff
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d108      	bne.n	80079d0 <USB_EPStartXfer+0x2e4>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4a42      	ldr	r2, [pc, #264]	@ (8007ad0 <USB_EPStartXfer+0x3e4>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e064      	b.n	8007a9a <USB_EPStartXfer+0x3ae>
 80079d0:	1d7b      	adds	r3, r7, #5
 80079d2:	33ff      	adds	r3, #255	@ 0xff
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80079d8:	d81f      	bhi.n	8007a1a <USB_EPStartXfer+0x32e>
 80079da:	1d7b      	adds	r3, r7, #5
 80079dc:	33ff      	adds	r3, #255	@ 0xff
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	21fc      	movs	r1, #252	@ 0xfc
 80079e4:	187a      	adds	r2, r7, r1
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	1d7b      	adds	r3, r7, #5
 80079ea:	33ff      	adds	r3, #255	@ 0xff
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2201      	movs	r2, #1
 80079f0:	4013      	ands	r3, r2
 80079f2:	d004      	beq.n	80079fe <USB_EPStartXfer+0x312>
 80079f4:	187b      	adds	r3, r7, r1
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	187a      	adds	r2, r7, r1
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	23fc      	movs	r3, #252	@ 0xfc
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e03f      	b.n	8007a9a <USB_EPStartXfer+0x3ae>
 8007a1a:	1d7b      	adds	r3, r7, #5
 8007a1c:	33ff      	adds	r3, #255	@ 0xff
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	21fc      	movs	r1, #252	@ 0xfc
 8007a24:	187a      	adds	r2, r7, r1
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	1d7b      	adds	r3, r7, #5
 8007a2a:	33ff      	adds	r3, #255	@ 0xff
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	221f      	movs	r2, #31
 8007a30:	4013      	ands	r3, r2
 8007a32:	d104      	bne.n	8007a3e <USB_EPStartXfer+0x352>
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	187a      	adds	r2, r7, r1
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	23fc      	movs	r3, #252	@ 0xfc
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	029b      	lsls	r3, r3, #10
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4313      	orrs	r3, r2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad0 <USB_EPStartXfer+0x3e4>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e01c      	b.n	8007a9a <USB_EPStartXfer+0x3ae>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d118      	bne.n	8007a9a <USB_EPStartXfer+0x3ae>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	623b      	str	r3, [r7, #32]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2250      	movs	r2, #80	@ 0x50
 8007a70:	5a9b      	ldrh	r3, [r3, r2]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	001a      	movs	r2, r3
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	189b      	adds	r3, r3, r2
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	00da      	lsls	r2, r3, #3
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	18d3      	adds	r3, r2, r3
 8007a86:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac0 <USB_EPStartXfer+0x3d4>)
 8007a88:	4694      	mov	ip, r2
 8007a8a:	4463      	add	r3, ip
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	1d7b      	adds	r3, r7, #5
 8007a90:	33ff      	adds	r3, #255	@ 0xff
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a9a:	2076      	movs	r0, #118	@ 0x76
 8007a9c:	183b      	adds	r3, r7, r0
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	8912      	ldrh	r2, [r2, #8]
 8007aa2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6959      	ldr	r1, [r3, #20]
 8007aa8:	1d7b      	adds	r3, r7, #5
 8007aaa:	33ff      	adds	r3, #255	@ 0xff
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	b29c      	uxth	r4, r3
 8007ab0:	183b      	adds	r3, r7, r0
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	0023      	movs	r3, r4
 8007ab8:	f001 f882 	bl	8008bc0 <USB_WritePMA>
 8007abc:	e329      	b.n	8008112 <USB_EPStartXfer+0xa26>
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	00000402 	.word	0x00000402
 8007ac4:	ffff8f8f 	.word	0xffff8f8f
 8007ac8:	ffff8180 	.word	0xffff8180
 8007acc:	00000406 	.word	0x00000406
 8007ad0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d000      	beq.n	8007ade <USB_EPStartXfer+0x3f2>
 8007adc:	e070      	b.n	8007bc0 <USB_EPStartXfer+0x4d4>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2250      	movs	r2, #80	@ 0x50
 8007ae6:	5a9b      	ldrh	r3, [r3, r2]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	001a      	movs	r2, r3
 8007aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00da      	lsls	r2, r3, #3
 8007af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	4acd      	ldr	r2, [pc, #820]	@ (8007e34 <USB_EPStartXfer+0x748>)
 8007afe:	4694      	mov	ip, r2
 8007b00:	4463      	add	r3, ip
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	059b      	lsls	r3, r3, #22
 8007b0c:	0d9b      	lsrs	r3, r3, #22
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	1d7b      	adds	r3, r7, #5
 8007b16:	33ff      	adds	r3, #255	@ 0xff
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d108      	bne.n	8007b30 <USB_EPStartXfer+0x444>
 8007b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4ac4      	ldr	r2, [pc, #784]	@ (8007e38 <USB_EPStartXfer+0x74c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e064      	b.n	8007bfa <USB_EPStartXfer+0x50e>
 8007b30:	1d7b      	adds	r3, r7, #5
 8007b32:	33ff      	adds	r3, #255	@ 0xff
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b38:	d81f      	bhi.n	8007b7a <USB_EPStartXfer+0x48e>
 8007b3a:	1d7b      	adds	r3, r7, #5
 8007b3c:	33ff      	adds	r3, #255	@ 0xff
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	21f8      	movs	r1, #248	@ 0xf8
 8007b44:	187a      	adds	r2, r7, r1
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	1d7b      	adds	r3, r7, #5
 8007b4a:	33ff      	adds	r3, #255	@ 0xff
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4013      	ands	r3, r2
 8007b52:	d004      	beq.n	8007b5e <USB_EPStartXfer+0x472>
 8007b54:	187b      	adds	r3, r7, r1
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	187a      	adds	r2, r7, r1
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	23f8      	movs	r3, #248	@ 0xf8
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	029b      	lsls	r3, r3, #10
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4313      	orrs	r3, r2
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e03f      	b.n	8007bfa <USB_EPStartXfer+0x50e>
 8007b7a:	1d7b      	adds	r3, r7, #5
 8007b7c:	33ff      	adds	r3, #255	@ 0xff
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	21f8      	movs	r1, #248	@ 0xf8
 8007b84:	187a      	adds	r2, r7, r1
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	1d7b      	adds	r3, r7, #5
 8007b8a:	33ff      	adds	r3, #255	@ 0xff
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	221f      	movs	r2, #31
 8007b90:	4013      	ands	r3, r2
 8007b92:	d104      	bne.n	8007b9e <USB_EPStartXfer+0x4b2>
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	187a      	adds	r2, r7, r1
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	23f8      	movs	r3, #248	@ 0xf8
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4aa0      	ldr	r2, [pc, #640]	@ (8007e38 <USB_EPStartXfer+0x74c>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e01c      	b.n	8007bfa <USB_EPStartXfer+0x50e>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d118      	bne.n	8007bfa <USB_EPStartXfer+0x50e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2250      	movs	r2, #80	@ 0x50
 8007bd0:	5a9b      	ldrh	r3, [r3, r2]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd8:	189b      	adds	r3, r3, r2
 8007bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	00da      	lsls	r2, r3, #3
 8007be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007be4:	18d3      	adds	r3, r2, r3
 8007be6:	4a93      	ldr	r2, [pc, #588]	@ (8007e34 <USB_EPStartXfer+0x748>)
 8007be8:	4694      	mov	ip, r2
 8007bea:	4463      	add	r3, ip
 8007bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bee:	1d7b      	adds	r3, r7, #5
 8007bf0:	33ff      	adds	r3, #255	@ 0xff
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bfa:	2076      	movs	r0, #118	@ 0x76
 8007bfc:	183b      	adds	r3, r7, r0
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	8912      	ldrh	r2, [r2, #8]
 8007c02:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	6959      	ldr	r1, [r3, #20]
 8007c08:	1d7b      	adds	r3, r7, #5
 8007c0a:	33ff      	adds	r3, #255	@ 0xff
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	b29c      	uxth	r4, r3
 8007c10:	183b      	adds	r3, r7, r0
 8007c12:	881a      	ldrh	r2, [r3, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	0023      	movs	r3, r4
 8007c18:	f000 ffd2 	bl	8008bc0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	1d7b      	adds	r3, r7, #5
 8007c22:	33ff      	adds	r3, #255	@ 0xff
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	18d2      	adds	r2, r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d908      	bls.n	8007c4a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	6a1a      	ldr	r2, [r3, #32]
 8007c3c:	1d7b      	adds	r3, r7, #5
 8007c3e:	33ff      	adds	r3, #255	@ 0xff
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1ad2      	subs	r2, r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	621a      	str	r2, [r3, #32]
 8007c48:	e007      	b.n	8007c5a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	1d7a      	adds	r2, r7, #5
 8007c50:	32ff      	adds	r2, #255	@ 0xff
 8007c52:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d000      	beq.n	8007c68 <USB_EPStartXfer+0x57c>
 8007c66:	e070      	b.n	8007d4a <USB_EPStartXfer+0x65e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2250      	movs	r2, #80	@ 0x50
 8007c70:	5a9b      	ldrh	r3, [r3, r2]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	001a      	movs	r2, r3
 8007c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00da      	lsls	r2, r3, #3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	18d3      	adds	r3, r2, r3
 8007c86:	4a6d      	ldr	r2, [pc, #436]	@ (8007e3c <USB_EPStartXfer+0x750>)
 8007c88:	4694      	mov	ip, r2
 8007c8a:	4463      	add	r3, ip
 8007c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	059b      	lsls	r3, r3, #22
 8007c96:	0d9b      	lsrs	r3, r3, #22
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	1d7b      	adds	r3, r7, #5
 8007ca0:	33ff      	adds	r3, #255	@ 0xff
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d108      	bne.n	8007cba <USB_EPStartXfer+0x5ce>
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4a62      	ldr	r2, [pc, #392]	@ (8007e38 <USB_EPStartXfer+0x74c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e062      	b.n	8007d80 <USB_EPStartXfer+0x694>
 8007cba:	1d7b      	adds	r3, r7, #5
 8007cbc:	33ff      	adds	r3, #255	@ 0xff
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc2:	d81f      	bhi.n	8007d04 <USB_EPStartXfer+0x618>
 8007cc4:	1d7b      	adds	r3, r7, #5
 8007cc6:	33ff      	adds	r3, #255	@ 0xff
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	21f4      	movs	r1, #244	@ 0xf4
 8007cce:	187a      	adds	r2, r7, r1
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	1d7b      	adds	r3, r7, #5
 8007cd4:	33ff      	adds	r3, #255	@ 0xff
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4013      	ands	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <USB_EPStartXfer+0x5fc>
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	187a      	adds	r2, r7, r1
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	23f4      	movs	r3, #244	@ 0xf4
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	029b      	lsls	r3, r3, #10
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e03d      	b.n	8007d80 <USB_EPStartXfer+0x694>
 8007d04:	1d7b      	adds	r3, r7, #5
 8007d06:	33ff      	adds	r3, #255	@ 0xff
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	21f4      	movs	r1, #244	@ 0xf4
 8007d0e:	187a      	adds	r2, r7, r1
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	1d7b      	adds	r3, r7, #5
 8007d14:	33ff      	adds	r3, #255	@ 0xff
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	221f      	movs	r2, #31
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d104      	bne.n	8007d28 <USB_EPStartXfer+0x63c>
 8007d1e:	187b      	adds	r3, r7, r1
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	187a      	adds	r2, r7, r1
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	23f4      	movs	r3, #244	@ 0xf4
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8007e38 <USB_EPStartXfer+0x74c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e01a      	b.n	8007d80 <USB_EPStartXfer+0x694>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d116      	bne.n	8007d80 <USB_EPStartXfer+0x694>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2250      	movs	r2, #80	@ 0x50
 8007d56:	5a9b      	ldrh	r3, [r3, r2]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5e:	189b      	adds	r3, r3, r2
 8007d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	00da      	lsls	r2, r3, #3
 8007d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6a:	18d3      	adds	r3, r2, r3
 8007d6c:	4a33      	ldr	r2, [pc, #204]	@ (8007e3c <USB_EPStartXfer+0x750>)
 8007d6e:	4694      	mov	ip, r2
 8007d70:	4463      	add	r3, ip
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d74:	1d7b      	adds	r3, r7, #5
 8007d76:	33ff      	adds	r3, #255	@ 0xff
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d80:	2076      	movs	r0, #118	@ 0x76
 8007d82:	183b      	adds	r3, r7, r0
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	8952      	ldrh	r2, [r2, #10]
 8007d88:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	6959      	ldr	r1, [r3, #20]
 8007d8e:	1d7b      	adds	r3, r7, #5
 8007d90:	33ff      	adds	r3, #255	@ 0xff
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b29c      	uxth	r4, r3
 8007d96:	183b      	adds	r3, r7, r0
 8007d98:	881a      	ldrh	r2, [r3, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	0023      	movs	r3, r4
 8007d9e:	f000 ff0f 	bl	8008bc0 <USB_WritePMA>
 8007da2:	e1b6      	b.n	8008112 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	1d7a      	adds	r2, r7, #5
 8007daa:	32ff      	adds	r2, #255	@ 0xff
 8007dac:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	18d3      	adds	r3, r2, r3
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	2062      	movs	r0, #98	@ 0x62
 8007dbe:	183b      	adds	r3, r7, r0
 8007dc0:	491f      	ldr	r1, [pc, #124]	@ (8007e40 <USB_EPStartXfer+0x754>)
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	18d3      	adds	r3, r2, r3
 8007dd0:	183a      	adds	r2, r7, r0
 8007dd2:	8812      	ldrh	r2, [r2, #0]
 8007dd4:	491b      	ldr	r1, [pc, #108]	@ (8007e44 <USB_EPStartXfer+0x758>)
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2250      	movs	r2, #80	@ 0x50
 8007de4:	5a9b      	ldrh	r3, [r3, r2]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	001a      	movs	r2, r3
 8007dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dec:	189b      	adds	r3, r3, r2
 8007dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	00da      	lsls	r2, r3, #3
 8007df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007df8:	18d3      	adds	r3, r2, r3
 8007dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007e34 <USB_EPStartXfer+0x748>)
 8007dfc:	4694      	mov	ip, r2
 8007dfe:	4463      	add	r3, ip
 8007e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e02:	1d7b      	adds	r3, r7, #5
 8007e04:	33ff      	adds	r3, #255	@ 0xff
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e0e:	2076      	movs	r0, #118	@ 0x76
 8007e10:	183b      	adds	r3, r7, r0
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	8912      	ldrh	r2, [r2, #8]
 8007e16:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6959      	ldr	r1, [r3, #20]
 8007e1c:	1d7b      	adds	r3, r7, #5
 8007e1e:	33ff      	adds	r3, #255	@ 0xff
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	b29c      	uxth	r4, r3
 8007e24:	183b      	adds	r3, r7, r0
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	0023      	movs	r3, r4
 8007e2c:	f000 fec8 	bl	8008bc0 <USB_WritePMA>
 8007e30:	e16f      	b.n	8008112 <USB_EPStartXfer+0xa26>
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	00000402 	.word	0x00000402
 8007e38:	ffff8000 	.word	0xffff8000
 8007e3c:	00000406 	.word	0x00000406
 8007e40:	ffff8e8f 	.word	0xffff8e8f
 8007e44:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6a1a      	ldr	r2, [r3, #32]
 8007e4c:	1d7b      	adds	r3, r7, #5
 8007e4e:	33ff      	adds	r3, #255	@ 0xff
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	18d3      	adds	r3, r2, r3
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	001a      	movs	r2, r3
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d100      	bne.n	8007e70 <USB_EPStartXfer+0x784>
 8007e6e:	e0a4      	b.n	8007fba <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d000      	beq.n	8007e7e <USB_EPStartXfer+0x792>
 8007e7c:	e070      	b.n	8007f60 <USB_EPStartXfer+0x874>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2250      	movs	r2, #80	@ 0x50
 8007e86:	5a9b      	ldrh	r3, [r3, r2]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	00da      	lsls	r2, r3, #3
 8007e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9a:	18d3      	adds	r3, r2, r3
 8007e9c:	4ada      	ldr	r2, [pc, #872]	@ (8008208 <USB_EPStartXfer+0xb1c>)
 8007e9e:	4694      	mov	ip, r2
 8007ea0:	4463      	add	r3, ip
 8007ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	059b      	lsls	r3, r3, #22
 8007eac:	0d9b      	lsrs	r3, r3, #22
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	1d7b      	adds	r3, r7, #5
 8007eb6:	33ff      	adds	r3, #255	@ 0xff
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d108      	bne.n	8007ed0 <USB_EPStartXfer+0x7e4>
 8007ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4ad1      	ldr	r2, [pc, #836]	@ (800820c <USB_EPStartXfer+0xb20>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	e062      	b.n	8007f96 <USB_EPStartXfer+0x8aa>
 8007ed0:	1d7b      	adds	r3, r7, #5
 8007ed2:	33ff      	adds	r3, #255	@ 0xff
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ed8:	d81f      	bhi.n	8007f1a <USB_EPStartXfer+0x82e>
 8007eda:	1d7b      	adds	r3, r7, #5
 8007edc:	33ff      	adds	r3, #255	@ 0xff
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	21f0      	movs	r1, #240	@ 0xf0
 8007ee4:	187a      	adds	r2, r7, r1
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	1d7b      	adds	r3, r7, #5
 8007eea:	33ff      	adds	r3, #255	@ 0xff
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	d004      	beq.n	8007efe <USB_EPStartXfer+0x812>
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	187a      	adds	r2, r7, r1
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	23f0      	movs	r3, #240	@ 0xf0
 8007f06:	18fb      	adds	r3, r7, r3
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	e03d      	b.n	8007f96 <USB_EPStartXfer+0x8aa>
 8007f1a:	1d7b      	adds	r3, r7, #5
 8007f1c:	33ff      	adds	r3, #255	@ 0xff
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	21f0      	movs	r1, #240	@ 0xf0
 8007f24:	187a      	adds	r2, r7, r1
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	1d7b      	adds	r3, r7, #5
 8007f2a:	33ff      	adds	r3, #255	@ 0xff
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	221f      	movs	r2, #31
 8007f30:	4013      	ands	r3, r2
 8007f32:	d104      	bne.n	8007f3e <USB_EPStartXfer+0x852>
 8007f34:	187b      	adds	r3, r7, r1
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	187a      	adds	r2, r7, r1
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	23f0      	movs	r3, #240	@ 0xf0
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4aad      	ldr	r2, [pc, #692]	@ (800820c <USB_EPStartXfer+0xb20>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	e01a      	b.n	8007f96 <USB_EPStartXfer+0x8aa>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d116      	bne.n	8007f96 <USB_EPStartXfer+0x8aa>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2250      	movs	r2, #80	@ 0x50
 8007f6c:	5a9b      	ldrh	r3, [r3, r2]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	001a      	movs	r2, r3
 8007f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f74:	189b      	adds	r3, r3, r2
 8007f76:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	00da      	lsls	r2, r3, #3
 8007f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f80:	18d3      	adds	r3, r2, r3
 8007f82:	4aa1      	ldr	r2, [pc, #644]	@ (8008208 <USB_EPStartXfer+0xb1c>)
 8007f84:	4694      	mov	ip, r2
 8007f86:	4463      	add	r3, ip
 8007f88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f8a:	1d7b      	adds	r3, r7, #5
 8007f8c:	33ff      	adds	r3, #255	@ 0xff
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f96:	2076      	movs	r0, #118	@ 0x76
 8007f98:	183b      	adds	r3, r7, r0
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	8952      	ldrh	r2, [r2, #10]
 8007f9e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6959      	ldr	r1, [r3, #20]
 8007fa4:	1d7b      	adds	r3, r7, #5
 8007fa6:	33ff      	adds	r3, #255	@ 0xff
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	b29c      	uxth	r4, r3
 8007fac:	183b      	adds	r3, r7, r0
 8007fae:	881a      	ldrh	r2, [r3, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	f000 fe04 	bl	8008bc0 <USB_WritePMA>
 8007fb8:	e0ab      	b.n	8008112 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d000      	beq.n	8007fc4 <USB_EPStartXfer+0x8d8>
 8007fc2:	e070      	b.n	80080a6 <USB_EPStartXfer+0x9ba>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2250      	movs	r2, #80	@ 0x50
 8007fcc:	5a9b      	ldrh	r3, [r3, r2]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	001a      	movs	r2, r3
 8007fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fd4:	189b      	adds	r3, r3, r2
 8007fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	00da      	lsls	r2, r3, #3
 8007fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fe0:	18d3      	adds	r3, r2, r3
 8007fe2:	4a8b      	ldr	r2, [pc, #556]	@ (8008210 <USB_EPStartXfer+0xb24>)
 8007fe4:	4694      	mov	ip, r2
 8007fe6:	4463      	add	r3, ip
 8007fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	059b      	lsls	r3, r3, #22
 8007ff2:	0d9b      	lsrs	r3, r3, #22
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	1d7b      	adds	r3, r7, #5
 8007ffc:	33ff      	adds	r3, #255	@ 0xff
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d108      	bne.n	8008016 <USB_EPStartXfer+0x92a>
 8008004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	4a80      	ldr	r2, [pc, #512]	@ (800820c <USB_EPStartXfer+0xb20>)
 800800c:	4313      	orrs	r3, r2
 800800e:	b29a      	uxth	r2, r3
 8008010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e06c      	b.n	80080f0 <USB_EPStartXfer+0xa04>
 8008016:	1d7b      	adds	r3, r7, #5
 8008018:	33ff      	adds	r3, #255	@ 0xff
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b3e      	cmp	r3, #62	@ 0x3e
 800801e:	d81f      	bhi.n	8008060 <USB_EPStartXfer+0x974>
 8008020:	1d7b      	adds	r3, r7, #5
 8008022:	33ff      	adds	r3, #255	@ 0xff
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	21ec      	movs	r1, #236	@ 0xec
 800802a:	187a      	adds	r2, r7, r1
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	1d7b      	adds	r3, r7, #5
 8008030:	33ff      	adds	r3, #255	@ 0xff
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	4013      	ands	r3, r2
 8008038:	d004      	beq.n	8008044 <USB_EPStartXfer+0x958>
 800803a:	187b      	adds	r3, r7, r1
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	187a      	adds	r2, r7, r1
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29a      	uxth	r2, r3
 800804a:	23ec      	movs	r3, #236	@ 0xec
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	029b      	lsls	r3, r3, #10
 8008054:	b29b      	uxth	r3, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e047      	b.n	80080f0 <USB_EPStartXfer+0xa04>
 8008060:	1d7b      	adds	r3, r7, #5
 8008062:	33ff      	adds	r3, #255	@ 0xff
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	21ec      	movs	r1, #236	@ 0xec
 800806a:	187a      	adds	r2, r7, r1
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	1d7b      	adds	r3, r7, #5
 8008070:	33ff      	adds	r3, #255	@ 0xff
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	221f      	movs	r2, #31
 8008076:	4013      	ands	r3, r2
 8008078:	d104      	bne.n	8008084 <USB_EPStartXfer+0x998>
 800807a:	187b      	adds	r3, r7, r1
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	187a      	adds	r2, r7, r1
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29a      	uxth	r2, r3
 800808a:	23ec      	movs	r3, #236	@ 0xec
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	029b      	lsls	r3, r3, #10
 8008094:	b29b      	uxth	r3, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	b29b      	uxth	r3, r3
 800809a:	4a5c      	ldr	r2, [pc, #368]	@ (800820c <USB_EPStartXfer+0xb20>)
 800809c:	4313      	orrs	r3, r2
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e024      	b.n	80080f0 <USB_EPStartXfer+0xa04>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d120      	bne.n	80080f0 <USB_EPStartXfer+0xa04>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2184      	movs	r1, #132	@ 0x84
 80080b2:	187a      	adds	r2, r7, r1
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2250      	movs	r2, #80	@ 0x50
 80080ba:	5a9b      	ldrh	r3, [r3, r2]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	001a      	movs	r2, r3
 80080c0:	187b      	adds	r3, r7, r1
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	189b      	adds	r3, r3, r2
 80080c6:	187a      	adds	r2, r7, r1
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	00da      	lsls	r2, r3, #3
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	18d3      	adds	r3, r2, r3
 80080d6:	4a4e      	ldr	r2, [pc, #312]	@ (8008210 <USB_EPStartXfer+0xb24>)
 80080d8:	4694      	mov	ip, r2
 80080da:	4463      	add	r3, ip
 80080dc:	2180      	movs	r1, #128	@ 0x80
 80080de:	187a      	adds	r2, r7, r1
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	1d7b      	adds	r3, r7, #5
 80080e4:	33ff      	adds	r3, #255	@ 0xff
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080f0:	2076      	movs	r0, #118	@ 0x76
 80080f2:	183b      	adds	r3, r7, r0
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	8912      	ldrh	r2, [r2, #8]
 80080f8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	1d7b      	adds	r3, r7, #5
 8008100:	33ff      	adds	r3, #255	@ 0xff
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b29c      	uxth	r4, r3
 8008106:	183b      	adds	r3, r7, r0
 8008108:	881a      	ldrh	r2, [r3, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	0023      	movs	r3, r4
 800810e:	f000 fd57 	bl	8008bc0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	18d3      	adds	r3, r2, r3
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29a      	uxth	r2, r3
 8008120:	200a      	movs	r0, #10
 8008122:	183b      	adds	r3, r7, r0
 8008124:	493b      	ldr	r1, [pc, #236]	@ (8008214 <USB_EPStartXfer+0xb28>)
 8008126:	400a      	ands	r2, r1
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	183b      	adds	r3, r7, r0
 800812c:	183a      	adds	r2, r7, r0
 800812e:	8812      	ldrh	r2, [r2, #0]
 8008130:	2110      	movs	r1, #16
 8008132:	404a      	eors	r2, r1
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	183b      	adds	r3, r7, r0
 8008138:	183a      	adds	r2, r7, r0
 800813a:	8812      	ldrh	r2, [r2, #0]
 800813c:	2120      	movs	r1, #32
 800813e:	404a      	eors	r2, r1
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	18d3      	adds	r3, r2, r3
 800814c:	183a      	adds	r2, r7, r0
 800814e:	8812      	ldrh	r2, [r2, #0]
 8008150:	4931      	ldr	r1, [pc, #196]	@ (8008218 <USB_EPStartXfer+0xb2c>)
 8008152:	430a      	orrs	r2, r1
 8008154:	b292      	uxth	r2, r2
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	f000 fbe9 	bl	800892e <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	7b1b      	ldrb	r3, [r3, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d000      	beq.n	8008166 <USB_EPStartXfer+0xa7a>
 8008164:	e0a8      	b.n	80082b8 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d90d      	bls.n	800818e <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	1d7a      	adds	r2, r7, #5
 8008178:	32ff      	adds	r2, #255	@ 0xff
 800817a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	699a      	ldr	r2, [r3, #24]
 8008180:	1d7b      	adds	r3, r7, #5
 8008182:	33ff      	adds	r3, #255	@ 0xff
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	1ad2      	subs	r2, r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	619a      	str	r2, [r3, #24]
 800818c:	e007      	b.n	800819e <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	1d7a      	adds	r2, r7, #5
 8008194:	32ff      	adds	r2, #255	@ 0xff
 8008196:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2190      	movs	r1, #144	@ 0x90
 80081a2:	187a      	adds	r2, r7, r1
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2250      	movs	r2, #80	@ 0x50
 80081aa:	5a9b      	ldrh	r3, [r3, r2]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	001a      	movs	r2, r3
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	189b      	adds	r3, r3, r2
 80081b6:	187a      	adds	r2, r7, r1
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	00da      	lsls	r2, r3, #3
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	18d3      	adds	r3, r2, r3
 80081c6:	4a10      	ldr	r2, [pc, #64]	@ (8008208 <USB_EPStartXfer+0xb1c>)
 80081c8:	4694      	mov	ip, r2
 80081ca:	4463      	add	r3, ip
 80081cc:	218c      	movs	r1, #140	@ 0x8c
 80081ce:	187a      	adds	r2, r7, r1
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	059b      	lsls	r3, r3, #22
 80081dc:	0d9b      	lsrs	r3, r3, #22
 80081de:	b29a      	uxth	r2, r3
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	1d7b      	adds	r3, r7, #5
 80081e8:	33ff      	adds	r3, #255	@ 0xff
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d115      	bne.n	800821c <USB_EPStartXfer+0xb30>
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4a04      	ldr	r2, [pc, #16]	@ (800820c <USB_EPStartXfer+0xb20>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	187b      	adds	r3, r7, r1
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e36e      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
 8008206:	46c0      	nop			@ (mov r8, r8)
 8008208:	00000406 	.word	0x00000406
 800820c:	ffff8000 	.word	0xffff8000
 8008210:	00000402 	.word	0x00000402
 8008214:	ffff8fbf 	.word	0xffff8fbf
 8008218:	ffff8080 	.word	0xffff8080
 800821c:	1d7b      	adds	r3, r7, #5
 800821e:	33ff      	adds	r3, #255	@ 0xff
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b3e      	cmp	r3, #62	@ 0x3e
 8008224:	d822      	bhi.n	800826c <USB_EPStartXfer+0xb80>
 8008226:	1d7b      	adds	r3, r7, #5
 8008228:	33ff      	adds	r3, #255	@ 0xff
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	085b      	lsrs	r3, r3, #1
 800822e:	21e8      	movs	r1, #232	@ 0xe8
 8008230:	187a      	adds	r2, r7, r1
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	1d7b      	adds	r3, r7, #5
 8008236:	33ff      	adds	r3, #255	@ 0xff
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2201      	movs	r2, #1
 800823c:	4013      	ands	r3, r2
 800823e:	d004      	beq.n	800824a <USB_EPStartXfer+0xb5e>
 8008240:	187b      	adds	r3, r7, r1
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	187a      	adds	r2, r7, r1
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	218c      	movs	r1, #140	@ 0x8c
 800824c:	187b      	adds	r3, r7, r1
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	23e8      	movs	r3, #232	@ 0xe8
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	187b      	adds	r3, r7, r1
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	801a      	strh	r2, [r3, #0]
 800826a:	e33b      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
 800826c:	1d7b      	adds	r3, r7, #5
 800826e:	33ff      	adds	r3, #255	@ 0xff
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	21e8      	movs	r1, #232	@ 0xe8
 8008276:	187a      	adds	r2, r7, r1
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	1d7b      	adds	r3, r7, #5
 800827c:	33ff      	adds	r3, #255	@ 0xff
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	221f      	movs	r2, #31
 8008282:	4013      	ands	r3, r2
 8008284:	d104      	bne.n	8008290 <USB_EPStartXfer+0xba4>
 8008286:	187b      	adds	r3, r7, r1
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	187a      	adds	r2, r7, r1
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	218c      	movs	r1, #140	@ 0x8c
 8008292:	187b      	adds	r3, r7, r1
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29a      	uxth	r2, r3
 800829a:	23e8      	movs	r3, #232	@ 0xe8
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	029b      	lsls	r3, r3, #10
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	4313      	orrs	r3, r2
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4ad7      	ldr	r2, [pc, #860]	@ (8008608 <USB_EPStartXfer+0xf1c>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e315      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	78db      	ldrb	r3, [r3, #3]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d000      	beq.n	80082c2 <USB_EPStartXfer+0xbd6>
 80082c0:	e189      	b.n	80085d6 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d000      	beq.n	80082cc <USB_EPStartXfer+0xbe0>
 80082ca:	e07b      	b.n	80083c4 <USB_EPStartXfer+0xcd8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	21ac      	movs	r1, #172	@ 0xac
 80082d0:	187a      	adds	r2, r7, r1
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2250      	movs	r2, #80	@ 0x50
 80082d8:	5a9b      	ldrh	r3, [r3, r2]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	001a      	movs	r2, r3
 80082de:	187b      	adds	r3, r7, r1
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	189b      	adds	r3, r3, r2
 80082e4:	187a      	adds	r2, r7, r1
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	00da      	lsls	r2, r3, #3
 80082ee:	187b      	adds	r3, r7, r1
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	18d3      	adds	r3, r2, r3
 80082f4:	4ac5      	ldr	r2, [pc, #788]	@ (800860c <USB_EPStartXfer+0xf20>)
 80082f6:	4694      	mov	ip, r2
 80082f8:	4463      	add	r3, ip
 80082fa:	21a8      	movs	r1, #168	@ 0xa8
 80082fc:	187a      	adds	r2, r7, r1
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	187b      	adds	r3, r7, r1
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	059b      	lsls	r3, r3, #22
 800830a:	0d9b      	lsrs	r3, r3, #22
 800830c:	b29a      	uxth	r2, r3
 800830e:	187b      	adds	r3, r7, r1
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <USB_EPStartXfer+0xc46>
 800831c:	187b      	adds	r3, r7, r1
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	4ab8      	ldr	r2, [pc, #736]	@ (8008608 <USB_EPStartXfer+0xf1c>)
 8008326:	4313      	orrs	r3, r2
 8008328:	b29a      	uxth	r2, r3
 800832a:	187b      	adds	r3, r7, r1
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	e06c      	b.n	800840c <USB_EPStartXfer+0xd20>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b3e      	cmp	r3, #62	@ 0x3e
 8008338:	d820      	bhi.n	800837c <USB_EPStartXfer+0xc90>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	21e4      	movs	r1, #228	@ 0xe4
 8008342:	187a      	adds	r2, r7, r1
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2201      	movs	r2, #1
 800834c:	4013      	ands	r3, r2
 800834e:	d004      	beq.n	800835a <USB_EPStartXfer+0xc6e>
 8008350:	187b      	adds	r3, r7, r1
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	187a      	adds	r2, r7, r1
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	21a8      	movs	r1, #168	@ 0xa8
 800835c:	187b      	adds	r3, r7, r1
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29a      	uxth	r2, r3
 8008364:	23e4      	movs	r3, #228	@ 0xe4
 8008366:	18fb      	adds	r3, r7, r3
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	029b      	lsls	r3, r3, #10
 800836e:	b29b      	uxth	r3, r3
 8008370:	4313      	orrs	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	187b      	adds	r3, r7, r1
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e047      	b.n	800840c <USB_EPStartXfer+0xd20>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	21e4      	movs	r1, #228	@ 0xe4
 8008384:	187a      	adds	r2, r7, r1
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	221f      	movs	r2, #31
 800838e:	4013      	ands	r3, r2
 8008390:	d104      	bne.n	800839c <USB_EPStartXfer+0xcb0>
 8008392:	187b      	adds	r3, r7, r1
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3b01      	subs	r3, #1
 8008398:	187a      	adds	r2, r7, r1
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	21a8      	movs	r1, #168	@ 0xa8
 800839e:	187b      	adds	r3, r7, r1
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	23e4      	movs	r3, #228	@ 0xe4
 80083a8:	18fb      	adds	r3, r7, r3
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	4a94      	ldr	r2, [pc, #592]	@ (8008608 <USB_EPStartXfer+0xf1c>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	187b      	adds	r3, r7, r1
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e023      	b.n	800840c <USB_EPStartXfer+0xd20>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d11f      	bne.n	800840c <USB_EPStartXfer+0xd20>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	21b4      	movs	r1, #180	@ 0xb4
 80083d0:	187a      	adds	r2, r7, r1
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2250      	movs	r2, #80	@ 0x50
 80083d8:	5a9b      	ldrh	r3, [r3, r2]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	001a      	movs	r2, r3
 80083de:	187b      	adds	r3, r7, r1
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	189b      	adds	r3, r3, r2
 80083e4:	187a      	adds	r2, r7, r1
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	00da      	lsls	r2, r3, #3
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	18d3      	adds	r3, r2, r3
 80083f4:	4a85      	ldr	r2, [pc, #532]	@ (800860c <USB_EPStartXfer+0xf20>)
 80083f6:	4694      	mov	ip, r2
 80083f8:	4463      	add	r3, ip
 80083fa:	21b0      	movs	r1, #176	@ 0xb0
 80083fc:	187a      	adds	r2, r7, r1
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	b29a      	uxth	r2, r3
 8008406:	187b      	adds	r3, r7, r1
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	22a4      	movs	r2, #164	@ 0xa4
 8008410:	18ba      	adds	r2, r7, r2
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d000      	beq.n	800841e <USB_EPStartXfer+0xd32>
 800841c:	e07b      	b.n	8008516 <USB_EPStartXfer+0xe2a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	219c      	movs	r1, #156	@ 0x9c
 8008422:	187a      	adds	r2, r7, r1
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2250      	movs	r2, #80	@ 0x50
 800842a:	5a9b      	ldrh	r3, [r3, r2]
 800842c:	b29b      	uxth	r3, r3
 800842e:	001a      	movs	r2, r3
 8008430:	187b      	adds	r3, r7, r1
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	189b      	adds	r3, r3, r2
 8008436:	187a      	adds	r2, r7, r1
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	00da      	lsls	r2, r3, #3
 8008440:	187b      	adds	r3, r7, r1
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	4a72      	ldr	r2, [pc, #456]	@ (8008610 <USB_EPStartXfer+0xf24>)
 8008448:	4694      	mov	ip, r2
 800844a:	4463      	add	r3, ip
 800844c:	2198      	movs	r1, #152	@ 0x98
 800844e:	187a      	adds	r2, r7, r1
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	187b      	adds	r3, r7, r1
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	059b      	lsls	r3, r3, #22
 800845c:	0d9b      	lsrs	r3, r3, #22
 800845e:	b29a      	uxth	r2, r3
 8008460:	187b      	adds	r3, r7, r1
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <USB_EPStartXfer+0xd98>
 800846e:	187b      	adds	r3, r7, r1
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	4a64      	ldr	r2, [pc, #400]	@ (8008608 <USB_EPStartXfer+0xf1c>)
 8008478:	4313      	orrs	r3, r2
 800847a:	b29a      	uxth	r2, r3
 800847c:	187b      	adds	r3, r7, r1
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e069      	b.n	8008558 <USB_EPStartXfer+0xe6c>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b3e      	cmp	r3, #62	@ 0x3e
 800848a:	d820      	bhi.n	80084ce <USB_EPStartXfer+0xde2>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	21e0      	movs	r1, #224	@ 0xe0
 8008494:	187a      	adds	r2, r7, r1
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2201      	movs	r2, #1
 800849e:	4013      	ands	r3, r2
 80084a0:	d004      	beq.n	80084ac <USB_EPStartXfer+0xdc0>
 80084a2:	187b      	adds	r3, r7, r1
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	187a      	adds	r2, r7, r1
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	2198      	movs	r1, #152	@ 0x98
 80084ae:	187b      	adds	r3, r7, r1
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	23e0      	movs	r3, #224	@ 0xe0
 80084b8:	18fb      	adds	r3, r7, r3
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	029b      	lsls	r3, r3, #10
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	187b      	adds	r3, r7, r1
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	e044      	b.n	8008558 <USB_EPStartXfer+0xe6c>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	21e0      	movs	r1, #224	@ 0xe0
 80084d6:	187a      	adds	r2, r7, r1
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	221f      	movs	r2, #31
 80084e0:	4013      	ands	r3, r2
 80084e2:	d104      	bne.n	80084ee <USB_EPStartXfer+0xe02>
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	187a      	adds	r2, r7, r1
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	2198      	movs	r1, #152	@ 0x98
 80084f0:	187b      	adds	r3, r7, r1
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	23e0      	movs	r3, #224	@ 0xe0
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	b29b      	uxth	r3, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	b29b      	uxth	r3, r3
 8008508:	4a3f      	ldr	r2, [pc, #252]	@ (8008608 <USB_EPStartXfer+0xf1c>)
 800850a:	4313      	orrs	r3, r2
 800850c:	b29a      	uxth	r2, r3
 800850e:	187b      	adds	r3, r7, r1
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	801a      	strh	r2, [r3, #0]
 8008514:	e020      	b.n	8008558 <USB_EPStartXfer+0xe6c>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d11c      	bne.n	8008558 <USB_EPStartXfer+0xe6c>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2250      	movs	r2, #80	@ 0x50
 8008522:	5a9b      	ldrh	r3, [r3, r2]
 8008524:	b29b      	uxth	r3, r3
 8008526:	001a      	movs	r2, r3
 8008528:	21a4      	movs	r1, #164	@ 0xa4
 800852a:	187b      	adds	r3, r7, r1
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	189b      	adds	r3, r3, r2
 8008530:	187a      	adds	r2, r7, r1
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	00da      	lsls	r2, r3, #3
 800853a:	187b      	adds	r3, r7, r1
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	4a33      	ldr	r2, [pc, #204]	@ (8008610 <USB_EPStartXfer+0xf24>)
 8008542:	4694      	mov	ip, r2
 8008544:	4463      	add	r3, ip
 8008546:	21a0      	movs	r1, #160	@ 0xa0
 8008548:	187a      	adds	r2, r7, r1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	b29a      	uxth	r2, r3
 8008552:	187b      	adds	r3, r7, r1
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d100      	bne.n	8008562 <USB_EPStartXfer+0xe76>
 8008560:	e1c0      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	18d2      	adds	r2, r2, r3
 800856c:	2196      	movs	r1, #150	@ 0x96
 800856e:	187b      	adds	r3, r7, r1
 8008570:	8812      	ldrh	r2, [r2, #0]
 8008572:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008574:	187b      	adds	r3, r7, r1
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	2380      	movs	r3, #128	@ 0x80
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	4013      	ands	r3, r2
 800857e:	d004      	beq.n	800858a <USB_EPStartXfer+0xe9e>
 8008580:	187b      	adds	r3, r7, r1
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	2240      	movs	r2, #64	@ 0x40
 8008586:	4013      	ands	r3, r2
 8008588:	d10d      	bne.n	80085a6 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800858a:	2196      	movs	r1, #150	@ 0x96
 800858c:	187b      	adds	r3, r7, r1
 800858e:	881a      	ldrh	r2, [r3, #0]
 8008590:	2380      	movs	r3, #128	@ 0x80
 8008592:	01db      	lsls	r3, r3, #7
 8008594:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008596:	d000      	beq.n	800859a <USB_EPStartXfer+0xeae>
 8008598:	e1a4      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800859a:	187b      	adds	r3, r7, r1
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2240      	movs	r2, #64	@ 0x40
 80085a0:	4013      	ands	r3, r2
 80085a2:	d000      	beq.n	80085a6 <USB_EPStartXfer+0xeba>
 80085a4:	e19e      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	18d3      	adds	r3, r2, r3
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	2094      	movs	r0, #148	@ 0x94
 80085b6:	183b      	adds	r3, r7, r0
 80085b8:	4916      	ldr	r1, [pc, #88]	@ (8008614 <USB_EPStartXfer+0xf28>)
 80085ba:	400a      	ands	r2, r1
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	183a      	adds	r2, r7, r0
 80085ca:	8812      	ldrh	r2, [r2, #0]
 80085cc:	4912      	ldr	r1, [pc, #72]	@ (8008618 <USB_EPStartXfer+0xf2c>)
 80085ce:	430a      	orrs	r2, r1
 80085d0:	b292      	uxth	r2, r2
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e186      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	78db      	ldrb	r3, [r3, #3]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d000      	beq.n	80085e0 <USB_EPStartXfer+0xef4>
 80085de:	e17f      	b.n	80088e0 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d917      	bls.n	800861c <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	1d7a      	adds	r2, r7, #5
 80085f2:	32ff      	adds	r2, #255	@ 0xff
 80085f4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	1d7b      	adds	r3, r7, #5
 80085fc:	33ff      	adds	r3, #255	@ 0xff
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1ad2      	subs	r2, r2, r3
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	619a      	str	r2, [r3, #24]
 8008606:	e011      	b.n	800862c <USB_EPStartXfer+0xf40>
 8008608:	ffff8000 	.word	0xffff8000
 800860c:	00000402 	.word	0x00000402
 8008610:	00000406 	.word	0x00000406
 8008614:	ffff8f8f 	.word	0xffff8f8f
 8008618:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	1d7a      	adds	r2, r7, #5
 8008622:	32ff      	adds	r2, #255	@ 0xff
 8008624:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d000      	beq.n	8008636 <USB_EPStartXfer+0xf4a>
 8008634:	e081      	b.n	800873a <USB_EPStartXfer+0x104e>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	21cc      	movs	r1, #204	@ 0xcc
 800863a:	187a      	adds	r2, r7, r1
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2250      	movs	r2, #80	@ 0x50
 8008642:	5a9b      	ldrh	r3, [r3, r2]
 8008644:	b29b      	uxth	r3, r3
 8008646:	001a      	movs	r2, r3
 8008648:	187b      	adds	r3, r7, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	189b      	adds	r3, r3, r2
 800864e:	187a      	adds	r2, r7, r1
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	00da      	lsls	r2, r3, #3
 8008658:	187b      	adds	r3, r7, r1
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	4ab6      	ldr	r2, [pc, #728]	@ (8008938 <USB_EPStartXfer+0x124c>)
 8008660:	4694      	mov	ip, r2
 8008662:	4463      	add	r3, ip
 8008664:	21c8      	movs	r1, #200	@ 0xc8
 8008666:	187a      	adds	r2, r7, r1
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	187b      	adds	r3, r7, r1
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	059b      	lsls	r3, r3, #22
 8008674:	0d9b      	lsrs	r3, r3, #22
 8008676:	b29a      	uxth	r2, r3
 8008678:	187b      	adds	r3, r7, r1
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	801a      	strh	r2, [r3, #0]
 800867e:	1d7b      	adds	r3, r7, #5
 8008680:	33ff      	adds	r3, #255	@ 0xff
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <USB_EPStartXfer+0xfb2>
 8008688:	187b      	adds	r3, r7, r1
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	4aaa      	ldr	r2, [pc, #680]	@ (800893c <USB_EPStartXfer+0x1250>)
 8008692:	4313      	orrs	r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	187b      	adds	r3, r7, r1
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	801a      	strh	r2, [r3, #0]
 800869c:	e072      	b.n	8008784 <USB_EPStartXfer+0x1098>
 800869e:	1d7b      	adds	r3, r7, #5
 80086a0:	33ff      	adds	r3, #255	@ 0xff
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80086a6:	d822      	bhi.n	80086ee <USB_EPStartXfer+0x1002>
 80086a8:	1d7b      	adds	r3, r7, #5
 80086aa:	33ff      	adds	r3, #255	@ 0xff
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	21dc      	movs	r1, #220	@ 0xdc
 80086b2:	187a      	adds	r2, r7, r1
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	1d7b      	adds	r3, r7, #5
 80086b8:	33ff      	adds	r3, #255	@ 0xff
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2201      	movs	r2, #1
 80086be:	4013      	ands	r3, r2
 80086c0:	d004      	beq.n	80086cc <USB_EPStartXfer+0xfe0>
 80086c2:	187b      	adds	r3, r7, r1
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	187a      	adds	r2, r7, r1
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	21c8      	movs	r1, #200	@ 0xc8
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	23dc      	movs	r3, #220	@ 0xdc
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	029b      	lsls	r3, r3, #10
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	4313      	orrs	r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	187b      	adds	r3, r7, r1
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e04a      	b.n	8008784 <USB_EPStartXfer+0x1098>
 80086ee:	1d7b      	adds	r3, r7, #5
 80086f0:	33ff      	adds	r3, #255	@ 0xff
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	21dc      	movs	r1, #220	@ 0xdc
 80086f8:	187a      	adds	r2, r7, r1
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	1d7b      	adds	r3, r7, #5
 80086fe:	33ff      	adds	r3, #255	@ 0xff
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	221f      	movs	r2, #31
 8008704:	4013      	ands	r3, r2
 8008706:	d104      	bne.n	8008712 <USB_EPStartXfer+0x1026>
 8008708:	187b      	adds	r3, r7, r1
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	187a      	adds	r2, r7, r1
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	21c8      	movs	r1, #200	@ 0xc8
 8008714:	187b      	adds	r3, r7, r1
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29a      	uxth	r2, r3
 800871c:	23dc      	movs	r3, #220	@ 0xdc
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	b29b      	uxth	r3, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	4a83      	ldr	r2, [pc, #524]	@ (800893c <USB_EPStartXfer+0x1250>)
 800872e:	4313      	orrs	r3, r2
 8008730:	b29a      	uxth	r2, r3
 8008732:	187b      	adds	r3, r7, r1
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e024      	b.n	8008784 <USB_EPStartXfer+0x1098>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d120      	bne.n	8008784 <USB_EPStartXfer+0x1098>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	21d4      	movs	r1, #212	@ 0xd4
 8008746:	187a      	adds	r2, r7, r1
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2250      	movs	r2, #80	@ 0x50
 800874e:	5a9b      	ldrh	r3, [r3, r2]
 8008750:	b29b      	uxth	r3, r3
 8008752:	001a      	movs	r2, r3
 8008754:	187b      	adds	r3, r7, r1
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	189b      	adds	r3, r3, r2
 800875a:	187a      	adds	r2, r7, r1
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	00da      	lsls	r2, r3, #3
 8008764:	187b      	adds	r3, r7, r1
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	18d3      	adds	r3, r2, r3
 800876a:	4a73      	ldr	r2, [pc, #460]	@ (8008938 <USB_EPStartXfer+0x124c>)
 800876c:	4694      	mov	ip, r2
 800876e:	4463      	add	r3, ip
 8008770:	21d0      	movs	r1, #208	@ 0xd0
 8008772:	187a      	adds	r2, r7, r1
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	1d7b      	adds	r3, r7, #5
 8008778:	33ff      	adds	r3, #255	@ 0xff
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	b29a      	uxth	r2, r3
 800877e:	187b      	adds	r3, r7, r1
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	22c4      	movs	r2, #196	@ 0xc4
 8008788:	18ba      	adds	r2, r7, r2
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d000      	beq.n	8008796 <USB_EPStartXfer+0x10aa>
 8008794:	e081      	b.n	800889a <USB_EPStartXfer+0x11ae>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	21bc      	movs	r1, #188	@ 0xbc
 800879a:	187a      	adds	r2, r7, r1
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2250      	movs	r2, #80	@ 0x50
 80087a2:	5a9b      	ldrh	r3, [r3, r2]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	001a      	movs	r2, r3
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	189b      	adds	r3, r3, r2
 80087ae:	187a      	adds	r2, r7, r1
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	00da      	lsls	r2, r3, #3
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	18d3      	adds	r3, r2, r3
 80087be:	4a60      	ldr	r2, [pc, #384]	@ (8008940 <USB_EPStartXfer+0x1254>)
 80087c0:	4694      	mov	ip, r2
 80087c2:	4463      	add	r3, ip
 80087c4:	21b8      	movs	r1, #184	@ 0xb8
 80087c6:	187a      	adds	r2, r7, r1
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	187b      	adds	r3, r7, r1
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	059b      	lsls	r3, r3, #22
 80087d4:	0d9b      	lsrs	r3, r3, #22
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	801a      	strh	r2, [r3, #0]
 80087de:	1d7b      	adds	r3, r7, #5
 80087e0:	33ff      	adds	r3, #255	@ 0xff
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <USB_EPStartXfer+0x1112>
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	4a52      	ldr	r2, [pc, #328]	@ (800893c <USB_EPStartXfer+0x1250>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	187b      	adds	r3, r7, r1
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e072      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
 80087fe:	1d7b      	adds	r3, r7, #5
 8008800:	33ff      	adds	r3, #255	@ 0xff
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b3e      	cmp	r3, #62	@ 0x3e
 8008806:	d822      	bhi.n	800884e <USB_EPStartXfer+0x1162>
 8008808:	1d7b      	adds	r3, r7, #5
 800880a:	33ff      	adds	r3, #255	@ 0xff
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	21d8      	movs	r1, #216	@ 0xd8
 8008812:	187a      	adds	r2, r7, r1
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	1d7b      	adds	r3, r7, #5
 8008818:	33ff      	adds	r3, #255	@ 0xff
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	4013      	ands	r3, r2
 8008820:	d004      	beq.n	800882c <USB_EPStartXfer+0x1140>
 8008822:	187b      	adds	r3, r7, r1
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	187a      	adds	r2, r7, r1
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	21b8      	movs	r1, #184	@ 0xb8
 800882e:	187b      	adds	r3, r7, r1
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29a      	uxth	r2, r3
 8008836:	23d8      	movs	r3, #216	@ 0xd8
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	029b      	lsls	r3, r3, #10
 8008840:	b29b      	uxth	r3, r3
 8008842:	4313      	orrs	r3, r2
 8008844:	b29a      	uxth	r2, r3
 8008846:	187b      	adds	r3, r7, r1
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	801a      	strh	r2, [r3, #0]
 800884c:	e04a      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
 800884e:	1d7b      	adds	r3, r7, #5
 8008850:	33ff      	adds	r3, #255	@ 0xff
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	095b      	lsrs	r3, r3, #5
 8008856:	21d8      	movs	r1, #216	@ 0xd8
 8008858:	187a      	adds	r2, r7, r1
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	1d7b      	adds	r3, r7, #5
 800885e:	33ff      	adds	r3, #255	@ 0xff
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	221f      	movs	r2, #31
 8008864:	4013      	ands	r3, r2
 8008866:	d104      	bne.n	8008872 <USB_EPStartXfer+0x1186>
 8008868:	187b      	adds	r3, r7, r1
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	187a      	adds	r2, r7, r1
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	21b8      	movs	r1, #184	@ 0xb8
 8008874:	187b      	adds	r3, r7, r1
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29a      	uxth	r2, r3
 800887c:	23d8      	movs	r3, #216	@ 0xd8
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	029b      	lsls	r3, r3, #10
 8008886:	b29b      	uxth	r3, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	b29b      	uxth	r3, r3
 800888c:	4a2b      	ldr	r2, [pc, #172]	@ (800893c <USB_EPStartXfer+0x1250>)
 800888e:	4313      	orrs	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	187b      	adds	r3, r7, r1
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e024      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d120      	bne.n	80088e4 <USB_EPStartXfer+0x11f8>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2250      	movs	r2, #80	@ 0x50
 80088a6:	5a9b      	ldrh	r3, [r3, r2]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	001a      	movs	r2, r3
 80088ac:	21c4      	movs	r1, #196	@ 0xc4
 80088ae:	187b      	adds	r3, r7, r1
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	189b      	adds	r3, r3, r2
 80088b4:	187a      	adds	r2, r7, r1
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	00da      	lsls	r2, r3, #3
 80088be:	187b      	adds	r3, r7, r1
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	18d3      	adds	r3, r2, r3
 80088c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008940 <USB_EPStartXfer+0x1254>)
 80088c6:	4694      	mov	ip, r2
 80088c8:	4463      	add	r3, ip
 80088ca:	21c0      	movs	r1, #192	@ 0xc0
 80088cc:	187a      	adds	r2, r7, r1
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	1d7b      	adds	r3, r7, #5
 80088d2:	33ff      	adds	r3, #255	@ 0xff
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	187b      	adds	r3, r7, r1
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	801a      	strh	r2, [r3, #0]
 80088de:	e001      	b.n	80088e4 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e025      	b.n	8008930 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	18d3      	adds	r3, r2, r3
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	208a      	movs	r0, #138	@ 0x8a
 80088f4:	183b      	adds	r3, r7, r0
 80088f6:	4913      	ldr	r1, [pc, #76]	@ (8008944 <USB_EPStartXfer+0x1258>)
 80088f8:	400a      	ands	r2, r1
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	183b      	adds	r3, r7, r0
 80088fe:	183a      	adds	r2, r7, r0
 8008900:	8812      	ldrh	r2, [r2, #0]
 8008902:	2180      	movs	r1, #128	@ 0x80
 8008904:	0149      	lsls	r1, r1, #5
 8008906:	404a      	eors	r2, r1
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	183b      	adds	r3, r7, r0
 800890c:	183a      	adds	r2, r7, r0
 800890e:	8812      	ldrh	r2, [r2, #0]
 8008910:	2180      	movs	r1, #128	@ 0x80
 8008912:	0189      	lsls	r1, r1, #6
 8008914:	404a      	eors	r2, r1
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	18d3      	adds	r3, r2, r3
 8008922:	183a      	adds	r2, r7, r0
 8008924:	8812      	ldrh	r2, [r2, #0]
 8008926:	4908      	ldr	r1, [pc, #32]	@ (8008948 <USB_EPStartXfer+0x125c>)
 8008928:	430a      	orrs	r2, r1
 800892a:	b292      	uxth	r2, r2
 800892c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	0018      	movs	r0, r3
 8008932:	46bd      	mov	sp, r7
 8008934:	b043      	add	sp, #268	@ 0x10c
 8008936:	bd90      	pop	{r4, r7, pc}
 8008938:	00000402 	.word	0x00000402
 800893c:	ffff8000 	.word	0xffff8000
 8008940:	00000406 	.word	0x00000406
 8008944:	ffffbf8f 	.word	0xffffbf8f
 8008948:	ffff8080 	.word	0xffff8080

0800894c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01d      	beq.n	800899a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	18d3      	adds	r3, r2, r3
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	200c      	movs	r0, #12
 800896e:	183b      	adds	r3, r7, r0
 8008970:	491b      	ldr	r1, [pc, #108]	@ (80089e0 <USB_EPSetStall+0x94>)
 8008972:	400a      	ands	r2, r1
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	183b      	adds	r3, r7, r0
 8008978:	183a      	adds	r2, r7, r0
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	2110      	movs	r1, #16
 800897e:	404a      	eors	r2, r1
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	18d3      	adds	r3, r2, r3
 800898c:	183a      	adds	r2, r7, r0
 800898e:	8812      	ldrh	r2, [r2, #0]
 8008990:	4914      	ldr	r1, [pc, #80]	@ (80089e4 <USB_EPSetStall+0x98>)
 8008992:	430a      	orrs	r2, r1
 8008994:	b292      	uxth	r2, r2
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e01d      	b.n	80089d6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	18d3      	adds	r3, r2, r3
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	200e      	movs	r0, #14
 80089aa:	183b      	adds	r3, r7, r0
 80089ac:	490e      	ldr	r1, [pc, #56]	@ (80089e8 <USB_EPSetStall+0x9c>)
 80089ae:	400a      	ands	r2, r1
 80089b0:	801a      	strh	r2, [r3, #0]
 80089b2:	183b      	adds	r3, r7, r0
 80089b4:	183a      	adds	r2, r7, r0
 80089b6:	8812      	ldrh	r2, [r2, #0]
 80089b8:	2180      	movs	r1, #128	@ 0x80
 80089ba:	0149      	lsls	r1, r1, #5
 80089bc:	404a      	eors	r2, r1
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	18d3      	adds	r3, r2, r3
 80089ca:	183a      	adds	r2, r7, r0
 80089cc:	8812      	ldrh	r2, [r2, #0]
 80089ce:	4905      	ldr	r1, [pc, #20]	@ (80089e4 <USB_EPSetStall+0x98>)
 80089d0:	430a      	orrs	r2, r1
 80089d2:	b292      	uxth	r2, r2
 80089d4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	0018      	movs	r0, r3
 80089da:	46bd      	mov	sp, r7
 80089dc:	b004      	add	sp, #16
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	ffff8fbf 	.word	0xffff8fbf
 80089e4:	ffff8080 	.word	0xffff8080
 80089e8:	ffffbf8f 	.word	0xffffbf8f

080089ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	7b1b      	ldrb	r3, [r3, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d000      	beq.n	8008a00 <USB_EPClearStall+0x14>
 80089fe:	e095      	b.n	8008b2c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d046      	beq.n	8008a96 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	18d2      	adds	r2, r2, r3
 8008a12:	2110      	movs	r1, #16
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	2240      	movs	r2, #64	@ 0x40
 8008a20:	4013      	ands	r3, r2
 8008a22:	d016      	beq.n	8008a52 <USB_EPClearStall+0x66>
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	200e      	movs	r0, #14
 8008a34:	183b      	adds	r3, r7, r0
 8008a36:	4940      	ldr	r1, [pc, #256]	@ (8008b38 <USB_EPClearStall+0x14c>)
 8008a38:	400a      	ands	r2, r1
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	183a      	adds	r2, r7, r0
 8008a48:	8812      	ldrh	r2, [r2, #0]
 8008a4a:	493c      	ldr	r1, [pc, #240]	@ (8008b3c <USB_EPClearStall+0x150>)
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	78db      	ldrb	r3, [r3, #3]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d068      	beq.n	8008b2c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	200c      	movs	r0, #12
 8008a6a:	183b      	adds	r3, r7, r0
 8008a6c:	4934      	ldr	r1, [pc, #208]	@ (8008b40 <USB_EPClearStall+0x154>)
 8008a6e:	400a      	ands	r2, r1
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	183b      	adds	r3, r7, r0
 8008a74:	183a      	adds	r2, r7, r0
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	2120      	movs	r1, #32
 8008a7a:	404a      	eors	r2, r1
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	18d3      	adds	r3, r2, r3
 8008a88:	183a      	adds	r2, r7, r0
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	492d      	ldr	r1, [pc, #180]	@ (8008b44 <USB_EPClearStall+0x158>)
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	b292      	uxth	r2, r2
 8008a92:	801a      	strh	r2, [r3, #0]
 8008a94:	e04a      	b.n	8008b2c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	18d2      	adds	r2, r2, r3
 8008aa0:	2116      	movs	r1, #22
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	8812      	ldrh	r2, [r2, #0]
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	187b      	adds	r3, r7, r1
 8008aaa:	881a      	ldrh	r2, [r3, #0]
 8008aac:	2380      	movs	r3, #128	@ 0x80
 8008aae:	01db      	lsls	r3, r3, #7
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	d016      	beq.n	8008ae2 <USB_EPClearStall+0xf6>
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	18d3      	adds	r3, r2, r3
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	2014      	movs	r0, #20
 8008ac4:	183b      	adds	r3, r7, r0
 8008ac6:	491c      	ldr	r1, [pc, #112]	@ (8008b38 <USB_EPClearStall+0x14c>)
 8008ac8:	400a      	ands	r2, r1
 8008aca:	801a      	strh	r2, [r3, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	18d3      	adds	r3, r2, r3
 8008ad6:	183a      	adds	r2, r7, r0
 8008ad8:	8812      	ldrh	r2, [r2, #0]
 8008ada:	491b      	ldr	r1, [pc, #108]	@ (8008b48 <USB_EPClearStall+0x15c>)
 8008adc:	430a      	orrs	r2, r1
 8008ade:	b292      	uxth	r2, r2
 8008ae0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	2012      	movs	r0, #18
 8008af2:	183b      	adds	r3, r7, r0
 8008af4:	4915      	ldr	r1, [pc, #84]	@ (8008b4c <USB_EPClearStall+0x160>)
 8008af6:	400a      	ands	r2, r1
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	183b      	adds	r3, r7, r0
 8008afc:	183a      	adds	r2, r7, r0
 8008afe:	8812      	ldrh	r2, [r2, #0]
 8008b00:	2180      	movs	r1, #128	@ 0x80
 8008b02:	0149      	lsls	r1, r1, #5
 8008b04:	404a      	eors	r2, r1
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	183b      	adds	r3, r7, r0
 8008b0a:	183a      	adds	r2, r7, r0
 8008b0c:	8812      	ldrh	r2, [r2, #0]
 8008b0e:	2180      	movs	r1, #128	@ 0x80
 8008b10:	0189      	lsls	r1, r1, #6
 8008b12:	404a      	eors	r2, r1
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	18d3      	adds	r3, r2, r3
 8008b20:	183a      	adds	r2, r7, r0
 8008b22:	8812      	ldrh	r2, [r2, #0]
 8008b24:	4907      	ldr	r1, [pc, #28]	@ (8008b44 <USB_EPClearStall+0x158>)
 8008b26:	430a      	orrs	r2, r1
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b006      	add	sp, #24
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	ffff8f8f 	.word	0xffff8f8f
 8008b3c:	ffff80c0 	.word	0xffff80c0
 8008b40:	ffff8fbf 	.word	0xffff8fbf
 8008b44:	ffff8080 	.word	0xffff8080
 8008b48:	ffffc080 	.word	0xffffc080
 8008b4c:	ffffbf8f 	.word	0xffffbf8f

08008b50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	000a      	movs	r2, r1
 8008b5a:	1cfb      	adds	r3, r7, #3
 8008b5c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8008b5e:	1cfb      	adds	r3, r7, #3
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d103      	bne.n	8008b6e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	224c      	movs	r2, #76	@ 0x4c
 8008b6a:	2180      	movs	r1, #128	@ 0x80
 8008b6c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	0018      	movs	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b002      	add	sp, #8
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2258      	movs	r2, #88	@ 0x58
 8008b84:	5a9b      	ldrh	r3, [r3, r2]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4a05      	ldr	r2, [pc, #20]	@ (8008ba0 <USB_DevConnect+0x28>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2258      	movs	r2, #88	@ 0x58
 8008b92:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	0018      	movs	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b002      	add	sp, #8
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	46c0      	nop			@ (mov r8, r8)
 8008ba0:	ffff8000 	.word	0xffff8000

08008ba4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2244      	movs	r2, #68	@ 0x44
 8008bb0:	5a9b      	ldrh	r3, [r3, r2]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	0018      	movs	r0, r3
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b004      	add	sp, #16
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	@ 0x28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	0019      	movs	r1, r3
 8008bcc:	1dbb      	adds	r3, r7, #6
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	1c0a      	adds	r2, r1, #0
 8008bd4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	085b      	lsrs	r3, r3, #1
 8008bde:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008be8:	1dbb      	adds	r3, r7, #6
 8008bea:	881a      	ldrh	r2, [r3, #0]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	2280      	movs	r2, #128	@ 0x80
 8008bf2:	00d2      	lsls	r2, r2, #3
 8008bf4:	4694      	mov	ip, r2
 8008bf6:	4463      	add	r3, ip
 8008bf8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bfe:	e021      	b.n	8008c44 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	2112      	movs	r1, #18
 8008c06:	187b      	adds	r3, r7, r1
 8008c08:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b21b      	sxth	r3, r3
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	b21a      	sxth	r2, r3
 8008c16:	187b      	adds	r3, r7, r1
 8008c18:	2000      	movs	r0, #0
 8008c1a:	5e1b      	ldrsh	r3, [r3, r0]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	b21a      	sxth	r2, r3
 8008c20:	187b      	adds	r3, r7, r1
 8008c22:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	187a      	adds	r2, r7, r1
 8008c28:	8812      	ldrh	r2, [r2, #0]
 8008c2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	3302      	adds	r3, #2
 8008c30:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3301      	adds	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	3b01      	subs	r3, #1
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1da      	bne.n	8008c00 <USB_WritePMA+0x40>
  }
}
 8008c4a:	46c0      	nop			@ (mov r8, r8)
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b00a      	add	sp, #40	@ 0x28
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	@ 0x28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	0019      	movs	r1, r3
 8008c60:	1dbb      	adds	r3, r7, #6
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	1d3b      	adds	r3, r7, #4
 8008c66:	1c0a      	adds	r2, r1, #0
 8008c68:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	085b      	lsrs	r3, r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c7c:	1dbb      	adds	r3, r7, #6
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	18d3      	adds	r3, r2, r3
 8008c84:	2280      	movs	r2, #128	@ 0x80
 8008c86:	00d2      	lsls	r2, r2, #3
 8008c88:	4694      	mov	ip, r2
 8008c8a:	4463      	add	r3, ip
 8008c8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c92:	e018      	b.n	8008cc6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	3301      	adds	r3, #1
 8008cae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	0a1b      	lsrs	r3, r3, #8
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e3      	bne.n	8008c94 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008ccc:	1d3b      	adds	r3, r7, #4
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	701a      	strb	r2, [r3, #0]
  }
}
 8008cea:	46c0      	nop			@ (mov r8, r8)
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b00a      	add	sp, #40	@ 0x28
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008cf2:	b590      	push	{r4, r7, lr}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	000a      	movs	r2, r1
 8008cfc:	1cfb      	adds	r3, r7, #3
 8008cfe:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008d00:	240f      	movs	r4, #15
 8008d02:	193b      	adds	r3, r7, r4
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	2340      	movs	r3, #64	@ 0x40
 8008d0c:	2203      	movs	r2, #3
 8008d0e:	2181      	movs	r1, #129	@ 0x81
 8008d10:	f001 ff8d 	bl	800ac2e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	2340      	movs	r3, #64	@ 0x40
 8008d1e:	2203      	movs	r2, #3
 8008d20:	2101      	movs	r1, #1
 8008d22:	f001 ff84 	bl	800ac2e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	23b6      	movs	r3, #182	@ 0xb6
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008d30:	2054      	movs	r0, #84	@ 0x54
 8008d32:	f002 f8fd 	bl	800af30 <USBD_static_malloc>
 8008d36:	0001      	movs	r1, r0
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	23ae      	movs	r3, #174	@ 0xae
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	23ae      	movs	r3, #174	@ 0xae
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	58d3      	ldr	r3, [r2, r3]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <USBD_CUSTOM_HID_Init+0x62>
  {
    ret = 1U;
 8008d4c:	193b      	adds	r3, r7, r4
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e014      	b.n	8008d7e <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	23ae      	movs	r3, #174	@ 0xae
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	58d3      	ldr	r3, [r2, r3]
 8008d5c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2250      	movs	r2, #80	@ 0x50
 8008d62:	2100      	movs	r1, #0
 8008d64:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	23af      	movs	r3, #175	@ 0xaf
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	58d3      	ldr	r3, [r2, r3]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	2340      	movs	r3, #64	@ 0x40
 8008d78:	2101      	movs	r1, #1
 8008d7a:	f002 f8a2 	bl	800aec2 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008d7e:	230f      	movs	r3, #15
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	781b      	ldrb	r3, [r3, #0]
}
 8008d84:	0018      	movs	r0, r3
 8008d86:	46bd      	mov	sp, r7
 8008d88:	b005      	add	sp, #20
 8008d8a:	bd90      	pop	{r4, r7, pc}

08008d8c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	000a      	movs	r2, r1
 8008d96:	1cfb      	adds	r3, r7, #3
 8008d98:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2181      	movs	r1, #129	@ 0x81
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f001 ff7c 	bl	800ac9c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2101      	movs	r1, #1
 8008dae:	0018      	movs	r0, r3
 8008db0:	f001 ff74 	bl	800ac9c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	23b6      	movs	r3, #182	@ 0xb6
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	2100      	movs	r1, #0
 8008dbc:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	23ae      	movs	r3, #174	@ 0xae
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	58d3      	ldr	r3, [r2, r3]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d011      	beq.n	8008dee <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	23af      	movs	r3, #175	@ 0xaf
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	58d3      	ldr	r3, [r2, r3]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	23ae      	movs	r3, #174	@ 0xae
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	58d3      	ldr	r3, [r2, r3]
 8008dde:	0018      	movs	r0, r3
 8008de0:	f002 f8b2 	bl	800af48 <USBD_static_free>
    pdev->pClassData = NULL;
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	23ae      	movs	r3, #174	@ 0xae
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	2100      	movs	r1, #0
 8008dec:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	0018      	movs	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b002      	add	sp, #8
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	23ae      	movs	r3, #174	@ 0xae
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	58d3      	ldr	r3, [r2, r3]
 8008e0a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008e0c:	231e      	movs	r3, #30
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	2200      	movs	r2, #0
 8008e12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008e18:	230e      	movs	r3, #14
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008e20:	2317      	movs	r3, #23
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2200      	movs	r2, #0
 8008e26:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	2360      	movs	r3, #96	@ 0x60
 8008e30:	4013      	ands	r3, r2
 8008e32:	d044      	beq.n	8008ebe <USBD_CUSTOM_HID_Setup+0xc6>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d000      	beq.n	8008e3a <USBD_CUSTOM_HID_Setup+0x42>
 8008e38:	e0d8      	b.n	8008fec <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b0b      	cmp	r3, #11
 8008e40:	d831      	bhi.n	8008ea6 <USBD_CUSTOM_HID_Setup+0xae>
 8008e42:	009a      	lsls	r2, r3, #2
 8008e44:	4b72      	ldr	r3, [pc, #456]	@ (8009010 <USBD_CUSTOM_HID_Setup+0x218>)
 8008e46:	18d3      	adds	r3, r2, r3
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	001a      	movs	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8008e58:	e030      	b.n	8008ebc <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3340      	adds	r3, #64	@ 0x40
 8008e5e:	0019      	movs	r1, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	0018      	movs	r0, r3
 8008e66:	f001 fb24 	bl	800a4b2 <USBD_CtlSendData>
          break;
 8008e6a:	e027      	b.n	8008ebc <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	885b      	ldrh	r3, [r3, #2]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	001a      	movs	r2, r3
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8008e7c:	e01e      	b.n	8008ebc <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3344      	adds	r3, #68	@ 0x44
 8008e82:	0019      	movs	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f001 fb12 	bl	800a4b2 <USBD_CtlSendData>
          break;
 8008e8e:	e015      	b.n	8008ebc <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2201      	movs	r2, #1
 8008e94:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008e96:	6939      	ldr	r1, [r7, #16]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88da      	ldrh	r2, [r3, #6]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f001 fb3a 	bl	800a518 <USBD_CtlPrepareRx>
          break;
 8008ea4:	e00a      	b.n	8008ebc <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0011      	movs	r1, r2
 8008eac:	0018      	movs	r0, r3
 8008eae:	f001 fa82 	bl	800a3b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008eb2:	2317      	movs	r3, #23
 8008eb4:	18fb      	adds	r3, r7, r3
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	701a      	strb	r2, [r3, #0]
          break;
 8008eba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008ebc:	e0a1      	b.n	8009002 <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d100      	bne.n	8008ec8 <USBD_CUSTOM_HID_Setup+0xd0>
 8008ec6:	e06d      	b.n	8008fa4 <USBD_CUSTOM_HID_Setup+0x1ac>
 8008ec8:	dd00      	ble.n	8008ecc <USBD_CUSTOM_HID_Setup+0xd4>
 8008eca:	e083      	b.n	8008fd4 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008ecc:	2b0a      	cmp	r3, #10
 8008ece:	d04f      	beq.n	8008f70 <USBD_CUSTOM_HID_Setup+0x178>
 8008ed0:	dd00      	ble.n	8008ed4 <USBD_CUSTOM_HID_Setup+0xdc>
 8008ed2:	e07f      	b.n	8008fd4 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <USBD_CUSTOM_HID_Setup+0xe6>
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d019      	beq.n	8008f10 <USBD_CUSTOM_HID_Setup+0x118>
 8008edc:	e07a      	b.n	8008fd4 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	23a7      	movs	r3, #167	@ 0xa7
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	5cd3      	ldrb	r3, [r2, r3]
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d107      	bne.n	8008efa <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008eea:	230e      	movs	r3, #14
 8008eec:	18f9      	adds	r1, r7, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f001 fadd 	bl	800a4b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef8:	e077      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	0011      	movs	r1, r2
 8008f00:	0018      	movs	r0, r3
 8008f02:	f001 fa58 	bl	800a3b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f06:	2317      	movs	r3, #23
 8008f08:	18fb      	adds	r3, r7, r3
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	701a      	strb	r2, [r3, #0]
          break;
 8008f0e:	e06c      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	885b      	ldrh	r3, [r3, #2]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b22      	cmp	r3, #34	@ 0x22
 8008f1a:	d10f      	bne.n	8008f3c <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	221e      	movs	r2, #30
 8008f22:	18ba      	adds	r2, r7, r2
 8008f24:	b299      	uxth	r1, r3
 8008f26:	29be      	cmp	r1, #190	@ 0xbe
 8008f28:	d900      	bls.n	8008f2c <USBD_CUSTOM_HID_Setup+0x134>
 8008f2a:	23be      	movs	r3, #190	@ 0xbe
 8008f2c:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	23af      	movs	r3, #175	@ 0xaf
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	58d3      	ldr	r3, [r2, r3]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	e010      	b.n	8008f5e <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b21      	cmp	r3, #33	@ 0x21
 8008f46:	d10a      	bne.n	8008f5e <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008f48:	4b32      	ldr	r3, [pc, #200]	@ (8009014 <USBD_CUSTOM_HID_Setup+0x21c>)
 8008f4a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	88db      	ldrh	r3, [r3, #6]
 8008f50:	221e      	movs	r2, #30
 8008f52:	18ba      	adds	r2, r7, r2
 8008f54:	b299      	uxth	r1, r3
 8008f56:	2909      	cmp	r1, #9
 8008f58:	d900      	bls.n	8008f5c <USBD_CUSTOM_HID_Setup+0x164>
 8008f5a:	2309      	movs	r3, #9
 8008f5c:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008f5e:	231e      	movs	r3, #30
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	69b9      	ldr	r1, [r7, #24]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f001 faa2 	bl	800a4b2 <USBD_CtlSendData>
          break;
 8008f6e:	e03c      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	23a7      	movs	r3, #167	@ 0xa7
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	5cd3      	ldrb	r3, [r2, r3]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d108      	bne.n	8008f8e <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3348      	adds	r3, #72	@ 0x48
 8008f80:	0019      	movs	r1, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	0018      	movs	r0, r3
 8008f88:	f001 fa93 	bl	800a4b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f8c:	e02d      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	0011      	movs	r1, r2
 8008f94:	0018      	movs	r0, r3
 8008f96:	f001 fa0e 	bl	800a3b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f9a:	2317      	movs	r3, #23
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	701a      	strb	r2, [r3, #0]
          break;
 8008fa2:	e022      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	23a7      	movs	r3, #167	@ 0xa7
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	5cd3      	ldrb	r3, [r2, r3]
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d106      	bne.n	8008fbe <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	885b      	ldrh	r3, [r3, #2]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	001a      	movs	r2, r3
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fbc:	e015      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	0011      	movs	r1, r2
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f001 f9f6 	bl	800a3b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fca:	2317      	movs	r3, #23
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	2202      	movs	r2, #2
 8008fd0:	701a      	strb	r2, [r3, #0]
          break;
 8008fd2:	e00a      	b.n	8008fea <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	0011      	movs	r1, r2
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f001 f9eb 	bl	800a3b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fe0:	2317      	movs	r3, #23
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	701a      	strb	r2, [r3, #0]
          break;
 8008fe8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008fea:	e00a      	b.n	8009002 <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	0011      	movs	r1, r2
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f001 f9df 	bl	800a3b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ff8:	2317      	movs	r3, #23
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	701a      	strb	r2, [r3, #0]
      break;
 8009000:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8009002:	2317      	movs	r3, #23
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	b008      	add	sp, #32
 800900e:	bd80      	pop	{r7, pc}
 8009010:	0800b160 	.word	0x0800b160
 8009014:	20000464 	.word	0x20000464

08009018 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	1dbb      	adds	r3, r7, #6
 8009024:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	23ae      	movs	r3, #174	@ 0xae
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	58d3      	ldr	r3, [r2, r3]
 800902e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	23a7      	movs	r3, #167	@ 0xa7
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	5cd3      	ldrb	r3, [r2, r3]
 8009038:	2b03      	cmp	r3, #3
 800903a:	d112      	bne.n	8009062 <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2250      	movs	r2, #80	@ 0x50
 8009040:	5c9b      	ldrb	r3, [r3, r2]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2250      	movs	r2, #80	@ 0x50
 800904a:	2101      	movs	r1, #1
 800904c:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800904e:	1dbb      	adds	r3, r7, #6
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	2181      	movs	r1, #129	@ 0x81
 8009058:	f001 fefc 	bl	800ae54 <USBD_LL_Transmit>
 800905c:	e001      	b.n	8009062 <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b006      	add	sp, #24
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2229      	movs	r2, #41	@ 0x29
 8009078:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800907a:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b002      	add	sp, #8
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200003e0 	.word	0x200003e0

08009088 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2229      	movs	r2, #41	@ 0x29
 8009094:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8009096:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	b002      	add	sp, #8
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000040c 	.word	0x2000040c

080090a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2229      	movs	r2, #41	@ 0x29
 80090b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80090b2:	4b02      	ldr	r3, [pc, #8]	@ (80090bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b002      	add	sp, #8
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000438 	.word	0x20000438

080090c0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	000a      	movs	r2, r1
 80090ca:	1cfb      	adds	r3, r7, #3
 80090cc:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	23ae      	movs	r3, #174	@ 0xae
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	58d3      	ldr	r3, [r2, r3]
 80090d6:	2250      	movs	r2, #80	@ 0x50
 80090d8:	2100      	movs	r1, #0
 80090da:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	0018      	movs	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	b002      	add	sp, #8
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	000a      	movs	r2, r1
 80090f0:	1cfb      	adds	r3, r7, #3
 80090f2:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	23ae      	movs	r3, #174	@ 0xae
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	58d3      	ldr	r3, [r2, r3]
 80090fc:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	23af      	movs	r3, #175	@ 0xaf
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	58d3      	ldr	r3, [r2, r3]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	7810      	ldrb	r0, [r2, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	7852      	ldrb	r2, [r2, #1]
 8009110:	0011      	movs	r1, r2
 8009112:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	2340      	movs	r3, #64	@ 0x40
 800911a:	2101      	movs	r1, #1
 800911c:	f001 fed1 	bl	800aec2 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	0018      	movs	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	b004      	add	sp, #16
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	23ae      	movs	r3, #174	@ 0xae
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	58d3      	ldr	r3, [r2, r3]
 800913a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10d      	bne.n	8009160 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	23af      	movs	r3, #175	@ 0xaf
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	58d3      	ldr	r3, [r2, r3]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	7810      	ldrb	r0, [r2, #0]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	7852      	ldrb	r2, [r2, #1]
 8009156:	0011      	movs	r1, r2
 8009158:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	0018      	movs	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	220a      	movs	r2, #10
 8009178:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800917a:	4b02      	ldr	r3, [pc, #8]	@ (8009184 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 800917c:	0018      	movs	r0, r3
 800917e:	46bd      	mov	sp, r7
 8009180:	b002      	add	sp, #8
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000470 	.word	0x20000470

08009188 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009192:	200f      	movs	r0, #15
 8009194:	183b      	adds	r3, r7, r0
 8009196:	2202      	movs	r2, #2
 8009198:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d007      	beq.n	80091b0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	23af      	movs	r3, #175	@ 0xaf
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80091aa:	183b      	adds	r3, r7, r0
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80091b0:	230f      	movs	r3, #15
 80091b2:	18fb      	adds	r3, r7, r3
 80091b4:	781b      	ldrb	r3, [r3, #0]
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b004      	add	sp, #16
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	1dfb      	adds	r3, r7, #7
 80091ca:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091d2:	2302      	movs	r3, #2
 80091d4:	e020      	b.n	8009218 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	23ad      	movs	r3, #173	@ 0xad
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	58d3      	ldr	r3, [r2, r3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	23ad      	movs	r3, #173	@ 0xad
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	2100      	movs	r1, #0
 80091ea:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	23ac      	movs	r3, #172	@ 0xac
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	23a7      	movs	r3, #167	@ 0xa7
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	2101      	movs	r1, #1
 8009204:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	1dfa      	adds	r2, r7, #7
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	0018      	movs	r0, r3
 8009212:	f001 fc8f 	bl	800ab34 <USBD_LL_Init>

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b004      	add	sp, #16
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800922a:	200f      	movs	r0, #15
 800922c:	183b      	adds	r3, r7, r0
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	23ad      	movs	r3, #173	@ 0xad
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009242:	183b      	adds	r3, r7, r0
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	e003      	b.n	8009252 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800924a:	230f      	movs	r3, #15
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	2202      	movs	r2, #2
 8009250:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009252:	230f      	movs	r3, #15
 8009254:	18fb      	adds	r3, r7, r3
 8009256:	781b      	ldrb	r3, [r3, #0]
}
 8009258:	0018      	movs	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	b004      	add	sp, #16
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	0018      	movs	r0, r3
 800926c:	f001 fcba 	bl	800abe4 <USBD_LL_Start>

  return USBD_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	0018      	movs	r0, r3
 8009274:	46bd      	mov	sp, r7
 8009276:	b002      	add	sp, #8
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	0018      	movs	r0, r3
 8009286:	46bd      	mov	sp, r7
 8009288:	b002      	add	sp, #8
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800928c:	b590      	push	{r4, r7, lr}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	000a      	movs	r2, r1
 8009296:	1cfb      	adds	r3, r7, #3
 8009298:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800929a:	240f      	movs	r4, #15
 800929c:	193b      	adds	r3, r7, r4
 800929e:	2202      	movs	r2, #2
 80092a0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	23ad      	movs	r3, #173	@ 0xad
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	58d3      	ldr	r3, [r2, r3]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	23ad      	movs	r3, #173	@ 0xad
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	58d3      	ldr	r3, [r2, r3]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	1cfa      	adds	r2, r7, #3
 80092ba:	7811      	ldrb	r1, [r2, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	0010      	movs	r0, r2
 80092c0:	4798      	blx	r3
 80092c2:	1e03      	subs	r3, r0, #0
 80092c4:	d102      	bne.n	80092cc <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80092c6:	193b      	adds	r3, r7, r4
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80092cc:	230f      	movs	r3, #15
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	781b      	ldrb	r3, [r3, #0]
}
 80092d2:	0018      	movs	r0, r3
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b005      	add	sp, #20
 80092d8:	bd90      	pop	{r4, r7, pc}

080092da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	000a      	movs	r2, r1
 80092e4:	1cfb      	adds	r3, r7, #3
 80092e6:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	23ad      	movs	r3, #173	@ 0xad
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	58d3      	ldr	r3, [r2, r3]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	1cfa      	adds	r2, r7, #3
 80092f4:	7811      	ldrb	r1, [r2, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	0010      	movs	r0, r2
 80092fa:	4798      	blx	r3

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	0018      	movs	r0, r3
 8009300:	46bd      	mov	sp, r7
 8009302:	b002      	add	sp, #8
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	22aa      	movs	r2, #170	@ 0xaa
 8009316:	0092      	lsls	r2, r2, #2
 8009318:	4694      	mov	ip, r2
 800931a:	4463      	add	r3, ip
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	0011      	movs	r1, r2
 8009320:	0018      	movs	r0, r3
 8009322:	f001 f810 	bl	800a346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	23a5      	movs	r3, #165	@ 0xa5
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	2101      	movs	r1, #1
 800932e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a23      	ldr	r2, [pc, #140]	@ (80093c0 <USBD_LL_SetupStage+0xb8>)
 8009334:	5a9b      	ldrh	r3, [r3, r2]
 8009336:	0019      	movs	r1, r3
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	23a6      	movs	r3, #166	@ 0xa6
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	23aa      	movs	r3, #170	@ 0xaa
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	5cd3      	ldrb	r3, [r2, r3]
 8009348:	001a      	movs	r2, r3
 800934a:	231f      	movs	r3, #31
 800934c:	4013      	ands	r3, r2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d019      	beq.n	8009386 <USBD_LL_SetupStage+0x7e>
 8009352:	d822      	bhi.n	800939a <USBD_LL_SetupStage+0x92>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <USBD_LL_SetupStage+0x56>
 8009358:	2b01      	cmp	r3, #1
 800935a:	d00a      	beq.n	8009372 <USBD_LL_SetupStage+0x6a>
 800935c:	e01d      	b.n	800939a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	22aa      	movs	r2, #170	@ 0xaa
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	189a      	adds	r2, r3, r2
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	0011      	movs	r1, r2
 800936a:	0018      	movs	r0, r3
 800936c:	f000 fa10 	bl	8009790 <USBD_StdDevReq>
      break;
 8009370:	e020      	b.n	80093b4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	22aa      	movs	r2, #170	@ 0xaa
 8009376:	0092      	lsls	r2, r2, #2
 8009378:	189a      	adds	r2, r3, r2
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	0011      	movs	r1, r2
 800937e:	0018      	movs	r0, r3
 8009380:	f000 fa78 	bl	8009874 <USBD_StdItfReq>
      break;
 8009384:	e016      	b.n	80093b4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	22aa      	movs	r2, #170	@ 0xaa
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	189a      	adds	r2, r3, r2
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	0011      	movs	r1, r2
 8009392:	0018      	movs	r0, r3
 8009394:	f000 fac5 	bl	8009922 <USBD_StdEPReq>
      break;
 8009398:	e00c      	b.n	80093b4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	23aa      	movs	r3, #170	@ 0xaa
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	5cd3      	ldrb	r3, [r2, r3]
 80093a2:	227f      	movs	r2, #127	@ 0x7f
 80093a4:	4393      	bics	r3, r2
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	0011      	movs	r1, r2
 80093ac:	0018      	movs	r0, r3
 80093ae:	f001 fca0 	bl	800acf2 <USBD_LL_StallEP>
      break;
 80093b2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	0018      	movs	r0, r3
 80093b8:	46bd      	mov	sp, r7
 80093ba:	b002      	add	sp, #8
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	46c0      	nop			@ (mov r8, r8)
 80093c0:	000002ae 	.word	0x000002ae

080093c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	200b      	movs	r0, #11
 80093d0:	183b      	adds	r3, r7, r0
 80093d2:	1c0a      	adds	r2, r1, #0
 80093d4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093d6:	183b      	adds	r3, r7, r0
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d154      	bne.n	8009488 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3355      	adds	r3, #85	@ 0x55
 80093e2:	33ff      	adds	r3, #255	@ 0xff
 80093e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	23a5      	movs	r3, #165	@ 0xa5
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	58d3      	ldr	r3, [r2, r3]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d139      	bne.n	8009466 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d919      	bls.n	8009432 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009414:	429a      	cmp	r2, r3
 8009416:	d203      	bcs.n	8009420 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800941c:	b29b      	uxth	r3, r3
 800941e:	e002      	b.n	8009426 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009424:	b29b      	uxth	r3, r3
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	001a      	movs	r2, r3
 800942c:	f001 f898 	bl	800a560 <USBD_CtlContinueRx>
 8009430:	e045      	b.n	80094be <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	23ad      	movs	r3, #173	@ 0xad
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	58d3      	ldr	r3, [r2, r3]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00d      	beq.n	800945c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	23a7      	movs	r3, #167	@ 0xa7
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009448:	2b03      	cmp	r3, #3
 800944a:	d107      	bne.n	800945c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	23ad      	movs	r3, #173	@ 0xad
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	58d3      	ldr	r3, [r2, r3]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	0010      	movs	r0, r2
 800945a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0018      	movs	r0, r3
 8009460:	f001 f891 	bl	800a586 <USBD_CtlSendStatus>
 8009464:	e02b      	b.n	80094be <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	23a5      	movs	r3, #165	@ 0xa5
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	58d3      	ldr	r3, [r2, r3]
 800946e:	2b05      	cmp	r3, #5
 8009470:	d125      	bne.n	80094be <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	23a5      	movs	r3, #165	@ 0xa5
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	2100      	movs	r1, #0
 800947a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2100      	movs	r1, #0
 8009480:	0018      	movs	r0, r3
 8009482:	f001 fc36 	bl	800acf2 <USBD_LL_StallEP>
 8009486:	e01a      	b.n	80094be <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	23ad      	movs	r3, #173	@ 0xad
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	58d3      	ldr	r3, [r2, r3]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d011      	beq.n	80094ba <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	23a7      	movs	r3, #167	@ 0xa7
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d10b      	bne.n	80094ba <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	23ad      	movs	r3, #173	@ 0xad
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	58d3      	ldr	r3, [r2, r3]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	220b      	movs	r2, #11
 80094ae:	18ba      	adds	r2, r7, r2
 80094b0:	7811      	ldrb	r1, [r2, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	0010      	movs	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	e001      	b.n	80094be <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	e000      	b.n	80094c0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b006      	add	sp, #24
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	607a      	str	r2, [r7, #4]
 80094d2:	200b      	movs	r0, #11
 80094d4:	183b      	adds	r3, r7, r0
 80094d6:	1c0a      	adds	r2, r1, #0
 80094d8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094da:	183b      	adds	r3, r7, r0
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d000      	beq.n	80094e4 <USBD_LL_DataInStage+0x1c>
 80094e2:	e08e      	b.n	8009602 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3314      	adds	r3, #20
 80094e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	23a5      	movs	r3, #165	@ 0xa5
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	58d3      	ldr	r3, [r2, r3]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d164      	bne.n	80095c0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d915      	bls.n	800952e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	b29a      	uxth	r2, r3
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	0018      	movs	r0, r3
 800951c:	f000 ffe9 	bl	800a4f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	2300      	movs	r3, #0
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	f001 fccb 	bl	800aec2 <USBD_LL_PrepareReceive>
 800952c:	e059      	b.n	80095e2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	0019      	movs	r1, r3
 8009538:	0010      	movs	r0, r2
 800953a:	f7f6 fe6b 	bl	8000214 <__aeabi_uidivmod>
 800953e:	1e0b      	subs	r3, r1, #0
 8009540:	d11f      	bne.n	8009582 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800954a:	429a      	cmp	r2, r3
 800954c:	d319      	bcc.n	8009582 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	68f9      	ldr	r1, [r7, #12]
 8009554:	23a6      	movs	r3, #166	@ 0xa6
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800955a:	429a      	cmp	r2, r3
 800955c:	d211      	bcs.n	8009582 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	0018      	movs	r0, r3
 8009566:	f000 ffc4 	bl	800a4f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	23a6      	movs	r3, #166	@ 0xa6
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	2100      	movs	r1, #0
 8009572:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	2300      	movs	r3, #0
 8009578:	2200      	movs	r2, #0
 800957a:	2100      	movs	r1, #0
 800957c:	f001 fca1 	bl	800aec2 <USBD_LL_PrepareReceive>
 8009580:	e02f      	b.n	80095e2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	23ad      	movs	r3, #173	@ 0xad
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	58d3      	ldr	r3, [r2, r3]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00d      	beq.n	80095ac <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	23a7      	movs	r3, #167	@ 0xa7
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009598:	2b03      	cmp	r3, #3
 800959a:	d107      	bne.n	80095ac <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	23ad      	movs	r3, #173	@ 0xad
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	58d3      	ldr	r3, [r2, r3]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	0010      	movs	r0, r2
 80095aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2180      	movs	r1, #128	@ 0x80
 80095b0:	0018      	movs	r0, r3
 80095b2:	f001 fb9e 	bl	800acf2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	0018      	movs	r0, r3
 80095ba:	f000 fff8 	bl	800a5ae <USBD_CtlReceiveStatus>
 80095be:	e010      	b.n	80095e2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	23a5      	movs	r3, #165	@ 0xa5
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	58d3      	ldr	r3, [r2, r3]
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d005      	beq.n	80095d8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	23a5      	movs	r3, #165	@ 0xa5
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d104      	bne.n	80095e2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2180      	movs	r1, #128	@ 0x80
 80095dc:	0018      	movs	r0, r3
 80095de:	f001 fb88 	bl	800acf2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	23a8      	movs	r3, #168	@ 0xa8
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	5cd3      	ldrb	r3, [r2, r3]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d124      	bne.n	8009638 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	0018      	movs	r0, r3
 80095f2:	f7ff fe42 	bl	800927a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	23a8      	movs	r3, #168	@ 0xa8
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	2100      	movs	r1, #0
 80095fe:	54d1      	strb	r1, [r2, r3]
 8009600:	e01a      	b.n	8009638 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	23ad      	movs	r3, #173	@ 0xad
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	58d3      	ldr	r3, [r2, r3]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d011      	beq.n	8009634 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	23a7      	movs	r3, #167	@ 0xa7
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009618:	2b03      	cmp	r3, #3
 800961a:	d10b      	bne.n	8009634 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	23ad      	movs	r3, #173	@ 0xad
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	58d3      	ldr	r3, [r2, r3]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	220b      	movs	r2, #11
 8009628:	18ba      	adds	r2, r7, r2
 800962a:	7811      	ldrb	r1, [r2, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	0010      	movs	r0, r2
 8009630:	4798      	blx	r3
 8009632:	e001      	b.n	8009638 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009634:	2302      	movs	r3, #2
 8009636:	e000      	b.n	800963a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	0018      	movs	r0, r3
 800963c:	46bd      	mov	sp, r7
 800963e:	b006      	add	sp, #24
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	2340      	movs	r3, #64	@ 0x40
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	f001 faec 	bl	800ac2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	23ac      	movs	r3, #172	@ 0xac
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	2101      	movs	r1, #1
 800965e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	23b2      	movs	r3, #178	@ 0xb2
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	2140      	movs	r1, #64	@ 0x40
 8009668:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	2200      	movs	r2, #0
 8009670:	2180      	movs	r1, #128	@ 0x80
 8009672:	f001 fadc 	bl	800ac2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2240      	movs	r2, #64	@ 0x40
 8009680:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	23a7      	movs	r3, #167	@ 0xa7
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	2101      	movs	r1, #1
 800968a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	23a5      	movs	r3, #165	@ 0xa5
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	2100      	movs	r1, #0
 8009694:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	23a9      	movs	r3, #169	@ 0xa9
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	2100      	movs	r1, #0
 80096a4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	23ae      	movs	r3, #174	@ 0xae
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	58d3      	ldr	r3, [r2, r3]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	23ad      	movs	r3, #173	@ 0xad
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	58d3      	ldr	r3, [r2, r3]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	b2d9      	uxtb	r1, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	0018      	movs	r0, r3
 80096c6:	4790      	blx	r2
  }

  return USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	0018      	movs	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b002      	add	sp, #8
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	000a      	movs	r2, r1
 80096dc:	1cfb      	adds	r3, r7, #3
 80096de:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	1cfa      	adds	r2, r7, #3
 80096e4:	7812      	ldrb	r2, [r2, #0]
 80096e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b002      	add	sp, #8
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	23a7      	movs	r3, #167	@ 0xa7
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	5cd1      	ldrb	r1, [r2, r3]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a06      	ldr	r2, [pc, #24]	@ (8009720 <USBD_LL_Suspend+0x2c>)
 8009708:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	23a7      	movs	r3, #167	@ 0xa7
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	2104      	movs	r1, #4
 8009712:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	0018      	movs	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	b002      	add	sp, #8
 800971c:	bd80      	pop	{r7, pc}
 800971e:	46c0      	nop			@ (mov r8, r8)
 8009720:	0000029d 	.word	0x0000029d

08009724 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	23a7      	movs	r3, #167	@ 0xa7
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	5cd3      	ldrb	r3, [r2, r3]
 8009734:	2b04      	cmp	r3, #4
 8009736:	d106      	bne.n	8009746 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a05      	ldr	r2, [pc, #20]	@ (8009750 <USBD_LL_Resume+0x2c>)
 800973c:	5c99      	ldrb	r1, [r3, r2]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	23a7      	movs	r3, #167	@ 0xa7
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	b002      	add	sp, #8
 800974e:	bd80      	pop	{r7, pc}
 8009750:	0000029d 	.word	0x0000029d

08009754 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	23a7      	movs	r3, #167	@ 0xa7
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	5cd3      	ldrb	r3, [r2, r3]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d10e      	bne.n	8009786 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	23ad      	movs	r3, #173	@ 0xad
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	58d3      	ldr	r3, [r2, r3]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d007      	beq.n	8009786 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	23ad      	movs	r3, #173	@ 0xad
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	58d3      	ldr	r3, [r2, r3]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	0010      	movs	r0, r2
 8009784:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	0018      	movs	r0, r3
 800978a:	46bd      	mov	sp, r7
 800978c:	b002      	add	sp, #8
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979a:	230f      	movs	r3, #15
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	001a      	movs	r2, r3
 80097a8:	2360      	movs	r3, #96	@ 0x60
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b40      	cmp	r3, #64	@ 0x40
 80097ae:	d004      	beq.n	80097ba <USBD_StdDevReq+0x2a>
 80097b0:	d84f      	bhi.n	8009852 <USBD_StdDevReq+0xc2>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00b      	beq.n	80097ce <USBD_StdDevReq+0x3e>
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	d14b      	bne.n	8009852 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	23ad      	movs	r3, #173	@ 0xad
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	58d3      	ldr	r3, [r2, r3]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	0010      	movs	r0, r2
 80097ca:	4798      	blx	r3
      break;
 80097cc:	e048      	b.n	8009860 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	785b      	ldrb	r3, [r3, #1]
 80097d2:	2b09      	cmp	r3, #9
 80097d4:	d835      	bhi.n	8009842 <USBD_StdDevReq+0xb2>
 80097d6:	009a      	lsls	r2, r3, #2
 80097d8:	4b25      	ldr	r3, [pc, #148]	@ (8009870 <USBD_StdDevReq+0xe0>)
 80097da:	18d3      	adds	r3, r2, r3
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	0011      	movs	r1, r2
 80097e6:	0018      	movs	r0, r3
 80097e8:	f000 fa52 	bl	8009c90 <USBD_GetDescriptor>
          break;
 80097ec:	e030      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	0011      	movs	r1, r2
 80097f4:	0018      	movs	r0, r3
 80097f6:	f000 fbfd 	bl	8009ff4 <USBD_SetAddress>
          break;
 80097fa:	e029      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	0011      	movs	r1, r2
 8009802:	0018      	movs	r0, r3
 8009804:	f000 fc4a 	bl	800a09c <USBD_SetConfig>
          break;
 8009808:	e022      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	0011      	movs	r1, r2
 8009810:	0018      	movs	r0, r3
 8009812:	f000 fce7 	bl	800a1e4 <USBD_GetConfig>
          break;
 8009816:	e01b      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0011      	movs	r1, r2
 800981e:	0018      	movs	r0, r3
 8009820:	f000 fd1b 	bl	800a25a <USBD_GetStatus>
          break;
 8009824:	e014      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	0011      	movs	r1, r2
 800982c:	0018      	movs	r0, r3
 800982e:	f000 fd4e 	bl	800a2ce <USBD_SetFeature>
          break;
 8009832:	e00d      	b.n	8009850 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f000 fd5d 	bl	800a2fa <USBD_ClrFeature>
          break;
 8009840:	e006      	b.n	8009850 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	0011      	movs	r1, r2
 8009848:	0018      	movs	r0, r3
 800984a:	f000 fdb4 	bl	800a3b6 <USBD_CtlError>
          break;
 800984e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009850:	e006      	b.n	8009860 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	0011      	movs	r1, r2
 8009858:	0018      	movs	r0, r3
 800985a:	f000 fdac 	bl	800a3b6 <USBD_CtlError>
      break;
 800985e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009860:	230f      	movs	r3, #15
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	781b      	ldrb	r3, [r3, #0]
}
 8009866:	0018      	movs	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	b004      	add	sp, #16
 800986c:	bd80      	pop	{r7, pc}
 800986e:	46c0      	nop			@ (mov r8, r8)
 8009870:	0800b190 	.word	0x0800b190

08009874 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009874:	b5b0      	push	{r4, r5, r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800987e:	230f      	movs	r3, #15
 8009880:	18fb      	adds	r3, r7, r3
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	001a      	movs	r2, r3
 800988c:	2360      	movs	r3, #96	@ 0x60
 800988e:	4013      	ands	r3, r2
 8009890:	2b40      	cmp	r3, #64	@ 0x40
 8009892:	d004      	beq.n	800989e <USBD_StdItfReq+0x2a>
 8009894:	d839      	bhi.n	800990a <USBD_StdItfReq+0x96>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <USBD_StdItfReq+0x2a>
 800989a:	2b20      	cmp	r3, #32
 800989c:	d135      	bne.n	800990a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	23a7      	movs	r3, #167	@ 0xa7
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	5cd3      	ldrb	r3, [r2, r3]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d825      	bhi.n	80098f8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	889b      	ldrh	r3, [r3, #4]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d819      	bhi.n	80098ea <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	23ad      	movs	r3, #173	@ 0xad
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	58d3      	ldr	r3, [r2, r3]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	250f      	movs	r5, #15
 80098c2:	197c      	adds	r4, r7, r5
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	0010      	movs	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	0003      	movs	r3, r0
 80098ce:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	88db      	ldrh	r3, [r3, #6]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d116      	bne.n	8009906 <USBD_StdItfReq+0x92>
 80098d8:	197b      	adds	r3, r7, r5
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d112      	bne.n	8009906 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	0018      	movs	r0, r3
 80098e4:	f000 fe4f 	bl	800a586 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098e8:	e00d      	b.n	8009906 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	0011      	movs	r1, r2
 80098f0:	0018      	movs	r0, r3
 80098f2:	f000 fd60 	bl	800a3b6 <USBD_CtlError>
          break;
 80098f6:	e006      	b.n	8009906 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	0011      	movs	r1, r2
 80098fe:	0018      	movs	r0, r3
 8009900:	f000 fd59 	bl	800a3b6 <USBD_CtlError>
          break;
 8009904:	e000      	b.n	8009908 <USBD_StdItfReq+0x94>
          break;
 8009906:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009908:	e006      	b.n	8009918 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	0011      	movs	r1, r2
 8009910:	0018      	movs	r0, r3
 8009912:	f000 fd50 	bl	800a3b6 <USBD_CtlError>
      break;
 8009916:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	0018      	movs	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	b004      	add	sp, #16
 8009920:	bdb0      	pop	{r4, r5, r7, pc}

08009922 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009922:	b5b0      	push	{r4, r5, r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800992c:	230f      	movs	r3, #15
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	889a      	ldrh	r2, [r3, #4]
 8009938:	230e      	movs	r3, #14
 800993a:	18fb      	adds	r3, r7, r3
 800993c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	001a      	movs	r2, r3
 8009944:	2360      	movs	r3, #96	@ 0x60
 8009946:	4013      	ands	r3, r2
 8009948:	2b40      	cmp	r3, #64	@ 0x40
 800994a:	d006      	beq.n	800995a <USBD_StdEPReq+0x38>
 800994c:	d900      	bls.n	8009950 <USBD_StdEPReq+0x2e>
 800994e:	e190      	b.n	8009c72 <USBD_StdEPReq+0x350>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00c      	beq.n	800996e <USBD_StdEPReq+0x4c>
 8009954:	2b20      	cmp	r3, #32
 8009956:	d000      	beq.n	800995a <USBD_StdEPReq+0x38>
 8009958:	e18b      	b.n	8009c72 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	23ad      	movs	r3, #173	@ 0xad
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	58d3      	ldr	r3, [r2, r3]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	0010      	movs	r0, r2
 800996a:	4798      	blx	r3
      break;
 800996c:	e188      	b.n	8009c80 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	001a      	movs	r2, r3
 8009974:	2360      	movs	r3, #96	@ 0x60
 8009976:	4013      	ands	r3, r2
 8009978:	2b20      	cmp	r3, #32
 800997a:	d10f      	bne.n	800999c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	23ad      	movs	r3, #173	@ 0xad
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	58d3      	ldr	r3, [r2, r3]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	250f      	movs	r5, #15
 8009988:	197c      	adds	r4, r7, r5
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	0010      	movs	r0, r2
 8009990:	4798      	blx	r3
 8009992:	0003      	movs	r3, r0
 8009994:	7023      	strb	r3, [r4, #0]

        return ret;
 8009996:	197b      	adds	r3, r7, r5
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	e174      	b.n	8009c86 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d007      	beq.n	80099b4 <USBD_StdEPReq+0x92>
 80099a4:	dd00      	ble.n	80099a8 <USBD_StdEPReq+0x86>
 80099a6:	e15c      	b.n	8009c62 <USBD_StdEPReq+0x340>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d100      	bne.n	80099ae <USBD_StdEPReq+0x8c>
 80099ac:	e092      	b.n	8009ad4 <USBD_StdEPReq+0x1b2>
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d04b      	beq.n	8009a4a <USBD_StdEPReq+0x128>
 80099b2:	e156      	b.n	8009c62 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	23a7      	movs	r3, #167	@ 0xa7
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	5cd3      	ldrb	r3, [r2, r3]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d002      	beq.n	80099c6 <USBD_StdEPReq+0xa4>
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d01d      	beq.n	8009a00 <USBD_StdEPReq+0xde>
 80099c4:	e039      	b.n	8009a3a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099c6:	220e      	movs	r2, #14
 80099c8:	18bb      	adds	r3, r7, r2
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <USBD_StdEPReq+0xd0>
 80099d0:	18bb      	adds	r3, r7, r2
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b80      	cmp	r3, #128	@ 0x80
 80099d6:	d00c      	beq.n	80099f2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099d8:	18bb      	adds	r3, r7, r2
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	0011      	movs	r1, r2
 80099e0:	0018      	movs	r0, r3
 80099e2:	f001 f986 	bl	800acf2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2180      	movs	r1, #128	@ 0x80
 80099ea:	0018      	movs	r0, r3
 80099ec:	f001 f981 	bl	800acf2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099f0:	e02a      	b.n	8009a48 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	0011      	movs	r1, r2
 80099f8:	0018      	movs	r0, r3
 80099fa:	f000 fcdc 	bl	800a3b6 <USBD_CtlError>
              break;
 80099fe:	e023      	b.n	8009a48 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	885b      	ldrh	r3, [r3, #2]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d113      	bne.n	8009a30 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009a08:	220e      	movs	r2, #14
 8009a0a:	18bb      	adds	r3, r7, r2
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00e      	beq.n	8009a30 <USBD_StdEPReq+0x10e>
 8009a12:	18bb      	adds	r3, r7, r2
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b80      	cmp	r3, #128	@ 0x80
 8009a18:	d00a      	beq.n	8009a30 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	88db      	ldrh	r3, [r3, #6]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009a22:	18bb      	adds	r3, r7, r2
 8009a24:	781a      	ldrb	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	0011      	movs	r1, r2
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f001 f961 	bl	800acf2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	0018      	movs	r0, r3
 8009a34:	f000 fda7 	bl	800a586 <USBD_CtlSendStatus>

              break;
 8009a38:	e006      	b.n	8009a48 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	0011      	movs	r1, r2
 8009a40:	0018      	movs	r0, r3
 8009a42:	f000 fcb8 	bl	800a3b6 <USBD_CtlError>
              break;
 8009a46:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009a48:	e112      	b.n	8009c70 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	23a7      	movs	r3, #167	@ 0xa7
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	5cd3      	ldrb	r3, [r2, r3]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d002      	beq.n	8009a5c <USBD_StdEPReq+0x13a>
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d01d      	beq.n	8009a96 <USBD_StdEPReq+0x174>
 8009a5a:	e032      	b.n	8009ac2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5c:	220e      	movs	r2, #14
 8009a5e:	18bb      	adds	r3, r7, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d010      	beq.n	8009a88 <USBD_StdEPReq+0x166>
 8009a66:	18bb      	adds	r3, r7, r2
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b80      	cmp	r3, #128	@ 0x80
 8009a6c:	d00c      	beq.n	8009a88 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a6e:	18bb      	adds	r3, r7, r2
 8009a70:	781a      	ldrb	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	0011      	movs	r1, r2
 8009a76:	0018      	movs	r0, r3
 8009a78:	f001 f93b 	bl	800acf2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2180      	movs	r1, #128	@ 0x80
 8009a80:	0018      	movs	r0, r3
 8009a82:	f001 f936 	bl	800acf2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a86:	e024      	b.n	8009ad2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	0011      	movs	r1, r2
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f000 fc91 	bl	800a3b6 <USBD_CtlError>
              break;
 8009a94:	e01d      	b.n	8009ad2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d118      	bne.n	8009ad0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a9e:	210e      	movs	r1, #14
 8009aa0:	187b      	adds	r3, r7, r1
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	227f      	movs	r2, #127	@ 0x7f
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	d006      	beq.n	8009ab8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aaa:	187b      	adds	r3, r7, r1
 8009aac:	781a      	ldrb	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	0011      	movs	r1, r2
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	f001 f948 	bl	800ad48 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	0018      	movs	r0, r3
 8009abc:	f000 fd63 	bl	800a586 <USBD_CtlSendStatus>
              }
              break;
 8009ac0:	e006      	b.n	8009ad0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	0018      	movs	r0, r3
 8009aca:	f000 fc74 	bl	800a3b6 <USBD_CtlError>
              break;
 8009ace:	e000      	b.n	8009ad2 <USBD_StdEPReq+0x1b0>
              break;
 8009ad0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009ad2:	e0cd      	b.n	8009c70 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	23a7      	movs	r3, #167	@ 0xa7
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	5cd3      	ldrb	r3, [r2, r3]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d002      	beq.n	8009ae6 <USBD_StdEPReq+0x1c4>
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d03c      	beq.n	8009b5e <USBD_StdEPReq+0x23c>
 8009ae4:	e0b5      	b.n	8009c52 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae6:	220e      	movs	r2, #14
 8009ae8:	18bb      	adds	r3, r7, r2
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <USBD_StdEPReq+0x1e4>
 8009af0:	18bb      	adds	r3, r7, r2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b80      	cmp	r3, #128	@ 0x80
 8009af6:	d006      	beq.n	8009b06 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	0011      	movs	r1, r2
 8009afe:	0018      	movs	r0, r3
 8009b00:	f000 fc59 	bl	800a3b6 <USBD_CtlError>
                break;
 8009b04:	e0ac      	b.n	8009c60 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b06:	220e      	movs	r2, #14
 8009b08:	18bb      	adds	r3, r7, r2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b25b      	sxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da0c      	bge.n	8009b2c <USBD_StdEPReq+0x20a>
 8009b12:	18bb      	adds	r3, r7, r2
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	227f      	movs	r2, #127	@ 0x7f
 8009b18:	401a      	ands	r2, r3
 8009b1a:	0013      	movs	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	189b      	adds	r3, r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	3310      	adds	r3, #16
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	18d3      	adds	r3, r2, r3
 8009b28:	3304      	adds	r3, #4
 8009b2a:	e00d      	b.n	8009b48 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b2c:	230e      	movs	r3, #14
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	227f      	movs	r2, #127	@ 0x7f
 8009b34:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b36:	0013      	movs	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	189b      	adds	r3, r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	3351      	adds	r3, #81	@ 0x51
 8009b40:	33ff      	adds	r3, #255	@ 0xff
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	18d3      	adds	r3, r2, r3
 8009b46:	3304      	adds	r3, #4
 8009b48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2202      	movs	r2, #2
 8009b56:	0018      	movs	r0, r3
 8009b58:	f000 fcab 	bl	800a4b2 <USBD_CtlSendData>
              break;
 8009b5c:	e080      	b.n	8009c60 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b5e:	220e      	movs	r2, #14
 8009b60:	18bb      	adds	r3, r7, r2
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	b25b      	sxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	da14      	bge.n	8009b94 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b6a:	18bb      	adds	r3, r7, r2
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	220f      	movs	r2, #15
 8009b70:	401a      	ands	r2, r3
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	0013      	movs	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	18cb      	adds	r3, r1, r3
 8009b7e:	3318      	adds	r3, #24
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d11e      	bne.n	8009bc4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	0011      	movs	r1, r2
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f000 fc12 	bl	800a3b6 <USBD_CtlError>
                  break;
 8009b92:	e065      	b.n	8009c60 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b94:	230e      	movs	r3, #14
 8009b96:	18fb      	adds	r3, r7, r3
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	220f      	movs	r2, #15
 8009b9c:	401a      	ands	r2, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	23ac      	movs	r3, #172	@ 0xac
 8009ba2:	0059      	lsls	r1, r3, #1
 8009ba4:	0013      	movs	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	189b      	adds	r3, r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	18c3      	adds	r3, r0, r3
 8009bae:	185b      	adds	r3, r3, r1
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	0011      	movs	r1, r2
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f000 fbfa 	bl	800a3b6 <USBD_CtlError>
                  break;
 8009bc2:	e04d      	b.n	8009c60 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc4:	220e      	movs	r2, #14
 8009bc6:	18bb      	adds	r3, r7, r2
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b25b      	sxtb	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da0c      	bge.n	8009bea <USBD_StdEPReq+0x2c8>
 8009bd0:	18bb      	adds	r3, r7, r2
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	227f      	movs	r2, #127	@ 0x7f
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	0013      	movs	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	189b      	adds	r3, r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	3310      	adds	r3, #16
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	3304      	adds	r3, #4
 8009be8:	e00d      	b.n	8009c06 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bea:	230e      	movs	r3, #14
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	227f      	movs	r2, #127	@ 0x7f
 8009bf2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf4:	0013      	movs	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	189b      	adds	r3, r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	3351      	adds	r3, #81	@ 0x51
 8009bfe:	33ff      	adds	r3, #255	@ 0xff
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	18d3      	adds	r3, r2, r3
 8009c04:	3304      	adds	r3, #4
 8009c06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c08:	220e      	movs	r2, #14
 8009c0a:	18bb      	adds	r3, r7, r2
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <USBD_StdEPReq+0x2f8>
 8009c12:	18bb      	adds	r3, r7, r2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b80      	cmp	r3, #128	@ 0x80
 8009c18:	d103      	bne.n	8009c22 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e010      	b.n	8009c44 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009c22:	230e      	movs	r3, #14
 8009c24:	18fb      	adds	r3, r7, r3
 8009c26:	781a      	ldrb	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	0011      	movs	r1, r2
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f001 f8b6 	bl	800ad9e <USBD_LL_IsStallEP>
 8009c32:	1e03      	subs	r3, r0, #0
 8009c34:	d003      	beq.n	8009c3e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e002      	b.n	8009c44 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f000 fc31 	bl	800a4b2 <USBD_CtlSendData>
              break;
 8009c50:	e006      	b.n	8009c60 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	0011      	movs	r1, r2
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f000 fbac 	bl	800a3b6 <USBD_CtlError>
              break;
 8009c5e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009c60:	e006      	b.n	8009c70 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	0011      	movs	r1, r2
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f000 fba4 	bl	800a3b6 <USBD_CtlError>
          break;
 8009c6e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009c70:	e006      	b.n	8009c80 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	0011      	movs	r1, r2
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f000 fb9c 	bl	800a3b6 <USBD_CtlError>
      break;
 8009c7e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009c80:	230f      	movs	r3, #15
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	781b      	ldrb	r3, [r3, #0]
}
 8009c86:	0018      	movs	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b004      	add	sp, #16
 8009c8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c9a:	2308      	movs	r3, #8
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ca6:	230b      	movs	r3, #11
 8009ca8:	18fb      	adds	r3, r7, r3
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	885b      	ldrh	r3, [r3, #2]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	2b07      	cmp	r3, #7
 8009cb8:	d900      	bls.n	8009cbc <USBD_GetDescriptor+0x2c>
 8009cba:	e159      	b.n	8009f70 <USBD_GetDescriptor+0x2e0>
 8009cbc:	009a      	lsls	r2, r3, #2
 8009cbe:	4bcb      	ldr	r3, [pc, #812]	@ (8009fec <USBD_GetDescriptor+0x35c>)
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	23ac      	movs	r3, #172	@ 0xac
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	58d3      	ldr	r3, [r2, r3]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	2108      	movs	r1, #8
 8009cd6:	1879      	adds	r1, r7, r1
 8009cd8:	0010      	movs	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	0003      	movs	r3, r0
 8009cde:	60fb      	str	r3, [r7, #12]
      break;
 8009ce0:	e153      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	7c1b      	ldrb	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10f      	bne.n	8009d0a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	23ad      	movs	r3, #173	@ 0xad
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	58d3      	ldr	r3, [r2, r3]
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	18ba      	adds	r2, r7, r2
 8009cf8:	0010      	movs	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3301      	adds	r3, #1
 8009d04:	2202      	movs	r2, #2
 8009d06:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d08:	e13f      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	23ad      	movs	r3, #173	@ 0xad
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	58d3      	ldr	r3, [r2, r3]
 8009d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d14:	2208      	movs	r2, #8
 8009d16:	18ba      	adds	r2, r7, r2
 8009d18:	0010      	movs	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	0003      	movs	r3, r0
 8009d1e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	2202      	movs	r2, #2
 8009d26:	701a      	strb	r2, [r3, #0]
      break;
 8009d28:	e12f      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	885b      	ldrh	r3, [r3, #2]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d900      	bls.n	8009d36 <USBD_GetDescriptor+0xa6>
 8009d34:	e0d0      	b.n	8009ed8 <USBD_GetDescriptor+0x248>
 8009d36:	009a      	lsls	r2, r3, #2
 8009d38:	4bad      	ldr	r3, [pc, #692]	@ (8009ff0 <USBD_GetDescriptor+0x360>)
 8009d3a:	18d3      	adds	r3, r2, r3
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	23ac      	movs	r3, #172	@ 0xac
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	58d3      	ldr	r3, [r2, r3]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	23ac      	movs	r3, #172	@ 0xac
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	58d3      	ldr	r3, [r2, r3]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	7c12      	ldrb	r2, [r2, #16]
 8009d5c:	2108      	movs	r1, #8
 8009d5e:	1879      	adds	r1, r7, r1
 8009d60:	0010      	movs	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	0003      	movs	r3, r0
 8009d66:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d68:	e0c3      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	0011      	movs	r1, r2
 8009d70:	0018      	movs	r0, r3
 8009d72:	f000 fb20 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009d76:	210b      	movs	r1, #11
 8009d78:	187b      	adds	r3, r7, r1
 8009d7a:	781a      	ldrb	r2, [r3, #0]
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	3201      	adds	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
          break;
 8009d82:	e0b6      	b.n	8009ef2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	23ac      	movs	r3, #172	@ 0xac
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	58d3      	ldr	r3, [r2, r3]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00d      	beq.n	8009dae <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	23ac      	movs	r3, #172	@ 0xac
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	58d3      	ldr	r3, [r2, r3]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	7c12      	ldrb	r2, [r2, #16]
 8009da0:	2108      	movs	r1, #8
 8009da2:	1879      	adds	r1, r7, r1
 8009da4:	0010      	movs	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	0003      	movs	r3, r0
 8009daa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dac:	e0a1      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	0011      	movs	r1, r2
 8009db4:	0018      	movs	r0, r3
 8009db6:	f000 fafe 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009dba:	210b      	movs	r1, #11
 8009dbc:	187b      	adds	r3, r7, r1
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
          break;
 8009dc6:	e094      	b.n	8009ef2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	23ac      	movs	r3, #172	@ 0xac
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	58d3      	ldr	r3, [r2, r3]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	23ac      	movs	r3, #172	@ 0xac
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	58d3      	ldr	r3, [r2, r3]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	7c12      	ldrb	r2, [r2, #16]
 8009de4:	2108      	movs	r1, #8
 8009de6:	1879      	adds	r1, r7, r1
 8009de8:	0010      	movs	r0, r2
 8009dea:	4798      	blx	r3
 8009dec:	0003      	movs	r3, r0
 8009dee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009df0:	e07f      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	0011      	movs	r1, r2
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f000 fadc 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009dfe:	210b      	movs	r1, #11
 8009e00:	187b      	adds	r3, r7, r1
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	187b      	adds	r3, r7, r1
 8009e06:	3201      	adds	r2, #1
 8009e08:	701a      	strb	r2, [r3, #0]
          break;
 8009e0a:	e072      	b.n	8009ef2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	23ac      	movs	r3, #172	@ 0xac
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	58d3      	ldr	r3, [r2, r3]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00d      	beq.n	8009e36 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	23ac      	movs	r3, #172	@ 0xac
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	58d3      	ldr	r3, [r2, r3]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	2108      	movs	r1, #8
 8009e2a:	1879      	adds	r1, r7, r1
 8009e2c:	0010      	movs	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	0003      	movs	r3, r0
 8009e32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e34:	e05d      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	0011      	movs	r1, r2
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f000 faba 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009e42:	210b      	movs	r1, #11
 8009e44:	187b      	adds	r3, r7, r1
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	187b      	adds	r3, r7, r1
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	701a      	strb	r2, [r3, #0]
          break;
 8009e4e:	e050      	b.n	8009ef2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	23ac      	movs	r3, #172	@ 0xac
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	58d3      	ldr	r3, [r2, r3]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	23ac      	movs	r3, #172	@ 0xac
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	58d3      	ldr	r3, [r2, r3]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7c12      	ldrb	r2, [r2, #16]
 8009e6c:	2108      	movs	r1, #8
 8009e6e:	1879      	adds	r1, r7, r1
 8009e70:	0010      	movs	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	0003      	movs	r3, r0
 8009e76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e78:	e03b      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	0011      	movs	r1, r2
 8009e80:	0018      	movs	r0, r3
 8009e82:	f000 fa98 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009e86:	210b      	movs	r1, #11
 8009e88:	187b      	adds	r3, r7, r1
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	187b      	adds	r3, r7, r1
 8009e8e:	3201      	adds	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
          break;
 8009e92:	e02e      	b.n	8009ef2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	23ac      	movs	r3, #172	@ 0xac
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	58d3      	ldr	r3, [r2, r3]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	23ac      	movs	r3, #172	@ 0xac
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	58d3      	ldr	r3, [r2, r3]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	2108      	movs	r1, #8
 8009eb2:	1879      	adds	r1, r7, r1
 8009eb4:	0010      	movs	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	0003      	movs	r3, r0
 8009eba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ebc:	e019      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f000 fa76 	bl	800a3b6 <USBD_CtlError>
            err++;
 8009eca:	210b      	movs	r1, #11
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	3201      	adds	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
          break;
 8009ed6:	e00c      	b.n	8009ef2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	0011      	movs	r1, r2
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f000 fa69 	bl	800a3b6 <USBD_CtlError>
          err++;
 8009ee4:	210b      	movs	r1, #11
 8009ee6:	187b      	adds	r3, r7, r1
 8009ee8:	781a      	ldrb	r2, [r3, #0]
 8009eea:	187b      	adds	r3, r7, r1
 8009eec:	3201      	adds	r2, #1
 8009eee:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009ef0:	e04b      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>
 8009ef2:	e04a      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7c1b      	ldrb	r3, [r3, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10b      	bne.n	8009f14 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	23ad      	movs	r3, #173	@ 0xad
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	58d3      	ldr	r3, [r2, r3]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f06:	2208      	movs	r2, #8
 8009f08:	18ba      	adds	r2, r7, r2
 8009f0a:	0010      	movs	r0, r2
 8009f0c:	4798      	blx	r3
 8009f0e:	0003      	movs	r3, r0
 8009f10:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f12:	e03a      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0011      	movs	r1, r2
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f000 fa4b 	bl	800a3b6 <USBD_CtlError>
        err++;
 8009f20:	210b      	movs	r1, #11
 8009f22:	187b      	adds	r3, r7, r1
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	187b      	adds	r3, r7, r1
 8009f28:	3201      	adds	r2, #1
 8009f2a:	701a      	strb	r2, [r3, #0]
      break;
 8009f2c:	e02d      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7c1b      	ldrb	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10f      	bne.n	8009f56 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	23ad      	movs	r3, #173	@ 0xad
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	58d3      	ldr	r3, [r2, r3]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f40:	2208      	movs	r2, #8
 8009f42:	18ba      	adds	r2, r7, r2
 8009f44:	0010      	movs	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	0003      	movs	r3, r0
 8009f4a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	2207      	movs	r2, #7
 8009f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f54:	e019      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	0011      	movs	r1, r2
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f000 fa2a 	bl	800a3b6 <USBD_CtlError>
        err++;
 8009f62:	210b      	movs	r1, #11
 8009f64:	187b      	adds	r3, r7, r1
 8009f66:	781a      	ldrb	r2, [r3, #0]
 8009f68:	187b      	adds	r3, r7, r1
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	701a      	strb	r2, [r3, #0]
      break;
 8009f6e:	e00c      	b.n	8009f8a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fa1d 	bl	800a3b6 <USBD_CtlError>
      err++;
 8009f7c:	210b      	movs	r1, #11
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	781a      	ldrb	r2, [r3, #0]
 8009f82:	187b      	adds	r3, r7, r1
 8009f84:	3201      	adds	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
      break;
 8009f88:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8009f8a:	230b      	movs	r3, #11
 8009f8c:	18fb      	adds	r3, r7, r3
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d127      	bne.n	8009fe4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f94:	2108      	movs	r1, #8
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d019      	beq.n	8009fd2 <USBD_GetDescriptor+0x342>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	88db      	ldrh	r3, [r3, #6]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d015      	beq.n	8009fd2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	88da      	ldrh	r2, [r3, #6]
 8009faa:	187b      	adds	r3, r7, r1
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	1c18      	adds	r0, r3, #0
 8009fb0:	1c11      	adds	r1, r2, #0
 8009fb2:	b28a      	uxth	r2, r1
 8009fb4:	b283      	uxth	r3, r0
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d900      	bls.n	8009fbc <USBD_GetDescriptor+0x32c>
 8009fba:	1c01      	adds	r1, r0, #0
 8009fbc:	b28a      	uxth	r2, r1
 8009fbe:	2108      	movs	r1, #8
 8009fc0:	187b      	adds	r3, r7, r1
 8009fc2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fc4:	187b      	adds	r3, r7, r1
 8009fc6:	881a      	ldrh	r2, [r3, #0]
 8009fc8:	68f9      	ldr	r1, [r7, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f000 fa70 	bl	800a4b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88db      	ldrh	r3, [r3, #6]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d105      	bne.n	8009fe6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f000 fad2 	bl	800a586 <USBD_CtlSendStatus>
 8009fe2:	e000      	b.n	8009fe6 <USBD_GetDescriptor+0x356>
    return;
 8009fe4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b004      	add	sp, #16
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	0800b1b8 	.word	0x0800b1b8
 8009ff0:	0800b1d8 	.word	0x0800b1d8

08009ff4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ff4:	b590      	push	{r4, r7, lr}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	889b      	ldrh	r3, [r3, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d13d      	bne.n	800a082 <USBD_SetAddress+0x8e>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	88db      	ldrh	r3, [r3, #6]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d139      	bne.n	800a082 <USBD_SetAddress+0x8e>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	885b      	ldrh	r3, [r3, #2]
 800a012:	2b7f      	cmp	r3, #127	@ 0x7f
 800a014:	d835      	bhi.n	800a082 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	885b      	ldrh	r3, [r3, #2]
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	230f      	movs	r3, #15
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	217f      	movs	r1, #127	@ 0x7f
 800a022:	400a      	ands	r2, r1
 800a024:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	23a7      	movs	r3, #167	@ 0xa7
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	5cd3      	ldrb	r3, [r2, r3]
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d106      	bne.n	800a040 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	0011      	movs	r1, r2
 800a038:	0018      	movs	r0, r3
 800a03a:	f000 f9bc 	bl	800a3b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03e:	e027      	b.n	800a090 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	240f      	movs	r4, #15
 800a044:	193a      	adds	r2, r7, r4
 800a046:	4914      	ldr	r1, [pc, #80]	@ (800a098 <USBD_SetAddress+0xa4>)
 800a048:	7812      	ldrb	r2, [r2, #0]
 800a04a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a04c:	193b      	adds	r3, r7, r4
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	0011      	movs	r1, r2
 800a054:	0018      	movs	r0, r3
 800a056:	f000 fed2 	bl	800adfe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	0018      	movs	r0, r3
 800a05e:	f000 fa92 	bl	800a586 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a062:	193b      	adds	r3, r7, r4
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	23a7      	movs	r3, #167	@ 0xa7
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	2102      	movs	r1, #2
 800a072:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a074:	e00c      	b.n	800a090 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	23a7      	movs	r3, #167	@ 0xa7
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	2101      	movs	r1, #1
 800a07e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a080:	e006      	b.n	800a090 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	0011      	movs	r1, r2
 800a088:	0018      	movs	r0, r3
 800a08a:	f000 f994 	bl	800a3b6 <USBD_CtlError>
  }
}
 800a08e:	46c0      	nop			@ (mov r8, r8)
 800a090:	46c0      	nop			@ (mov r8, r8)
 800a092:	46bd      	mov	sp, r7
 800a094:	b005      	add	sp, #20
 800a096:	bd90      	pop	{r4, r7, pc}
 800a098:	0000029e 	.word	0x0000029e

0800a09c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	4b4c      	ldr	r3, [pc, #304]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a0ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0b0:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d906      	bls.n	800a0c6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	0011      	movs	r1, r2
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f000 f979 	bl	800a3b6 <USBD_CtlError>
 800a0c4:	e088      	b.n	800a1d8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	23a7      	movs	r3, #167	@ 0xa7
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	5cd3      	ldrb	r3, [r2, r3]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d002      	beq.n	800a0d8 <USBD_SetConfig+0x3c>
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d029      	beq.n	800a12a <USBD_SetConfig+0x8e>
 800a0d6:	e071      	b.n	800a1bc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0d8:	4b41      	ldr	r3, [pc, #260]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d01f      	beq.n	800a120 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a0e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	001a      	movs	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	23a7      	movs	r3, #167	@ 0xa7
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	2103      	movs	r1, #3
 800a0f2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	0011      	movs	r1, r2
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7ff f8c5 	bl	800928c <USBD_SetClassConfig>
 800a102:	0003      	movs	r3, r0
 800a104:	2b02      	cmp	r3, #2
 800a106:	d106      	bne.n	800a116 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0011      	movs	r1, r2
 800a10e:	0018      	movs	r0, r3
 800a110:	f000 f951 	bl	800a3b6 <USBD_CtlError>
            return;
 800a114:	e060      	b.n	800a1d8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	0018      	movs	r0, r3
 800a11a:	f000 fa34 	bl	800a586 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a11e:	e05b      	b.n	800a1d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	0018      	movs	r0, r3
 800a124:	f000 fa2f 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a128:	e056      	b.n	800a1d8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a12a:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d115      	bne.n	800a15e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	23a7      	movs	r3, #167	@ 0xa7
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	2102      	movs	r1, #2
 800a13a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a13c:	4b28      	ldr	r3, [pc, #160]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	001a      	movs	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a146:	4b26      	ldr	r3, [pc, #152]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	0011      	movs	r1, r2
 800a14e:	0018      	movs	r0, r3
 800a150:	f7ff f8c3 	bl	80092da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	0018      	movs	r0, r3
 800a158:	f000 fa15 	bl	800a586 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a15c:	e03c      	b.n	800a1d8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a15e:	4b20      	ldr	r3, [pc, #128]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	001a      	movs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d022      	beq.n	800a1b2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	b2da      	uxtb	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	0011      	movs	r1, r2
 800a176:	0018      	movs	r0, r3
 800a178:	f7ff f8af 	bl	80092da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a17c:	4b18      	ldr	r3, [pc, #96]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	001a      	movs	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a186:	4b16      	ldr	r3, [pc, #88]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a188:	781a      	ldrb	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	0011      	movs	r1, r2
 800a18e:	0018      	movs	r0, r3
 800a190:	f7ff f87c 	bl	800928c <USBD_SetClassConfig>
 800a194:	0003      	movs	r3, r0
 800a196:	2b02      	cmp	r3, #2
 800a198:	d106      	bne.n	800a1a8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	0011      	movs	r1, r2
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f000 f908 	bl	800a3b6 <USBD_CtlError>
            return;
 800a1a6:	e017      	b.n	800a1d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	f000 f9eb 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a1b0:	e012      	b.n	800a1d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f000 f9e6 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a1ba:	e00d      	b.n	800a1d8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	0011      	movs	r1, r2
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f000 f8f7 	bl	800a3b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1c8:	4b05      	ldr	r3, [pc, #20]	@ (800a1e0 <USBD_SetConfig+0x144>)
 800a1ca:	781a      	ldrb	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	0011      	movs	r1, r2
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	f7ff f882 	bl	80092da <USBD_ClrClassConfig>
        break;
 800a1d6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	b002      	add	sp, #8
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	20000948 	.word	0x20000948

0800a1e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	88db      	ldrh	r3, [r3, #6]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d006      	beq.n	800a204 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	0011      	movs	r1, r2
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 f8da 	bl	800a3b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a202:	e026      	b.n	800a252 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	23a7      	movs	r3, #167	@ 0xa7
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	5cd3      	ldrb	r3, [r2, r3]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	dc02      	bgt.n	800a216 <USBD_GetConfig+0x32>
 800a210:	2b00      	cmp	r3, #0
 800a212:	dc03      	bgt.n	800a21c <USBD_GetConfig+0x38>
 800a214:	e016      	b.n	800a244 <USBD_GetConfig+0x60>
 800a216:	2b03      	cmp	r3, #3
 800a218:	d00c      	beq.n	800a234 <USBD_GetConfig+0x50>
 800a21a:	e013      	b.n	800a244 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3308      	adds	r3, #8
 800a226:	0019      	movs	r1, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	0018      	movs	r0, r3
 800a22e:	f000 f940 	bl	800a4b2 <USBD_CtlSendData>
        break;
 800a232:	e00e      	b.n	800a252 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	1d19      	adds	r1, r3, #4
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	0018      	movs	r0, r3
 800a23e:	f000 f938 	bl	800a4b2 <USBD_CtlSendData>
        break;
 800a242:	e006      	b.n	800a252 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0011      	movs	r1, r2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f000 f8b3 	bl	800a3b6 <USBD_CtlError>
        break;
 800a250:	46c0      	nop			@ (mov r8, r8)
}
 800a252:	46c0      	nop			@ (mov r8, r8)
 800a254:	46bd      	mov	sp, r7
 800a256:	b002      	add	sp, #8
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	23a7      	movs	r3, #167	@ 0xa7
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d822      	bhi.n	800a2b8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	88db      	ldrh	r3, [r3, #6]
 800a276:	2b02      	cmp	r3, #2
 800a278:	d006      	beq.n	800a288 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	0011      	movs	r1, r2
 800a280:	0018      	movs	r0, r3
 800a282:	f000 f898 	bl	800a3b6 <USBD_CtlError>
        break;
 800a286:	e01e      	b.n	800a2c6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	23a9      	movs	r3, #169	@ 0xa9
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	58d3      	ldr	r3, [r2, r3]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2202      	movs	r2, #2
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	0019      	movs	r1, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f000 f8fe 	bl	800a4b2 <USBD_CtlSendData>
      break;
 800a2b6:	e006      	b.n	800a2c6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0011      	movs	r1, r2
 800a2be:	0018      	movs	r0, r3
 800a2c0:	f000 f879 	bl	800a3b6 <USBD_CtlError>
      break;
 800a2c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a2c6:	46c0      	nop			@ (mov r8, r8)
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	b002      	add	sp, #8
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b082      	sub	sp, #8
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	885b      	ldrh	r3, [r3, #2]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d108      	bne.n	800a2f2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	23a9      	movs	r3, #169	@ 0xa9
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f000 f94a 	bl	800a586 <USBD_CtlSendStatus>
  }
}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	b002      	add	sp, #8
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	23a7      	movs	r3, #167	@ 0xa7
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	5cd3      	ldrb	r3, [r2, r3]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d80d      	bhi.n	800a32e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	885b      	ldrh	r3, [r3, #2]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d110      	bne.n	800a33c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	23a9      	movs	r3, #169	@ 0xa9
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	2100      	movs	r1, #0
 800a322:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	0018      	movs	r0, r3
 800a328:	f000 f92d 	bl	800a586 <USBD_CtlSendStatus>
      }
      break;
 800a32c:	e006      	b.n	800a33c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	0011      	movs	r1, r2
 800a334:	0018      	movs	r0, r3
 800a336:	f000 f83e 	bl	800a3b6 <USBD_CtlError>
      break;
 800a33a:	e000      	b.n	800a33e <USBD_ClrFeature+0x44>
      break;
 800a33c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a33e:	46c0      	nop			@ (mov r8, r8)
 800a340:	46bd      	mov	sp, r7
 800a342:	b002      	add	sp, #8
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	785a      	ldrb	r2, [r3, #1]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3302      	adds	r3, #2
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	001a      	movs	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3303      	adds	r3, #3
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	b29b      	uxth	r3, r3
 800a372:	18d3      	adds	r3, r2, r3
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	3304      	adds	r3, #4
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	001a      	movs	r2, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	3305      	adds	r3, #5
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	18d3      	adds	r3, r2, r3
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3306      	adds	r3, #6
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	001a      	movs	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	3307      	adds	r3, #7
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	18d3      	adds	r3, r2, r3
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	80da      	strh	r2, [r3, #6]

}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	b002      	add	sp, #8
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2180      	movs	r1, #128	@ 0x80
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 fc94 	bl	800acf2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f000 fc8f 	bl	800acf2 <USBD_LL_StallEP>
}
 800a3d4:	46c0      	nop			@ (mov r8, r8)
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	b002      	add	sp, #8
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3e8:	2417      	movs	r4, #23
 800a3ea:	193b      	adds	r3, r7, r4
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d03c      	beq.n	800a470 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f000 f83d 	bl	800a478 <USBD_GetLen>
 800a3fe:	0003      	movs	r3, r0
 800a400:	3301      	adds	r3, #1
 800a402:	b29b      	uxth	r3, r3
 800a404:	18db      	adds	r3, r3, r3
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a40c:	193b      	adds	r3, r7, r4
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	193a      	adds	r2, r7, r4
 800a412:	1c59      	adds	r1, r3, #1
 800a414:	7011      	strb	r1, [r2, #0]
 800a416:	001a      	movs	r2, r3
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a422:	193b      	adds	r3, r7, r4
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	193a      	adds	r2, r7, r4
 800a428:	1c59      	adds	r1, r3, #1
 800a42a:	7011      	strb	r1, [r2, #0]
 800a42c:	001a      	movs	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	189b      	adds	r3, r3, r2
 800a432:	2203      	movs	r2, #3
 800a434:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a436:	e017      	b.n	800a468 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	60fa      	str	r2, [r7, #12]
 800a43e:	2417      	movs	r4, #23
 800a440:	193a      	adds	r2, r7, r4
 800a442:	7812      	ldrb	r2, [r2, #0]
 800a444:	1939      	adds	r1, r7, r4
 800a446:	1c50      	adds	r0, r2, #1
 800a448:	7008      	strb	r0, [r1, #0]
 800a44a:	0011      	movs	r1, r2
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	1852      	adds	r2, r2, r1
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a454:	193b      	adds	r3, r7, r4
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	193a      	adds	r2, r7, r4
 800a45a:	1c59      	adds	r1, r3, #1
 800a45c:	7011      	strb	r1, [r2, #0]
 800a45e:	001a      	movs	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	189b      	adds	r3, r3, r2
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e3      	bne.n	800a438 <USBD_GetString+0x5c>
    }
  }
}
 800a470:	46c0      	nop			@ (mov r8, r8)
 800a472:	46bd      	mov	sp, r7
 800a474:	b007      	add	sp, #28
 800a476:	bd90      	pop	{r4, r7, pc}

0800a478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a480:	230f      	movs	r3, #15
 800a482:	18fb      	adds	r3, r7, r3
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a488:	e008      	b.n	800a49c <USBD_GetLen+0x24>
  {
    len++;
 800a48a:	210f      	movs	r1, #15
 800a48c:	187b      	adds	r3, r7, r1
 800a48e:	781a      	ldrb	r2, [r3, #0]
 800a490:	187b      	adds	r3, r7, r1
 800a492:	3201      	adds	r2, #1
 800a494:	701a      	strb	r2, [r3, #0]
    buf++;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3301      	adds	r3, #1
 800a49a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f2      	bne.n	800a48a <USBD_GetLen+0x12>
  }

  return len;
 800a4a4:	230f      	movs	r3, #15
 800a4a6:	18fb      	adds	r3, r7, r3
 800a4a8:	781b      	ldrb	r3, [r3, #0]
}
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	b004      	add	sp, #16
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	1dbb      	adds	r3, r7, #6
 800a4be:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	23a5      	movs	r3, #165	@ 0xa5
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a4ca:	1dbb      	adds	r3, r7, #6
 800a4cc:	881a      	ldrh	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4d2:	1dbb      	adds	r3, r7, #6
 800a4d4:	881a      	ldrh	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4da:	1dbb      	adds	r3, r7, #6
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	f000 fcb6 	bl	800ae54 <USBD_LL_Transmit>

  return USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b004      	add	sp, #16
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	1dbb      	adds	r3, r7, #6
 800a4fe:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a500:	1dbb      	adds	r3, r7, #6
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	2100      	movs	r1, #0
 800a50a:	f000 fca3 	bl	800ae54 <USBD_LL_Transmit>

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	0018      	movs	r0, r3
 800a512:	46bd      	mov	sp, r7
 800a514:	b004      	add	sp, #16
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	1dbb      	adds	r3, r7, #6
 800a524:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	23a5      	movs	r3, #165	@ 0xa5
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	2103      	movs	r1, #3
 800a52e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a530:	1dbb      	adds	r3, r7, #6
 800a532:	8819      	ldrh	r1, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	23ae      	movs	r3, #174	@ 0xae
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a53c:	1dbb      	adds	r3, r7, #6
 800a53e:	8819      	ldrh	r1, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	23b0      	movs	r3, #176	@ 0xb0
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a548:	1dbb      	adds	r3, r7, #6
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	2100      	movs	r1, #0
 800a552:	f000 fcb6 	bl	800aec2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	0018      	movs	r0, r3
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b004      	add	sp, #16
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	1dbb      	adds	r3, r7, #6
 800a56c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56e:	1dbb      	adds	r3, r7, #6
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	2100      	movs	r1, #0
 800a578:	f000 fca3 	bl	800aec2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	0018      	movs	r0, r3
 800a580:	46bd      	mov	sp, r7
 800a582:	b004      	add	sp, #16
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	23a5      	movs	r3, #165	@ 0xa5
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	2104      	movs	r1, #4
 800a596:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	2300      	movs	r3, #0
 800a59c:	2200      	movs	r2, #0
 800a59e:	2100      	movs	r1, #0
 800a5a0:	f000 fc58 	bl	800ae54 <USBD_LL_Transmit>

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	b002      	add	sp, #8
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	23a5      	movs	r3, #165	@ 0xa5
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	2105      	movs	r1, #5
 800a5be:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	f000 fc7b 	bl	800aec2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	b002      	add	sp, #8
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5dc:	4914      	ldr	r1, [pc, #80]	@ (800a630 <MX_USB_DEVICE_Init+0x58>)
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <MX_USB_DEVICE_Init+0x5c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7fe fdeb 	bl	80091be <USBD_Init>
 800a5e8:	1e03      	subs	r3, r0, #0
 800a5ea:	d001      	beq.n	800a5f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5ec:	f7f7 f904 	bl	80017f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a5f0:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <MX_USB_DEVICE_Init+0x60>)
 800a5f2:	4b10      	ldr	r3, [pc, #64]	@ (800a634 <MX_USB_DEVICE_Init+0x5c>)
 800a5f4:	0011      	movs	r1, r2
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f7fe fe12 	bl	8009220 <USBD_RegisterClass>
 800a5fc:	1e03      	subs	r3, r0, #0
 800a5fe:	d001      	beq.n	800a604 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a600:	f7f7 f8fa 	bl	80017f8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a604:	4a0d      	ldr	r2, [pc, #52]	@ (800a63c <MX_USB_DEVICE_Init+0x64>)
 800a606:	4b0b      	ldr	r3, [pc, #44]	@ (800a634 <MX_USB_DEVICE_Init+0x5c>)
 800a608:	0011      	movs	r1, r2
 800a60a:	0018      	movs	r0, r3
 800a60c:	f7fe fdbc 	bl	8009188 <USBD_CUSTOM_HID_RegisterInterface>
 800a610:	1e03      	subs	r3, r0, #0
 800a612:	d001      	beq.n	800a618 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a614:	f7f7 f8f0 	bl	80017f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a618:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <MX_USB_DEVICE_Init+0x5c>)
 800a61a:	0018      	movs	r0, r3
 800a61c:	f7fe fe20 	bl	8009260 <USBD_Start>
 800a620:	1e03      	subs	r3, r0, #0
 800a622:	d001      	beq.n	800a628 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a624:	f7f7 f8e8 	bl	80017f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a628:	46c0      	nop			@ (mov r8, r8)
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	46c0      	nop			@ (mov r8, r8)
 800a630:	2000054c 	.word	0x2000054c
 800a634:	2000094c 	.word	0x2000094c
 800a638:	200003a8 	.word	0x200003a8
 800a63c:	2000053c 	.word	0x2000053c

0800a640 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a646:	0018      	movs	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a650:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a652:	0018      	movs	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	0002      	movs	r2, r0
 800a660:	1dfb      	adds	r3, r7, #7
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	1dbb      	adds	r3, r7, #6
 800a666:	1c0a      	adds	r2, r1, #0
 800a668:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a66a:	4a20      	ldr	r2, [pc, #128]	@ (800a6ec <CUSTOM_HID_OutEvent_FS+0x94>)
 800a66c:	23ae      	movs	r3, #174	@ 0xae
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	58d3      	ldr	r3, [r2, r3]
 800a672:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL) return USBD_FAIL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <CUSTOM_HID_OutEvent_FS+0x26>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e031      	b.n	800a6e2 <CUSTOM_HID_OutEvent_FS+0x8a>

	memcpy(rxBuffer, hhid->Report_buf, REPORT_SIZE);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a682:	0010      	movs	r0, r2
 800a684:	0019      	movs	r1, r3
 800a686:	2340      	movs	r3, #64	@ 0x40
 800a688:	001a      	movs	r2, r3
 800a68a:	f000 fccf 	bl	800b02c <memcpy>

	switch(rxBuffer[0])
 800a68e:	4b18      	ldr	r3, [pc, #96]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b06      	cmp	r3, #6
 800a694:	d01d      	beq.n	800a6d2 <CUSTOM_HID_OutEvent_FS+0x7a>
 800a696:	dc23      	bgt.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>
 800a698:	2b05      	cmp	r3, #5
 800a69a:	d013      	beq.n	800a6c4 <CUSTOM_HID_OutEvent_FS+0x6c>
 800a69c:	dc20      	bgt.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d002      	beq.n	800a6a8 <CUSTOM_HID_OutEvent_FS+0x50>
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d007      	beq.n	800a6b6 <CUSTOM_HID_OutEvent_FS+0x5e>
 800a6a6:	e01b      	b.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>
	{
	case ID_CONFIG_2_FN:
		Write_KeyConfig_To_Flash(CONFIG_2_FN_FLASH_ADDRESS, rxBuffer);
 800a6a8:	4b11      	ldr	r3, [pc, #68]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6aa:	4a12      	ldr	r2, [pc, #72]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x9c>)
 800a6ac:	0019      	movs	r1, r3
 800a6ae:	0010      	movs	r0, r2
 800a6b0:	f7f6 fa50 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6b4:	e014      	b.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_2_ALT:
		Write_KeyConfig_To_Flash(CONFIG_2_ALT_FLASH_ADDRESS, rxBuffer);
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a6f8 <CUSTOM_HID_OutEvent_FS+0xa0>)
 800a6ba:	0019      	movs	r1, r3
 800a6bc:	0010      	movs	r0, r2
 800a6be:	f7f6 fa49 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6c2:	e00d      	b.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_3_FN:
		Write_KeyConfig_To_Flash(CONFIG_3_FN_FLASH_ADDRESS, rxBuffer);
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6c6:	4a0d      	ldr	r2, [pc, #52]	@ (800a6fc <CUSTOM_HID_OutEvent_FS+0xa4>)
 800a6c8:	0019      	movs	r1, r3
 800a6ca:	0010      	movs	r0, r2
 800a6cc:	f7f6 fa42 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6d0:	e006      	b.n	800a6e0 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_3_ALT:
		Write_KeyConfig_To_Flash(CONFIG_3_ALT_FLASH_ADDRESS, rxBuffer);
 800a6d2:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6d4:	4a0a      	ldr	r2, [pc, #40]	@ (800a700 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800a6d6:	0019      	movs	r1, r3
 800a6d8:	0010      	movs	r0, r2
 800a6da:	f7f6 fa3b 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6de:	46c0      	nop			@ (mov r8, r8)
	}


  return (USBD_OK);
 800a6e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	b004      	add	sp, #16
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	46c0      	nop			@ (mov r8, r8)
 800a6ec:	2000094c 	.word	0x2000094c
 800a6f0:	20000c10 	.word	0x20000c10
 800a6f4:	0801e000 	.word	0x0801e000
 800a6f8:	0801e800 	.word	0x0801e800
 800a6fc:	0801f000 	.word	0x0801f000
 800a700:	0801f800 	.word	0x0801f800

0800a704 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	0002      	movs	r2, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	1dfb      	adds	r3, r7, #7
 800a710:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2212      	movs	r2, #18
 800a716:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a718:	4b02      	ldr	r3, [pc, #8]	@ (800a724 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a71a:	0018      	movs	r0, r3
 800a71c:	46bd      	mov	sp, r7
 800a71e:	b002      	add	sp, #8
 800a720:	bd80      	pop	{r7, pc}
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	20000568 	.word	0x20000568

0800a728 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	0002      	movs	r2, r0
 800a730:	6039      	str	r1, [r7, #0]
 800a732:	1dfb      	adds	r3, r7, #7
 800a734:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2204      	movs	r2, #4
 800a73a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a73c:	4b02      	ldr	r3, [pc, #8]	@ (800a748 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a73e:	0018      	movs	r0, r3
 800a740:	46bd      	mov	sp, r7
 800a742:	b002      	add	sp, #8
 800a744:	bd80      	pop	{r7, pc}
 800a746:	46c0      	nop			@ (mov r8, r8)
 800a748:	2000057c 	.word	0x2000057c

0800a74c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	0002      	movs	r2, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	1dfb      	adds	r3, r7, #7
 800a758:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a75a:	1dfb      	adds	r3, r7, #7
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4908      	ldr	r1, [pc, #32]	@ (800a788 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <USBD_FS_ProductStrDescriptor+0x40>)
 800a768:	0018      	movs	r0, r3
 800a76a:	f7ff fe37 	bl	800a3dc <USBD_GetString>
 800a76e:	e005      	b.n	800a77c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	4905      	ldr	r1, [pc, #20]	@ (800a788 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a774:	4b05      	ldr	r3, [pc, #20]	@ (800a78c <USBD_FS_ProductStrDescriptor+0x40>)
 800a776:	0018      	movs	r0, r3
 800a778:	f7ff fe30 	bl	800a3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a77c:	4b02      	ldr	r3, [pc, #8]	@ (800a788 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a77e:	0018      	movs	r0, r3
 800a780:	46bd      	mov	sp, r7
 800a782:	b002      	add	sp, #8
 800a784:	bd80      	pop	{r7, pc}
 800a786:	46c0      	nop			@ (mov r8, r8)
 800a788:	20000c50 	.word	0x20000c50
 800a78c:	0800b058 	.word	0x0800b058

0800a790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	0002      	movs	r2, r0
 800a798:	6039      	str	r1, [r7, #0]
 800a79a:	1dfb      	adds	r3, r7, #7
 800a79c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	4904      	ldr	r1, [pc, #16]	@ (800a7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7a2:	4b05      	ldr	r3, [pc, #20]	@ (800a7b8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7ff fe19 	bl	800a3dc <USBD_GetString>
  return USBD_StrDesc;
 800a7aa:	4b02      	ldr	r3, [pc, #8]	@ (800a7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b002      	add	sp, #8
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20000c50 	.word	0x20000c50
 800a7b8:	0800b068 	.word	0x0800b068

0800a7bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	0002      	movs	r2, r0
 800a7c4:	6039      	str	r1, [r7, #0]
 800a7c6:	1dfb      	adds	r3, r7, #7
 800a7c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	221a      	movs	r2, #26
 800a7ce:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7d0:	f000 f84c 	bl	800a86c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7d4:	4b02      	ldr	r3, [pc, #8]	@ (800a7e0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	b002      	add	sp, #8
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	46c0      	nop			@ (mov r8, r8)
 800a7e0:	20000580 	.word	0x20000580

0800a7e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	0002      	movs	r2, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	1dfb      	adds	r3, r7, #7
 800a7f0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a7f2:	1dfb      	adds	r3, r7, #7
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4908      	ldr	r1, [pc, #32]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a7fe:	4b09      	ldr	r3, [pc, #36]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a800:	0018      	movs	r0, r3
 800a802:	f7ff fdeb 	bl	800a3dc <USBD_GetString>
 800a806:	e005      	b.n	800a814 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	4905      	ldr	r1, [pc, #20]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a80e:	0018      	movs	r0, r3
 800a810:	f7ff fde4 	bl	800a3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a814:	4b02      	ldr	r3, [pc, #8]	@ (800a820 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b002      	add	sp, #8
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	46c0      	nop			@ (mov r8, r8)
 800a820:	20000c50 	.word	0x20000c50
 800a824:	0800b074 	.word	0x0800b074

0800a828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	0002      	movs	r2, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	1dfb      	adds	r3, r7, #7
 800a834:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a836:	1dfb      	adds	r3, r7, #7
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	4908      	ldr	r1, [pc, #32]	@ (800a864 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a842:	4b09      	ldr	r3, [pc, #36]	@ (800a868 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a844:	0018      	movs	r0, r3
 800a846:	f7ff fdc9 	bl	800a3dc <USBD_GetString>
 800a84a:	e005      	b.n	800a858 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	4905      	ldr	r1, [pc, #20]	@ (800a864 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a850:	4b05      	ldr	r3, [pc, #20]	@ (800a868 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a852:	0018      	movs	r0, r3
 800a854:	f7ff fdc2 	bl	800a3dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a858:	4b02      	ldr	r3, [pc, #8]	@ (800a864 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800a85a:	0018      	movs	r0, r3
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b002      	add	sp, #8
 800a860:	bd80      	pop	{r7, pc}
 800a862:	46c0      	nop			@ (mov r8, r8)
 800a864:	20000c50 	.word	0x20000c50
 800a868:	0800b088 	.word	0x0800b088

0800a86c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a872:	4b10      	ldr	r3, [pc, #64]	@ (800a8b4 <Get_SerialNum+0x48>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a878:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b8 <Get_SerialNum+0x4c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a87e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8bc <Get_SerialNum+0x50>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	18d3      	adds	r3, r2, r3
 800a88a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a892:	490b      	ldr	r1, [pc, #44]	@ (800a8c0 <Get_SerialNum+0x54>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2208      	movs	r2, #8
 800a898:	0018      	movs	r0, r3
 800a89a:	f000 f815 	bl	800a8c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a89e:	4909      	ldr	r1, [pc, #36]	@ (800a8c4 <Get_SerialNum+0x58>)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2204      	movs	r2, #4
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f000 f80f 	bl	800a8c8 <IntToUnicode>
  }
}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	b004      	add	sp, #16
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	46c0      	nop			@ (mov r8, r8)
 800a8b4:	1ffff7ac 	.word	0x1ffff7ac
 800a8b8:	1ffff7b0 	.word	0x1ffff7b0
 800a8bc:	1ffff7b4 	.word	0x1ffff7b4
 800a8c0:	20000582 	.word	0x20000582
 800a8c4:	20000592 	.word	0x20000592

0800a8c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	1dfb      	adds	r3, r7, #7
 800a8d4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a8d6:	2117      	movs	r1, #23
 800a8d8:	187b      	adds	r3, r7, r1
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a8de:	187b      	adds	r3, r7, r1
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e02f      	b.n	800a946 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	0f1b      	lsrs	r3, r3, #28
 800a8ea:	2b09      	cmp	r3, #9
 800a8ec:	d80d      	bhi.n	800a90a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	0f1b      	lsrs	r3, r3, #28
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	2317      	movs	r3, #23
 800a8f6:	18fb      	adds	r3, r7, r3
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	0019      	movs	r1, r3
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	185b      	adds	r3, r3, r1
 800a902:	3230      	adds	r2, #48	@ 0x30
 800a904:	b2d2      	uxtb	r2, r2
 800a906:	701a      	strb	r2, [r3, #0]
 800a908:	e00c      	b.n	800a924 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	0f1b      	lsrs	r3, r3, #28
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	2317      	movs	r3, #23
 800a912:	18fb      	adds	r3, r7, r3
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	0019      	movs	r1, r3
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	185b      	adds	r3, r3, r1
 800a91e:	3237      	adds	r2, #55	@ 0x37
 800a920:	b2d2      	uxtb	r2, r2
 800a922:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a92a:	2117      	movs	r1, #23
 800a92c:	187b      	adds	r3, r7, r1
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	3301      	adds	r3, #1
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	18d3      	adds	r3, r2, r3
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a93c:	187b      	adds	r3, r7, r1
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	187b      	adds	r3, r7, r1
 800a942:	3201      	adds	r2, #1
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	2317      	movs	r3, #23
 800a948:	18fa      	adds	r2, r7, r3
 800a94a:	1dfb      	adds	r3, r7, #7
 800a94c:	7812      	ldrb	r2, [r2, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d3c8      	bcc.n	800a8e6 <IntToUnicode+0x1e>
  }
}
 800a954:	46c0      	nop			@ (mov r8, r8)
 800a956:	46c0      	nop			@ (mov r8, r8)
 800a958:	46bd      	mov	sp, r7
 800a95a:	b006      	add	sp, #24
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a8 <HAL_PCD_MspInit+0x48>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d115      	bne.n	800a99e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a972:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ac <HAL_PCD_MspInit+0x4c>)
 800a974:	69da      	ldr	r2, [r3, #28]
 800a976:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ac <HAL_PCD_MspInit+0x4c>)
 800a978:	2180      	movs	r1, #128	@ 0x80
 800a97a:	0409      	lsls	r1, r1, #16
 800a97c:	430a      	orrs	r2, r1
 800a97e:	61da      	str	r2, [r3, #28]
 800a980:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <HAL_PCD_MspInit+0x4c>)
 800a982:	69da      	ldr	r2, [r3, #28]
 800a984:	2380      	movs	r3, #128	@ 0x80
 800a986:	041b      	lsls	r3, r3, #16
 800a988:	4013      	ands	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a98e:	2200      	movs	r2, #0
 800a990:	2100      	movs	r1, #0
 800a992:	201f      	movs	r0, #31
 800a994:	f7f7 fc5a 	bl	800224c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a998:	201f      	movs	r0, #31
 800a99a:	f7f7 fc6c 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a99e:	46c0      	nop			@ (mov r8, r8)
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b004      	add	sp, #16
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	40005c00 	.word	0x40005c00
 800a9ac:	40021000 	.word	0x40021000

0800a9b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	23b6      	movs	r3, #182	@ 0xb6
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	58d2      	ldr	r2, [r2, r3]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	21a6      	movs	r1, #166	@ 0xa6
 800a9c4:	0089      	lsls	r1, r1, #2
 800a9c6:	468c      	mov	ip, r1
 800a9c8:	4463      	add	r3, ip
 800a9ca:	0019      	movs	r1, r3
 800a9cc:	0010      	movs	r0, r2
 800a9ce:	f7fe fc9b 	bl	8009308 <USBD_LL_SetupStage>
}
 800a9d2:	46c0      	nop			@ (mov r8, r8)
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b002      	add	sp, #8
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9da:	b590      	push	{r4, r7, lr}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	000a      	movs	r2, r1
 800a9e4:	1cfb      	adds	r3, r7, #3
 800a9e6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	23b6      	movs	r3, #182	@ 0xb6
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	58d4      	ldr	r4, [r2, r3]
 800a9f0:	1cfb      	adds	r3, r7, #3
 800a9f2:	781a      	ldrb	r2, [r3, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	23b2      	movs	r3, #178	@ 0xb2
 800a9f8:	0059      	lsls	r1, r3, #1
 800a9fa:	0013      	movs	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	189b      	adds	r3, r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	18c3      	adds	r3, r0, r3
 800aa04:	185b      	adds	r3, r3, r1
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	1cfb      	adds	r3, r7, #3
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	0019      	movs	r1, r3
 800aa0e:	0020      	movs	r0, r4
 800aa10:	f7fe fcd8 	bl	80093c4 <USBD_LL_DataOutStage>
}
 800aa14:	46c0      	nop			@ (mov r8, r8)
 800aa16:	46bd      	mov	sp, r7
 800aa18:	b003      	add	sp, #12
 800aa1a:	bd90      	pop	{r4, r7, pc}

0800aa1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	000a      	movs	r2, r1
 800aa26:	1cfb      	adds	r3, r7, #3
 800aa28:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	23b6      	movs	r3, #182	@ 0xb6
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	58d0      	ldr	r0, [r2, r3]
 800aa32:	1cfb      	adds	r3, r7, #3
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	0013      	movs	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	189b      	adds	r3, r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	18cb      	adds	r3, r1, r3
 800aa42:	3324      	adds	r3, #36	@ 0x24
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	1cfb      	adds	r3, r7, #3
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	0019      	movs	r1, r3
 800aa4c:	f7fe fd3c 	bl	80094c8 <USBD_LL_DataInStage>
}
 800aa50:	46c0      	nop			@ (mov r8, r8)
 800aa52:	46bd      	mov	sp, r7
 800aa54:	b002      	add	sp, #8
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	23b6      	movs	r3, #182	@ 0xb6
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	58d3      	ldr	r3, [r2, r3]
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f7fe fe73 	bl	8009754 <USBD_LL_SOF>
}
 800aa6e:	46c0      	nop			@ (mov r8, r8)
 800aa70:	46bd      	mov	sp, r7
 800aa72:	b002      	add	sp, #8
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa7e:	230f      	movs	r3, #15
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	795b      	ldrb	r3, [r3, #5]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d001      	beq.n	800aa92 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800aa8e:	f7f6 feb3 	bl	80017f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	23b6      	movs	r3, #182	@ 0xb6
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	58d2      	ldr	r2, [r2, r3]
 800aa9a:	230f      	movs	r3, #15
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	0019      	movs	r1, r3
 800aaa2:	0010      	movs	r0, r2
 800aaa4:	f7fe fe15 	bl	80096d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	23b6      	movs	r3, #182	@ 0xb6
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	58d3      	ldr	r3, [r2, r3]
 800aab0:	0018      	movs	r0, r3
 800aab2:	f7fe fdc6 	bl	8009642 <USBD_LL_Reset>
}
 800aab6:	46c0      	nop			@ (mov r8, r8)
 800aab8:	46bd      	mov	sp, r7
 800aaba:	b004      	add	sp, #16
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	23b6      	movs	r3, #182	@ 0xb6
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	58d3      	ldr	r3, [r2, r3]
 800aad0:	0018      	movs	r0, r3
 800aad2:	f7fe fe0f 	bl	80096f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7a5b      	ldrb	r3, [r3, #9]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d005      	beq.n	800aaea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aade:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <HAL_PCD_SuspendCallback+0x34>)
 800aae0:	691a      	ldr	r2, [r3, #16]
 800aae2:	4b04      	ldr	r3, [pc, #16]	@ (800aaf4 <HAL_PCD_SuspendCallback+0x34>)
 800aae4:	2106      	movs	r1, #6
 800aae6:	430a      	orrs	r2, r1
 800aae8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800aaea:	46c0      	nop			@ (mov r8, r8)
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b002      	add	sp, #8
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	46c0      	nop			@ (mov r8, r8)
 800aaf4:	e000ed00 	.word	0xe000ed00

0800aaf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7a5b      	ldrb	r3, [r3, #9]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab08:	4b09      	ldr	r3, [pc, #36]	@ (800ab30 <HAL_PCD_ResumeCallback+0x38>)
 800ab0a:	691a      	ldr	r2, [r3, #16]
 800ab0c:	4b08      	ldr	r3, [pc, #32]	@ (800ab30 <HAL_PCD_ResumeCallback+0x38>)
 800ab0e:	2106      	movs	r1, #6
 800ab10:	438a      	bics	r2, r1
 800ab12:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ab14:	f000 fa20 	bl	800af58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	23b6      	movs	r3, #182	@ 0xb6
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	58d3      	ldr	r3, [r2, r3]
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7fe fdff 	bl	8009724 <USBD_LL_Resume>
}
 800ab26:	46c0      	nop			@ (mov r8, r8)
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	b002      	add	sp, #8
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	e000ed00 	.word	0xe000ed00

0800ab34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab3c:	4a27      	ldr	r2, [pc, #156]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab3e:	23b6      	movs	r3, #182	@ 0xb6
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	23b0      	movs	r3, #176	@ 0xb0
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4923      	ldr	r1, [pc, #140]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab4e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ab50:	4b22      	ldr	r3, [pc, #136]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab52:	4a23      	ldr	r2, [pc, #140]	@ (800abe0 <USBD_LL_Init+0xac>)
 800ab54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab56:	4b21      	ldr	r3, [pc, #132]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab58:	2208      	movs	r2, #8
 800ab5a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab5c:	4b1f      	ldr	r3, [pc, #124]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab5e:	2202      	movs	r2, #2
 800ab60:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab62:	4b1e      	ldr	r3, [pc, #120]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab64:	2202      	movs	r2, #2
 800ab66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab68:	4b1c      	ldr	r3, [pc, #112]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab74:	4b19      	ldr	r3, [pc, #100]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab7a:	4b18      	ldr	r3, [pc, #96]	@ (800abdc <USBD_LL_Init+0xa8>)
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	f7f8 f945 	bl	8002e0c <HAL_PCD_Init>
 800ab82:	1e03      	subs	r3, r0, #0
 800ab84:	d001      	beq.n	800ab8a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800ab86:	f7f6 fe37 	bl	80017f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	23b0      	movs	r3, #176	@ 0xb0
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	58d0      	ldr	r0, [r2, r3]
 800ab92:	2318      	movs	r3, #24
 800ab94:	2200      	movs	r2, #0
 800ab96:	2100      	movs	r1, #0
 800ab98:	f7f9 fede 	bl	8004958 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	23b0      	movs	r3, #176	@ 0xb0
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	58d0      	ldr	r0, [r2, r3]
 800aba4:	2358      	movs	r3, #88	@ 0x58
 800aba6:	2200      	movs	r2, #0
 800aba8:	2180      	movs	r1, #128	@ 0x80
 800abaa:	f7f9 fed5 	bl	8004958 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	23b0      	movs	r3, #176	@ 0xb0
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	58d0      	ldr	r0, [r2, r3]
 800abb6:	2398      	movs	r3, #152	@ 0x98
 800abb8:	2200      	movs	r2, #0
 800abba:	2181      	movs	r1, #129	@ 0x81
 800abbc:	f7f9 fecc 	bl	8004958 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	23b0      	movs	r3, #176	@ 0xb0
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	58d0      	ldr	r0, [r2, r3]
 800abc8:	23d8      	movs	r3, #216	@ 0xd8
 800abca:	2200      	movs	r2, #0
 800abcc:	2101      	movs	r1, #1
 800abce:	f7f9 fec3 	bl	8004958 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	0018      	movs	r0, r3
 800abd6:	46bd      	mov	sp, r7
 800abd8:	b002      	add	sp, #8
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20000e50 	.word	0x20000e50
 800abe0:	40005c00 	.word	0x40005c00

0800abe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abec:	210f      	movs	r1, #15
 800abee:	187b      	adds	r3, r7, r1
 800abf0:	2200      	movs	r2, #0
 800abf2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf4:	260e      	movs	r6, #14
 800abf6:	19bb      	adds	r3, r7, r6
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	23b0      	movs	r3, #176	@ 0xb0
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	58d3      	ldr	r3, [r2, r3]
 800ac04:	000d      	movs	r5, r1
 800ac06:	187c      	adds	r4, r7, r1
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7f8 f9f3 	bl	8002ff4 <HAL_PCD_Start>
 800ac0e:	0003      	movs	r3, r0
 800ac10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac12:	19bc      	adds	r4, r7, r6
 800ac14:	197b      	adds	r3, r7, r5
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f000 f9a4 	bl	800af66 <USBD_Get_USB_Status>
 800ac1e:	0003      	movs	r3, r0
 800ac20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac22:	19bb      	adds	r3, r7, r6
 800ac24:	781b      	ldrb	r3, [r3, #0]
}
 800ac26:	0018      	movs	r0, r3
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	b005      	add	sp, #20
 800ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac30:	b085      	sub	sp, #20
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	000c      	movs	r4, r1
 800ac38:	0010      	movs	r0, r2
 800ac3a:	0019      	movs	r1, r3
 800ac3c:	1cfb      	adds	r3, r7, #3
 800ac3e:	1c22      	adds	r2, r4, #0
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	1cbb      	adds	r3, r7, #2
 800ac44:	1c02      	adds	r2, r0, #0
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	003b      	movs	r3, r7
 800ac4a:	1c0a      	adds	r2, r1, #0
 800ac4c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4e:	260f      	movs	r6, #15
 800ac50:	19bb      	adds	r3, r7, r6
 800ac52:	2200      	movs	r2, #0
 800ac54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac56:	250e      	movs	r5, #14
 800ac58:	197b      	adds	r3, r7, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	23b0      	movs	r3, #176	@ 0xb0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	58d0      	ldr	r0, [r2, r3]
 800ac66:	19bc      	adds	r4, r7, r6
 800ac68:	1cbb      	adds	r3, r7, #2
 800ac6a:	781d      	ldrb	r5, [r3, #0]
 800ac6c:	003b      	movs	r3, r7
 800ac6e:	881a      	ldrh	r2, [r3, #0]
 800ac70:	1cfb      	adds	r3, r7, #3
 800ac72:	7819      	ldrb	r1, [r3, #0]
 800ac74:	002b      	movs	r3, r5
 800ac76:	f7f8 fb51 	bl	800331c <HAL_PCD_EP_Open>
 800ac7a:	0003      	movs	r3, r0
 800ac7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7e:	250e      	movs	r5, #14
 800ac80:	197c      	adds	r4, r7, r5
 800ac82:	19bb      	adds	r3, r7, r6
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 f96d 	bl	800af66 <USBD_Get_USB_Status>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac90:	197b      	adds	r3, r7, r5
 800ac92:	781b      	ldrb	r3, [r3, #0]
}
 800ac94:	0018      	movs	r0, r3
 800ac96:	46bd      	mov	sp, r7
 800ac98:	b005      	add	sp, #20
 800ac9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac9c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	000a      	movs	r2, r1
 800aca6:	1cfb      	adds	r3, r7, #3
 800aca8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acaa:	210f      	movs	r1, #15
 800acac:	187b      	adds	r3, r7, r1
 800acae:	2200      	movs	r2, #0
 800acb0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb2:	260e      	movs	r6, #14
 800acb4:	19bb      	adds	r3, r7, r6
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	23b0      	movs	r3, #176	@ 0xb0
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	58d2      	ldr	r2, [r2, r3]
 800acc2:	000d      	movs	r5, r1
 800acc4:	187c      	adds	r4, r7, r1
 800acc6:	1cfb      	adds	r3, r7, #3
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	0019      	movs	r1, r3
 800accc:	0010      	movs	r0, r2
 800acce:	f7f8 fb94 	bl	80033fa <HAL_PCD_EP_Close>
 800acd2:	0003      	movs	r3, r0
 800acd4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd6:	19bc      	adds	r4, r7, r6
 800acd8:	197b      	adds	r3, r7, r5
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	0018      	movs	r0, r3
 800acde:	f000 f942 	bl	800af66 <USBD_Get_USB_Status>
 800ace2:	0003      	movs	r3, r0
 800ace4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ace6:	19bb      	adds	r3, r7, r6
 800ace8:	781b      	ldrb	r3, [r3, #0]
}
 800acea:	0018      	movs	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	b005      	add	sp, #20
 800acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acf2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	000a      	movs	r2, r1
 800acfc:	1cfb      	adds	r3, r7, #3
 800acfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad00:	210f      	movs	r1, #15
 800ad02:	187b      	adds	r3, r7, r1
 800ad04:	2200      	movs	r2, #0
 800ad06:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad08:	260e      	movs	r6, #14
 800ad0a:	19bb      	adds	r3, r7, r6
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	23b0      	movs	r3, #176	@ 0xb0
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	58d2      	ldr	r2, [r2, r3]
 800ad18:	000d      	movs	r5, r1
 800ad1a:	187c      	adds	r4, r7, r1
 800ad1c:	1cfb      	adds	r3, r7, #3
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	0019      	movs	r1, r3
 800ad22:	0010      	movs	r0, r2
 800ad24:	f7f8 fc2d 	bl	8003582 <HAL_PCD_EP_SetStall>
 800ad28:	0003      	movs	r3, r0
 800ad2a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2c:	19bc      	adds	r4, r7, r6
 800ad2e:	197b      	adds	r3, r7, r5
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	0018      	movs	r0, r3
 800ad34:	f000 f917 	bl	800af66 <USBD_Get_USB_Status>
 800ad38:	0003      	movs	r3, r0
 800ad3a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad3c:	19bb      	adds	r3, r7, r6
 800ad3e:	781b      	ldrb	r3, [r3, #0]
}
 800ad40:	0018      	movs	r0, r3
 800ad42:	46bd      	mov	sp, r7
 800ad44:	b005      	add	sp, #20
 800ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	000a      	movs	r2, r1
 800ad52:	1cfb      	adds	r3, r7, #3
 800ad54:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad56:	210f      	movs	r1, #15
 800ad58:	187b      	adds	r3, r7, r1
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5e:	260e      	movs	r6, #14
 800ad60:	19bb      	adds	r3, r7, r6
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	23b0      	movs	r3, #176	@ 0xb0
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	58d2      	ldr	r2, [r2, r3]
 800ad6e:	000d      	movs	r5, r1
 800ad70:	187c      	adds	r4, r7, r1
 800ad72:	1cfb      	adds	r3, r7, #3
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	0019      	movs	r1, r3
 800ad78:	0010      	movs	r0, r2
 800ad7a:	f7f8 fc5e 	bl	800363a <HAL_PCD_EP_ClrStall>
 800ad7e:	0003      	movs	r3, r0
 800ad80:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad82:	19bc      	adds	r4, r7, r6
 800ad84:	197b      	adds	r3, r7, r5
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f000 f8ec 	bl	800af66 <USBD_Get_USB_Status>
 800ad8e:	0003      	movs	r3, r0
 800ad90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad92:	19bb      	adds	r3, r7, r6
 800ad94:	781b      	ldrb	r3, [r3, #0]
}
 800ad96:	0018      	movs	r0, r3
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b005      	add	sp, #20
 800ad9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad9e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	000a      	movs	r2, r1
 800ada8:	1cfb      	adds	r3, r7, #3
 800adaa:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	23b0      	movs	r3, #176	@ 0xb0
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	58d3      	ldr	r3, [r2, r3]
 800adb4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adb6:	1cfb      	adds	r3, r7, #3
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da0c      	bge.n	800adda <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adc0:	1cfb      	adds	r3, r7, #3
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	227f      	movs	r2, #127	@ 0x7f
 800adc6:	401a      	ands	r2, r3
 800adc8:	68f9      	ldr	r1, [r7, #12]
 800adca:	0013      	movs	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	189b      	adds	r3, r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	18cb      	adds	r3, r1, r3
 800add4:	3312      	adds	r3, #18
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	e00d      	b.n	800adf6 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adda:	1cfb      	adds	r3, r7, #3
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	227f      	movs	r2, #127	@ 0x7f
 800ade0:	401a      	ands	r2, r3
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	23a9      	movs	r3, #169	@ 0xa9
 800ade6:	0059      	lsls	r1, r3, #1
 800ade8:	0013      	movs	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	189b      	adds	r3, r3, r2
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	18c3      	adds	r3, r0, r3
 800adf2:	185b      	adds	r3, r3, r1
 800adf4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adf6:	0018      	movs	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	b004      	add	sp, #16
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	000a      	movs	r2, r1
 800ae08:	1cfb      	adds	r3, r7, #3
 800ae0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae0c:	210f      	movs	r1, #15
 800ae0e:	187b      	adds	r3, r7, r1
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae14:	260e      	movs	r6, #14
 800ae16:	19bb      	adds	r3, r7, r6
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	23b0      	movs	r3, #176	@ 0xb0
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	58d2      	ldr	r2, [r2, r3]
 800ae24:	000d      	movs	r5, r1
 800ae26:	187c      	adds	r4, r7, r1
 800ae28:	1cfb      	adds	r3, r7, #3
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	0019      	movs	r1, r3
 800ae2e:	0010      	movs	r0, r2
 800ae30:	f7f8 fa4a 	bl	80032c8 <HAL_PCD_SetAddress>
 800ae34:	0003      	movs	r3, r0
 800ae36:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae38:	19bc      	adds	r4, r7, r6
 800ae3a:	197b      	adds	r3, r7, r5
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 f891 	bl	800af66 <USBD_Get_USB_Status>
 800ae44:	0003      	movs	r3, r0
 800ae46:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae48:	19bb      	adds	r3, r7, r6
 800ae4a:	781b      	ldrb	r3, [r3, #0]
}
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	b005      	add	sp, #20
 800ae52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	0008      	movs	r0, r1
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	0019      	movs	r1, r3
 800ae62:	230b      	movs	r3, #11
 800ae64:	18fb      	adds	r3, r7, r3
 800ae66:	1c02      	adds	r2, r0, #0
 800ae68:	701a      	strb	r2, [r3, #0]
 800ae6a:	2408      	movs	r4, #8
 800ae6c:	193b      	adds	r3, r7, r4
 800ae6e:	1c0a      	adds	r2, r1, #0
 800ae70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae72:	2117      	movs	r1, #23
 800ae74:	187b      	adds	r3, r7, r1
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae7a:	2516      	movs	r5, #22
 800ae7c:	197b      	adds	r3, r7, r5
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	23b0      	movs	r3, #176	@ 0xb0
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	58d0      	ldr	r0, [r2, r3]
 800ae8a:	193b      	adds	r3, r7, r4
 800ae8c:	881d      	ldrh	r5, [r3, #0]
 800ae8e:	000e      	movs	r6, r1
 800ae90:	187c      	adds	r4, r7, r1
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	230b      	movs	r3, #11
 800ae96:	18fb      	adds	r3, r7, r3
 800ae98:	7819      	ldrb	r1, [r3, #0]
 800ae9a:	002b      	movs	r3, r5
 800ae9c:	f7f8 fb35 	bl	800350a <HAL_PCD_EP_Transmit>
 800aea0:	0003      	movs	r3, r0
 800aea2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea4:	2516      	movs	r5, #22
 800aea6:	197c      	adds	r4, r7, r5
 800aea8:	19bb      	adds	r3, r7, r6
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	0018      	movs	r0, r3
 800aeae:	f000 f85a 	bl	800af66 <USBD_Get_USB_Status>
 800aeb2:	0003      	movs	r3, r0
 800aeb4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aeb6:	197b      	adds	r3, r7, r5
 800aeb8:	781b      	ldrb	r3, [r3, #0]
}
 800aeba:	0018      	movs	r0, r3
 800aebc:	46bd      	mov	sp, r7
 800aebe:	b007      	add	sp, #28
 800aec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aec2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec4:	b087      	sub	sp, #28
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	0008      	movs	r0, r1
 800aecc:	607a      	str	r2, [r7, #4]
 800aece:	0019      	movs	r1, r3
 800aed0:	230b      	movs	r3, #11
 800aed2:	18fb      	adds	r3, r7, r3
 800aed4:	1c02      	adds	r2, r0, #0
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	2408      	movs	r4, #8
 800aeda:	193b      	adds	r3, r7, r4
 800aedc:	1c0a      	adds	r2, r1, #0
 800aede:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee0:	2117      	movs	r1, #23
 800aee2:	187b      	adds	r3, r7, r1
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee8:	2516      	movs	r5, #22
 800aeea:	197b      	adds	r3, r7, r5
 800aeec:	2200      	movs	r2, #0
 800aeee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	23b0      	movs	r3, #176	@ 0xb0
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	58d0      	ldr	r0, [r2, r3]
 800aef8:	193b      	adds	r3, r7, r4
 800aefa:	881d      	ldrh	r5, [r3, #0]
 800aefc:	000e      	movs	r6, r1
 800aefe:	187c      	adds	r4, r7, r1
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	230b      	movs	r3, #11
 800af04:	18fb      	adds	r3, r7, r3
 800af06:	7819      	ldrb	r1, [r3, #0]
 800af08:	002b      	movs	r3, r5
 800af0a:	f7f8 fac7 	bl	800349c <HAL_PCD_EP_Receive>
 800af0e:	0003      	movs	r3, r0
 800af10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af12:	2516      	movs	r5, #22
 800af14:	197c      	adds	r4, r7, r5
 800af16:	19bb      	adds	r3, r7, r6
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	0018      	movs	r0, r3
 800af1c:	f000 f823 	bl	800af66 <USBD_Get_USB_Status>
 800af20:	0003      	movs	r3, r0
 800af22:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800af24:	197b      	adds	r3, r7, r5
 800af26:	781b      	ldrb	r3, [r3, #0]
}
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b007      	add	sp, #28
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800af38:	4b02      	ldr	r3, [pc, #8]	@ (800af44 <USBD_static_malloc+0x14>)
}
 800af3a:	0018      	movs	r0, r3
 800af3c:	46bd      	mov	sp, r7
 800af3e:	b002      	add	sp, #8
 800af40:	bd80      	pop	{r7, pc}
 800af42:	46c0      	nop			@ (mov r8, r8)
 800af44:	2000112c 	.word	0x2000112c

0800af48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

}
 800af50:	46c0      	nop			@ (mov r8, r8)
 800af52:	46bd      	mov	sp, r7
 800af54:	b002      	add	sp, #8
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af5c:	f7f6 faab 	bl	80014b6 <SystemClock_Config>
}
 800af60:	46c0      	nop			@ (mov r8, r8)
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	0002      	movs	r2, r0
 800af6e:	1dfb      	adds	r3, r7, #7
 800af70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af72:	230f      	movs	r3, #15
 800af74:	18fb      	adds	r3, r7, r3
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800af7a:	1dfb      	adds	r3, r7, #7
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d017      	beq.n	800afb2 <USBD_Get_USB_Status+0x4c>
 800af82:	dc1b      	bgt.n	800afbc <USBD_Get_USB_Status+0x56>
 800af84:	2b02      	cmp	r3, #2
 800af86:	d00f      	beq.n	800afa8 <USBD_Get_USB_Status+0x42>
 800af88:	dc18      	bgt.n	800afbc <USBD_Get_USB_Status+0x56>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <USBD_Get_USB_Status+0x2e>
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d005      	beq.n	800af9e <USBD_Get_USB_Status+0x38>
 800af92:	e013      	b.n	800afbc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af94:	230f      	movs	r3, #15
 800af96:	18fb      	adds	r3, r7, r3
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
    break;
 800af9c:	e013      	b.n	800afc6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af9e:	230f      	movs	r3, #15
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	2202      	movs	r2, #2
 800afa4:	701a      	strb	r2, [r3, #0]
    break;
 800afa6:	e00e      	b.n	800afc6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afa8:	230f      	movs	r3, #15
 800afaa:	18fb      	adds	r3, r7, r3
 800afac:	2201      	movs	r2, #1
 800afae:	701a      	strb	r2, [r3, #0]
    break;
 800afb0:	e009      	b.n	800afc6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afb2:	230f      	movs	r3, #15
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	2202      	movs	r2, #2
 800afb8:	701a      	strb	r2, [r3, #0]
    break;
 800afba:	e004      	b.n	800afc6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800afbc:	230f      	movs	r3, #15
 800afbe:	18fb      	adds	r3, r7, r3
 800afc0:	2202      	movs	r2, #2
 800afc2:	701a      	strb	r2, [r3, #0]
    break;
 800afc4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800afc6:	230f      	movs	r3, #15
 800afc8:	18fb      	adds	r3, r7, r3
 800afca:	781b      	ldrb	r3, [r3, #0]
}
 800afcc:	0018      	movs	r0, r3
 800afce:	46bd      	mov	sp, r7
 800afd0:	b004      	add	sp, #16
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <memset>:
 800afd4:	0003      	movs	r3, r0
 800afd6:	1882      	adds	r2, r0, r2
 800afd8:	4293      	cmp	r3, r2
 800afda:	d100      	bne.n	800afde <memset+0xa>
 800afdc:	4770      	bx	lr
 800afde:	7019      	strb	r1, [r3, #0]
 800afe0:	3301      	adds	r3, #1
 800afe2:	e7f9      	b.n	800afd8 <memset+0x4>

0800afe4 <__libc_init_array>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	2600      	movs	r6, #0
 800afe8:	4c0c      	ldr	r4, [pc, #48]	@ (800b01c <__libc_init_array+0x38>)
 800afea:	4d0d      	ldr	r5, [pc, #52]	@ (800b020 <__libc_init_array+0x3c>)
 800afec:	1b64      	subs	r4, r4, r5
 800afee:	10a4      	asrs	r4, r4, #2
 800aff0:	42a6      	cmp	r6, r4
 800aff2:	d109      	bne.n	800b008 <__libc_init_array+0x24>
 800aff4:	2600      	movs	r6, #0
 800aff6:	f000 f823 	bl	800b040 <_init>
 800affa:	4c0a      	ldr	r4, [pc, #40]	@ (800b024 <__libc_init_array+0x40>)
 800affc:	4d0a      	ldr	r5, [pc, #40]	@ (800b028 <__libc_init_array+0x44>)
 800affe:	1b64      	subs	r4, r4, r5
 800b000:	10a4      	asrs	r4, r4, #2
 800b002:	42a6      	cmp	r6, r4
 800b004:	d105      	bne.n	800b012 <__libc_init_array+0x2e>
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	00b3      	lsls	r3, r6, #2
 800b00a:	58eb      	ldr	r3, [r5, r3]
 800b00c:	4798      	blx	r3
 800b00e:	3601      	adds	r6, #1
 800b010:	e7ee      	b.n	800aff0 <__libc_init_array+0xc>
 800b012:	00b3      	lsls	r3, r6, #2
 800b014:	58eb      	ldr	r3, [r5, r3]
 800b016:	4798      	blx	r3
 800b018:	3601      	adds	r6, #1
 800b01a:	e7f2      	b.n	800b002 <__libc_init_array+0x1e>
 800b01c:	0800b1f0 	.word	0x0800b1f0
 800b020:	0800b1f0 	.word	0x0800b1f0
 800b024:	0800b1f4 	.word	0x0800b1f4
 800b028:	0800b1f0 	.word	0x0800b1f0

0800b02c <memcpy>:
 800b02c:	2300      	movs	r3, #0
 800b02e:	b510      	push	{r4, lr}
 800b030:	429a      	cmp	r2, r3
 800b032:	d100      	bne.n	800b036 <memcpy+0xa>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	5ccc      	ldrb	r4, [r1, r3]
 800b038:	54c4      	strb	r4, [r0, r3]
 800b03a:	3301      	adds	r3, #1
 800b03c:	e7f8      	b.n	800b030 <memcpy+0x4>
	...

0800b040 <_init>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	46c0      	nop			@ (mov r8, r8)
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr

0800b04c <_fini>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	46c0      	nop			@ (mov r8, r8)
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr
