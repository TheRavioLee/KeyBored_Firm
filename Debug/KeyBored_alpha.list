
KeyBored_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a390  0800a390  0000b390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f4  0800a4f4  0000c2ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a4f4  0800a4f4  0000c2ac  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a4f4  0800a4f4  0000c2ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0000b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ac  20000000  0800a4fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  200002ac  0800a7a8  0000c2ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  0800a7a8  0000cdac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c2ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d72  00000000  00000000  0000c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee3  00000000  00000000  0001f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  00024120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbe9  00000000  00000000  00024e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001998e  00000000  00000000  00042a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a41e  00000000  00000000  0005c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f682e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  000f6874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fa530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002ac 	.word	0x200002ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a378 	.word	0x0800a378

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002b0 	.word	0x200002b0
 8000104:	0800a378 	.word	0x0800a378

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ProcessusKeys_Init>:

//Fonctions privees
void Process_KEYS(void);

void ProcessusKeys_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[PROCESSUS_KEYS_PHASE] = Process_KEYS;
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <ProcessusKeys_Init+0x10>)
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <ProcessusKeys_Init+0x14>)
 8000228:	609a      	str	r2, [r3, #8]
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200002e8 	.word	0x200002e8
 8000234:	08000239 	.word	0x08000239

08000238 <Process_KEYS>:

void Process_KEYS(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	static bool wasActionDone = false;
	static uint8_t i = 0;
	static uint8_t last_key;

	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e028      	b.n	8000296 <Process_KEYS+0x5e>
	{
		if(key_map[key_index]->state == PRESSED && wasActionDone == false)
 8000244:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <Process_KEYS+0x94>)
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	58d3      	ldr	r3, [r2, r3]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b02      	cmp	r3, #2
 8000250:	d11e      	bne.n	8000290 <Process_KEYS+0x58>
 8000252:	4b1f      	ldr	r3, [pc, #124]	@ (80002d0 <Process_KEYS+0x98>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2201      	movs	r2, #1
 8000258:	4053      	eors	r3, r2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d017      	beq.n	8000290 <Process_KEYS+0x58>
		{
			i++;
 8000260:	4b1c      	ldr	r3, [pc, #112]	@ (80002d4 <Process_KEYS+0x9c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	b2da      	uxtb	r2, r3
 8000268:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <Process_KEYS+0x9c>)
 800026a:	701a      	strb	r2, [r3, #0]
			if(i > 11) { i = 0; }
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <Process_KEYS+0x9c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b0b      	cmp	r3, #11
 8000272:	d902      	bls.n	800027a <Process_KEYS+0x42>
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <Process_KEYS+0x9c>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
			leds.position = key_index;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <Process_KEYS+0xa0>)
 8000280:	70da      	strb	r2, [r3, #3]
//			leds.phase = phase_table[i];
//			leds.hue = hue_table[i];

			wasActionDone = true;
 8000282:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <Process_KEYS+0x98>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
			last_key = key_index;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b13      	ldr	r3, [pc, #76]	@ (80002dc <Process_KEYS+0xa4>)
 800028e:	701a      	strb	r2, [r3, #0]
	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b3f      	cmp	r3, #63	@ 0x3f
 800029a:	ddd3      	ble.n	8000244 <Process_KEYS+0xc>
		}
	}

	if(key_map[last_key]->state == IDLE && wasActionDone == true)
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <Process_KEYS+0xa4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	001a      	movs	r2, r3
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <Process_KEYS+0x94>)
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	58d3      	ldr	r3, [r2, r3]
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d109      	bne.n	80002c2 <Process_KEYS+0x8a>
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <Process_KEYS+0x98>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d005      	beq.n	80002c2 <Process_KEYS+0x8a>
	{
		wasActionDone = false;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <Process_KEYS+0x98>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
		leds.position = 65;
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <Process_KEYS+0xa0>)
 80002be:	2241      	movs	r2, #65	@ 0x41
 80002c0:	70da      	strb	r2, [r3, #3]
	}

}
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	20000000 	.word	0x20000000
 80002d0:	200002c8 	.word	0x200002c8
 80002d4:	200002c9 	.word	0x200002c9
 80002d8:	200002e0 	.word	0x200002e0
 80002dc:	200002ca 	.word	0x200002ca

080002e0 <Process_LEDS>:

//Fonctions privees
void Process_LEDS(void);

void Process_LEDS(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	static uint8_t compteur_LEDS;

	compteur_LEDS++;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <Process_LEDS+0x38>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <Process_LEDS+0x38>)
 80002ee:	701a      	strb	r2, [r3, #0]

	if(compteur_LEDS > 30)//update 30ms = ~30fps
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <Process_LEDS+0x38>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b1e      	cmp	r3, #30
 80002f6:	d90b      	bls.n	8000310 <Process_LEDS+0x30>
	{
		Processus_LEDS_execute[leds.phase](leds);
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <Process_LEDS+0x3c>)
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	001a      	movs	r2, r3
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <Process_LEDS+0x40>)
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	58d2      	ldr	r2, [r2, r3]
 8000304:	4b05      	ldr	r3, [pc, #20]	@ (800031c <Process_LEDS+0x3c>)
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	4790      	blx	r2
		compteur_LEDS = 0;
 800030a:	4b03      	ldr	r3, [pc, #12]	@ (8000318 <Process_LEDS+0x38>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
	}
}
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	200002e4 	.word	0x200002e4
 800031c:	200002e0 	.word	0x200002e0
 8000320:	200002cc 	.word	0x200002cc

08000324 <ProcessusLEDS_init>:

LEDS leds;

//Fonctions publiques
void ProcessusLEDS_init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  serviceBaseDeTemps_execute[PROCESSUS_LEDS_PHASE] = Process_LEDS;
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <ProcessusLEDS_init+0x48>)
 800032a:	4a11      	ldr	r2, [pc, #68]	@ (8000370 <ProcessusLEDS_init+0x4c>)
 800032c:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_RAINBOW_PHASE] = effet_Rainbow;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <ProcessusLEDS_init+0x50>)
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <ProcessusLEDS_init+0x54>)
 8000332:	601a      	str	r2, [r3, #0]
  Processus_LEDS_execute[LEDS_BREATHING_PHASE] = effet_Breathing;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <ProcessusLEDS_init+0x50>)
 8000336:	4a11      	ldr	r2, [pc, #68]	@ (800037c <ProcessusLEDS_init+0x58>)
 8000338:	605a      	str	r2, [r3, #4]
  Processus_LEDS_execute[LEDS_STATIC_PHASE] = effet_StaticColor;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <ProcessusLEDS_init+0x50>)
 800033c:	4a10      	ldr	r2, [pc, #64]	@ (8000380 <ProcessusLEDS_init+0x5c>)
 800033e:	609a      	str	r2, [r3, #8]
  Processus_LEDS_execute[LEDS_RAINBOW_BREATHING_PHASE] = effet_Rainbow_Breathing;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <ProcessusLEDS_init+0x50>)
 8000342:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <ProcessusLEDS_init+0x60>)
 8000344:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_KEY_RESPONSE_PHASE] = effet_Key_Responsive;
 8000346:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <ProcessusLEDS_init+0x50>)
 8000348:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <ProcessusLEDS_init+0x64>)
 800034a:	611a      	str	r2, [r3, #16]
  leds.hue = RED_HUE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <ProcessusLEDS_init+0x68>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
  leds.phase = LEDS_KEY_RESPONSE_PHASE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <ProcessusLEDS_init+0x68>)
 8000354:	2204      	movs	r2, #4
 8000356:	709a      	strb	r2, [r3, #2]
  leds.brightness = MAX_BRIGHTNESS;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <ProcessusLEDS_init+0x68>)
 800035a:	2278      	movs	r2, #120	@ 0x78
 800035c:	705a      	strb	r2, [r3, #1]
  leds.position = 65;
 800035e:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <ProcessusLEDS_init+0x68>)
 8000360:	2241      	movs	r2, #65	@ 0x41
 8000362:	70da      	strb	r2, [r3, #3]
}
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	200002e8 	.word	0x200002e8
 8000370:	080002e1 	.word	0x080002e1
 8000374:	200002cc 	.word	0x200002cc
 8000378:	08000861 	.word	0x08000861
 800037c:	08000911 	.word	0x08000911
 8000380:	08000b99 	.word	0x08000b99
 8000384:	080009ad 	.word	0x080009ad
 8000388:	08000aa1 	.word	0x08000aa1
 800038c:	200002e0 	.word	0x200002e0

08000390 <serviceBaseDeTemps_gere>:
//Definitions de variables privees:
//pas de variables privees

//Definitions de fonctions privees:
void serviceBaseDeTemps_gere(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
 800039c:	e00a      	b.n	80003b4 <serviceBaseDeTemps_gere+0x24>
  {
    serviceBaseDeTemps_execute[i]();
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <serviceBaseDeTemps_gere+0x38>)
 80003a4:	0092      	lsls	r2, r2, #2
 80003a6:	58d3      	ldr	r3, [r2, r3]
 80003a8:	4798      	blx	r3
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	781a      	ldrb	r2, [r3, #0]
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	3201      	adds	r2, #1
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d9f0      	bls.n	800039e <serviceBaseDeTemps_gere+0xe>
  }
}
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	200002e8 	.word	0x200002e8

080003cc <serviceBaseDeTemps_initialise>:
//Definitions de variables publiques:
void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);

//Definitions de fonctions publiques:
void serviceBaseDeTemps_initialise(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e00a      	b.n	80003f0 <serviceBaseDeTemps_initialise+0x24>
  {
    serviceBaseDeTemps_execute[i] = doNothing;
 80003da:	1dfb      	adds	r3, r7, #7
 80003dc:	781a      	ldrb	r2, [r3, #0]
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <serviceBaseDeTemps_initialise+0x3c>)
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	490a      	ldr	r1, [pc, #40]	@ (800040c <serviceBaseDeTemps_initialise+0x40>)
 80003e4:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	3201      	adds	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
 80003f0:	1dfb      	adds	r3, r7, #7
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d9f0      	bls.n	80003da <serviceBaseDeTemps_initialise+0xe>
  }
  piloteTimer14_execute = serviceBaseDeTemps_gere;
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <serviceBaseDeTemps_initialise+0x44>)
 80003fa:	4a06      	ldr	r2, [pc, #24]	@ (8000414 <serviceBaseDeTemps_initialise+0x48>)
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	200002e8 	.word	0x200002e8
 800040c:	08000bfb 	.word	0x08000bfb
 8000410:	200005e0 	.word	0x200005e0
 8000414:	08000391 	.word	0x08000391

08000418 <Debounce_Switch_Matrix>:


KeyState matriceDebouncing[NUM_ROWS][NUM_COLS];

//Definitions fonctions publiques
void Debounce_Switch_Matrix(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++) {
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e07e      	b.n	8000522 <Debounce_Switch_Matrix+0x10a>
        for (int col = 0; col < NUM_COLS; col++) {
 8000424:	2300      	movs	r3, #0
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	e075      	b.n	8000516 <Debounce_Switch_Matrix+0xfe>
            bool physicalState = matrice[row][col];
 800042a:	1df9      	adds	r1, r7, #7
 800042c:	4841      	ldr	r0, [pc, #260]	@ (8000534 <Debounce_Switch_Matrix+0x11c>)
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	0013      	movs	r3, r2
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	18c2      	adds	r2, r0, r3
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	18d3      	adds	r3, r2, r3
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	700b      	strb	r3, [r1, #0]
            KeyState *key = &matriceDebouncing[row][col];
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	0013      	movs	r3, r2
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	189b      	adds	r3, r3, r2
 8000450:	005a      	lsls	r2, r3, #1
 8000452:	4b39      	ldr	r3, [pc, #228]	@ (8000538 <Debounce_Switch_Matrix+0x120>)
 8000454:	18d3      	adds	r3, r2, r3
 8000456:	603b      	str	r3, [r7, #0]

            switch (key->state) {
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d037      	beq.n	80004d0 <Debounce_Switch_Matrix+0xb8>
 8000460:	dc56      	bgt.n	8000510 <Debounce_Switch_Matrix+0xf8>
 8000462:	2b02      	cmp	r3, #2
 8000464:	d026      	beq.n	80004b4 <Debounce_Switch_Matrix+0x9c>
 8000466:	dc53      	bgt.n	8000510 <Debounce_Switch_Matrix+0xf8>
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <Debounce_Switch_Matrix+0x5a>
 800046c:	2b01      	cmp	r3, #1
 800046e:	d00b      	beq.n	8000488 <Debounce_Switch_Matrix+0x70>
 8000470:	e04e      	b.n	8000510 <Debounce_Switch_Matrix+0xf8>
                case IDLE:
                    if (physicalState) {
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d043      	beq.n	8000502 <Debounce_Switch_Matrix+0xea>
                        key->state = BOUNCE_PRESS;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	2201      	movs	r2, #1
 800047e:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 8000486:	e03c      	b.n	8000502 <Debounce_Switch_Matrix+0xea>
                case BOUNCE_PRESS:
                    if (physicalState) {
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00d      	beq.n	80004ac <Debounce_Switch_Matrix+0x94>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	3301      	adds	r3, #1
 8000496:	b2da      	uxtb	r2, r3
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	705a      	strb	r2, [r3, #1]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d930      	bls.n	8000506 <Debounce_Switch_Matrix+0xee>
                            key->state = PRESSED;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	2202      	movs	r2, #2
 80004a8:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = IDLE;
                    }
                    break;
 80004aa:	e02c      	b.n	8000506 <Debounce_Switch_Matrix+0xee>
                        key->state = IDLE;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
                    break;
 80004b2:	e028      	b.n	8000506 <Debounce_Switch_Matrix+0xee>
                case PRESSED:
                    if (!physicalState) {
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2201      	movs	r2, #1
 80004ba:	4053      	eors	r3, r2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d023      	beq.n	800050a <Debounce_Switch_Matrix+0xf2>
                        key->state = BOUNCE_RELEASE;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2203      	movs	r2, #3
 80004c6:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	2200      	movs	r2, #0
 80004cc:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 80004ce:	e01c      	b.n	800050a <Debounce_Switch_Matrix+0xf2>
                case BOUNCE_RELEASE:
                    if (!physicalState) {
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2201      	movs	r2, #1
 80004d6:	4053      	eors	r3, r2
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00d      	beq.n	80004fa <Debounce_Switch_Matrix+0xe2>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	785b      	ldrb	r3, [r3, #1]
 80004e2:	3301      	adds	r3, #1
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	705a      	strb	r2, [r3, #1]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	785b      	ldrb	r3, [r3, #1]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d90d      	bls.n	800050e <Debounce_Switch_Matrix+0xf6>
                            key->state = IDLE;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = PRESSED;
                    }
                    break;
 80004f8:	e009      	b.n	800050e <Debounce_Switch_Matrix+0xf6>
                        key->state = PRESSED;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2202      	movs	r2, #2
 80004fe:	701a      	strb	r2, [r3, #0]
                    break;
 8000500:	e005      	b.n	800050e <Debounce_Switch_Matrix+0xf6>
                    break;
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	e004      	b.n	8000510 <Debounce_Switch_Matrix+0xf8>
                    break;
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	e002      	b.n	8000510 <Debounce_Switch_Matrix+0xf8>
                    break;
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	e000      	b.n	8000510 <Debounce_Switch_Matrix+0xf8>
                    break;
 800050e:	46c0      	nop			@ (mov r8, r8)
        for (int col = 0; col < NUM_COLS; col++) {
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3301      	adds	r3, #1
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b0d      	cmp	r3, #13
 800051a:	dd86      	ble.n	800042a <Debounce_Switch_Matrix+0x12>
    for (int row = 0; row < NUM_ROWS; row++) {
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2b04      	cmp	r3, #4
 8000526:	dc00      	bgt.n	800052a <Debounce_Switch_Matrix+0x112>
 8000528:	e77c      	b.n	8000424 <Debounce_Switch_Matrix+0xc>
            }
        }
    }
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b004      	add	sp, #16
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000384 	.word	0x20000384
 8000538:	200002f8 	.word	0x200002f8

0800053c <InterfaceDebouncing_Init>:

void InterfaceDebouncing_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[DEBOUNCE_MATRICE_PHASE] = Debounce_Switch_Matrix;
 8000540:	4b02      	ldr	r3, [pc, #8]	@ (800054c <InterfaceDebouncing_Init+0x10>)
 8000542:	4a03      	ldr	r2, [pc, #12]	@ (8000550 <InterfaceDebouncing_Init+0x14>)
 8000544:	605a      	str	r2, [r3, #4]
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200002e8 	.word	0x200002e8
 8000550:	08000419 	.word	0x08000419

08000554 <ScanMatrice>:
#include "ServiceBaseTemps_1ms.h"

bool matrice[NUM_ROWS][NUM_COLS];

void ScanMatrice(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	Set_All_Rows();
 800055a:	f000 fd95 	bl	8001088 <Set_All_Rows>

	for (int row = 0; row < NUM_ROWS; row++)
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e030      	b.n	80005c6 <ScanMatrice+0x72>
	{
		Reset_Row(row);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	b29b      	uxth	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fd75 	bl	8001058 <Reset_Row>

		for(int col = 0; col < NUM_COLS; col++)
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	e01d      	b.n	80005b0 <ScanMatrice+0x5c>
		{
			matrice[row][col] = (Read_Col(col) == 0) ? 1 : 0;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fd39 	bl	8000ff0 <Read_Col>
 800057e:	0003      	movs	r3, r0
 8000580:	1e5a      	subs	r2, r3, #1
 8000582:	4193      	sbcs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2201      	movs	r2, #1
 8000588:	4053      	eors	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	1c1a      	adds	r2, r3, #0
 800058e:	2301      	movs	r3, #1
 8000590:	4013      	ands	r3, r2
 8000592:	b2d8      	uxtb	r0, r3
 8000594:	4910      	ldr	r1, [pc, #64]	@ (80005d8 <ScanMatrice+0x84>)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	0013      	movs	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	18ca      	adds	r2, r1, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	18d3      	adds	r3, r2, r3
 80005a6:	1c02      	adds	r2, r0, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		for(int col = 0; col < NUM_COLS; col++)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b0d      	cmp	r3, #13
 80005b4:	ddde      	ble.n	8000574 <ScanMatrice+0x20>
		}

		Set_Row(row);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fd34 	bl	8001028 <Set_Row>
	for (int row = 0; row < NUM_ROWS; row++)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	ddcb      	ble.n	8000564 <ScanMatrice+0x10>
	}
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	20000384 	.word	0x20000384

080005dc <InterfaceMatrice_Init>:

void InterfaceMatrice_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[SCAN_MATRICE_PHASE] = ScanMatrice;
 80005e0:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <InterfaceMatrice_Init+0x10>)
 80005e2:	4a03      	ldr	r2, [pc, #12]	@ (80005f0 <InterfaceMatrice_Init+0x14>)
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200002e8 	.word	0x200002e8
 80005f0:	08000555 	.word	0x08000555

080005f4 <hsl_to_rgb>:
  55, 56, 57, 58, 59, 60, 61, 62, 63
};


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0004      	movs	r4, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	0011      	movs	r1, r2
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	1c22      	adds	r2, r4, #0
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	1dbb      	adds	r3, r7, #6
 8000608:	1c02      	adds	r2, r0, #0
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	1d7b      	adds	r3, r7, #5
 800060e:	1c0a      	adds	r2, r1, #0
 8000610:	701a      	strb	r2, [r3, #0]
	if(l == 0) return 0;
 8000612:	1d7b      	adds	r3, r7, #5
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <hsl_to_rgb+0x2a>
 800061a:	2300      	movs	r3, #0
 800061c:	e119      	b.n	8000852 <hsl_to_rgb+0x25e>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b29b      	uxth	r3, r3
 8000624:	3301      	adds	r3, #1
 8000626:	b29a      	uxth	r2, r3
 8000628:	210c      	movs	r1, #12
 800062a:	187b      	adds	r3, r7, r1
 800062c:	801a      	strh	r2, [r3, #0]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800062e:	1d7b      	adds	r3, r7, #5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0c      	blt.n	8000652 <hsl_to_rgb+0x5e>
 8000638:	187b      	adds	r3, r7, r1
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b29b      	uxth	r3, r3
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	1dba      	adds	r2, r7, #6
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	4353      	muls	r3, r2
 8000646:	121b      	asrs	r3, r3, #8
 8000648:	b2da      	uxtb	r2, r3
 800064a:	2313      	movs	r3, #19
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e00f      	b.n	8000672 <hsl_to_rgb+0x7e>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000652:	230c      	movs	r3, #12
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	1dba      	adds	r2, r7, #6
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	4353      	muls	r3, r2
 8000668:	121b      	asrs	r3, r3, #8
 800066a:	b2da      	uxtb	r2, r3
 800066c:	2313      	movs	r3, #19
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	701a      	strb	r2, [r3, #0]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	1c1a      	adds	r2, r3, #0
 800067a:	1c13      	adds	r3, r2, #0
 800067c:	18db      	adds	r3, r3, r3
 800067e:	189b      	adds	r3, r3, r2
 8000680:	18db      	adds	r3, r3, r3
 8000682:	b29a      	uxth	r2, r3
 8000684:	210a      	movs	r1, #10
 8000686:	187b      	adds	r3, r7, r1
 8000688:	801a      	strh	r2, [r3, #0]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 800068a:	187b      	adds	r3, r7, r1
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	2014      	movs	r0, #20
 8000694:	183b      	adds	r3, r7, r0
 8000696:	701a      	strb	r2, [r3, #0]
	h1 = lo + 1;
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	200e      	movs	r0, #14
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	801a      	strh	r2, [r3, #0]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	001a      	movs	r2, r3
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4013      	ands	r3, r2
 80006b6:	d10e      	bne.n	80006d6 <hsl_to_rgb+0xe2>
 80006b8:	183b      	adds	r3, r7, r0
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	001a      	movs	r2, r3
 80006c0:	2313      	movs	r3, #19
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4353      	muls	r3, r2
 80006ca:	121b      	asrs	r3, r3, #8
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	2312      	movs	r3, #18
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	e011      	b.n	80006fa <hsl_to_rgb+0x106>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 80006d6:	230e      	movs	r3, #14
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	001a      	movs	r2, r3
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2213      	movs	r2, #19
 80006e8:	18ba      	adds	r2, r7, r2
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	4353      	muls	r3, r2
 80006f0:	121b      	asrs	r3, r3, #8
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	2312      	movs	r3, #18
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	701a      	strb	r2, [r3, #0]

	m = l - (c >> 1);
 80006fa:	2313      	movs	r3, #19
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	1d7a      	adds	r2, r7, #5
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	2311      	movs	r3, #17
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	701a      	strb	r2, [r3, #0]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000714:	230a      	movs	r3, #10
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	b29b      	uxth	r3, r3
 8000720:	2b04      	cmp	r3, #4
 8000722:	d863      	bhi.n	80007ec <hsl_to_rgb+0x1f8>
 8000724:	009a      	lsls	r2, r3, #2
 8000726:	4b4d      	ldr	r3, [pc, #308]	@ (800085c <hsl_to_rgb+0x268>)
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	469f      	mov	pc, r3
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 800072e:	2313      	movs	r3, #19
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	2317      	movs	r3, #23
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	2312      	movs	r3, #18
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	2316      	movs	r3, #22
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	2315      	movs	r3, #21
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e05e      	b.n	8000812 <hsl_to_rgb+0x21e>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000754:	2312      	movs	r3, #18
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	2317      	movs	r3, #23
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	2313      	movs	r3, #19
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	2316      	movs	r3, #22
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	2315      	movs	r3, #21
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e04b      	b.n	8000812 <hsl_to_rgb+0x21e>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800077a:	2317      	movs	r3, #23
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	2313      	movs	r3, #19
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	2316      	movs	r3, #22
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	2312      	movs	r3, #18
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	2315      	movs	r3, #21
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e038      	b.n	8000812 <hsl_to_rgb+0x21e>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80007a0:	2317      	movs	r3, #23
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	2312      	movs	r3, #18
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	2316      	movs	r3, #22
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	2313      	movs	r3, #19
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	2315      	movs	r3, #21
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e025      	b.n	8000812 <hsl_to_rgb+0x21e>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80007c6:	2312      	movs	r3, #18
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	2317      	movs	r3, #23
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	2316      	movs	r3, #22
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	2313      	movs	r3, #19
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	2315      	movs	r3, #21
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e012      	b.n	8000812 <hsl_to_rgb+0x21e>
	 default: r = c; g = 0; b = x; break; // M to R
 80007ec:	2313      	movs	r3, #19
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	2317      	movs	r3, #23
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	2316      	movs	r3, #22
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	2312      	movs	r3, #18
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	2315      	movs	r3, #21
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	46c0      	nop			@ (mov r8, r8)
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8000812:	2317      	movs	r3, #23
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	001a      	movs	r2, r3
 800081c:	2011      	movs	r0, #17
 800081e:	183b      	adds	r3, r7, r0
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	041a      	lsls	r2, r3, #16
 8000828:	2316      	movs	r3, #22
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	0019      	movs	r1, r3
 8000832:	183b      	adds	r3, r7, r0
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	18cb      	adds	r3, r1, r3
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	431a      	orrs	r2, r3
 800083e:	2315      	movs	r3, #21
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	0019      	movs	r1, r3
 8000848:	183b      	adds	r3, r7, r0
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	18cb      	adds	r3, r1, r3
 8000850:	4313      	orrs	r3, r2
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b007      	add	sp, #28
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	0800a420 	.word	0x0800a420

08000860 <effet_Rainbow>:


void effet_Rainbow(LEDS led_param)
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	6018      	str	r0, [r3, #0]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	2212      	movs	r2, #18
 8000870:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e031      	b.n	80008e0 <effet_Rainbow+0x80>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 800087c:	250f      	movs	r5, #15
 800087e:	197b      	adds	r3, r7, r5
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	260d      	movs	r6, #13
 8000884:	19bb      	adds	r3, r7, r6
 8000886:	4920      	ldr	r1, [pc, #128]	@ (8000908 <effet_Rainbow+0xa8>)
 8000888:	5c8a      	ldrb	r2, [r1, r2]
 800088a:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, led_param.brightness);
 800088c:	197b      	adds	r3, r7, r5
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	223f      	movs	r2, #63	@ 0x3f
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	220e      	movs	r2, #14
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	4353      	muls	r3, r2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <effet_Rainbow+0xac>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	b2d8      	uxtb	r0, r3
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	001a      	movs	r2, r3
 80008b2:	21ff      	movs	r1, #255	@ 0xff
 80008b4:	f7ff fe9e 	bl	80005f4 <hsl_to_rgb>
 80008b8:	0003      	movs	r3, r0
 80008ba:	60bb      	str	r3, [r7, #8]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	0c1b      	lsrs	r3, r3, #16
 80008c0:	b2d9      	uxtb	r1, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	b2dc      	uxtb	r4, r3
 80008cc:	19bb      	adds	r3, r7, r6
 80008ce:	7818      	ldrb	r0, [r3, #0]
 80008d0:	0023      	movs	r3, r4
 80008d2:	f000 fc03 	bl	80010dc <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 80008d6:	197b      	adds	r3, r7, r5
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	197b      	adds	r3, r7, r5
 80008dc:	3201      	adds	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80008e8:	d9c8      	bls.n	800087c <effet_Rainbow+0x1c>
	}

	// Write to LED
	++angle;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <effet_Rainbow+0xac>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <effet_Rainbow+0xac>)
 80008fa:	701a      	strb	r2, [r3, #0]
	led_render();
 80008fc:	f000 fc58 	bl	80011b0 <led_render>
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b005      	add	sp, #20
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	0800a3e0 	.word	0x0800a3e0
 800090c:	200003ca 	.word	0x200003ca

08000910 <effet_Breathing>:


void effet_Breathing(LEDS led_param)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	6018      	str	r0, [r3, #0]
    static uint8_t current_brightness = 0;
    static int8_t direction = 1;

    // Adjust brightness
    current_brightness += direction;
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <effet_Breathing+0x94>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <effet_Breathing+0x98>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	18d3      	adds	r3, r2, r3
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <effet_Breathing+0x94>)
 800092c:	701a      	strb	r2, [r3, #0]
    if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <effet_Breathing+0x94>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <effet_Breathing+0x32>
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	785a      	ldrb	r2, [r3, #1]
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <effet_Breathing+0x94>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d108      	bne.n	8000954 <effet_Breathing+0x44>
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <effet_Breathing+0x98>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	425b      	negs	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	b25a      	sxtb	r2, r3
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <effet_Breathing+0x98>)
 8000952:	701a      	strb	r2, [r3, #0]

    // Set all LEDs to the same color with fading
    uint32_t rgb = hsl_to_rgb(led_param.hue, 255, current_brightness); // Static hue
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	7818      	ldrb	r0, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <effet_Breathing+0x94>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	001a      	movs	r2, r3
 800095e:	21ff      	movs	r1, #255	@ 0xff
 8000960:	f7ff fe48 	bl	80005f4 <hsl_to_rgb>
 8000964:	0003      	movs	r3, r0
 8000966:	60fb      	str	r3, [r7, #12]
    uint8_t r = (rgb >> 16) & 0xFF;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	0c1a      	lsrs	r2, r3, #16
 800096c:	200b      	movs	r0, #11
 800096e:	183b      	adds	r3, r7, r0
 8000970:	701a      	strb	r2, [r3, #0]
    uint8_t g = (rgb >> 8) & 0xFF;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	0a1a      	lsrs	r2, r3, #8
 8000976:	210a      	movs	r1, #10
 8000978:	187b      	adds	r3, r7, r1
 800097a:	701a      	strb	r2, [r3, #0]
    uint8_t b = rgb & 0xFF;
 800097c:	2409      	movs	r4, #9
 800097e:	193b      	adds	r3, r7, r4
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	701a      	strb	r2, [r3, #0]

    led_set_all_RGB(r, g, b);
 8000984:	193b      	adds	r3, r7, r4
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	187b      	adds	r3, r7, r1
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	183b      	adds	r3, r7, r0
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fbe5 	bl	8001160 <led_set_all_RGB>
    led_render();
 8000996:	f000 fc0b 	bl	80011b0 <led_render>
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b005      	add	sp, #20
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	200003cb 	.word	0x200003cb
 80009a8:	20000100 	.word	0x20000100

080009ac <effet_Rainbow_Breathing>:


void effet_Rainbow_Breathing(LEDS led_param)
{
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	6018      	str	r0, [r3, #0]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 80009b6:	230e      	movs	r3, #14
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	2212      	movs	r2, #18
 80009bc:	701a      	strb	r2, [r3, #0]

	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <effet_Rainbow_Breathing+0xe4>)
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <effet_Rainbow_Breathing+0xe8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <effet_Rainbow_Breathing+0xe4>)
 80009d0:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 80009d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a90 <effet_Rainbow_Breathing+0xe4>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <effet_Rainbow_Breathing+0x3a>
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	785a      	ldrb	r2, [r3, #1]
 80009de:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <effet_Rainbow_Breathing+0xe4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d108      	bne.n	80009f8 <effet_Rainbow_Breathing+0x4c>
 80009e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <effet_Rainbow_Breathing+0xe8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	425b      	negs	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <effet_Rainbow_Breathing+0xe8>)
 80009f6:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 80009f8:	230f      	movs	r3, #15
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e031      	b.n	8000a66 <effet_Rainbow_Breathing+0xba>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 8000a02:	250f      	movs	r5, #15
 8000a04:	197b      	adds	r3, r7, r5
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	260d      	movs	r6, #13
 8000a0a:	19bb      	adds	r3, r7, r6
 8000a0c:	4922      	ldr	r1, [pc, #136]	@ (8000a98 <effet_Rainbow_Breathing+0xec>)
 8000a0e:	5c8a      	ldrb	r2, [r1, r2]
 8000a10:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, current_brightness);
 8000a12:	197b      	adds	r3, r7, r5
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	223f      	movs	r2, #63	@ 0x3f
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	220e      	movs	r2, #14
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	4353      	muls	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <effet_Rainbow_Breathing+0xf0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	18d3      	adds	r3, r2, r3
 8000a30:	b2d8      	uxtb	r0, r3
 8000a32:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <effet_Rainbow_Breathing+0xe4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	001a      	movs	r2, r3
 8000a38:	21ff      	movs	r1, #255	@ 0xff
 8000a3a:	f7ff fddb 	bl	80005f4 <hsl_to_rgb>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	60bb      	str	r3, [r7, #8]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	0c1b      	lsrs	r3, r3, #16
 8000a46:	b2d9      	uxtb	r1, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	b2dc      	uxtb	r4, r3
 8000a52:	19bb      	adds	r3, r7, r6
 8000a54:	7818      	ldrb	r0, [r3, #0]
 8000a56:	0023      	movs	r3, r4
 8000a58:	f000 fb40 	bl	80010dc <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8000a5c:	197b      	adds	r3, r7, r5
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	197b      	adds	r3, r7, r5
 8000a62:	3201      	adds	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	230f      	movs	r3, #15
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a6e:	d9c8      	bls.n	8000a02 <effet_Rainbow_Breathing+0x56>
	}

	// Write to LED
	++angle;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <effet_Rainbow_Breathing+0xf0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <effet_Rainbow_Breathing+0xf0>)
 8000a80:	701a      	strb	r2, [r3, #0]
	led_render();
 8000a82:	f000 fb95 	bl	80011b0 <led_render>
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b005      	add	sp, #20
 8000a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	200003cc 	.word	0x200003cc
 8000a94:	20000101 	.word	0x20000101
 8000a98:	0800a3e0 	.word	0x0800a3e0
 8000a9c:	200003cd 	.word	0x200003cd

08000aa0 <effet_Key_Responsive>:


void effet_Key_Responsive(LEDS led_param)
{
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	6018      	str	r0, [r3, #0]
	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <effet_Key_Responsive+0xec>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <effet_Key_Responsive+0xf0>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	18d3      	adds	r3, r2, r3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <effet_Key_Responsive+0xec>)
 8000abc:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8000abe:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <effet_Key_Responsive+0xec>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <effet_Key_Responsive+0x32>
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	785a      	ldrb	r2, [r3, #1]
 8000aca:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <effet_Key_Responsive+0xec>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d108      	bne.n	8000ae4 <effet_Key_Responsive+0x44>
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <effet_Key_Responsive+0xf0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	425b      	negs	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <effet_Key_Responsive+0xf0>)
 8000ae2:	701a      	strb	r2, [r3, #0]

	// Set all LEDs to the same color with fading
	uint32_t rgb = hsl_to_rgb(led_param.hue, 255, led_param.brightness); // Static hue
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	7818      	ldrb	r0, [r3, #0]
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	001a      	movs	r2, r3
 8000aee:	21ff      	movs	r1, #255	@ 0xff
 8000af0:	f7ff fd80 	bl	80005f4 <hsl_to_rgb>
 8000af4:	0003      	movs	r3, r0
 8000af6:	613b      	str	r3, [r7, #16]
	uint8_t r = (rgb >> 16) & 0xFF;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	0c1a      	lsrs	r2, r3, #16
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	701a      	strb	r2, [r3, #0]
	uint8_t g = (rgb >> 8) & 0xFF;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	0a1a      	lsrs	r2, r3, #8
 8000b06:	230e      	movs	r3, #14
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	701a      	strb	r2, [r3, #0]
	uint8_t b = rgb & 0xFF;
 8000b0c:	230d      	movs	r3, #13
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < LED_CNT; i++)
 8000b14:	2317      	movs	r3, #23
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e02a      	b.n	8000b74 <effet_Key_Responsive+0xd4>
	{
		uint8_t led_index = led_map[i];
 8000b1e:	2017      	movs	r0, #23
 8000b20:	183b      	adds	r3, r7, r0
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	250c      	movs	r5, #12
 8000b26:	197b      	adds	r3, r7, r5
 8000b28:	491a      	ldr	r1, [pc, #104]	@ (8000b94 <effet_Key_Responsive+0xf4>)
 8000b2a:	5c8a      	ldrb	r2, [r1, r2]
 8000b2c:	701a      	strb	r2, [r3, #0]

		if(led_param.position == i)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	78db      	ldrb	r3, [r3, #3]
 8000b32:	183a      	adds	r2, r7, r0
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10e      	bne.n	8000b58 <effet_Key_Responsive+0xb8>
		{
			led_set_RGB(led_index, r, g, b);
 8000b3a:	230d      	movs	r3, #13
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	781c      	ldrb	r4, [r3, #0]
 8000b40:	230e      	movs	r3, #14
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	230f      	movs	r3, #15
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	7819      	ldrb	r1, [r3, #0]
 8000b4c:	197b      	adds	r3, r7, r5
 8000b4e:	7818      	ldrb	r0, [r3, #0]
 8000b50:	0023      	movs	r3, r4
 8000b52:	f000 fac3 	bl	80010dc <led_set_RGB>
 8000b56:	e007      	b.n	8000b68 <effet_Key_Responsive+0xc8>
		}
		else { led_set_RGB(led_index, 0, 0, 0); }
 8000b58:	230c      	movs	r3, #12
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	7818      	ldrb	r0, [r3, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	f000 faba 	bl	80010dc <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8000b68:	2117      	movs	r1, #23
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	3201      	adds	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	2317      	movs	r3, #23
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b7c:	d9cf      	bls.n	8000b1e <effet_Key_Responsive+0x7e>
	}

	led_render();
 8000b7e:	f000 fb17 	bl	80011b0 <led_render>
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b006      	add	sp, #24
 8000b88:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	200003ce 	.word	0x200003ce
 8000b90:	20000102 	.word	0x20000102
 8000b94:	0800a3e0 	.word	0x0800a3e0

08000b98 <effet_StaticColor>:


void effet_StaticColor(LEDS led_param)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	6018      	str	r0, [r3, #0]
	uint32_t rgb_color = hsl_to_rgb(led_param.hue, 255, led_param.brightness);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	7818      	ldrb	r0, [r3, #0]
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	001a      	movs	r2, r3
 8000bac:	21ff      	movs	r1, #255	@ 0xff
 8000bae:	f7ff fd21 	bl	80005f4 <hsl_to_rgb>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	60fb      	str	r3, [r7, #12]
	led_set_all_RGB((rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f000 faca 	bl	8001160 <led_set_all_RGB>
	led_render();
 8000bcc:	f000 faf0 	bl	80011b0 <led_render>
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Main_Init>:


keyboardReportDes HIDkeyboard = {0, 0, 0, 0, 0, 0, 0, 0};

void Main_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	piloteTimer14_initialise();
 8000bdc:	f000 fcc8 	bl	8001570 <piloteTimer14_initialise>
	serviceBaseDeTemps_initialise();
 8000be0:	f7ff fbf4 	bl	80003cc <serviceBaseDeTemps_initialise>
	InterfaceMatrice_Init();
 8000be4:	f7ff fcfa 	bl	80005dc <InterfaceMatrice_Init>
	InterfaceDebouncing_Init();
 8000be8:	f7ff fca8 	bl	800053c <InterfaceDebouncing_Init>
	ProcessusKeys_Init();
 8000bec:	f7ff fb18 	bl	8000220 <ProcessusKeys_Init>
	ProcessusLEDS_init();
 8000bf0:	f7ff fb98 	bl	8000324 <ProcessusLEDS_init>
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <doNothing>:

void doNothing(void){}
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fe48 	bl	800189c <HAL_Init>

  /* USER CODE BEGIN Init */

  Main_Init();
 8000c0c:	f7ff ffe4 	bl	8000bd8 <Main_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f810 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f97a 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c18:	f000 f95a 	bl	8000ed0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c1c:	f000 f85e 	bl	8000cdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c20:	f000 f8da 	bl	8000dd8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000c24:	f008 fec6 	bl	80099b4 <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c28:	f000 f92c 	bl	8000e84 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  piloteTimer14_permetLesInterruptions();
 8000c2c:	f000 fc94 	bl	8001558 <piloteTimer14_permetLesInterruptions>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	e7fd      	b.n	8000c30 <main+0x2c>

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b099      	sub	sp, #100	@ 0x64
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	242c      	movs	r4, #44	@ 0x2c
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2334      	movs	r3, #52	@ 0x34
 8000c42:	001a      	movs	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	f009 fb6b 	bl	800a320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4a:	231c      	movs	r3, #28
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	2310      	movs	r3, #16
 8000c52:	001a      	movs	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	f009 fb63 	bl	800a320 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	231c      	movs	r3, #28
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f009 fb5c 	bl	800a320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2201      	movs	r2, #1
 8000c72:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f003 f909 	bl	8003e94 <HAL_RCC_OscConfig>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000c86:	f000 f9ad 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	211c      	movs	r1, #28
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2207      	movs	r2, #7
 8000c90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2203      	movs	r2, #3
 8000c96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f003 fc79 	bl	80045a0 <HAL_RCC_ClockConfig>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cb2:	f000 f997 	bl	8000fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	0292      	lsls	r2, r2, #10
 8000cbc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 fdb6 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cd0:	f000 f988 	bl	8000fe4 <Error_Handler>
  }
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b019      	add	sp, #100	@ 0x64
 8000cda:	bd90      	pop	{r4, r7, pc}

08000cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	2328      	movs	r3, #40	@ 0x28
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f009 fb17 	bl	800a320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f009 fb0f 	bl	800a320 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	0018      	movs	r0, r3
 8000d06:	231c      	movs	r3, #28
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f009 fb08 	bl	800a320 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	05d2      	lsls	r2, r2, #23
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d18:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d26:	223b      	movs	r2, #59	@ 0x3b
 8000d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d36:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f003 fe7b 	bl	8004a34 <HAL_TIM_Base_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d42:	f000 f94f 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	2128      	movs	r1, #40	@ 0x28
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	0152      	lsls	r2, r2, #5
 8000d4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f004 fbb0 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d60:	f000 f940 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f003 ff06 	bl	8004b78 <HAL_TIM_PWM_Init>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d70:	f000 f938 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2120      	movs	r1, #32
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f005 f8a7 	bl	8005edc <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d92:	f000 f927 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2260      	movs	r2, #96	@ 0x60
 8000d9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	1d39      	adds	r1, r7, #4
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f004 fabb 	bl	8005330 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000dbe:	f000 f911 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <MX_TIM2_Init+0xf8>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fcb1 	bl	800172c <HAL_TIM_MspPostInit>

}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b00e      	add	sp, #56	@ 0x38
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	200003d0 	.word	0x200003d0

08000dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	2308      	movs	r3, #8
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	0018      	movs	r0, r3
 8000de4:	2310      	movs	r3, #16
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f009 fa99 	bl	800a320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	2308      	movs	r3, #8
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f009 fa92 	bl	800a320 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <MX_TIM3_Init+0xa4>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <MX_TIM3_Init+0xa8>)
 8000e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f003 fe06 	bl	8004a34 <HAL_TIM_Base_Init>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f000 f8da 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	2108      	movs	r1, #8
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0152      	lsls	r2, r2, #5
 8000e38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3a:	187a      	adds	r2, r7, r1
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f004 fb3b 	bl	80054bc <HAL_TIM_ConfigClockSource>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e4a:	f000 f8cb 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_TIM3_Init+0xa0>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f005 f83b 	bl	8005edc <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e6a:	f000 f8bb 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b006      	add	sp, #24
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000418 	.word	0x20000418
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	0000ea5f 	.word	0x0000ea5f

08000e84 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <MX_TIM14_Init+0x44>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <MX_TIM14_Init+0x48>)
 8000e9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fdc0 	bl	8004a34 <HAL_TIM_Base_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000eb8:	f000 f894 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000460 	.word	0x20000460
 8000ec8:	40002000 	.word	0x40002000
 8000ecc:	0000ffff 	.word	0x0000ffff

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_DMA_Init+0x38>)
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_DMA_Init+0x38>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_DMA_Init+0x38>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f000 fde2 	bl	8001abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000ef8:	200b      	movs	r0, #11
 8000efa:	f000 fdf4 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	40021000 	.word	0x40021000

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	240c      	movs	r4, #12
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	0018      	movs	r0, r3
 8000f18:	2314      	movs	r3, #20
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f009 f9ff 	bl	800a320 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0289      	lsls	r1, r1, #10
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	02c9      	lsls	r1, r1, #11
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	02db      	lsls	r3, r3, #11
 8000f54:	4013      	ands	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8000f5a:	2390      	movs	r3, #144	@ 0x90
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	2200      	movs	r2, #0
 8000f60:	211f      	movs	r1, #31
 8000f62:	0018      	movs	r0, r3
 8000f64:	f001 f94f 	bl	8002206 <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	221f      	movs	r2, #31
 8000f6c:	601a      	str	r2, [r3, #0]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2201      	movs	r2, #1
 8000f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	193a      	adds	r2, r7, r4
 8000f82:	2390      	movs	r3, #144	@ 0x90
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 ffa7 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : OS1_Pin OS2_Pin OS3_Pin */
  GPIO_InitStruct.Pin = OS1_Pin|OS2_Pin|OS3_Pin;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	22e0      	movs	r2, #224	@ 0xe0
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	193a      	adds	r2, r7, r4
 8000fa4:	2390      	movs	r3, #144	@ 0x90
 8000fa6:	05db      	lsls	r3, r3, #23
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 ff96 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL11_Pin
                           COL12_Pin COL13_Pin COL14_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           COL9_Pin COL10_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL11_Pin
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <MX_GPIO_Init+0xd0>)
 8000fb4:	601a      	str	r2, [r3, #0]
                          |COL12_Pin|COL13_Pin|COL14_Pin|COL4_Pin
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |COL9_Pin|COL10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <MX_GPIO_Init+0xd4>)
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	0010      	movs	r0, r2
 8000fca:	f000 ff87 	bl	8001edc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b009      	add	sp, #36	@ 0x24
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	00003fff 	.word	0x00003fff
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <Read_Col>:

uint16_t col_pin[NUM_COLS] = { COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,
							COL10, COL11, COL12, COL13, COL14 };

bool Read_Col(uint16_t col_index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	801a      	strh	r2, [r3, #0]
	return HAL_GPIO_ReadPin(COL_PORT, col_pin[col_index]);
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <Read_Col+0x30>)
 8001002:	0052      	lsls	r2, r2, #1
 8001004:	5ad3      	ldrh	r3, [r2, r3]
 8001006:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <Read_Col+0x34>)
 8001008:	0019      	movs	r1, r3
 800100a:	0010      	movs	r0, r2
 800100c:	f001 f8de 	bl	80021cc <HAL_GPIO_ReadPin>
 8001010:	0003      	movs	r3, r0
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	4193      	sbcs	r3, r2
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000104 	.word	0x20000104
 8001024:	48000400 	.word	0x48000400

08001028 <Set_Row>:
#include "pilote_ROW.h"

uint16_t row_pin[NUM_ROWS] = { ROW1, ROW2, ROW3, ROW4, ROW5};

void Set_Row(uint16_t row_index)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	0002      	movs	r2, r0
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_SET);
 8001034:	1dbb      	adds	r3, r7, #6
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <Set_Row+0x2c>)
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	5ad1      	ldrh	r1, [r2, r3]
 800103e:	2390      	movs	r3, #144	@ 0x90
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	2201      	movs	r2, #1
 8001044:	0018      	movs	r0, r3
 8001046:	f001 f8de 	bl	8002206 <HAL_GPIO_WritePin>
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000120 	.word	0x20000120

08001058 <Reset_Row>:

void Reset_Row(uint16_t row_index)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	0002      	movs	r2, r0
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_RESET);
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <Reset_Row+0x2c>)
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	5ad1      	ldrh	r1, [r2, r3]
 800106e:	2390      	movs	r3, #144	@ 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	2200      	movs	r2, #0
 8001074:	0018      	movs	r0, r3
 8001076:	f001 f8c6 	bl	8002206 <HAL_GPIO_WritePin>
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	20000120 	.word	0x20000120

08001088 <Set_All_Rows>:

void Set_All_Rows(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e007      	b.n	80010a4 <Set_All_Rows+0x1c>
	{
		Set_Row(i);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29b      	uxth	r3, r3
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ffc5 	bl	8001028 <Set_Row>
	for(int i = 0; i < NUM_ROWS; i++)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3301      	adds	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	ddf4      	ble.n	8001094 <Set_All_Rows+0xc>
	}
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <scale8>:
// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	1c0a      	adds	r2, r1, #0
 80010c4:	701a      	strb	r2, [r3, #0]
  return ((uint16_t)x * scale) >> 8;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	1dba      	adds	r2, r7, #6
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	4353      	muls	r3, r2
 80010d0:	121b      	asrs	r3, r3, #8
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <led_set_RGB>:


// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0005      	movs	r5, r0
 80010e4:	000c      	movs	r4, r1
 80010e6:	0010      	movs	r0, r2
 80010e8:	0019      	movs	r1, r3
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	1c2a      	adds	r2, r5, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	1dbb      	adds	r3, r7, #6
 80010f2:	1c22      	adds	r2, r4, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	1d7b      	adds	r3, r7, #5
 80010f8:	1c02      	adds	r2, r0, #0
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	1c0a      	adds	r2, r1, #0
 8001100:	701a      	strb	r2, [r3, #0]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	0013      	movs	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	189c      	adds	r4, r3, r2
 800110c:	1d7b      	adds	r3, r7, #5
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	21b0      	movs	r1, #176	@ 0xb0
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff ffce 	bl	80010b4 <scale8>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <led_set_RGB+0x80>)
 800111e:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	0013      	movs	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	189b      	adds	r3, r3, r2
 800112a:	3301      	adds	r3, #1
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <led_set_RGB+0x80>)
 800112e:	1db9      	adds	r1, r7, #6
 8001130:	7809      	ldrb	r1, [r1, #0]
 8001132:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	0013      	movs	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	189b      	adds	r3, r3, r2
 800113e:	1c9c      	adds	r4, r3, #2
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	21f0      	movs	r1, #240	@ 0xf0
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff ffb4 	bl	80010b4 <scale8>
 800114c:	0003      	movs	r3, r0
 800114e:	001a      	movs	r2, r3
 8001150:	4b02      	ldr	r3, [pc, #8]	@ (800115c <led_set_RGB+0x80>)
 8001152:	551a      	strb	r2, [r3, r4]
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bdb0      	pop	{r4, r5, r7, pc}
 800115c:	200004ec 	.word	0x200004ec

08001160 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	0004      	movs	r4, r0
 8001168:	0008      	movs	r0, r1
 800116a:	0011      	movs	r1, r2
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	1c22      	adds	r2, r4, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	1dbb      	adds	r3, r7, #6
 8001174:	1c02      	adds	r2, r0, #0
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	1d7b      	adds	r3, r7, #5
 800117a:	1c0a      	adds	r2, r1, #0
 800117c:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < LED_CNT; ++i) led_set_RGB(i, r, g, b);
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e00d      	b.n	80011a0 <led_set_all_RGB+0x40>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b2d8      	uxtb	r0, r3
 8001188:	1d7b      	adds	r3, r7, #5
 800118a:	781c      	ldrb	r4, [r3, #0]
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	7819      	ldrb	r1, [r3, #0]
 8001194:	0023      	movs	r3, r4
 8001196:	f7ff ffa1 	bl	80010dc <led_set_RGB>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a4:	d9ee      	bls.n	8001184 <led_set_all_RGB+0x24>
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b005      	add	sp, #20
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <led_render>:

// Shuttle the data to the LEDs!
void led_render()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 80011b6:	4b50      	ldr	r3, [pc, #320]	@ (80012f8 <led_render+0x148>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <led_render+0x1a>
 80011be:	4b4f      	ldr	r3, [pc, #316]	@ (80012fc <led_render+0x14c>)
 80011c0:	2221      	movs	r2, #33	@ 0x21
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d01a      	beq.n	8001200 <led_render+0x50>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e009      	b.n	80011e6 <led_render+0x36>
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <led_render+0x150>)
 80011d8:	2100      	movs	r1, #0
 80011da:	54d1      	strb	r1, [r2, r3]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	3201      	adds	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80011ec:	d9f1      	bls.n	80011d2 <led_render+0x22>
    wr_buf_p = 0;
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <led_render+0x148>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80011f4:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <led_render+0x154>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fecb 	bl	8004f94 <HAL_TIM_PWM_Stop_DMA>
    return;
 80011fe:	e078      	b.n	80012f2 <led_render+0x142>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	e069      	b.n	80012da <led_render+0x12a>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001206:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <led_render+0x158>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	001a      	movs	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd01      	ble.n	800121e <led_render+0x6e>
 800121a:	2126      	movs	r1, #38	@ 0x26
 800121c:	e000      	b.n	8001220 <led_render+0x70>
 800121e:	2113      	movs	r1, #19
 8001220:	4a37      	ldr	r2, [pc, #220]	@ (8001300 <led_render+0x150>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	1c0a      	adds	r2, r1, #0
 8001228:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <led_render+0x158>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	001a      	movs	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	dd01      	ble.n	8001242 <led_render+0x92>
 800123e:	2126      	movs	r1, #38	@ 0x26
 8001240:	e000      	b.n	8001244 <led_render+0x94>
 8001242:	2113      	movs	r1, #19
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3308      	adds	r3, #8
 8001248:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <led_render+0x150>)
 800124a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800124c:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <led_render+0x158>)
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	001a      	movs	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd01      	ble.n	8001264 <led_render+0xb4>
 8001260:	2126      	movs	r1, #38	@ 0x26
 8001262:	e000      	b.n	8001266 <led_render+0xb6>
 8001264:	2113      	movs	r1, #19
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3310      	adds	r3, #16
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <led_render+0x150>)
 800126c:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <led_render+0x158>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	001a      	movs	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	dd01      	ble.n	8001286 <led_render+0xd6>
 8001282:	2126      	movs	r1, #38	@ 0x26
 8001284:	e000      	b.n	8001288 <led_render+0xd8>
 8001286:	2113      	movs	r1, #19
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3318      	adds	r3, #24
 800128c:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <led_render+0x150>)
 800128e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <led_render+0x158>)
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	001a      	movs	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dd01      	ble.n	80012a8 <led_render+0xf8>
 80012a4:	2126      	movs	r1, #38	@ 0x26
 80012a6:	e000      	b.n	80012aa <led_render+0xfa>
 80012a8:	2113      	movs	r1, #19
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3320      	adds	r3, #32
 80012ae:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <led_render+0x150>)
 80012b0:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <led_render+0x158>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	001a      	movs	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	2280      	movs	r2, #128	@ 0x80
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dd01      	ble.n	80012ca <led_render+0x11a>
 80012c6:	2126      	movs	r1, #38	@ 0x26
 80012c8:	e000      	b.n	80012cc <led_render+0x11c>
 80012ca:	2113      	movs	r1, #19
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3328      	adds	r3, #40	@ 0x28
 80012d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <led_render+0x150>)
 80012d2:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d992      	bls.n	8001206 <led_render+0x56>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <led_render+0x150>)
 80012e2:	4808      	ldr	r0, [pc, #32]	@ (8001304 <led_render+0x154>)
 80012e4:	2330      	movs	r3, #48	@ 0x30
 80012e6:	2100      	movs	r1, #0
 80012e8:	f003 fc9e 	bl	8004c28 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <led_render+0x148>)
 80012ee:	2202      	movs	r2, #2
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200005dc 	.word	0x200005dc
 80012fc:	200004a8 	.word	0x200004a8
 8001300:	200005ac 	.word	0x200005ac
 8001304:	200003d0 	.word	0x200003d0
 8001308:	200004ec 	.word	0x200004ec

0800130c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001314:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b3f      	cmp	r3, #63	@ 0x3f
 800131a:	d853      	bhi.n	80013c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e047      	b.n	80013b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001322:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	0013      	movs	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	189b      	adds	r3, r3, r2
 800132c:	4a37      	ldr	r2, [pc, #220]	@ (800140c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	001a      	movs	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd01      	ble.n	8001344 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001340:	2126      	movs	r1, #38	@ 0x26
 8001342:	e000      	b.n	8001346 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001344:	2113      	movs	r1, #19
 8001346:	4a32      	ldr	r2, [pc, #200]	@ (8001410 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	18d3      	adds	r3, r2, r3
 800134c:	1c0a      	adds	r2, r1, #0
 800134e:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	0013      	movs	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	189b      	adds	r3, r3, r2
 800135a:	3301      	adds	r3, #1
 800135c:	4a2b      	ldr	r2, [pc, #172]	@ (800140c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	001a      	movs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd01      	ble.n	8001374 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001370:	2126      	movs	r1, #38	@ 0x26
 8001372:	e000      	b.n	8001376 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001374:	2113      	movs	r1, #19
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3308      	adds	r3, #8
 800137a:	4a25      	ldr	r2, [pc, #148]	@ (8001410 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 800137c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	0013      	movs	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	3302      	adds	r3, #2
 800138a:	4a20      	ldr	r2, [pc, #128]	@ (800140c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	001a      	movs	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd01      	ble.n	80013a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800139e:	2126      	movs	r1, #38	@ 0x26
 80013a0:	e000      	b.n	80013a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80013a2:	2113      	movs	r1, #19
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3310      	adds	r3, #16
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80013aa:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	d9b4      	bls.n	8001322 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80013c0:	601a      	str	r2, [r3, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80013c2:	e01d      	b.n	8001400 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
  } else if (wr_buf_p < LED_CNT + 2) {
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b41      	cmp	r3, #65	@ 0x41
 80013ca:	d819      	bhi.n	8001400 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80013cc:	230b      	movs	r3, #11
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e00a      	b.n	80013ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>
 80013d6:	200b      	movs	r0, #11
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80013de:	2100      	movs	r1, #0
 80013e0:	54d1      	strb	r1, [r2, r3]
 80013e2:	183b      	adds	r3, r7, r0
 80013e4:	183a      	adds	r2, r7, r0
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	3201      	adds	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	230b      	movs	r3, #11
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b17      	cmp	r3, #23
 80013f4:	d9ef      	bls.n	80013d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xca>
    wr_buf_p++;
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4b02      	ldr	r3, [pc, #8]	@ (8001408 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200005dc 	.word	0x200005dc
 800140c:	200004ec 	.word	0x200004ec
 8001410:	200005ac 	.word	0x200005ac

08001414 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d852      	bhi.n	80014ca <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    //Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e046      	b.n	80014b8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	0013      	movs	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	189b      	adds	r3, r3, r2
 8001434:	4a3b      	ldr	r2, [pc, #236]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	001a      	movs	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd01      	ble.n	800144c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001448:	2126      	movs	r1, #38	@ 0x26
 800144a:	e000      	b.n	800144e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800144c:	2113      	movs	r1, #19
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3318      	adds	r3, #24
 8001452:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001454:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	0013      	movs	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	189b      	adds	r3, r3, r2
 8001460:	3301      	adds	r3, #1
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	001a      	movs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	dd01      	ble.n	800147a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001476:	2126      	movs	r1, #38	@ 0x26
 8001478:	e000      	b.n	800147c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800147a:	2113      	movs	r1, #19
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3320      	adds	r3, #32
 8001480:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001482:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	0013      	movs	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	189b      	adds	r3, r3, r2
 800148e:	3302      	adds	r3, #2
 8001490:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	001a      	movs	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	2280      	movs	r2, #128	@ 0x80
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dd01      	ble.n	80014a8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80014a4:	2126      	movs	r1, #38	@ 0x26
 80014a6:	e000      	b.n	80014aa <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80014a8:	2113      	movs	r1, #19
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3328      	adds	r3, #40	@ 0x28
 80014ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80014b0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9b5      	bls.n	800142a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80014c6:	601a      	str	r2, [r3, #0]
  } else {

    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80014c8:	e026      	b.n	8001518 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
  } else if (wr_buf_p < LED_CNT + 2) {
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b41      	cmp	r3, #65	@ 0x41
 80014d0:	d81a      	bhi.n	8001508 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80014d2:	230b      	movs	r3, #11
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2218      	movs	r2, #24
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e00a      	b.n	80014f2 <HAL_TIM_PWM_PulseFinishedCallback+0xde>
 80014dc:	200b      	movs	r0, #11
 80014de:	183b      	adds	r3, r7, r0
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	54d1      	strb	r1, [r2, r3]
 80014e8:	183b      	adds	r3, r7, r0
 80014ea:	183a      	adds	r2, r7, r0
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	3201      	adds	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	230b      	movs	r3, #11
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80014fa:	d9ef      	bls.n	80014dc <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
    ++wr_buf_p;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	e007      	b.n	8001518 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
    wr_buf_p = 0;
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001510:	2100      	movs	r1, #0
 8001512:	0018      	movs	r0, r3
 8001514:	f003 fd3e 	bl	8004f94 <HAL_TIM_PWM_Stop_DMA>
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200005dc 	.word	0x200005dc
 8001524:	200004ec 	.word	0x200004ec
 8001528:	200005ac 	.word	0x200005ac
 800152c:	200003d0 	.word	0x200003d0

08001530 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer14_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d102      	bne.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  piloteTimer14_execute();
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4798      	blx	r3
  }
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	20000460 	.word	0x20000460
 8001554:	200005e0 	.word	0x200005e0

08001558 <piloteTimer14_permetLesInterruptions>:

void piloteTimer14_permetLesInterruptions(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim14);
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <piloteTimer14_permetLesInterruptions+0x14>)
 800155e:	0018      	movs	r0, r3
 8001560:	f003 fab8 	bl	8004ad4 <HAL_TIM_Base_Start_IT>
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	20000460 	.word	0x20000460

08001570 <piloteTimer14_initialise>:

void piloteTimer14_initialise(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  piloteTimer14_execute = doNothing;
 8001574:	4b02      	ldr	r3, [pc, #8]	@ (8001580 <piloteTimer14_initialise+0x10>)
 8001576:	4a03      	ldr	r2, [pc, #12]	@ (8001584 <piloteTimer14_initialise+0x14>)
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200005e0 	.word	0x200005e0
 8001584:	08000bfb 	.word	0x08000bfb

08001588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_MspInit+0x44>)
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_MspInit+0x44>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_MspInit+0x44>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x44>)
 80015a8:	69da      	ldr	r2, [r3, #28]
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_MspInit+0x44>)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	430a      	orrs	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_MspInit+0x44>)
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	055b      	lsls	r3, r3, #21
 80015bc:	4013      	ands	r3, r2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	231c      	movs	r3, #28
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	0018      	movs	r0, r3
 80015de:	2314      	movs	r3, #20
 80015e0:	001a      	movs	r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	f008 fe9c 	bl	800a320 <memset>
  if(htim_base->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	05db      	lsls	r3, r3, #23
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d133      	bne.n	800165c <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f4:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
 8001600:	4b45      	ldr	r3, [pc, #276]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 800160e:	4a44      	ldr	r2, [pc, #272]	@ (8001720 <HAL_TIM_Base_MspInit+0x150>)
 8001610:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001612:	4b42      	ldr	r3, [pc, #264]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001614:	2210      	movs	r2, #16
 8001616:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001618:	4b40      	ldr	r3, [pc, #256]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800161e:	4b3f      	ldr	r3, [pc, #252]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001624:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162c:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001632:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001634:	2220      	movs	r2, #32
 8001636:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001638:	4b38      	ldr	r3, [pc, #224]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800163e:	4b37      	ldr	r3, [pc, #220]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fa6d 	bl	8001b20 <HAL_DMA_Init>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800164a:	f7ff fccb 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a32      	ldr	r2, [pc, #200]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24
 8001654:	4b31      	ldr	r3, [pc, #196]	@ (800171c <HAL_TIM_Base_MspInit+0x14c>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800165a:	e059      	b.n	8001710 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <HAL_TIM_Base_MspInit+0x154>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d139      	bne.n	80016da <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001666:	4b2c      	ldr	r3, [pc, #176]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 800166c:	2102      	movs	r1, #2
 800166e:	430a      	orrs	r2, r1
 8001670:	61da      	str	r2, [r3, #28]
 8001672:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 8001684:	2180      	movs	r1, #128	@ 0x80
 8001686:	0289      	lsls	r1, r1, #10
 8001688:	430a      	orrs	r2, r1
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEDS_STAT_Pin;
 800169a:	211c      	movs	r1, #28
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2202      	movs	r2, #2
 80016a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2201      	movs	r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_STAT_GPIO_Port, &GPIO_InitStruct);
 80016ba:	187a      	adds	r2, r7, r1
 80016bc:	2390      	movs	r3, #144	@ 0x90
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 fc0a 	bl	8001edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2010      	movs	r0, #16
 80016ce:	f000 f9f5 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016d2:	2010      	movs	r0, #16
 80016d4:	f000 fa07 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 80016d8:	e01a      	b.n	8001710 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM14)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_TIM_Base_MspInit+0x158>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d115      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	61da      	str	r2, [r3, #28]
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_TIM_Base_MspInit+0x148>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2101      	movs	r1, #1
 8001704:	2013      	movs	r0, #19
 8001706:	f000 f9d9 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800170a:	2013      	movs	r0, #19
 800170c:	f000 f9eb 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b00c      	add	sp, #48	@ 0x30
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	200004a8 	.word	0x200004a8
 8001720:	40020058 	.word	0x40020058
 8001724:	40000400 	.word	0x40000400
 8001728:	40002000 	.word	0x40002000

0800172c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	240c      	movs	r4, #12
 8001736:	193b      	adds	r3, r7, r4
 8001738:	0018      	movs	r0, r3
 800173a:	2314      	movs	r3, #20
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f008 fdee 	bl	800a320 <memset>
  if(htim->Instance==TIM2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	05db      	lsls	r3, r3, #23
 800174c:	429a      	cmp	r2, r3
 800174e:	d125      	bne.n	800179c <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_TIM_MspPostInit+0x78>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_TIM_MspPostInit+0x78>)
 8001756:	2180      	movs	r1, #128	@ 0x80
 8001758:	0289      	lsls	r1, r1, #10
 800175a:	430a      	orrs	r2, r1
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_TIM_MspPostInit+0x78>)
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_OUT_Pin;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2280      	movs	r2, #128	@ 0x80
 8001770:	0212      	lsls	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	0021      	movs	r1, r4
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2202      	movs	r2, #2
 800177a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2202      	movs	r2, #2
 800178c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_OUT_GPIO_Port, &GPIO_InitStruct);
 800178e:	187a      	adds	r2, r7, r1
 8001790:	2390      	movs	r3, #144	@ 0x90
 8001792:	05db      	lsls	r3, r3, #23
 8001794:	0011      	movs	r1, r2
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fba0 	bl	8001edc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b009      	add	sp, #36	@ 0x24
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 f8ac 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fa8f 	bl	8001d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	200004a8 	.word	0x200004a8

080017f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <TIM3_IRQHandler+0x14>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f003 fcaa 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	20000418 	.word	0x20000418

0800180c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <TIM14_IRQHandler+0x14>)
 8001812:	0018      	movs	r0, r3
 8001814:	f003 fc9e 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	20000460 	.word	0x20000460

08001824 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <USB_IRQHandler+0x14>)
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fe22 	bl	8002474 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	20000ab0 	.word	0x20000ab0

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <Reset_Handler>:
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <LoopForever+0x2>)
 800184a:	4685      	mov	sp, r0
 800184c:	f7ff fff6 	bl	800183c <SystemInit>
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopForever+0x6>)
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopForever+0xa>)
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopForever+0xe>)
 8001856:	2300      	movs	r3, #0
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:
 800185a:	58d4      	ldr	r4, [r2, r3]
 800185c:	50c4      	str	r4, [r0, r3]
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:
 8001860:	18c4      	adds	r4, r0, r3
 8001862:	428c      	cmp	r4, r1
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopForever+0x12>)
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopForever+0x16>)
 800186a:	2300      	movs	r3, #0
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:
 8001872:	42a2      	cmp	r2, r4
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>
 8001876:	f008 fd5b 	bl	800a330 <__libc_init_array>
 800187a:	f7ff f9c3 	bl	8000c04 <main>

0800187e <LoopForever>:
 800187e:	e7fe      	b.n	800187e <LoopForever>
 8001880:	20004000 	.word	0x20004000
 8001884:	20000000 	.word	0x20000000
 8001888:	200002ac 	.word	0x200002ac
 800188c:	0800a4fc 	.word	0x0800a4fc
 8001890:	200002ac 	.word	0x200002ac
 8001894:	20000dac 	.word	0x20000dac

08001898 <ADC1_COMP_IRQHandler>:
 8001898:	e7fe      	b.n	8001898 <ADC1_COMP_IRQHandler>
	...

0800189c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_Init+0x24>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_Init+0x24>)
 80018a6:	2110      	movs	r1, #16
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f809 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b2:	f7ff fe69 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <HAL_InitTick+0x5c>)
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	0019      	movs	r1, r3
 80018d6:	23fa      	movs	r3, #250	@ 0xfa
 80018d8:	0098      	lsls	r0, r3, #2
 80018da:	f7fe fc15 	bl	8000108 <__udivsi3>
 80018de:	0003      	movs	r3, r0
 80018e0:	0019      	movs	r1, r3
 80018e2:	0020      	movs	r0, r4
 80018e4:	f7fe fc10 	bl	8000108 <__udivsi3>
 80018e8:	0003      	movs	r3, r0
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 f90b 	bl	8001b06 <HAL_SYSTICK_Config>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e00f      	b.n	8001918 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d80b      	bhi.n	8001916 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	425b      	negs	r3, r3
 8001904:	2200      	movs	r2, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f8d8 	bl	8001abc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_InitTick+0x64>)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b003      	add	sp, #12
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	2000012c 	.word	0x2000012c
 8001924:	20000134 	.word	0x20000134
 8001928:	20000130 	.word	0x20000130

0800192c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_IncTick+0x1c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_IncTick+0x20>)
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	46c0      	nop			@ (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000134 	.word	0x20000134
 800194c:	200005e4 	.word	0x200005e4

08001950 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b02      	ldr	r3, [pc, #8]	@ (8001960 <HAL_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	200005e4 	.word	0x200005e4

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	0002      	movs	r2, r0
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b7f      	cmp	r3, #127	@ 0x7f
 8001976:	d809      	bhi.n	800198c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	001a      	movs	r2, r3
 800197e:	231f      	movs	r3, #31
 8001980:	401a      	ands	r2, r3
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_EnableIRQ+0x30>)
 8001984:	2101      	movs	r1, #1
 8001986:	4091      	lsls	r1, r2
 8001988:	000a      	movs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
  }
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80019ac:	d828      	bhi.n	8001a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ae:	4a2f      	ldr	r2, [pc, #188]	@ (8001a6c <__NVIC_SetPriority+0xd4>)
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	33c0      	adds	r3, #192	@ 0xc0
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	589b      	ldr	r3, [r3, r2]
 80019be:	1dfa      	adds	r2, r7, #7
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	0011      	movs	r1, r2
 80019c4:	2203      	movs	r2, #3
 80019c6:	400a      	ands	r2, r1
 80019c8:	00d2      	lsls	r2, r2, #3
 80019ca:	21ff      	movs	r1, #255	@ 0xff
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	43d2      	mvns	r2, r2
 80019d2:	401a      	ands	r2, r3
 80019d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	22ff      	movs	r2, #255	@ 0xff
 80019dc:	401a      	ands	r2, r3
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	0018      	movs	r0, r3
 80019e4:	2303      	movs	r3, #3
 80019e6:	4003      	ands	r3, r0
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ec:	481f      	ldr	r0, [pc, #124]	@ (8001a6c <__NVIC_SetPriority+0xd4>)
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	430a      	orrs	r2, r1
 80019f8:	33c0      	adds	r3, #192	@ 0xc0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019fe:	e031      	b.n	8001a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a00:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <__NVIC_SetPriority+0xd8>)
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	0019      	movs	r1, r3
 8001a08:	230f      	movs	r3, #15
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	3b08      	subs	r3, #8
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3306      	adds	r3, #6
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	3304      	adds	r3, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1dfa      	adds	r2, r7, #7
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	0011      	movs	r1, r2
 8001a20:	2203      	movs	r2, #3
 8001a22:	400a      	ands	r2, r1
 8001a24:	00d2      	lsls	r2, r2, #3
 8001a26:	21ff      	movs	r1, #255	@ 0xff
 8001a28:	4091      	lsls	r1, r2
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	43d2      	mvns	r2, r2
 8001a2e:	401a      	ands	r2, r3
 8001a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	22ff      	movs	r2, #255	@ 0xff
 8001a38:	401a      	ands	r2, r3
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	2303      	movs	r3, #3
 8001a42:	4003      	ands	r3, r0
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a48:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <__NVIC_SetPriority+0xd8>)
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	001c      	movs	r4, r3
 8001a50:	230f      	movs	r3, #15
 8001a52:	4023      	ands	r3, r4
 8001a54:	3b08      	subs	r3, #8
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	18c3      	adds	r3, r0, r3
 8001a60:	3304      	adds	r3, #4
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b003      	add	sp, #12
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	045b      	lsls	r3, r3, #17
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d301      	bcc.n	8001a8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e010      	b.n	8001aae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <SysTick_Config+0x44>)
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3a01      	subs	r2, #1
 8001a92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a94:	2301      	movs	r3, #1
 8001a96:	425b      	negs	r3, r3
 8001a98:	2103      	movs	r1, #3
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff ff7c 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x44>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x44>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	1c02      	adds	r2, r0, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	0002      	movs	r2, r0
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff ff33 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ffaf 	bl	8001a74 <SysTick_Config>
 8001b16:	0003      	movs	r3, r0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2221      	movs	r2, #33	@ 0x21
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a18      	ldr	r2, [pc, #96]	@ (8001bac <HAL_DMA_Init+0x8c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f98c 	bl	8001ea4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2221      	movs	r2, #33	@ 0x21
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	ffffc00f 	.word	0xffffc00f

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2317      	movs	r3, #23
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Start_IT+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e04f      	b.n	8001c74 <HAL_DMA_Start_IT+0xc4>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2221      	movs	r2, #33	@ 0x21
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d13a      	bne.n	8001c5e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2221      	movs	r2, #33	@ 0x21
 8001bec:	2102      	movs	r1, #2
 8001bee:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	438a      	bics	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f91c 	bl	8001e4a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	210e      	movs	r1, #14
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	210a      	movs	r1, #10
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2104      	movs	r1, #4
 8001c48:	438a      	bics	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e007      	b.n	8001c6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	2100      	movs	r1, #0
 8001c64:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c66:	2317      	movs	r3, #23
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001c6e:	2317      	movs	r3, #23
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b006      	add	sp, #24
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	210f      	movs	r1, #15
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2221      	movs	r2, #33	@ 0x21
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d006      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e028      	b.n	8001cf8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	210e      	movs	r1, #14
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2221      	movs	r2, #33	@ 0x21
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	4798      	blx	r3
    }
  }
  return status;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	2204      	movs	r2, #4
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d024      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x72>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d020      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d107      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	438a      	bics	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4091      	lsls	r1, r2
 8001d5e:	000a      	movs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d100      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x66>
 8001d6a:	e06a      	b.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	0010      	movs	r0, r2
 8001d74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d76:	e064      	b.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	d02b      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xda>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d027      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d10b      	bne.n	8001db4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	210a      	movs	r1, #10
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2221      	movs	r2, #33	@ 0x21
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4091      	lsls	r1, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d036      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	0010      	movs	r0, r2
 8001ddc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001dde:	e030      	b.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	2208      	movs	r2, #8
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	d028      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2208      	movs	r2, #8
 8001df4:	4013      	ands	r3, r2
 8001df6:	d024      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	210e      	movs	r1, #14
 8001e04:	438a      	bics	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e10:	2101      	movs	r1, #1
 8001e12:	4091      	lsls	r1, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2221      	movs	r2, #33	@ 0x21
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	4798      	blx	r3
    }
  }
}
 8001e40:	e7ff      	b.n	8001e42 <HAL_DMA_IRQHandler+0x13c>
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e60:	2101      	movs	r1, #1
 8001e62:	4091      	lsls	r1, r2
 8001e64:	000a      	movs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d108      	bne.n	8001e8a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e88:	e007      	b.n	8001e9a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	60da      	str	r2, [r3, #12]
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <DMA_CalcBaseAndBitshift+0x30>)
 8001eb2:	4694      	mov	ip, r2
 8001eb4:	4463      	add	r3, ip
 8001eb6:	2114      	movs	r1, #20
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7fe f925 	bl	8000108 <__udivsi3>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	009a      	lsls	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a03      	ldr	r2, [pc, #12]	@ (8001ed8 <DMA_CalcBaseAndBitshift+0x34>)
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	bffdfff8 	.word	0xbffdfff8
 8001ed8:	40020000 	.word	0x40020000

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eea:	e155      	b.n	8002198 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4091      	lsls	r1, r2
 8001ef6:	000a      	movs	r2, r1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d100      	bne.n	8001f04 <HAL_GPIO_Init+0x28>
 8001f02:	e146      	b.n	8002192 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d130      	bne.n	8001f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	0013      	movs	r3, r2
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f52:	2201      	movs	r2, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	2201      	movs	r2, #1
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d123      	bne.n	800200e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	58d3      	ldr	r3, [r2, r3]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	4013      	ands	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	43da      	mvns	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	401a      	ands	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	409a      	lsls	r2, r3
 8002034:	0013      	movs	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	23c0      	movs	r3, #192	@ 0xc0
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d100      	bne.n	8002050 <HAL_GPIO_Init+0x174>
 800204e:	e0a0      	b.n	8002192 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002050:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <HAL_GPIO_Init+0x2d4>)
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	4b56      	ldr	r3, [pc, #344]	@ (80021b0 <HAL_GPIO_Init+0x2d4>)
 8002056:	2101      	movs	r1, #1
 8002058:	430a      	orrs	r2, r1
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	4b54      	ldr	r3, [pc, #336]	@ (80021b0 <HAL_GPIO_Init+0x2d4>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002068:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <HAL_GPIO_Init+0x2d8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	409a      	lsls	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	2390      	movs	r3, #144	@ 0x90
 8002090:	05db      	lsls	r3, r3, #23
 8002092:	429a      	cmp	r2, r3
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x1ee>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a47      	ldr	r2, [pc, #284]	@ (80021b8 <HAL_GPIO_Init+0x2dc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x1ea>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <HAL_GPIO_Init+0x2e0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x1e6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a45      	ldr	r2, [pc, #276]	@ (80021c0 <HAL_GPIO_Init+0x2e4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x1e2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a44      	ldr	r2, [pc, #272]	@ (80021c4 <HAL_GPIO_Init+0x2e8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x1de>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x1f0>
 80020ca:	2300      	movs	r3, #0
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	2103      	movs	r1, #3
 80020d0:	400a      	ands	r2, r1
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	@ (80021b4 <HAL_GPIO_Init+0x2d8>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ea:	4b37      	ldr	r3, [pc, #220]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43da      	mvns	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	035b      	lsls	r3, r3, #13
 8002102:	4013      	ands	r3, r2
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800210e:	4b2e      	ldr	r3, [pc, #184]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002114:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43da      	mvns	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	039b      	lsls	r3, r3, #14
 800212c:	4013      	ands	r3, r2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	4013      	ands	r3, r2
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	4013      	ands	r3, r2
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_GPIO_Init+0x2ec>)
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	40da      	lsrs	r2, r3
 80021a0:	1e13      	subs	r3, r2, #0
 80021a2:	d000      	beq.n	80021a6 <HAL_GPIO_Init+0x2ca>
 80021a4:	e6a2      	b.n	8001eec <HAL_GPIO_Init+0x10>
  } 
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	48001000 	.word	0x48001000
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	000a      	movs	r2, r1
 80021d6:	1cbb      	adds	r3, r7, #2
 80021d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	1cba      	adds	r2, r7, #2
 80021e0:	8812      	ldrh	r2, [r2, #0]
 80021e2:	4013      	ands	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80021e6:	230f      	movs	r3, #15
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e003      	b.n	80021f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80021f8:	230f      	movs	r3, #15
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	781b      	ldrb	r3, [r3, #0]
  }
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b004      	add	sp, #16
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	0008      	movs	r0, r1
 8002210:	0011      	movs	r1, r2
 8002212:	1cbb      	adds	r3, r7, #2
 8002214:	1c02      	adds	r2, r0, #0
 8002216:	801a      	strh	r2, [r3, #0]
 8002218:	1c7b      	adds	r3, r7, #1
 800221a:	1c0a      	adds	r2, r1, #0
 800221c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221e:	1c7b      	adds	r3, r7, #1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002226:	1cbb      	adds	r3, r7, #2
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800222e:	e003      	b.n	8002238 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002230:	1cbb      	adds	r3, r7, #2
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0e4      	b.n	800241c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a73      	ldr	r2, [pc, #460]	@ (8002424 <HAL_PCD_Init+0x1e4>)
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	23a4      	movs	r3, #164	@ 0xa4
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	2100      	movs	r1, #0
 8002266:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f007 fd1e 	bl	8009cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <HAL_PCD_Init+0x1e4>)
 8002274:	2103      	movs	r1, #3
 8002276:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0018      	movs	r0, r3
 800227e:	f003 feb1 	bl	8005fe4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	230f      	movs	r3, #15
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e047      	b.n	800231c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800228c:	200f      	movs	r0, #15
 800228e:	183b      	adds	r3, r7, r0
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	0013      	movs	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	189b      	adds	r3, r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	18cb      	adds	r3, r1, r3
 800229e:	3311      	adds	r3, #17
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022a4:	183b      	adds	r3, r7, r0
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	0013      	movs	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	18cb      	adds	r3, r1, r3
 80022b4:	3310      	adds	r3, #16
 80022b6:	183a      	adds	r2, r7, r0
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022bc:	183b      	adds	r3, r7, r0
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	0013      	movs	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	18cb      	adds	r3, r1, r3
 80022cc:	3313      	adds	r3, #19
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	0013      	movs	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	18cb      	adds	r3, r1, r3
 80022e2:	3320      	adds	r3, #32
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e8:	183b      	adds	r3, r7, r0
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	0013      	movs	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	18cb      	adds	r3, r1, r3
 80022f8:	3324      	adds	r3, #36	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fe:	183b      	adds	r3, r7, r0
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	0013      	movs	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	189b      	adds	r3, r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	2200      	movs	r2, #0
 8002310:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002312:	183b      	adds	r3, r7, r0
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	183b      	adds	r3, r7, r0
 8002318:	3201      	adds	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	210f      	movs	r1, #15
 8002322:	187a      	adds	r2, r7, r1
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3b0      	bcc.n	800228c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e056      	b.n	80023e0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002332:	240f      	movs	r4, #15
 8002334:	193b      	adds	r3, r7, r4
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	2352      	movs	r3, #82	@ 0x52
 800233c:	33ff      	adds	r3, #255	@ 0xff
 800233e:	0019      	movs	r1, r3
 8002340:	0013      	movs	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	189b      	adds	r3, r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	18c3      	adds	r3, r0, r3
 800234a:	185b      	adds	r3, r3, r1
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	23a8      	movs	r3, #168	@ 0xa8
 8002358:	0059      	lsls	r1, r3, #1
 800235a:	0013      	movs	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	189b      	adds	r3, r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	18c3      	adds	r3, r0, r3
 8002364:	185b      	adds	r3, r3, r1
 8002366:	193a      	adds	r2, r7, r4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800236c:	193b      	adds	r3, r7, r4
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	2354      	movs	r3, #84	@ 0x54
 8002374:	33ff      	adds	r3, #255	@ 0xff
 8002376:	0019      	movs	r1, r3
 8002378:	0013      	movs	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	189b      	adds	r3, r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	18c3      	adds	r3, r0, r3
 8002382:	185b      	adds	r3, r3, r1
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002388:	193b      	adds	r3, r7, r4
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	23b0      	movs	r3, #176	@ 0xb0
 8002390:	0059      	lsls	r1, r3, #1
 8002392:	0013      	movs	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	189b      	adds	r3, r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	18c3      	adds	r3, r0, r3
 800239c:	185b      	adds	r3, r3, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a2:	193b      	adds	r3, r7, r4
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	23b2      	movs	r3, #178	@ 0xb2
 80023aa:	0059      	lsls	r1, r3, #1
 80023ac:	0013      	movs	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	18c3      	adds	r3, r0, r3
 80023b6:	185b      	adds	r3, r3, r1
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	23b4      	movs	r3, #180	@ 0xb4
 80023c4:	0059      	lsls	r1, r3, #1
 80023c6:	0013      	movs	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	18c3      	adds	r3, r0, r3
 80023d0:	185b      	adds	r3, r3, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	3201      	adds	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	220f      	movs	r2, #15
 80023e6:	18ba      	adds	r2, r7, r2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3a1      	bcc.n	8002332 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	f003 fe0e 	bl	8006018 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <HAL_PCD_Init+0x1e4>)
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7a9b      	ldrb	r3, [r3, #10]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d103      	bne.n	800241a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f001 fd07 	bl	8003e28 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b005      	add	sp, #20
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	00000291 	.word	0x00000291

08002428 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	23a4      	movs	r3, #164	@ 0xa4
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_Start+0x18>
 800243c:	2302      	movs	r3, #2
 800243e:	e014      	b.n	800246a <HAL_PCD_Start+0x42>
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	23a4      	movs	r3, #164	@ 0xa4
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	2101      	movs	r1, #1
 8002448:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f003 fdb2 	bl	8005fb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f005 fda7 	bl	8007fac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	23a4      	movs	r3, #164	@ 0xa4
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	2100      	movs	r1, #0
 8002466:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f005 fda9 	bl	8007fd8 <USB_ReadInterrupts>
 8002486:	0003      	movs	r3, r0
 8002488:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	4013      	ands	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fb48 	bl	8002b2c <PCD_EP_ISR_Handler>

    return;
 800249c:	e11d      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4013      	ands	r3, r2
 80024a6:	d015      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2244      	movs	r2, #68	@ 0x44
 80024ae:	5a9b      	ldrh	r3, [r3, r2]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	498a      	ldr	r1, [pc, #552]	@ (80026e0 <HAL_PCD_IRQHandler+0x26c>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	b291      	uxth	r1, r2
 80024bc:	2244      	movs	r2, #68	@ 0x44
 80024be:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f007 fc7d 	bl	8009dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2100      	movs	r1, #0
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f915 	bl	80026fc <HAL_PCD_SetAddress>

    return;
 80024d2:	e102      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	01db      	lsls	r3, r3, #7
 80024da:	4013      	ands	r3, r2
 80024dc:	d00c      	beq.n	80024f8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2244      	movs	r2, #68	@ 0x44
 80024e4:	5a9b      	ldrh	r3, [r3, r2]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	497d      	ldr	r1, [pc, #500]	@ (80026e4 <HAL_PCD_IRQHandler+0x270>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	b291      	uxth	r1, r2
 80024f2:	2244      	movs	r2, #68	@ 0x44
 80024f4:	5299      	strh	r1, [r3, r2]

    return;
 80024f6:	e0f0      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	019b      	lsls	r3, r3, #6
 80024fe:	4013      	ands	r3, r2
 8002500:	d00c      	beq.n	800251c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2244      	movs	r2, #68	@ 0x44
 8002508:	5a9b      	ldrh	r3, [r3, r2]
 800250a:	b29a      	uxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4975      	ldr	r1, [pc, #468]	@ (80026e8 <HAL_PCD_IRQHandler+0x274>)
 8002512:	400a      	ands	r2, r1
 8002514:	b291      	uxth	r1, r2
 8002516:	2244      	movs	r2, #68	@ 0x44
 8002518:	5299      	strh	r1, [r3, r2]

    return;
 800251a:	e0de      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	015b      	lsls	r3, r3, #5
 8002522:	4013      	ands	r3, r2
 8002524:	d038      	beq.n	8002598 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	5a9b      	ldrh	r3, [r3, r2]
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2104      	movs	r1, #4
 8002536:	438a      	bics	r2, r1
 8002538:	b291      	uxth	r1, r2
 800253a:	2240      	movs	r2, #64	@ 0x40
 800253c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	5a9b      	ldrh	r3, [r3, r2]
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2108      	movs	r1, #8
 800254e:	438a      	bics	r2, r1
 8002550:	b291      	uxth	r1, r2
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	23b2      	movs	r3, #178	@ 0xb2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d109      	bne.n	8002576 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	23b2      	movs	r3, #178	@ 0xb2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	2100      	movs	r1, #0
 800256a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2100      	movs	r1, #0
 8002570:	0018      	movs	r0, r3
 8002572:	f001 fc83 	bl	8003e7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0018      	movs	r0, r3
 800257a:	f007 fc63 	bl	8009e44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2244      	movs	r2, #68	@ 0x44
 8002584:	5a9b      	ldrh	r3, [r3, r2]
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4957      	ldr	r1, [pc, #348]	@ (80026ec <HAL_PCD_IRQHandler+0x278>)
 800258e:	400a      	ands	r2, r1
 8002590:	b291      	uxth	r1, r2
 8002592:	2244      	movs	r2, #68	@ 0x44
 8002594:	5299      	strh	r1, [r3, r2]

    return;
 8002596:	e0a0      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d028      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2240      	movs	r2, #64	@ 0x40
 80025a8:	5a9b      	ldrh	r3, [r3, r2]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2108      	movs	r1, #8
 80025b2:	430a      	orrs	r2, r1
 80025b4:	b291      	uxth	r1, r2
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2244      	movs	r2, #68	@ 0x44
 80025c0:	5a9b      	ldrh	r3, [r3, r2]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4949      	ldr	r1, [pc, #292]	@ (80026f0 <HAL_PCD_IRQHandler+0x27c>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	b291      	uxth	r1, r2
 80025ce:	2244      	movs	r2, #68	@ 0x44
 80025d0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	5a9b      	ldrh	r3, [r3, r2]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2104      	movs	r1, #4
 80025e2:	430a      	orrs	r2, r1
 80025e4:	b291      	uxth	r1, r2
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f007 fc0d 	bl	8009e0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025f2:	e072      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	4013      	ands	r3, r2
 80025fa:	d046      	beq.n	800268a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2244      	movs	r2, #68	@ 0x44
 8002602:	5a9b      	ldrh	r3, [r3, r2]
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	438a      	bics	r2, r1
 800260e:	b291      	uxth	r1, r2
 8002610:	2244      	movs	r2, #68	@ 0x44
 8002612:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	23b2      	movs	r3, #178	@ 0xb2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12f      	bne.n	8002680 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2240      	movs	r2, #64	@ 0x40
 8002626:	5a9b      	ldrh	r3, [r3, r2]
 8002628:	b29a      	uxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2104      	movs	r1, #4
 8002630:	430a      	orrs	r2, r1
 8002632:	b291      	uxth	r1, r2
 8002634:	2240      	movs	r2, #64	@ 0x40
 8002636:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2240      	movs	r2, #64	@ 0x40
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2108      	movs	r1, #8
 8002648:	430a      	orrs	r2, r1
 800264a:	b291      	uxth	r1, r2
 800264c:	2240      	movs	r2, #64	@ 0x40
 800264e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	23b2      	movs	r3, #178	@ 0xb2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	2101      	movs	r1, #1
 8002658:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2254      	movs	r2, #84	@ 0x54
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	223c      	movs	r2, #60	@ 0x3c
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	23b3      	movs	r3, #179	@ 0xb3
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2101      	movs	r1, #1
 8002678:	0018      	movs	r0, r3
 800267a:	f001 fbff 	bl	8003e7c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800267e:	e02c      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f007 fbc2 	bl	8009e0c <HAL_PCD_SuspendCallback>
    return;
 8002688:	e027      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d010      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2244      	movs	r2, #68	@ 0x44
 800269a:	5a9b      	ldrh	r3, [r3, r2]
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4914      	ldr	r1, [pc, #80]	@ (80026f4 <HAL_PCD_IRQHandler+0x280>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	b291      	uxth	r1, r2
 80026a8:	2244      	movs	r2, #68	@ 0x44
 80026aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f007 fb78 	bl	8009da4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026b4:	e011      	b.n	80026da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d00c      	beq.n	80026da <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2244      	movs	r2, #68	@ 0x44
 80026c6:	5a9b      	ldrh	r3, [r3, r2]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	490a      	ldr	r1, [pc, #40]	@ (80026f8 <HAL_PCD_IRQHandler+0x284>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	b291      	uxth	r1, r2
 80026d4:	2244      	movs	r2, #68	@ 0x44
 80026d6:	5299      	strh	r1, [r3, r2]

    return;
 80026d8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80026da:	46bd      	mov	sp, r7
 80026dc:	b004      	add	sp, #16
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fffffbff 	.word	0xfffffbff
 80026e4:	ffffbfff 	.word	0xffffbfff
 80026e8:	ffffdfff 	.word	0xffffdfff
 80026ec:	ffffefff 	.word	0xffffefff
 80026f0:	fffff7ff 	.word	0xfffff7ff
 80026f4:	fffffdff 	.word	0xfffffdff
 80026f8:	fffffeff 	.word	0xfffffeff

080026fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	000a      	movs	r2, r1
 8002706:	1cfb      	adds	r3, r7, #3
 8002708:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	23a4      	movs	r3, #164	@ 0xa4
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_SetAddress+0x1e>
 8002716:	2302      	movs	r3, #2
 8002718:	e016      	b.n	8002748 <HAL_PCD_SetAddress+0x4c>
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	23a4      	movs	r3, #164	@ 0xa4
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	2101      	movs	r1, #1
 8002722:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1cfa      	adds	r2, r7, #3
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	1cfb      	adds	r3, r7, #3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	0019      	movs	r1, r3
 8002736:	0010      	movs	r0, r2
 8002738:	f005 fc24 	bl	8007f84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	23a4      	movs	r3, #164	@ 0xa4
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	2100      	movs	r1, #0
 8002744:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	000c      	movs	r4, r1
 800275a:	0010      	movs	r0, r2
 800275c:	0019      	movs	r1, r3
 800275e:	1cfb      	adds	r3, r7, #3
 8002760:	1c22      	adds	r2, r4, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	003b      	movs	r3, r7
 8002766:	1c02      	adds	r2, r0, #0
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	1cbb      	adds	r3, r7, #2
 800276c:	1c0a      	adds	r2, r1, #0
 800276e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002770:	230b      	movs	r3, #11
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002778:	1cfb      	adds	r3, r7, #3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b25b      	sxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	da0f      	bge.n	80027a2 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	1cfb      	adds	r3, r7, #3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2207      	movs	r2, #7
 8002788:	401a      	ands	r2, r3
 800278a:	0013      	movs	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	189b      	adds	r3, r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	3310      	adds	r3, #16
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	705a      	strb	r2, [r3, #1]
 80027a0:	e00f      	b.n	80027c2 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	1cfb      	adds	r3, r7, #3
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2207      	movs	r2, #7
 80027a8:	401a      	ands	r2, r3
 80027aa:	0013      	movs	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	3351      	adds	r3, #81	@ 0x51
 80027b4:	33ff      	adds	r3, #255	@ 0xff
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	18d3      	adds	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c2:	1cfb      	adds	r3, r7, #3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027d0:	003b      	movs	r3, r7
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1cba      	adds	r2, r7, #2
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027e0:	1cbb      	adds	r3, r7, #2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	23a4      	movs	r3, #164	@ 0xa4
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_PCD_EP_Open+0xae>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e013      	b.n	8002826 <HAL_PCD_EP_Open+0xd6>
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	23a4      	movs	r3, #164	@ 0xa4
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	2101      	movs	r1, #1
 8002806:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	0011      	movs	r1, r2
 8002810:	0018      	movs	r0, r3
 8002812:	f003 fc1d 	bl	8006050 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	23a4      	movs	r3, #164	@ 0xa4
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	2100      	movs	r1, #0
 800281e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002820:	230b      	movs	r3, #11
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b005      	add	sp, #20
 800282c:	bd90      	pop	{r4, r7, pc}

0800282e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	000a      	movs	r2, r1
 8002838:	1cfb      	adds	r3, r7, #3
 800283a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800283c:	1cfb      	adds	r3, r7, #3
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b25b      	sxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	da0f      	bge.n	8002866 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002846:	1cfb      	adds	r3, r7, #3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2207      	movs	r2, #7
 800284c:	401a      	ands	r2, r3
 800284e:	0013      	movs	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	189b      	adds	r3, r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	3310      	adds	r3, #16
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	18d3      	adds	r3, r2, r3
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00f      	b.n	8002886 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	1cfb      	adds	r3, r7, #3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2207      	movs	r2, #7
 800286c:	401a      	ands	r2, r3
 800286e:	0013      	movs	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	189b      	adds	r3, r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	3351      	adds	r3, #81	@ 0x51
 8002878:	33ff      	adds	r3, #255	@ 0xff
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	1cfb      	adds	r3, r7, #3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	23a4      	movs	r3, #164	@ 0xa4
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_PCD_EP_Close+0x76>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e011      	b.n	80028c8 <HAL_PCD_EP_Close+0x9a>
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	23a4      	movs	r3, #164	@ 0xa4
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	2101      	movs	r1, #1
 80028ac:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f003 ff72 	bl	80067a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	23a4      	movs	r3, #164	@ 0xa4
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	2100      	movs	r1, #0
 80028c4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	200b      	movs	r0, #11
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	1c0a      	adds	r2, r1, #0
 80028e2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	0001      	movs	r1, r0
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2207      	movs	r2, #7
 80028ec:	401a      	ands	r2, r3
 80028ee:	0013      	movs	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3351      	adds	r3, #81	@ 0x51
 80028f8:	33ff      	adds	r3, #255	@ 0xff
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	18d3      	adds	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2207      	movs	r2, #7
 800291e:	4013      	ands	r3, r2
 8002920:	b2da      	uxtb	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f004 f8f6 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b006      	add	sp, #24
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	200b      	movs	r0, #11
 800294c:	183b      	adds	r3, r7, r0
 800294e:	1c0a      	adds	r2, r1, #0
 8002950:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	183b      	adds	r3, r7, r0
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2207      	movs	r2, #7
 8002958:	401a      	ands	r2, r3
 800295a:	0013      	movs	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	189b      	adds	r3, r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	3310      	adds	r3, #16
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	18d3      	adds	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2201      	movs	r2, #1
 800298e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002990:	183b      	adds	r3, r7, r0
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2207      	movs	r2, #7
 8002996:	4013      	ands	r3, r2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	0011      	movs	r1, r2
 80029a6:	0018      	movs	r0, r3
 80029a8:	f004 f8ba 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b006      	add	sp, #24
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	000a      	movs	r2, r1
 80029c0:	1cfb      	adds	r3, r7, #3
 80029c2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c4:	1cfb      	adds	r3, r7, #3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2207      	movs	r2, #7
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	7912      	ldrb	r2, [r2, #4]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e046      	b.n	8002a66 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d8:	1cfb      	adds	r3, r7, #3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da0f      	bge.n	8002a02 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	1cfb      	adds	r3, r7, #3
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2207      	movs	r2, #7
 80029e8:	401a      	ands	r2, r3
 80029ea:	0013      	movs	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	3310      	adds	r3, #16
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	705a      	strb	r2, [r3, #1]
 8002a00:	e00d      	b.n	8002a1e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	0013      	movs	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	3351      	adds	r3, #81	@ 0x51
 8002a10:	33ff      	adds	r3, #255	@ 0xff
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2207      	movs	r2, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	23a4      	movs	r3, #164	@ 0xa4
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_EP_SetStall+0x8c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e011      	b.n	8002a66 <HAL_PCD_EP_SetStall+0xb0>
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	23a4      	movs	r3, #164	@ 0xa4
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	2101      	movs	r1, #1
 8002a4a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	0011      	movs	r1, r2
 8002a54:	0018      	movs	r0, r3
 8002a56:	f005 f993 	bl	8007d80 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	23a4      	movs	r3, #164	@ 0xa4
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	2100      	movs	r1, #0
 8002a62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	000a      	movs	r2, r1
 8002a78:	1cfb      	adds	r3, r7, #3
 8002a7a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a7c:	1cfb      	adds	r3, r7, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	220f      	movs	r2, #15
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	7912      	ldrb	r2, [r2, #4]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e048      	b.n	8002b22 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a90:	1cfb      	adds	r3, r7, #3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da0f      	bge.n	8002aba <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	1cfb      	adds	r3, r7, #3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	189b      	adds	r3, r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	3310      	adds	r3, #16
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	18d3      	adds	r3, r2, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	705a      	strb	r2, [r3, #1]
 8002ab8:	e00f      	b.n	8002ada <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	1cfb      	adds	r3, r7, #3
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2207      	movs	r2, #7
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	3351      	adds	r3, #81	@ 0x51
 8002acc:	33ff      	adds	r3, #255	@ 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae0:	1cfb      	adds	r3, r7, #3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	23a4      	movs	r3, #164	@ 0xa4
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_PCD_EP_ClrStall+0x90>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e011      	b.n	8002b22 <HAL_PCD_EP_ClrStall+0xb4>
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	23a4      	movs	r3, #164	@ 0xa4
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	2101      	movs	r1, #1
 8002b06:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	0011      	movs	r1, r2
 8002b10:	0018      	movs	r0, r3
 8002b12:	f005 f985 	bl	8007e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	23a4      	movs	r3, #164	@ 0xa4
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b096      	sub	sp, #88	@ 0x58
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b34:	f000 fbea 	bl	800330c <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2048      	movs	r0, #72	@ 0x48
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	2144      	movs	r1, #68	@ 0x44
 8002b42:	5a52      	ldrh	r2, [r2, r1]
 8002b44:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	244f      	movs	r4, #79	@ 0x4f
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	210f      	movs	r1, #15
 8002b52:	400a      	ands	r2, r1
 8002b54:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d000      	beq.n	8002b60 <PCD_EP_ISR_Handler+0x34>
 8002b5e:	e18d      	b.n	8002e7c <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2210      	movs	r2, #16
 8002b66:	4013      	ands	r3, r2
 8002b68:	d152      	bne.n	8002c10 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	200e      	movs	r0, #14
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	49ba      	ldr	r1, [pc, #744]	@ (8002e60 <PCD_EP_ISR_Handler+0x334>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	183a      	adds	r2, r7, r0
 8002b82:	8812      	ldrh	r2, [r2, #0]
 8002b84:	49b7      	ldr	r1, [pc, #732]	@ (8002e64 <PCD_EP_ISR_Handler+0x338>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3310      	adds	r3, #16
 8002b90:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2250      	movs	r2, #80	@ 0x50
 8002b98:	5a9b      	ldrh	r3, [r3, r2]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	18d2      	adds	r2, r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	18d3      	adds	r3, r2, r3
 8002bac:	4aae      	ldr	r2, [pc, #696]	@ (8002e68 <PCD_EP_ISR_Handler+0x33c>)
 8002bae:	4694      	mov	ip, r2
 8002bb0:	4463      	add	r3, ip
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	059b      	lsls	r3, r3, #22
 8002bb6:	0d9a      	lsrs	r2, r3, #22
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	18d2      	adds	r2, r2, r3
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f007 f8ca 	bl	8009d68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <PCD_EP_ISR_Handler+0xb6>
 8002bde:	f000 fb95 	bl	800330c <PCD_EP_ISR_Handler+0x7e0>
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <PCD_EP_ISR_Handler+0xc2>
 8002bea:	f000 fb8f 	bl	800330c <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7b1b      	ldrb	r3, [r3, #12]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	4252      	negs	r2, r2
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0011      	movs	r1, r2
 8002c02:	224c      	movs	r2, #76	@ 0x4c
 8002c04:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	731a      	strb	r2, [r3, #12]
 8002c0c:	f000 fb7e 	bl	800330c <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3351      	adds	r3, #81	@ 0x51
 8002c14:	33ff      	adds	r3, #255	@ 0xff
 8002c16:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	214c      	movs	r1, #76	@ 0x4c
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d037      	beq.n	8002ca0 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2250      	movs	r2, #80	@ 0x50
 8002c36:	5a9b      	ldrh	r3, [r3, r2]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	18d2      	adds	r2, r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	18d3      	adds	r3, r2, r3
 8002c4a:	4a88      	ldr	r2, [pc, #544]	@ (8002e6c <PCD_EP_ISR_Handler+0x340>)
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	4463      	add	r3, ip
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	059b      	lsls	r3, r3, #22
 8002c54:	0d9a      	lsrs	r2, r3, #22
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	22a6      	movs	r2, #166	@ 0xa6
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	1899      	adds	r1, r3, r2
 8002c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f005 fa0a 	bl	8008088 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	2010      	movs	r0, #16
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	497b      	ldr	r1, [pc, #492]	@ (8002e70 <PCD_EP_ISR_Handler+0x344>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	183a      	adds	r2, r7, r0
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	430a      	orrs	r2, r1
 8002c92:	b292      	uxth	r2, r2
 8002c94:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f007 f82f 	bl	8009cfc <HAL_PCD_SetupStageCallback>
 8002c9e:	e335      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ca0:	234c      	movs	r3, #76	@ 0x4c
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db00      	blt.n	8002cae <PCD_EP_ISR_Handler+0x182>
 8002cac:	e32e      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	201e      	movs	r0, #30
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	496d      	ldr	r1, [pc, #436]	@ (8002e70 <PCD_EP_ISR_Handler+0x344>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	183a      	adds	r2, r7, r0
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	2180      	movs	r1, #128	@ 0x80
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2250      	movs	r2, #80	@ 0x50
 8002cd6:	5a9b      	ldrh	r3, [r3, r2]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	001a      	movs	r2, r3
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	18d2      	adds	r2, r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	4a60      	ldr	r2, [pc, #384]	@ (8002e6c <PCD_EP_ISR_Handler+0x340>)
 8002cec:	4694      	mov	ip, r2
 8002cee:	4463      	add	r3, ip
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	059b      	lsls	r3, r3, #22
 8002cf4:	0d9a      	lsrs	r2, r3, #22
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01a      	beq.n	8002d38 <PCD_EP_ISR_Handler+0x20c>
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	6959      	ldr	r1, [r3, #20]
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d18:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f005 f9b4 	bl	8008088 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	18d2      	adds	r2, r2, r3
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2100      	movs	r1, #0
 8002d32:	0018      	movs	r0, r3
 8002d34:	f006 fff7 	bl	8009d26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	214c      	movs	r1, #76	@ 0x4c
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	8812      	ldrh	r2, [r2, #0]
 8002d42:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d000      	beq.n	8002d52 <PCD_EP_ISR_Handler+0x226>
 8002d50:	e2dc      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	23c0      	movs	r3, #192	@ 0xc0
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	23c0      	movs	r3, #192	@ 0xc0
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d100      	bne.n	8002d66 <PCD_EP_ISR_Handler+0x23a>
 8002d64:	e2d2      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2250      	movs	r2, #80	@ 0x50
 8002d72:	5a9b      	ldrh	r3, [r3, r2]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	001a      	movs	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4a3a      	ldr	r2, [pc, #232]	@ (8002e6c <PCD_EP_ISR_Handler+0x340>)
 8002d82:	4694      	mov	ip, r2
 8002d84:	4463      	add	r3, ip
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	059b      	lsls	r3, r3, #22
 8002d90:	0d9b      	lsrs	r3, r3, #22
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <PCD_EP_ISR_Handler+0x286>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e64 <PCD_EP_ISR_Handler+0x338>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e035      	b.n	8002e1e <PCD_EP_ISR_Handler+0x2f2>
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002db8:	d817      	bhi.n	8002dea <PCD_EP_ISR_Handler+0x2be>
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d002      	beq.n	8002dd2 <PCD_EP_ISR_Handler+0x2a6>
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dce:	3301      	adds	r3, #1
 8002dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e019      	b.n	8002e1e <PCD_EP_ISR_Handler+0x2f2>
 8002dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	221f      	movs	r2, #31
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d102      	bne.n	8002e02 <PCD_EP_ISR_Handler+0x2d6>
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	029b      	lsls	r3, r3, #10
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <PCD_EP_ISR_Handler+0x338>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	2012      	movs	r0, #18
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	4912      	ldr	r1, [pc, #72]	@ (8002e74 <PCD_EP_ISR_Handler+0x348>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	183b      	adds	r3, r7, r0
 8002e32:	183a      	adds	r2, r7, r0
 8002e34:	8812      	ldrh	r2, [r2, #0]
 8002e36:	2180      	movs	r1, #128	@ 0x80
 8002e38:	0149      	lsls	r1, r1, #5
 8002e3a:	404a      	eors	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	183b      	adds	r3, r7, r0
 8002e40:	183a      	adds	r2, r7, r0
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	2180      	movs	r1, #128	@ 0x80
 8002e46:	0189      	lsls	r1, r1, #6
 8002e48:	404a      	eors	r2, r1
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	183a      	adds	r2, r7, r0
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	4908      	ldr	r1, [pc, #32]	@ (8002e78 <PCD_EP_ISR_Handler+0x34c>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	801a      	strh	r2, [r3, #0]
 8002e5c:	e256      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	ffff8f0f 	.word	0xffff8f0f
 8002e64:	ffff8000 	.word	0xffff8000
 8002e68:	00000402 	.word	0x00000402
 8002e6c:	00000406 	.word	0x00000406
 8002e70:	00000f8f 	.word	0x00000f8f
 8002e74:	ffffbf8f 	.word	0xffffbf8f
 8002e78:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	001a      	movs	r2, r3
 8002e82:	204f      	movs	r0, #79	@ 0x4f
 8002e84:	183b      	adds	r3, r7, r0
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	214c      	movs	r1, #76	@ 0x4c
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	5e9b      	ldrsh	r3, [r3, r2]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db00      	blt.n	8002ea0 <PCD_EP_ISR_Handler+0x374>
 8002e9e:	e0fa      	b.n	8003096 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	244a      	movs	r4, #74	@ 0x4a
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	49d1      	ldr	r1, [pc, #836]	@ (80031fc <PCD_EP_ISR_Handler+0x6d0>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	193a      	adds	r2, r7, r4
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ed6:	183b      	adds	r3, r7, r0
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	0013      	movs	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	3351      	adds	r3, #81	@ 0x51
 8002ee4:	33ff      	adds	r3, #255	@ 0xff
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eee:	7b1b      	ldrb	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d125      	bne.n	8002f40 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2250      	movs	r2, #80	@ 0x50
 8002efa:	5a9b      	ldrh	r3, [r3, r2]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	001a      	movs	r2, r3
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	18d2      	adds	r2, r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	4abc      	ldr	r2, [pc, #752]	@ (8003200 <PCD_EP_ISR_Handler+0x6d4>)
 8002f10:	4694      	mov	ip, r2
 8002f12:	4463      	add	r3, ip
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	2450      	movs	r4, #80	@ 0x50
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	0592      	lsls	r2, r2, #22
 8002f1c:	0d92      	lsrs	r2, r2, #22
 8002f1e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d100      	bne.n	8002f2a <PCD_EP_ISR_Handler+0x3fe>
 8002f28:	e08d      	b.n	8003046 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f30:	6959      	ldr	r1, [r3, #20]
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	88da      	ldrh	r2, [r3, #6]
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	f005 f8a5 	bl	8008088 <USB_ReadPMA>
 8002f3e:	e082      	b.n	8003046 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f42:	78db      	ldrb	r3, [r3, #3]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d10c      	bne.n	8002f62 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f48:	2350      	movs	r3, #80	@ 0x50
 8002f4a:	18fc      	adds	r4, r7, r3
 8002f4c:	234c      	movs	r3, #76	@ 0x4c
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f9ec 	bl	8003334 <HAL_PCD_EP_DB_Receive>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	8023      	strh	r3, [r4, #0]
 8002f60:	e071      	b.n	8003046 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	001a      	movs	r2, r3
 8002f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	18d3      	adds	r3, r2, r3
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	2052      	movs	r0, #82	@ 0x52
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	49a2      	ldr	r1, [pc, #648]	@ (8003204 <PCD_EP_ISR_Handler+0x6d8>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	001a      	movs	r2, r3
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	18d3      	adds	r3, r2, r3
 8002f8c:	183a      	adds	r2, r7, r0
 8002f8e:	8812      	ldrh	r2, [r2, #0]
 8002f90:	499d      	ldr	r1, [pc, #628]	@ (8003208 <PCD_EP_ISR_Handler+0x6dc>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	b292      	uxth	r2, r2
 8002f96:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	001a      	movs	r2, r3
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d024      	beq.n	8002ffe <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2250      	movs	r2, #80	@ 0x50
 8002fba:	5a9b      	ldrh	r3, [r3, r2]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	18d2      	adds	r2, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	4a8f      	ldr	r2, [pc, #572]	@ (800320c <PCD_EP_ISR_Handler+0x6e0>)
 8002fd0:	4694      	mov	ip, r2
 8002fd2:	4463      	add	r3, ip
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	2450      	movs	r4, #80	@ 0x50
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	0592      	lsls	r2, r2, #22
 8002fdc:	0d92      	lsrs	r2, r2, #22
 8002fde:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02e      	beq.n	8003046 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	6959      	ldr	r1, [r3, #20]
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	891a      	ldrh	r2, [r3, #8]
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f005 f846 	bl	8008088 <USB_ReadPMA>
 8002ffc:	e023      	b.n	8003046 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2250      	movs	r2, #80	@ 0x50
 8003004:	5a9b      	ldrh	r3, [r3, r2]
 8003006:	b29b      	uxth	r3, r3
 8003008:	001a      	movs	r2, r3
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	18d2      	adds	r2, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	4a79      	ldr	r2, [pc, #484]	@ (8003200 <PCD_EP_ISR_Handler+0x6d4>)
 800301a:	4694      	mov	ip, r2
 800301c:	4463      	add	r3, ip
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	2450      	movs	r4, #80	@ 0x50
 8003022:	193b      	adds	r3, r7, r4
 8003024:	0592      	lsls	r2, r2, #22
 8003026:	0d92      	lsrs	r2, r2, #22
 8003028:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800302a:	193b      	adds	r3, r7, r4
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	6959      	ldr	r1, [r3, #20]
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	895a      	ldrh	r2, [r3, #10]
 800303e:	193b      	adds	r3, r7, r4
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	f005 f821 	bl	8008088 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	2150      	movs	r1, #80	@ 0x50
 800304c:	187b      	adds	r3, r7, r1
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	18d2      	adds	r2, r2, r3
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	187b      	adds	r3, r7, r1
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	18d2      	adds	r2, r2, r3
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <PCD_EP_ISR_Handler+0x54c>
 800306c:	187b      	adds	r3, r7, r1
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d207      	bcs.n	8003088 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f006 fe50 	bl	8009d26 <HAL_PCD_DataOutStageCallback>
 8003086:	e006      	b.n	8003096 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f003 fd45 	bl	8006b20 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003096:	244c      	movs	r4, #76	@ 0x4c
 8003098:	193b      	adds	r3, r7, r4
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	2280      	movs	r2, #128	@ 0x80
 800309e:	4013      	ands	r3, r2
 80030a0:	d100      	bne.n	80030a4 <PCD_EP_ISR_Handler+0x578>
 80030a2:	e133      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80030a4:	204f      	movs	r0, #79	@ 0x4f
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	0013      	movs	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	3310      	adds	r3, #16
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	18d3      	adds	r3, r2, r3
 80030b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	001a      	movs	r2, r3
 80030c0:	183b      	adds	r3, r7, r0
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	2542      	movs	r5, #66	@ 0x42
 80030ce:	197b      	adds	r3, r7, r5
 80030d0:	494f      	ldr	r1, [pc, #316]	@ (8003210 <PCD_EP_ISR_Handler+0x6e4>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	001a      	movs	r2, r3
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	18d3      	adds	r3, r2, r3
 80030e4:	197a      	adds	r2, r7, r5
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	494a      	ldr	r1, [pc, #296]	@ (8003214 <PCD_EP_ISR_Handler+0x6e8>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	b292      	uxth	r2, r2
 80030ee:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d000      	beq.n	80030fa <PCD_EP_ISR_Handler+0x5ce>
 80030f8:	e0af      	b.n	800325a <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80030fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	7b1b      	ldrb	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d100      	bne.n	800310a <PCD_EP_ISR_Handler+0x5de>
 8003108:	e09f      	b.n	800324a <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800310a:	193b      	adds	r3, r7, r4
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	4013      	ands	r3, r2
 8003112:	d046      	beq.n	80031a2 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d125      	bne.n	8003168 <PCD_EP_ISR_Handler+0x63c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2250      	movs	r2, #80	@ 0x50
 8003128:	5a9b      	ldrh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	001a      	movs	r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	189b      	adds	r3, r3, r2
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00da      	lsls	r2, r3, #3
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	4a33      	ldr	r2, [pc, #204]	@ (800320c <PCD_EP_ISR_Handler+0x6e0>)
 8003140:	4694      	mov	ip, r2
 8003142:	4463      	add	r3, ip
 8003144:	623b      	str	r3, [r7, #32]
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	059b      	lsls	r3, r3, #22
 800314e:	0d9b      	lsrs	r3, r3, #22
 8003150:	b29a      	uxth	r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <PCD_EP_ISR_Handler+0x6e8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	e070      	b.n	800324a <PCD_EP_ISR_Handler+0x71e>
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d16c      	bne.n	800324a <PCD_EP_ISR_Handler+0x71e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2250      	movs	r2, #80	@ 0x50
 800317c:	5a9b      	ldrh	r3, [r3, r2]
 800317e:	b29b      	uxth	r3, r3
 8003180:	001a      	movs	r2, r3
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003184:	189b      	adds	r3, r3, r2
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	00da      	lsls	r2, r3, #3
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	18d3      	adds	r3, r2, r3
 8003192:	4a1e      	ldr	r2, [pc, #120]	@ (800320c <PCD_EP_ISR_Handler+0x6e0>)
 8003194:	4694      	mov	ip, r2
 8003196:	4463      	add	r3, ip
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	e053      	b.n	800324a <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d133      	bne.n	8003218 <PCD_EP_ISR_Handler+0x6ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2250      	movs	r2, #80	@ 0x50
 80031bc:	5a9b      	ldrh	r3, [r3, r2]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	001a      	movs	r2, r3
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	18d3      	adds	r3, r2, r3
 80031d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <PCD_EP_ISR_Handler+0x6d4>)
 80031d4:	4694      	mov	ip, r2
 80031d6:	4463      	add	r3, ip
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	059b      	lsls	r3, r3, #22
 80031e2:	0d9b      	lsrs	r3, r3, #22
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4a08      	ldr	r2, [pc, #32]	@ (8003214 <PCD_EP_ISR_Handler+0x6e8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	e026      	b.n	800324a <PCD_EP_ISR_Handler+0x71e>
 80031fc:	00000f8f 	.word	0x00000f8f
 8003200:	00000406 	.word	0x00000406
 8003204:	ffff8f8f 	.word	0xffff8f8f
 8003208:	ffff80c0 	.word	0xffff80c0
 800320c:	00000402 	.word	0x00000402
 8003210:	ffff8f0f 	.word	0xffff8f0f
 8003214:	ffff8000 	.word	0xffff8000
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d114      	bne.n	800324a <PCD_EP_ISR_Handler+0x71e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2250      	movs	r2, #80	@ 0x50
 8003226:	5a9b      	ldrh	r3, [r3, r2]
 8003228:	b29b      	uxth	r3, r3
 800322a:	001a      	movs	r2, r3
 800322c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322e:	189b      	adds	r3, r3, r2
 8003230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	00da      	lsls	r2, r3, #3
 8003238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	4a3b      	ldr	r2, [pc, #236]	@ (800332c <PCD_EP_ISR_Handler+0x800>)
 800323e:	4694      	mov	ip, r2
 8003240:	4463      	add	r3, ip
 8003242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003246:	2200      	movs	r2, #0
 8003248:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0011      	movs	r1, r2
 8003252:	0018      	movs	r0, r3
 8003254:	f006 fd88 	bl	8009d68 <HAL_PCD_DataInStageCallback>
 8003258:	e058      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800325a:	234c      	movs	r3, #76	@ 0x4c
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4013      	ands	r3, r2
 8003266:	d149      	bne.n	80032fc <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2250      	movs	r2, #80	@ 0x50
 800326e:	5a9b      	ldrh	r3, [r3, r2]
 8003270:	b29b      	uxth	r3, r3
 8003272:	001a      	movs	r2, r3
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	18d2      	adds	r2, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	18d3      	adds	r3, r2, r3
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <PCD_EP_ISR_Handler+0x804>)
 8003284:	4694      	mov	ip, r2
 8003286:	4463      	add	r3, ip
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	2140      	movs	r1, #64	@ 0x40
 800328c:	187b      	adds	r3, r7, r1
 800328e:	0592      	lsls	r2, r2, #22
 8003290:	0d92      	lsrs	r2, r2, #22
 8003292:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	187b      	adds	r3, r7, r1
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d907      	bls.n	80032b0 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80032a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	1ad2      	subs	r2, r2, r3
 80032aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ac:	619a      	str	r2, [r3, #24]
 80032ae:	e002      	b.n	80032b6 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f006 fd4e 	bl	8009d68 <HAL_PCD_DataInStageCallback>
 80032cc:	e01e      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	2140      	movs	r1, #64	@ 0x40
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	18d2      	adds	r2, r2, r3
 80032da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032dc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f003 fc13 	bl	8006b20 <USB_EPStartXfer>
 80032fa:	e007      	b.n	800330c <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032fc:	234c      	movs	r3, #76	@ 0x4c
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f930 	bl	800356c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2244      	movs	r2, #68	@ 0x44
 8003312:	5a9b      	ldrh	r3, [r3, r2]
 8003314:	b29b      	uxth	r3, r3
 8003316:	b21b      	sxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	da01      	bge.n	8003320 <PCD_EP_ISR_Handler+0x7f4>
 800331c:	f7ff fc0c 	bl	8002b38 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b016      	add	sp, #88	@ 0x58
 8003328:	bdb0      	pop	{r4, r5, r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	00000406 	.word	0x00000406
 8003330:	00000402 	.word	0x00000402

08003334 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b089      	sub	sp, #36	@ 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	01db      	lsls	r3, r3, #7
 800334a:	4013      	ands	r3, r2
 800334c:	d100      	bne.n	8003350 <HAL_PCD_EP_DB_Receive+0x1c>
 800334e:	e07d      	b.n	800344c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2250      	movs	r2, #80	@ 0x50
 8003356:	5a9b      	ldrh	r3, [r3, r2]
 8003358:	b29b      	uxth	r3, r3
 800335a:	001a      	movs	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	18d2      	adds	r2, r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	4a7a      	ldr	r2, [pc, #488]	@ (8003554 <HAL_PCD_EP_DB_Receive+0x220>)
 800336c:	4694      	mov	ip, r2
 800336e:	4463      	add	r3, ip
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	211a      	movs	r1, #26
 8003374:	187b      	adds	r3, r7, r1
 8003376:	0592      	lsls	r2, r2, #22
 8003378:	0d92      	lsrs	r2, r2, #22
 800337a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	187b      	adds	r3, r7, r1
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d307      	bcc.n	8003398 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	187b      	adds	r3, r7, r1
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	1ad2      	subs	r2, r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	e002      	b.n	800339e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d121      	bne.n	80033ea <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	001a      	movs	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	2018      	movs	r0, #24
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	4966      	ldr	r1, [pc, #408]	@ (8003558 <HAL_PCD_EP_DB_Receive+0x224>)
 80033be:	400a      	ands	r2, r1
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	183b      	adds	r3, r7, r0
 80033c4:	183a      	adds	r2, r7, r0
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	2180      	movs	r1, #128	@ 0x80
 80033ca:	0189      	lsls	r1, r1, #6
 80033cc:	404a      	eors	r2, r1
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	001a      	movs	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	183a      	adds	r2, r7, r0
 80033e0:	8812      	ldrh	r2, [r2, #0]
 80033e2:	495e      	ldr	r1, [pc, #376]	@ (800355c <HAL_PCD_EP_DB_Receive+0x228>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	b292      	uxth	r2, r2
 80033e8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033ea:	1dbb      	adds	r3, r7, #6
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	4013      	ands	r3, r2
 80033f2:	d01a      	beq.n	800342a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	001a      	movs	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29a      	uxth	r2, r3
 8003406:	2016      	movs	r0, #22
 8003408:	183b      	adds	r3, r7, r0
 800340a:	4955      	ldr	r1, [pc, #340]	@ (8003560 <HAL_PCD_EP_DB_Receive+0x22c>)
 800340c:	400a      	ands	r2, r1
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	001a      	movs	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	183a      	adds	r2, r7, r0
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	4950      	ldr	r1, [pc, #320]	@ (8003564 <HAL_PCD_EP_DB_Receive+0x230>)
 8003424:	430a      	orrs	r2, r1
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800342a:	241a      	movs	r4, #26
 800342c:	193b      	adds	r3, r7, r4
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d100      	bne.n	8003436 <HAL_PCD_EP_DB_Receive+0x102>
 8003434:	e086      	b.n	8003544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6959      	ldr	r1, [r3, #20]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	891a      	ldrh	r2, [r3, #8]
 8003442:	193b      	adds	r3, r7, r4
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f004 fe1f 	bl	8008088 <USB_ReadPMA>
 800344a:	e07b      	b.n	8003544 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2250      	movs	r2, #80	@ 0x50
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	001a      	movs	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	18d2      	adds	r2, r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	18d3      	adds	r3, r2, r3
 8003466:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <HAL_PCD_EP_DB_Receive+0x234>)
 8003468:	4694      	mov	ip, r2
 800346a:	4463      	add	r3, ip
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	211a      	movs	r1, #26
 8003470:	187b      	adds	r3, r7, r1
 8003472:	0592      	lsls	r2, r2, #22
 8003474:	0d92      	lsrs	r2, r2, #22
 8003476:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	187b      	adds	r3, r7, r1
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d307      	bcc.n	8003494 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	187b      	adds	r3, r7, r1
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	1ad2      	subs	r2, r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	619a      	str	r2, [r3, #24]
 8003492:	e002      	b.n	800349a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d121      	bne.n	80034e6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	001a      	movs	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	18d3      	adds	r3, r2, r3
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	201e      	movs	r0, #30
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	4927      	ldr	r1, [pc, #156]	@ (8003558 <HAL_PCD_EP_DB_Receive+0x224>)
 80034ba:	400a      	ands	r2, r1
 80034bc:	801a      	strh	r2, [r3, #0]
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	183a      	adds	r2, r7, r0
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	2180      	movs	r1, #128	@ 0x80
 80034c6:	0189      	lsls	r1, r1, #6
 80034c8:	404a      	eors	r2, r1
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	183a      	adds	r2, r7, r0
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	491f      	ldr	r1, [pc, #124]	@ (800355c <HAL_PCD_EP_DB_Receive+0x228>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	b292      	uxth	r2, r2
 80034e4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034e6:	1dbb      	adds	r3, r7, #6
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2240      	movs	r2, #64	@ 0x40
 80034ec:	4013      	ands	r3, r2
 80034ee:	d11a      	bne.n	8003526 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	001a      	movs	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29a      	uxth	r2, r3
 8003502:	201c      	movs	r0, #28
 8003504:	183b      	adds	r3, r7, r0
 8003506:	4916      	ldr	r1, [pc, #88]	@ (8003560 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003508:	400a      	ands	r2, r1
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	001a      	movs	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	183a      	adds	r2, r7, r0
 800351c:	8812      	ldrh	r2, [r2, #0]
 800351e:	4911      	ldr	r1, [pc, #68]	@ (8003564 <HAL_PCD_EP_DB_Receive+0x230>)
 8003520:	430a      	orrs	r2, r1
 8003522:	b292      	uxth	r2, r2
 8003524:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003526:	241a      	movs	r4, #26
 8003528:	193b      	adds	r3, r7, r4
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6959      	ldr	r1, [r3, #20]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	895a      	ldrh	r2, [r3, #10]
 800353c:	193b      	adds	r3, r7, r4
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f004 fda2 	bl	8008088 <USB_ReadPMA>
    }
  }

  return count;
 8003544:	231a      	movs	r3, #26
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	881b      	ldrh	r3, [r3, #0]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b009      	add	sp, #36	@ 0x24
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	00000402 	.word	0x00000402
 8003558:	ffffbf8f 	.word	0xffffbf8f
 800355c:	ffff8080 	.word	0xffff8080
 8003560:	ffff8f8f 	.word	0xffff8f8f
 8003564:	ffff80c0 	.word	0xffff80c0
 8003568:	00000406 	.word	0x00000406

0800356c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0a4      	sub	sp, #144	@ 0x90
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	1dbb      	adds	r3, r7, #6
 8003578:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800357a:	1dbb      	adds	r3, r7, #6
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	2240      	movs	r2, #64	@ 0x40
 8003580:	4013      	ands	r3, r2
 8003582:	d100      	bne.n	8003586 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003584:	e1e4      	b.n	8003950 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2250      	movs	r2, #80	@ 0x50
 800358c:	5a9b      	ldrh	r3, [r3, r2]
 800358e:	b29b      	uxth	r3, r3
 8003590:	001a      	movs	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	18d2      	adds	r2, r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	4ad0      	ldr	r2, [pc, #832]	@ (80038e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80035a2:	4694      	mov	ip, r2
 80035a4:	4463      	add	r3, ip
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	2188      	movs	r1, #136	@ 0x88
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	0592      	lsls	r2, r2, #22
 80035ae:	0d92      	lsrs	r2, r2, #22
 80035b0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d907      	bls.n	80035ce <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e002      	b.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d000      	beq.n	80035de <HAL_PCD_EP_DB_Transmit+0x72>
 80035dc:	e0b5      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d125      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0xc6>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2250      	movs	r2, #80	@ 0x50
 80035f2:	5a9b      	ldrh	r3, [r3, r2]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	001a      	movs	r2, r3
 80035f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	18d3      	adds	r3, r2, r3
 8003608:	4ab6      	ldr	r2, [pc, #728]	@ (80038e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800360a:	4694      	mov	ip, r2
 800360c:	4463      	add	r3, ip
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	059b      	lsls	r3, r3, #22
 8003618:	0d9b      	lsrs	r3, r3, #22
 800361a:	b29a      	uxth	r2, r3
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4ab0      	ldr	r2, [pc, #704]	@ (80038e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	e01b      	b.n	800366a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	785b      	ldrb	r3, [r3, #1]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d117      	bne.n	800366a <HAL_PCD_EP_DB_Transmit+0xfe>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2250      	movs	r2, #80	@ 0x50
 8003646:	5a9b      	ldrh	r3, [r3, r2]
 8003648:	b29b      	uxth	r3, r3
 800364a:	001a      	movs	r2, r3
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	189b      	adds	r3, r3, r2
 8003650:	637b      	str	r3, [r7, #52]	@ 0x34
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00da      	lsls	r2, r3, #3
 8003658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	4aa1      	ldr	r2, [pc, #644]	@ (80038e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800365e:	4694      	mov	ip, r2
 8003660:	4463      	add	r3, ip
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d125      	bne.n	80036c4 <HAL_PCD_EP_DB_Transmit+0x158>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2250      	movs	r2, #80	@ 0x50
 8003684:	5a9b      	ldrh	r3, [r3, r2]
 8003686:	b29b      	uxth	r3, r3
 8003688:	001a      	movs	r2, r3
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	189b      	adds	r3, r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	18d3      	adds	r3, r2, r3
 800369a:	4a94      	ldr	r2, [pc, #592]	@ (80038ec <HAL_PCD_EP_DB_Transmit+0x380>)
 800369c:	4694      	mov	ip, r2
 800369e:	4463      	add	r3, ip
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	059b      	lsls	r3, r3, #22
 80036aa:	0d9b      	lsrs	r3, r3, #22
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4a8b      	ldr	r2, [pc, #556]	@ (80038e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b29a      	uxth	r2, r3
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	801a      	strh	r2, [r3, #0]
 80036c2:	e018      	b.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d114      	bne.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2250      	movs	r2, #80	@ 0x50
 80036d2:	5a9b      	ldrh	r3, [r3, r2]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	001a      	movs	r2, r3
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	00da      	lsls	r2, r3, #3
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	4a80      	ldr	r2, [pc, #512]	@ (80038ec <HAL_PCD_EP_DB_Transmit+0x380>)
 80036ea:	4694      	mov	ip, r2
 80036ec:	4463      	add	r3, ip
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f006 fb32 	bl	8009d68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4013      	ands	r3, r2
 800370e:	d100      	bne.n	8003712 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003710:	e308      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	001a      	movs	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29a      	uxth	r2, r3
 8003724:	2016      	movs	r0, #22
 8003726:	183b      	adds	r3, r7, r0
 8003728:	4971      	ldr	r1, [pc, #452]	@ (80038f0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800372a:	400a      	ands	r2, r1
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	001a      	movs	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	183a      	adds	r2, r7, r0
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	496c      	ldr	r1, [pc, #432]	@ (80038f4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8003742:	430a      	orrs	r2, r1
 8003744:	b292      	uxth	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	e2ec      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	01db      	lsls	r3, r3, #7
 8003752:	4013      	ands	r3, r2
 8003754:	d01a      	beq.n	800378c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	001a      	movs	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	18d3      	adds	r3, r2, r3
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29a      	uxth	r2, r3
 8003768:	208a      	movs	r0, #138	@ 0x8a
 800376a:	183b      	adds	r3, r7, r0
 800376c:	4960      	ldr	r1, [pc, #384]	@ (80038f0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800376e:	400a      	ands	r2, r1
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	001a      	movs	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	183a      	adds	r2, r7, r0
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	495b      	ldr	r1, [pc, #364]	@ (80038f4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8003786:	430a      	orrs	r2, r1
 8003788:	b292      	uxth	r2, r2
 800378a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2224      	movs	r2, #36	@ 0x24
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d000      	beq.n	8003798 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003796:	e2c5      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	2188      	movs	r1, #136	@ 0x88
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	18d2      	adds	r2, r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d30c      	bcc.n	80037dc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	218c      	movs	r1, #140	@ 0x8c
 80037c8:	187a      	adds	r2, r7, r1
 80037ca:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	621a      	str	r2, [r3, #32]
 80037da:	e01a      	b.n	8003812 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80037e4:	2388      	movs	r3, #136	@ 0x88
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	228c      	movs	r2, #140	@ 0x8c
 80037ec:	18ba      	adds	r2, r7, r2
 80037ee:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2224      	movs	r2, #36	@ 0x24
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]
 80037f8:	e00b      	b.n	8003812 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2224      	movs	r2, #36	@ 0x24
 80037fe:	2100      	movs	r1, #0
 8003800:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	228c      	movs	r2, #140	@ 0x8c
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d000      	beq.n	800381c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800381a:	e06d      	b.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x38c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2250      	movs	r2, #80	@ 0x50
 8003828:	5a9b      	ldrh	r3, [r3, r2]
 800382a:	b29b      	uxth	r3, r3
 800382c:	001a      	movs	r2, r3
 800382e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003830:	189b      	adds	r3, r3, r2
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00da      	lsls	r2, r3, #3
 800383a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383c:	18d3      	adds	r3, r2, r3
 800383e:	4a29      	ldr	r2, [pc, #164]	@ (80038e4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003840:	4694      	mov	ip, r2
 8003842:	4463      	add	r3, ip
 8003844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	059b      	lsls	r3, r3, #22
 800384e:	0d9b      	lsrs	r3, r3, #22
 8003850:	b29a      	uxth	r2, r3
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	238c      	movs	r3, #140	@ 0x8c
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <HAL_PCD_EP_DB_Transmit+0x306>
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4a20      	ldr	r2, [pc, #128]	@ (80038e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	b29a      	uxth	r2, r3
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	801a      	strh	r2, [r3, #0]
 8003870:	e061      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003872:	228c      	movs	r2, #140	@ 0x8c
 8003874:	18bb      	adds	r3, r7, r2
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b3e      	cmp	r3, #62	@ 0x3e
 800387a:	d817      	bhi.n	80038ac <HAL_PCD_EP_DB_Transmit+0x340>
 800387c:	18bb      	adds	r3, r7, r2
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003884:	18bb      	adds	r3, r7, r2
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	d002      	beq.n	8003894 <HAL_PCD_EP_DB_Transmit+0x328>
 800388e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003890:	3301      	adds	r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29a      	uxth	r2, r3
 800389a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389c:	b29b      	uxth	r3, r3
 800389e:	029b      	lsls	r3, r3, #10
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e044      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80038ac:	228c      	movs	r2, #140	@ 0x8c
 80038ae:	18bb      	adds	r3, r7, r2
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b6:	18bb      	adds	r3, r7, r2
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	221f      	movs	r2, #31
 80038bc:	4013      	ands	r3, r2
 80038be:	d102      	bne.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x35a>
 80038c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c2:	3b01      	subs	r3, #1
 80038c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	029b      	lsls	r3, r3, #10
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4a03      	ldr	r2, [pc, #12]	@ (80038e8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e028      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80038e4:	00000402 	.word	0x00000402
 80038e8:	ffff8000 	.word	0xffff8000
 80038ec:	00000406 	.word	0x00000406
 80038f0:	ffff8f8f 	.word	0xffff8f8f
 80038f4:	ffffc080 	.word	0xffffc080
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11a      	bne.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	647b      	str	r3, [r7, #68]	@ 0x44
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2250      	movs	r2, #80	@ 0x50
 800390c:	5a9b      	ldrh	r3, [r3, r2]
 800390e:	b29b      	uxth	r3, r3
 8003910:	001a      	movs	r2, r3
 8003912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003914:	189b      	adds	r3, r3, r2
 8003916:	647b      	str	r3, [r7, #68]	@ 0x44
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00da      	lsls	r2, r3, #3
 800391e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	4ad9      	ldr	r2, [pc, #868]	@ (8003c88 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8003924:	4694      	mov	ip, r2
 8003926:	4463      	add	r3, ip
 8003928:	643b      	str	r3, [r7, #64]	@ 0x40
 800392a:	238c      	movs	r3, #140	@ 0x8c
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003934:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6959      	ldr	r1, [r3, #20]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	891a      	ldrh	r2, [r3, #8]
 8003942:	238c      	movs	r3, #140	@ 0x8c
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f004 fb53 	bl	8007ff4 <USB_WritePMA>
 800394e:	e1e9      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2250      	movs	r2, #80	@ 0x50
 8003956:	5a9b      	ldrh	r3, [r3, r2]
 8003958:	b29b      	uxth	r3, r3
 800395a:	001a      	movs	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	18d2      	adds	r2, r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	4ac8      	ldr	r2, [pc, #800]	@ (8003c8c <HAL_PCD_EP_DB_Transmit+0x720>)
 800396c:	4694      	mov	ip, r2
 800396e:	4463      	add	r3, ip
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	2188      	movs	r1, #136	@ 0x88
 8003974:	187b      	adds	r3, r7, r1
 8003976:	0592      	lsls	r2, r2, #22
 8003978:	0d92      	lsrs	r2, r2, #22
 800397a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	187b      	adds	r3, r7, r1
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d307      	bcc.n	8003998 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	187b      	adds	r3, r7, r1
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	619a      	str	r2, [r3, #24]
 8003996:	e002      	b.n	800399e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d000      	beq.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80039a6:	e0bb      	b.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d125      	bne.n	80039fc <HAL_PCD_EP_DB_Transmit+0x490>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2250      	movs	r2, #80	@ 0x50
 80039bc:	5a9b      	ldrh	r3, [r3, r2]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	001a      	movs	r2, r3
 80039c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00da      	lsls	r2, r3, #3
 80039ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	4aad      	ldr	r2, [pc, #692]	@ (8003c88 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80039d4:	4694      	mov	ip, r2
 80039d6:	4463      	add	r3, ip
 80039d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	059b      	lsls	r3, r3, #22
 80039e2:	0d9b      	lsrs	r3, r3, #22
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4aa7      	ldr	r2, [pc, #668]	@ (8003c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	e01b      	b.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d117      	bne.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2250      	movs	r2, #80	@ 0x50
 8003a10:	5a9b      	ldrh	r3, [r3, r2]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	001a      	movs	r2, r3
 8003a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	00da      	lsls	r2, r3, #3
 8003a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	4a98      	ldr	r2, [pc, #608]	@ (8003c88 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8003a28:	4694      	mov	ip, r2
 8003a2a:	4463      	add	r3, ip
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a30:	2200      	movs	r2, #0
 8003a32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12b      	bne.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x52e>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2250      	movs	r2, #80	@ 0x50
 8003a4e:	5a9b      	ldrh	r3, [r3, r2]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	001a      	movs	r2, r3
 8003a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	00da      	lsls	r2, r3, #3
 8003a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a62:	18d3      	adds	r3, r2, r3
 8003a64:	4a89      	ldr	r2, [pc, #548]	@ (8003c8c <HAL_PCD_EP_DB_Transmit+0x720>)
 8003a66:	4694      	mov	ip, r2
 8003a68:	4463      	add	r3, ip
 8003a6a:	2184      	movs	r1, #132	@ 0x84
 8003a6c:	187a      	adds	r2, r7, r1
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	059b      	lsls	r3, r3, #22
 8003a7a:	0d9b      	lsrs	r3, r3, #22
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4a80      	ldr	r2, [pc, #512]	@ (8003c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	e018      	b.n	8003acc <HAL_PCD_EP_DB_Transmit+0x560>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d114      	bne.n	8003acc <HAL_PCD_EP_DB_Transmit+0x560>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2250      	movs	r2, #80	@ 0x50
 8003aa8:	5a9b      	ldrh	r3, [r3, r2]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	001a      	movs	r2, r3
 8003aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00da      	lsls	r2, r3, #3
 8003aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	4a73      	ldr	r2, [pc, #460]	@ (8003c8c <HAL_PCD_EP_DB_Transmit+0x720>)
 8003ac0:	4694      	mov	ip, r2
 8003ac2:	4463      	add	r3, ip
 8003ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ac8:	2200      	movs	r2, #0
 8003aca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f006 f947 	bl	8009d68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ada:	1dbb      	adds	r3, r7, #6
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	01db      	lsls	r3, r3, #7
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d000      	beq.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x57c>
 8003ae6:	e11d      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	001a      	movs	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	2082      	movs	r0, #130	@ 0x82
 8003afc:	183b      	adds	r3, r7, r0
 8003afe:	4965      	ldr	r1, [pc, #404]	@ (8003c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	18d3      	adds	r3, r2, r3
 8003b12:	183a      	adds	r2, r7, r0
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	4960      	ldr	r1, [pc, #384]	@ (8003c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	e101      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	01db      	lsls	r3, r3, #7
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d11a      	bne.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	001a      	movs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	204e      	movs	r0, #78	@ 0x4e
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	4954      	ldr	r1, [pc, #336]	@ (8003c94 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	18d3      	adds	r3, r2, r3
 8003b56:	183a      	adds	r2, r7, r0
 8003b58:	8812      	ldrh	r2, [r2, #0]
 8003b5a:	494f      	ldr	r1, [pc, #316]	@ (8003c98 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2224      	movs	r2, #36	@ 0x24
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d000      	beq.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x602>
 8003b6c:	e0da      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	2188      	movs	r1, #136	@ 0x88
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	18d2      	adds	r2, r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	18d2      	adds	r2, r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d30c      	bcc.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	218c      	movs	r1, #140	@ 0x8c
 8003b9e:	187a      	adds	r2, r7, r1
 8003ba0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6a1a      	ldr	r2, [r3, #32]
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e01a      	b.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003bba:	2388      	movs	r3, #136	@ 0x88
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	228c      	movs	r2, #140	@ 0x8c
 8003bc2:	18ba      	adds	r2, r7, r2
 8003bc4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2224      	movs	r2, #36	@ 0x24
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]
 8003bce:	e00b      	b.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	228c      	movs	r2, #140	@ 0x8c
 8003bd6:	18ba      	adds	r2, r7, r2
 8003bd8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2224      	movs	r2, #36	@ 0x24
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d000      	beq.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x68c>
 8003bf6:	e06d      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x768>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2250      	movs	r2, #80	@ 0x50
 8003c04:	5a9b      	ldrh	r3, [r3, r2]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	001a      	movs	r2, r3
 8003c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	00da      	lsls	r2, r3, #3
 8003c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_PCD_EP_DB_Transmit+0x720>)
 8003c1c:	4694      	mov	ip, r2
 8003c1e:	4463      	add	r3, ip
 8003c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	059b      	lsls	r3, r3, #22
 8003c2a:	0d9b      	lsrs	r3, r3, #22
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	238c      	movs	r3, #140	@ 0x8c
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x6e2>
 8003c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4a13      	ldr	r2, [pc, #76]	@ (8003c90 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	e05e      	b.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003c4e:	228c      	movs	r2, #140	@ 0x8c
 8003c50:	18bb      	adds	r3, r7, r2
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c56:	d821      	bhi.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x730>
 8003c58:	18bb      	adds	r3, r7, r2
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c60:	18bb      	adds	r3, r7, r2
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4013      	ands	r3, r2
 8003c68:	d002      	beq.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x704>
 8003c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e041      	b.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003c88:	00000402 	.word	0x00000402
 8003c8c:	00000406 	.word	0x00000406
 8003c90:	ffff8000 	.word	0xffff8000
 8003c94:	ffff8f8f 	.word	0xffff8f8f
 8003c98:	ffffc080 	.word	0xffffc080
 8003c9c:	228c      	movs	r2, #140	@ 0x8c
 8003c9e:	18bb      	adds	r3, r7, r2
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca6:	18bb      	adds	r3, r7, r2
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	221f      	movs	r2, #31
 8003cac:	4013      	ands	r3, r2
 8003cae:	d102      	bne.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x74a>
 8003cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	029b      	lsls	r3, r3, #10
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d7c <HAL_PCD_EP_DB_Transmit+0x810>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cd0:	801a      	strh	r2, [r3, #0]
 8003cd2:	e01b      	b.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d117      	bne.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2250      	movs	r2, #80	@ 0x50
 8003ce2:	5a9b      	ldrh	r3, [r3, r2]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	4463      	add	r3, ip
 8003cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d00:	238c      	movs	r3, #140	@ 0x8c
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6959      	ldr	r1, [r3, #20]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	895a      	ldrh	r2, [r3, #10]
 8003d18:	238c      	movs	r3, #140	@ 0x8c
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f004 f968 	bl	8007ff4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	001a      	movs	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	18d3      	adds	r3, r2, r3
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	2014      	movs	r0, #20
 8003d38:	183b      	adds	r3, r7, r0
 8003d3a:	4912      	ldr	r1, [pc, #72]	@ (8003d84 <HAL_PCD_EP_DB_Transmit+0x818>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	183b      	adds	r3, r7, r0
 8003d42:	183a      	adds	r2, r7, r0
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	2110      	movs	r1, #16
 8003d48:	404a      	eors	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	183b      	adds	r3, r7, r0
 8003d4e:	183a      	adds	r2, r7, r0
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	2120      	movs	r1, #32
 8003d54:	404a      	eors	r2, r1
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	183a      	adds	r2, r7, r0
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	4907      	ldr	r1, [pc, #28]	@ (8003d88 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b024      	add	sp, #144	@ 0x90
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffff8000 	.word	0xffff8000
 8003d80:	00000406 	.word	0x00000406
 8003d84:	ffff8fbf 	.word	0xffff8fbf
 8003d88:	ffff8080 	.word	0xffff8080

08003d8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	0008      	movs	r0, r1
 8003d96:	0011      	movs	r1, r2
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	240a      	movs	r4, #10
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	1c02      	adds	r2, r0, #0
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	2308      	movs	r3, #8
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	1c0a      	adds	r2, r1, #0
 8003da8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003daa:	0021      	movs	r1, r4
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	2280      	movs	r2, #128	@ 0x80
 8003db2:	4013      	ands	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	2207      	movs	r2, #7
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3310      	adds	r3, #16
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e00b      	b.n	8003dec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	0013      	movs	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	3351      	adds	r3, #81	@ 0x51
 8003de4:	33ff      	adds	r3, #255	@ 0xff
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dec:	2308      	movs	r3, #8
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	80da      	strh	r2, [r3, #6]
 8003e04:	e00b      	b.n	8003e1e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b007      	add	sp, #28
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	23b4      	movs	r3, #180	@ 0xb4
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	23b2      	movs	r3, #178	@ 0xb2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	2100      	movs	r1, #0
 8003e48:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2254      	movs	r2, #84	@ 0x54
 8003e4e:	5a9b      	ldrh	r3, [r3, r2]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2201      	movs	r2, #1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b299      	uxth	r1, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2254      	movs	r2, #84	@ 0x54
 8003e5c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2254      	movs	r2, #84	@ 0x54
 8003e62:	5a9b      	ldrh	r3, [r3, r2]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2202      	movs	r2, #2
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2254      	movs	r2, #84	@ 0x54
 8003e70:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cfb      	adds	r3, r7, #3
 8003e88:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f000 fb76 	bl	8004594 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x20>
 8003eb2:	e08e      	b.n	8003fd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003eb4:	4bc5      	ldr	r3, [pc, #788]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	220c      	movs	r2, #12
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00e      	beq.n	8003ede <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ec0:	4bc2      	ldr	r3, [pc, #776]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	220c      	movs	r2, #12
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d117      	bne.n	8003efc <HAL_RCC_OscConfig+0x68>
 8003ecc:	4bbf      	ldr	r3, [pc, #764]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	23c0      	movs	r3, #192	@ 0xc0
 8003ed2:	025b      	lsls	r3, r3, #9
 8003ed4:	401a      	ands	r2, r3
 8003ed6:	2380      	movs	r3, #128	@ 0x80
 8003ed8:	025b      	lsls	r3, r3, #9
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10e      	bne.n	8003efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ede:	4bbb      	ldr	r3, [pc, #748]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	029b      	lsls	r3, r3, #10
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d100      	bne.n	8003eec <HAL_RCC_OscConfig+0x58>
 8003eea:	e071      	b.n	8003fd0 <HAL_RCC_OscConfig+0x13c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d000      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x62>
 8003ef4:	e06c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f000 fb4c 	bl	8004594 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x80>
 8003f04:	4bb1      	ldr	r3, [pc, #708]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4bb0      	ldr	r3, [pc, #704]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f0a:	2180      	movs	r1, #128	@ 0x80
 8003f0c:	0249      	lsls	r1, r1, #9
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e02f      	b.n	8003f74 <HAL_RCC_OscConfig+0xe0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_OscConfig+0xa2>
 8003f1c:	4bab      	ldr	r3, [pc, #684]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4baa      	ldr	r3, [pc, #680]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f22:	49ab      	ldr	r1, [pc, #684]	@ (80041d0 <HAL_RCC_OscConfig+0x33c>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4ba8      	ldr	r3, [pc, #672]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4ba7      	ldr	r3, [pc, #668]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f2e:	49a9      	ldr	r1, [pc, #676]	@ (80041d4 <HAL_RCC_OscConfig+0x340>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e01e      	b.n	8003f74 <HAL_RCC_OscConfig+0xe0>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCC_OscConfig+0xc8>
 8003f3e:	4ba3      	ldr	r3, [pc, #652]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4ba2      	ldr	r3, [pc, #648]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f44:	2180      	movs	r1, #128	@ 0x80
 8003f46:	02c9      	lsls	r1, r1, #11
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	4b9f      	ldr	r3, [pc, #636]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b9e      	ldr	r3, [pc, #632]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f52:	2180      	movs	r1, #128	@ 0x80
 8003f54:	0249      	lsls	r1, r1, #9
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xe0>
 8003f5c:	4b9b      	ldr	r3, [pc, #620]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b9a      	ldr	r3, [pc, #616]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f62:	499b      	ldr	r1, [pc, #620]	@ (80041d0 <HAL_RCC_OscConfig+0x33c>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b98      	ldr	r3, [pc, #608]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b97      	ldr	r3, [pc, #604]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f6e:	4999      	ldr	r1, [pc, #612]	@ (80041d4 <HAL_RCC_OscConfig+0x340>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fce8 	bl	8001950 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f86:	f7fd fce3 	bl	8001950 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b64      	cmp	r3, #100	@ 0x64
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e2fd      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f98:	4b8c      	ldr	r3, [pc, #560]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0xf2>
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fcd3 	bl	8001950 <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd fcce 	bl	8001950 <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e2e8      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b82      	ldr	r3, [pc, #520]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	029b      	lsls	r3, r3, #10
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x11c>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d100      	bne.n	8003fde <HAL_RCC_OscConfig+0x14a>
 8003fdc:	e06c      	b.n	80040b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fde:	4b7b      	ldr	r3, [pc, #492]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fe8:	4b78      	ldr	r3, [pc, #480]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	220c      	movs	r2, #12
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d11f      	bne.n	8004034 <HAL_RCC_OscConfig+0x1a0>
 8003ff4:	4b75      	ldr	r3, [pc, #468]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	23c0      	movs	r3, #192	@ 0xc0
 8003ffa:	025b      	lsls	r3, r3, #9
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	2380      	movs	r3, #128	@ 0x80
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	429a      	cmp	r2, r3
 8004004:	d116      	bne.n	8004034 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	4b71      	ldr	r3, [pc, #452]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2202      	movs	r2, #2
 800400c:	4013      	ands	r3, r2
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x188>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e2bb      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b6b      	ldr	r3, [pc, #428]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	22f8      	movs	r2, #248	@ 0xf8
 8004022:	4393      	bics	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	00da      	lsls	r2, r3, #3
 800402c:	4b67      	ldr	r3, [pc, #412]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004032:	e041      	b.n	80040b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d024      	beq.n	8004086 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403c:	4b63      	ldr	r3, [pc, #396]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b62      	ldr	r3, [pc, #392]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004042:	2101      	movs	r1, #1
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd fc82 	bl	8001950 <HAL_GetTick>
 800404c:	0003      	movs	r3, r0
 800404e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004052:	f7fd fc7d 	bl	8001950 <HAL_GetTick>
 8004056:	0002      	movs	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e297      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2202      	movs	r2, #2
 800406a:	4013      	ands	r3, r2
 800406c:	d0f1      	beq.n	8004052 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	22f8      	movs	r2, #248	@ 0xf8
 8004074:	4393      	bics	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	00da      	lsls	r2, r3, #3
 800407e:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e018      	b.n	80040b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	4b51      	ldr	r3, [pc, #324]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 800408c:	2101      	movs	r1, #1
 800408e:	438a      	bics	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fd fc5d 	bl	8001950 <HAL_GetTick>
 8004096:	0003      	movs	r3, r0
 8004098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409c:	f7fd fc58 	bl	8001950 <HAL_GetTick>
 80040a0:	0002      	movs	r2, r0
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e272      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d1f1      	bne.n	800409c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2208      	movs	r2, #8
 80040be:	4013      	ands	r3, r2
 80040c0:	d036      	beq.n	8004130 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d019      	beq.n	80040fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b40      	ldr	r3, [pc, #256]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80040cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ce:	4b3f      	ldr	r3, [pc, #252]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d6:	f7fd fc3b 	bl	8001950 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd fc36 	bl	8001950 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e250      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d0f1      	beq.n	80040e0 <HAL_RCC_OscConfig+0x24c>
 80040fc:	e018      	b.n	8004130 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fe:	4b33      	ldr	r3, [pc, #204]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004102:	4b32      	ldr	r3, [pc, #200]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004104:	2101      	movs	r1, #1
 8004106:	438a      	bics	r2, r1
 8004108:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410a:	f7fd fc21 	bl	8001950 <HAL_GetTick>
 800410e:	0003      	movs	r3, r0
 8004110:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd fc1c 	bl	8001950 <HAL_GetTick>
 8004118:	0002      	movs	r2, r0
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e236      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004126:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	2202      	movs	r2, #2
 800412c:	4013      	ands	r3, r2
 800412e:	d1f1      	bne.n	8004114 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2204      	movs	r2, #4
 8004136:	4013      	ands	r3, r2
 8004138:	d100      	bne.n	800413c <HAL_RCC_OscConfig+0x2a8>
 800413a:	e0b5      	b.n	80042a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413c:	201f      	movs	r0, #31
 800413e:	183b      	adds	r3, r7, r0
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	2380      	movs	r3, #128	@ 0x80
 800414a:	055b      	lsls	r3, r3, #21
 800414c:	4013      	ands	r3, r2
 800414e:	d110      	bne.n	8004172 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004156:	2180      	movs	r1, #128	@ 0x80
 8004158:	0549      	lsls	r1, r1, #21
 800415a:	430a      	orrs	r2, r1
 800415c:	61da      	str	r2, [r3, #28]
 800415e:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	055b      	lsls	r3, r3, #21
 8004166:	4013      	ands	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800416c:	183b      	adds	r3, r7, r0
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_RCC_OscConfig+0x344>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d11a      	bne.n	80041b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417e:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <HAL_RCC_OscConfig+0x344>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <HAL_RCC_OscConfig+0x344>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0049      	lsls	r1, r1, #1
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418c:	f7fd fbe0 	bl	8001950 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd fbdb 	bl	8001950 <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b64      	cmp	r3, #100	@ 0x64
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1f5      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCC_OscConfig+0x344>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4013      	ands	r3, r2
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10f      	bne.n	80041dc <HAL_RCC_OscConfig+0x348>
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	4b02      	ldr	r3, [pc, #8]	@ (80041cc <HAL_RCC_OscConfig+0x338>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	621a      	str	r2, [r3, #32]
 80041c8:	e036      	b.n	8004238 <HAL_RCC_OscConfig+0x3a4>
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	40021000 	.word	0x40021000
 80041d0:	fffeffff 	.word	0xfffeffff
 80041d4:	fffbffff 	.word	0xfffbffff
 80041d8:	40007000 	.word	0x40007000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x36a>
 80041e4:	4bca      	ldr	r3, [pc, #808]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80041e6:	6a1a      	ldr	r2, [r3, #32]
 80041e8:	4bc9      	ldr	r3, [pc, #804]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	621a      	str	r2, [r3, #32]
 80041f0:	4bc7      	ldr	r3, [pc, #796]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	4bc6      	ldr	r3, [pc, #792]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80041f6:	2104      	movs	r1, #4
 80041f8:	438a      	bics	r2, r1
 80041fa:	621a      	str	r2, [r3, #32]
 80041fc:	e01c      	b.n	8004238 <HAL_RCC_OscConfig+0x3a4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x38c>
 8004206:	4bc2      	ldr	r3, [pc, #776]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	4bc1      	ldr	r3, [pc, #772]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800420c:	2104      	movs	r1, #4
 800420e:	430a      	orrs	r2, r1
 8004210:	621a      	str	r2, [r3, #32]
 8004212:	4bbf      	ldr	r3, [pc, #764]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	4bbe      	ldr	r3, [pc, #760]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004218:	2101      	movs	r1, #1
 800421a:	430a      	orrs	r2, r1
 800421c:	621a      	str	r2, [r3, #32]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x3a4>
 8004220:	4bbb      	ldr	r3, [pc, #748]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	4bba      	ldr	r3, [pc, #744]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	621a      	str	r2, [r3, #32]
 800422c:	4bb8      	ldr	r3, [pc, #736]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	4bb7      	ldr	r3, [pc, #732]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004232:	2104      	movs	r1, #4
 8004234:	438a      	bics	r2, r1
 8004236:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d014      	beq.n	800426a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004240:	f7fd fb86 	bl	8001950 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004248:	e009      	b.n	800425e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fd fb81 	bl	8001950 <HAL_GetTick>
 800424e:	0002      	movs	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	4aaf      	ldr	r2, [pc, #700]	@ (8004514 <HAL_RCC_OscConfig+0x680>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e19a      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4bac      	ldr	r3, [pc, #688]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	2202      	movs	r2, #2
 8004264:	4013      	ands	r3, r2
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x3b6>
 8004268:	e013      	b.n	8004292 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fd fb71 	bl	8001950 <HAL_GetTick>
 800426e:	0003      	movs	r3, r0
 8004270:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	e009      	b.n	8004288 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fb6c 	bl	8001950 <HAL_GetTick>
 8004278:	0002      	movs	r2, r0
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	4aa5      	ldr	r2, [pc, #660]	@ (8004514 <HAL_RCC_OscConfig+0x680>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e185      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4ba1      	ldr	r3, [pc, #644]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	2202      	movs	r2, #2
 800428e:	4013      	ands	r3, r2
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004292:	231f      	movs	r3, #31
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b9c      	ldr	r3, [pc, #624]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042a2:	499d      	ldr	r1, [pc, #628]	@ (8004518 <HAL_RCC_OscConfig+0x684>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2210      	movs	r2, #16
 80042ae:	4013      	ands	r3, r2
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d12a      	bne.n	8004310 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042ba:	4b95      	ldr	r3, [pc, #596]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042be:	4b94      	ldr	r3, [pc, #592]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042c0:	2104      	movs	r1, #4
 80042c2:	430a      	orrs	r2, r1
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042c6:	4b92      	ldr	r3, [pc, #584]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ca:	4b91      	ldr	r3, [pc, #580]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042cc:	2101      	movs	r1, #1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fd fb3d 	bl	8001950 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042dc:	f7fd fb38 	bl	8001950 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e152      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042ee:	4b88      	ldr	r3, [pc, #544]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f2:	2202      	movs	r2, #2
 80042f4:	4013      	ands	r3, r2
 80042f6:	d0f1      	beq.n	80042dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042f8:	4b85      	ldr	r3, [pc, #532]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	22f8      	movs	r2, #248	@ 0xf8
 80042fe:	4393      	bics	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	00da      	lsls	r2, r3, #3
 8004308:	4b81      	ldr	r3, [pc, #516]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34
 800430e:	e034      	b.n	800437a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	3305      	adds	r3, #5
 8004316:	d111      	bne.n	800433c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004318:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800431a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800431c:	4b7c      	ldr	r3, [pc, #496]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800431e:	2104      	movs	r1, #4
 8004320:	438a      	bics	r2, r1
 8004322:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004324:	4b7a      	ldr	r3, [pc, #488]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004328:	22f8      	movs	r2, #248	@ 0xf8
 800432a:	4393      	bics	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	00da      	lsls	r2, r3, #3
 8004334:	4b76      	ldr	r3, [pc, #472]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004336:	430a      	orrs	r2, r1
 8004338:	635a      	str	r2, [r3, #52]	@ 0x34
 800433a:	e01e      	b.n	800437a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800433c:	4b74      	ldr	r3, [pc, #464]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800433e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004340:	4b73      	ldr	r3, [pc, #460]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004342:	2104      	movs	r1, #4
 8004344:	430a      	orrs	r2, r1
 8004346:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004348:	4b71      	ldr	r3, [pc, #452]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800434a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800434c:	4b70      	ldr	r3, [pc, #448]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800434e:	2101      	movs	r1, #1
 8004350:	438a      	bics	r2, r1
 8004352:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fd fafc 	bl	8001950 <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800435e:	f7fd faf7 	bl	8001950 <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e111      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004370:	4b67      	ldr	r3, [pc, #412]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004374:	2202      	movs	r2, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d1f1      	bne.n	800435e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2220      	movs	r2, #32
 8004380:	4013      	ands	r3, r2
 8004382:	d05c      	beq.n	800443e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004384:	4b62      	ldr	r3, [pc, #392]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	220c      	movs	r2, #12
 800438a:	4013      	ands	r3, r2
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d00e      	beq.n	80043ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004390:	4b5f      	ldr	r3, [pc, #380]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	220c      	movs	r2, #12
 8004396:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004398:	2b08      	cmp	r3, #8
 800439a:	d114      	bne.n	80043c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800439c:	4b5c      	ldr	r3, [pc, #368]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	23c0      	movs	r3, #192	@ 0xc0
 80043a2:	025b      	lsls	r3, r3, #9
 80043a4:	401a      	ands	r2, r3
 80043a6:	23c0      	movs	r3, #192	@ 0xc0
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d10b      	bne.n	80043c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80043ae:	4b58      	ldr	r3, [pc, #352]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80043b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b2:	2380      	movs	r3, #128	@ 0x80
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_RCC_OscConfig+0x5a8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d03c      	beq.n	800443c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0e6      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01b      	beq.n	8004406 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80043ce:	4b50      	ldr	r3, [pc, #320]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80043d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80043d4:	2180      	movs	r1, #128	@ 0x80
 80043d6:	0249      	lsls	r1, r1, #9
 80043d8:	430a      	orrs	r2, r1
 80043da:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fd fab8 	bl	8001950 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e6:	f7fd fab3 	bl	8001950 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0cd      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043f8:	4b45      	ldr	r3, [pc, #276]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80043fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	4013      	ands	r3, r2
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x552>
 8004404:	e01b      	b.n	800443e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004406:	4b42      	ldr	r3, [pc, #264]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800440a:	4b41      	ldr	r3, [pc, #260]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800440c:	4943      	ldr	r1, [pc, #268]	@ (800451c <HAL_RCC_OscConfig+0x688>)
 800440e:	400a      	ands	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fd fa9d 	bl	8001950 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441c:	f7fd fa98 	bl	8001950 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0b2      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800442e:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	4013      	ands	r3, r2
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x588>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800443c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d100      	bne.n	8004448 <HAL_RCC_OscConfig+0x5b4>
 8004446:	e0a4      	b.n	8004592 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004448:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	220c      	movs	r2, #12
 800444e:	4013      	ands	r3, r2
 8004450:	2b08      	cmp	r3, #8
 8004452:	d100      	bne.n	8004456 <HAL_RCC_OscConfig+0x5c2>
 8004454:	e078      	b.n	8004548 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	2b02      	cmp	r3, #2
 800445c:	d14c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	4b2c      	ldr	r3, [pc, #176]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b2b      	ldr	r3, [pc, #172]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004464:	492e      	ldr	r1, [pc, #184]	@ (8004520 <HAL_RCC_OscConfig+0x68c>)
 8004466:	400a      	ands	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446a:	f7fd fa71 	bl	8001950 <HAL_GetTick>
 800446e:	0003      	movs	r3, r0
 8004470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004474:	f7fd fa6c 	bl	8001950 <HAL_GetTick>
 8004478:	0002      	movs	r2, r0
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e086      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004486:	4b22      	ldr	r3, [pc, #136]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	049b      	lsls	r3, r3, #18
 800448e:	4013      	ands	r3, r2
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004492:	4b1f      	ldr	r3, [pc, #124]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	220f      	movs	r2, #15
 8004498:	4393      	bics	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044a2:	430a      	orrs	r2, r1
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_RCC_OscConfig+0x690>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	431a      	orrs	r2, r3
 80044ba:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044c6:	2180      	movs	r1, #128	@ 0x80
 80044c8:	0449      	lsls	r1, r1, #17
 80044ca:	430a      	orrs	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fd fa3f 	bl	8001950 <HAL_GetTick>
 80044d2:	0003      	movs	r3, r0
 80044d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fa3a 	bl	8001950 <HAL_GetTick>
 80044dc:	0002      	movs	r2, r0
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e054      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ea:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	049b      	lsls	r3, r3, #18
 80044f2:	4013      	ands	r3, r2
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x644>
 80044f6:	e04c      	b.n	8004592 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_RCC_OscConfig+0x67c>)
 80044fe:	4908      	ldr	r1, [pc, #32]	@ (8004520 <HAL_RCC_OscConfig+0x68c>)
 8004500:	400a      	ands	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd fa24 	bl	8001950 <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	e015      	b.n	800453a <HAL_RCC_OscConfig+0x6a6>
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	40021000 	.word	0x40021000
 8004514:	00001388 	.word	0x00001388
 8004518:	efffffff 	.word	0xefffffff
 800451c:	fffeffff 	.word	0xfffeffff
 8004520:	feffffff 	.word	0xfeffffff
 8004524:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd fa12 	bl	8001950 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e02c      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	4b18      	ldr	r3, [pc, #96]	@ (800459c <HAL_RCC_OscConfig+0x708>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	049b      	lsls	r3, r3, #18
 8004542:	4013      	ands	r3, r2
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x694>
 8004546:	e024      	b.n	8004592 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e01f      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004554:	4b11      	ldr	r3, [pc, #68]	@ (800459c <HAL_RCC_OscConfig+0x708>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <HAL_RCC_OscConfig+0x708>)
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	23c0      	movs	r3, #192	@ 0xc0
 8004564:	025b      	lsls	r3, r3, #9
 8004566:	401a      	ands	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	429a      	cmp	r2, r3
 800456e:	d10e      	bne.n	800458e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	220f      	movs	r2, #15
 8004574:	401a      	ands	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d107      	bne.n	800458e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	23f0      	movs	r3, #240	@ 0xf0
 8004582:	039b      	lsls	r3, r3, #14
 8004584:	401a      	ands	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b008      	add	sp, #32
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0bf      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b61      	ldr	r3, [pc, #388]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d911      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b5e      	ldr	r3, [pc, #376]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	4b5b      	ldr	r3, [pc, #364]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d4:	4b59      	ldr	r3, [pc, #356]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0a6      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d015      	beq.n	800461c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2204      	movs	r2, #4
 80045f6:	4013      	ands	r3, r2
 80045f8:	d006      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045fa:	4b51      	ldr	r3, [pc, #324]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	4b50      	ldr	r3, [pc, #320]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004600:	21e0      	movs	r1, #224	@ 0xe0
 8004602:	00c9      	lsls	r1, r1, #3
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b4d      	ldr	r3, [pc, #308]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	22f0      	movs	r2, #240	@ 0xf0
 800460e:	4393      	bics	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	4b4a      	ldr	r3, [pc, #296]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d04c      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	029b      	lsls	r3, r3, #10
 8004636:	4013      	ands	r3, r2
 8004638:	d120      	bne.n	800467c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07a      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	049b      	lsls	r3, r3, #18
 800464e:	4013      	ands	r3, r2
 8004650:	d114      	bne.n	800467c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06e      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800465e:	4b38      	ldr	r3, [pc, #224]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	4013      	ands	r3, r2
 8004668:	d108      	bne.n	800467c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e062      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2202      	movs	r2, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e05b      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467c:	4b30      	ldr	r3, [pc, #192]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2203      	movs	r2, #3
 8004682:	4393      	bics	r3, r2
 8004684:	0019      	movs	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fd f95e 	bl	8001950 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004698:	e009      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469a:	f7fd f959 	bl	8001950 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	4a27      	ldr	r2, [pc, #156]	@ (8004744 <HAL_RCC_ClockConfig+0x1a4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e042      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	220c      	movs	r2, #12
 80046b4:	401a      	ands	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1ec      	bne.n	800469a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d211      	bcs.n	80046f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4393      	bics	r3, r2
 80046d6:	0019      	movs	r1, r3
 80046d8:	4b18      	ldr	r3, [pc, #96]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_RCC_ClockConfig+0x19c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e020      	b.n	8004734 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2204      	movs	r2, #4
 80046f8:	4013      	ands	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <HAL_RCC_ClockConfig+0x1a8>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004710:	f000 f820 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004714:	0001      	movs	r1, r0
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_ClockConfig+0x1a0>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	220f      	movs	r2, #15
 800471e:	4013      	ands	r3, r2
 8004720:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <HAL_RCC_ClockConfig+0x1ac>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	000a      	movs	r2, r1
 8004726:	40da      	lsrs	r2, r3
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 800472a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800472c:	2003      	movs	r0, #3
 800472e:	f7fd f8c9 	bl	80018c4 <HAL_InitTick>
  
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40022000 	.word	0x40022000
 8004740:	40021000 	.word	0x40021000
 8004744:	00001388 	.word	0x00001388
 8004748:	fffff8ff 	.word	0xfffff8ff
 800474c:	0800a434 	.word	0x0800a434
 8004750:	2000012c 	.word	0x2000012c

08004754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800476e:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	220c      	movs	r2, #12
 8004778:	4013      	ands	r3, r2
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d046      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>
 800477e:	d848      	bhi.n	8004812 <HAL_RCC_GetSysClockFreq+0xbe>
 8004780:	2b04      	cmp	r3, #4
 8004782:	d002      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x36>
 8004784:	2b08      	cmp	r3, #8
 8004786:	d003      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x3c>
 8004788:	e043      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800478a:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xd4>)
 800478c:	613b      	str	r3, [r7, #16]
      break;
 800478e:	e043      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0c9b      	lsrs	r3, r3, #18
 8004794:	220f      	movs	r2, #15
 8004796:	4013      	ands	r3, r2
 8004798:	4a24      	ldr	r2, [pc, #144]	@ (800482c <HAL_RCC_GetSysClockFreq+0xd8>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800479e:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	220f      	movs	r2, #15
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_RCC_GetSysClockFreq+0xdc>)
 80047a8:	5cd3      	ldrb	r3, [r2, r3]
 80047aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	23c0      	movs	r3, #192	@ 0xc0
 80047b0:	025b      	lsls	r3, r3, #9
 80047b2:	401a      	ands	r2, r3
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	025b      	lsls	r3, r3, #9
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d109      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	481a      	ldr	r0, [pc, #104]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047c0:	f7fb fca2 	bl	8000108 <__udivsi3>
 80047c4:	0003      	movs	r3, r0
 80047c6:	001a      	movs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4353      	muls	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e01a      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	23c0      	movs	r3, #192	@ 0xc0
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	401a      	ands	r2, r3
 80047d8:	23c0      	movs	r3, #192	@ 0xc0
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	429a      	cmp	r2, r3
 80047de:	d109      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4814      	ldr	r0, [pc, #80]	@ (8004834 <HAL_RCC_GetSysClockFreq+0xe0>)
 80047e4:	f7fb fc90 	bl	8000108 <__udivsi3>
 80047e8:	0003      	movs	r3, r0
 80047ea:	001a      	movs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4353      	muls	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e008      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	480c      	ldr	r0, [pc, #48]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047f8:	f7fb fc86 	bl	8000108 <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	001a      	movs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4353      	muls	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	613b      	str	r3, [r7, #16]
      break;
 800480a:	e005      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <HAL_RCC_GetSysClockFreq+0xe0>)
 800480e:	613b      	str	r3, [r7, #16]
      break;
 8004810:	e002      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004812:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004814:	613b      	str	r3, [r7, #16]
      break;
 8004816:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004818:	693b      	ldr	r3, [r7, #16]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	40021000 	.word	0x40021000
 8004828:	007a1200 	.word	0x007a1200
 800482c:	0800a444 	.word	0x0800a444
 8004830:	0800a454 	.word	0x0800a454
 8004834:	02dc6c00 	.word	0x02dc6c00

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	025b      	lsls	r3, r3, #9
 8004850:	4013      	ands	r3, r2
 8004852:	d100      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004854:	e08e      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2017      	movs	r0, #23
 8004858:	183b      	adds	r3, r7, r0
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	055b      	lsls	r3, r3, #21
 8004866:	4013      	ands	r3, r2
 8004868:	d110      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800486a:	4b6b      	ldr	r3, [pc, #428]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004870:	2180      	movs	r1, #128	@ 0x80
 8004872:	0549      	lsls	r1, r1, #21
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
 8004878:	4b67      	ldr	r3, [pc, #412]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	055b      	lsls	r3, r3, #21
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004886:	183b      	adds	r3, r7, r0
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	4b63      	ldr	r3, [pc, #396]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d11a      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004898:	4b60      	ldr	r3, [pc, #384]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b5f      	ldr	r3, [pc, #380]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	0049      	lsls	r1, r1, #1
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f853 	bl	8001950 <HAL_GetTick>
 80048aa:	0003      	movs	r3, r0
 80048ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fd f84e 	bl	8001950 <HAL_GetTick>
 80048b4:	0002      	movs	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e0a6      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	2380      	movs	r3, #128	@ 0x80
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ce:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	23c0      	movs	r3, #192	@ 0xc0
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d034      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	23c0      	movs	r3, #192	@ 0xc0
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d02c      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f0:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048fa:	4b47      	ldr	r3, [pc, #284]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	4b46      	ldr	r3, [pc, #280]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004900:	2180      	movs	r1, #128	@ 0x80
 8004902:	0249      	lsls	r1, r1, #9
 8004904:	430a      	orrs	r2, r1
 8004906:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004908:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	4b42      	ldr	r3, [pc, #264]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800490e:	4945      	ldr	r1, [pc, #276]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004910:	400a      	ands	r2, r1
 8004912:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004914:	4b40      	ldr	r3, [pc, #256]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd f815 	bl	8001950 <HAL_GetTick>
 8004926:	0003      	movs	r3, r0
 8004928:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e009      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd f810 	bl	8001950 <HAL_GetTick>
 8004930:	0002      	movs	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	4a3c      	ldr	r2, [pc, #240]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e067      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b35      	ldr	r3, [pc, #212]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d0f0      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800494a:	4b33      	ldr	r3, [pc, #204]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	4a34      	ldr	r2, [pc, #208]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800495a:	430a      	orrs	r2, r1
 800495c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800495e:	2317      	movs	r3, #23
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800496e:	492f      	ldr	r1, [pc, #188]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004970:	400a      	ands	r2, r1
 8004972:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	d009      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800497e:	4b26      	ldr	r3, [pc, #152]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	2203      	movs	r2, #3
 8004984:	4393      	bics	r3, r2
 8004986:	0019      	movs	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800498e:	430a      	orrs	r2, r1
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	0019      	movs	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049ac:	430a      	orrs	r2, r1
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2220      	movs	r2, #32
 80049b6:	4013      	ands	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	2210      	movs	r2, #16
 80049c0:	4393      	bics	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049da:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	2280      	movs	r2, #128	@ 0x80
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4013      	ands	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049fa:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	4393      	bics	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b006      	add	sp, #24
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	fffffcff 	.word	0xfffffcff
 8004a24:	fffeffff 	.word	0xfffeffff
 8004a28:	00001388 	.word	0x00001388
 8004a2c:	efffffff 	.word	0xefffffff
 8004a30:	fffcffff 	.word	0xfffcffff

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e042      	b.n	8004acc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223d      	movs	r2, #61	@ 0x3d
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223c      	movs	r2, #60	@ 0x3c
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fc fdb7 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	223d      	movs	r2, #61	@ 0x3d
 8004a66:	2102      	movs	r1, #2
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	0019      	movs	r1, r3
 8004a74:	0010      	movs	r0, r2
 8004a76:	f000 fee9 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2246      	movs	r2, #70	@ 0x46
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	223e      	movs	r2, #62	@ 0x3e
 8004a86:	2101      	movs	r1, #1
 8004a88:	5499      	strb	r1, [r3, r2]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	223f      	movs	r2, #63	@ 0x3f
 8004a8e:	2101      	movs	r1, #1
 8004a90:	5499      	strb	r1, [r3, r2]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2240      	movs	r2, #64	@ 0x40
 8004a96:	2101      	movs	r1, #1
 8004a98:	5499      	strb	r1, [r3, r2]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2241      	movs	r2, #65	@ 0x41
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2242      	movs	r2, #66	@ 0x42
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	5499      	strb	r1, [r3, r2]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2243      	movs	r2, #67	@ 0x43
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2244      	movs	r2, #68	@ 0x44
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	5499      	strb	r1, [r3, r2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2245      	movs	r2, #69	@ 0x45
 8004abe:	2101      	movs	r1, #1
 8004ac0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	223d      	movs	r2, #61	@ 0x3d
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223d      	movs	r2, #61	@ 0x3d
 8004ae0:	5c9b      	ldrb	r3, [r3, r2]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e03b      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223d      	movs	r2, #61	@ 0x3d
 8004af0:	2102      	movs	r1, #2
 8004af2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2101      	movs	r1, #1
 8004b00:	430a      	orrs	r2, r1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	@ (8004b6c <HAL_TIM_Base_Start_IT+0x98>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00f      	beq.n	8004b2e <HAL_TIM_Base_Start_IT+0x5a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	05db      	lsls	r3, r3, #23
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d009      	beq.n	8004b2e <HAL_TIM_Base_Start_IT+0x5a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIM_Base_Start_IT+0x5a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a12      	ldr	r2, [pc, #72]	@ (8004b74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d111      	bne.n	8004b52 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2207      	movs	r2, #7
 8004b36:	4013      	ands	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b06      	cmp	r3, #6
 8004b3e:	d010      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b50:	e007      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b004      	add	sp, #16
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40014000 	.word	0x40014000

08004b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e042      	b.n	8004c10 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	223d      	movs	r2, #61	@ 0x3d
 8004b8e:	5c9b      	ldrb	r3, [r3, r2]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223c      	movs	r2, #60	@ 0x3c
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 f839 	bl	8004c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223d      	movs	r2, #61	@ 0x3d
 8004baa:	2102      	movs	r1, #2
 8004bac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	0010      	movs	r0, r2
 8004bba:	f000 fe47 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2246      	movs	r2, #70	@ 0x46
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	223e      	movs	r2, #62	@ 0x3e
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223f      	movs	r2, #63	@ 0x3f
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2240      	movs	r2, #64	@ 0x40
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2241      	movs	r2, #65	@ 0x41
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2242      	movs	r2, #66	@ 0x42
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2243      	movs	r2, #67	@ 0x43
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2244      	movs	r2, #68	@ 0x44
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2245      	movs	r2, #69	@ 0x45
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	223d      	movs	r2, #61	@ 0x3d
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	001a      	movs	r2, r3
 8004c36:	1cbb      	adds	r3, r7, #2
 8004c38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2317      	movs	r3, #23
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_PWM_Start_DMA+0x32>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	223e      	movs	r2, #62	@ 0x3e
 8004c4c:	5c9b      	ldrb	r3, [r3, r2]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3b02      	subs	r3, #2
 8004c52:	425a      	negs	r2, r3
 8004c54:	4153      	adcs	r3, r2
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	e01f      	b.n	8004c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d108      	bne.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x4a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	223f      	movs	r2, #63	@ 0x3f
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	425a      	negs	r2, r3
 8004c6c:	4153      	adcs	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e013      	b.n	8004c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d108      	bne.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x62>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2240      	movs	r2, #64	@ 0x40
 8004c7c:	5c9b      	ldrb	r3, [r3, r2]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b02      	subs	r3, #2
 8004c82:	425a      	negs	r2, r3
 8004c84:	4153      	adcs	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e007      	b.n	8004c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2241      	movs	r2, #65	@ 0x41
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3b02      	subs	r3, #2
 8004c94:	425a      	negs	r2, r3
 8004c96:	4153      	adcs	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e164      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d108      	bne.n	8004cba <HAL_TIM_PWM_Start_DMA+0x92>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	223e      	movs	r2, #62	@ 0x3e
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	425a      	negs	r2, r3
 8004cb4:	4153      	adcs	r3, r2
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e01f      	b.n	8004cfa <HAL_TIM_PWM_Start_DMA+0xd2>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d108      	bne.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0xaa>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	223f      	movs	r2, #63	@ 0x3f
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	425a      	negs	r2, r3
 8004ccc:	4153      	adcs	r3, r2
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e013      	b.n	8004cfa <HAL_TIM_PWM_Start_DMA+0xd2>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d108      	bne.n	8004cea <HAL_TIM_PWM_Start_DMA+0xc2>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2240      	movs	r2, #64	@ 0x40
 8004cdc:	5c9b      	ldrb	r3, [r3, r2]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	425a      	negs	r2, r3
 8004ce4:	4153      	adcs	r3, r2
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e007      	b.n	8004cfa <HAL_TIM_PWM_Start_DMA+0xd2>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2241      	movs	r2, #65	@ 0x41
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	425a      	negs	r2, r3
 8004cf6:	4153      	adcs	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d025      	beq.n	8004d4a <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_TIM_PWM_Start_DMA+0xe4>
 8004d04:	1cbb      	adds	r3, r7, #2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e12d      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	223e      	movs	r2, #62	@ 0x3e
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	e016      	b.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x126>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d104      	bne.n	8004d30 <HAL_TIM_PWM_Start_DMA+0x108>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	223f      	movs	r2, #63	@ 0x3f
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	e00e      	b.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x126>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d104      	bne.n	8004d40 <HAL_TIM_PWM_Start_DMA+0x118>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2240      	movs	r2, #64	@ 0x40
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	e006      	b.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x126>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2241      	movs	r2, #65	@ 0x41
 8004d44:	2102      	movs	r1, #2
 8004d46:	5499      	strb	r1, [r3, r2]
 8004d48:	e001      	b.n	8004d4e <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e10e      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d100      	bne.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x12e>
 8004d54:	e080      	b.n	8004e58 <HAL_TIM_PWM_Start_DMA+0x230>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d900      	bls.n	8004d5e <HAL_TIM_PWM_Start_DMA+0x136>
 8004d5c:	e0a1      	b.n	8004ea2 <HAL_TIM_PWM_Start_DMA+0x27a>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d054      	beq.n	8004e0e <HAL_TIM_PWM_Start_DMA+0x1e6>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d900      	bls.n	8004d6c <HAL_TIM_PWM_Start_DMA+0x144>
 8004d6a:	e09a      	b.n	8004ea2 <HAL_TIM_PWM_Start_DMA+0x27a>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_PWM_Start_DMA+0x152>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d025      	beq.n	8004dc4 <HAL_TIM_PWM_Start_DMA+0x19c>
 8004d78:	e093      	b.n	8004ea2 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d80:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	4a7c      	ldr	r2, [pc, #496]	@ (8004f78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004d88:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3334      	adds	r3, #52	@ 0x34
 8004d9e:	001a      	movs	r2, r3
 8004da0:	1cbb      	adds	r3, r7, #2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f7fc ff04 	bl	8001bb0 <HAL_DMA_Start_IT>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0dd      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2180      	movs	r1, #128	@ 0x80
 8004dbc:	0089      	lsls	r1, r1, #2
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]
      break;
 8004dc2:	e073      	b.n	8004eac <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004dca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	4a69      	ldr	r2, [pc, #420]	@ (8004f78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	4a68      	ldr	r2, [pc, #416]	@ (8004f7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3338      	adds	r3, #56	@ 0x38
 8004de8:	001a      	movs	r2, r3
 8004dea:	1cbb      	adds	r3, r7, #2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	f7fc fedf 	bl	8001bb0 <HAL_DMA_Start_IT>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0b8      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2180      	movs	r1, #128	@ 0x80
 8004e06:	00c9      	lsls	r1, r1, #3
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	60da      	str	r2, [r3, #12]
      break;
 8004e0c:	e04e      	b.n	8004eac <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a58      	ldr	r2, [pc, #352]	@ (8004f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004e14:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	4a57      	ldr	r2, [pc, #348]	@ (8004f78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a56      	ldr	r2, [pc, #344]	@ (8004f7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	333c      	adds	r3, #60	@ 0x3c
 8004e32:	001a      	movs	r2, r3
 8004e34:	1cbb      	adds	r3, r7, #2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	f7fc feba 	bl	8001bb0 <HAL_DMA_Start_IT>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e093      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2180      	movs	r1, #128	@ 0x80
 8004e50:	0109      	lsls	r1, r1, #4
 8004e52:	430a      	orrs	r2, r1
 8004e54:	60da      	str	r2, [r3, #12]
      break;
 8004e56:	e029      	b.n	8004eac <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	4a45      	ldr	r2, [pc, #276]	@ (8004f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	4a44      	ldr	r2, [pc, #272]	@ (8004f78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	4a43      	ldr	r2, [pc, #268]	@ (8004f7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3340      	adds	r3, #64	@ 0x40
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	1cbb      	adds	r3, r7, #2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	f7fc fe95 	bl	8001bb0 <HAL_DMA_Start_IT>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06e      	b.n	8004f6c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2180      	movs	r1, #128	@ 0x80
 8004e9a:	0149      	lsls	r1, r1, #5
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	60da      	str	r2, [r3, #12]
      break;
 8004ea0:	e004      	b.n	8004eac <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8004ea2:	2317      	movs	r3, #23
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004eac:	2317      	movs	r3, #23
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d157      	bne.n	8004f66 <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 ffe8 	bl	8005e94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f80 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f88 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a29      	ldr	r2, [pc, #164]	@ (8004f8c <HAL_TIM_PWM_Start_DMA+0x364>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2180      	movs	r1, #128	@ 0x80
 8004f02:	0209      	lsls	r1, r1, #8
 8004f04:	430a      	orrs	r2, r1
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x30a>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	05db      	lsls	r3, r3, #23
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d009      	beq.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x30a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1b      	ldr	r2, [pc, #108]	@ (8004f90 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x30a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d111      	bne.n	8004f56 <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2207      	movs	r2, #7
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b06      	cmp	r3, #6
 8004f42:	d010      	beq.n	8004f66 <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2101      	movs	r1, #1
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	e007      	b.n	8004f66 <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2101      	movs	r1, #1
 8004f62:	430a      	orrs	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f66:	2317      	movs	r3, #23
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b006      	add	sp, #24
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	08005739 	.word	0x08005739
 8004f78:	080057e3 	.word	0x080057e3
 8004f7c:	080056a5 	.word	0x080056a5
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40000400 	.word	0x40000400

08004f94 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9e:	230f      	movs	r3, #15
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	d039      	beq.n	8005020 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d844      	bhi.n	800503c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d025      	beq.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x70>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d83e      	bhi.n	800503c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_TIM_PWM_Stop_DMA+0x38>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_TIM_PWM_Stop_DMA+0x54>
 8004fca:	e037      	b.n	800503c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4954      	ldr	r1, [pc, #336]	@ (8005128 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7fc fe4b 	bl	8001c7c <HAL_DMA_Abort_IT>
      break;
 8004fe6:	e02e      	b.n	8005046 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	494e      	ldr	r1, [pc, #312]	@ (800512c <HAL_TIM_PWM_Stop_DMA+0x198>)
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7fc fe3d 	bl	8001c7c <HAL_DMA_Abort_IT>
      break;
 8005002:	e020      	b.n	8005046 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4948      	ldr	r1, [pc, #288]	@ (8005130 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005010:	400a      	ands	r2, r1
 8005012:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	0018      	movs	r0, r3
 800501a:	f7fc fe2f 	bl	8001c7c <HAL_DMA_Abort_IT>
      break;
 800501e:	e012      	b.n	8005046 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4942      	ldr	r1, [pc, #264]	@ (8005134 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800502c:	400a      	ands	r2, r1
 800502e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	0018      	movs	r0, r3
 8005036:	f7fc fe21 	bl	8001c7c <HAL_DMA_Abort_IT>
      break;
 800503a:	e004      	b.n	8005046 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 800503c:	230f      	movs	r3, #15
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
      break;
 8005044:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d000      	beq.n	8005052 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8005050:	e063      	b.n	800511a <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	0018      	movs	r0, r3
 800505c:	f000 ff1a 	bl	8005e94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a34      	ldr	r2, [pc, #208]	@ (8005138 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a33      	ldr	r2, [pc, #204]	@ (800513c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a31      	ldr	r2, [pc, #196]	@ (8005140 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a30      	ldr	r2, [pc, #192]	@ (8005144 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_TIM_PWM_Stop_DMA+0xfa>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d013      	beq.n	80050ba <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800509a:	4013      	ands	r3, r2
 800509c:	d10d      	bne.n	80050ba <HAL_TIM_PWM_Stop_DMA+0x126>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	4a29      	ldr	r2, [pc, #164]	@ (800514c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_PWM_Stop_DMA+0x126>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4926      	ldr	r1, [pc, #152]	@ (8005150 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80050b6:	400a      	ands	r2, r1
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2101      	movs	r1, #1
 80050de:	438a      	bics	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Stop_DMA+0x15e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	223e      	movs	r2, #62	@ 0x3e
 80050ec:	2101      	movs	r1, #1
 80050ee:	5499      	strb	r1, [r3, r2]
 80050f0:	e013      	b.n	800511a <HAL_TIM_PWM_Stop_DMA+0x186>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	223f      	movs	r2, #63	@ 0x3f
 80050fc:	2101      	movs	r1, #1
 80050fe:	5499      	strb	r1, [r3, r2]
 8005100:	e00b      	b.n	800511a <HAL_TIM_PWM_Stop_DMA+0x186>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2240      	movs	r2, #64	@ 0x40
 800510c:	2101      	movs	r1, #1
 800510e:	5499      	strb	r1, [r3, r2]
 8005110:	e003      	b.n	800511a <HAL_TIM_PWM_Stop_DMA+0x186>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2241      	movs	r2, #65	@ 0x41
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800511a:	230f      	movs	r3, #15
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b004      	add	sp, #16
 8005126:	bd80      	pop	{r7, pc}
 8005128:	fffffdff 	.word	0xfffffdff
 800512c:	fffffbff 	.word	0xfffffbff
 8005130:	fffff7ff 	.word	0xfffff7ff
 8005134:	ffffefff 	.word	0xffffefff
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	00001111 	.word	0x00001111
 800514c:	00000444 	.word	0x00000444
 8005150:	ffff7fff 	.word	0xffff7fff

08005154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2202      	movs	r2, #2
 8005170:	4013      	ands	r3, r2
 8005172:	d021      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2203      	movs	r2, #3
 8005182:	4252      	negs	r2, r2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fa6a 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e007      	b.n	80051b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 fa5d 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7fc f931 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d01e      	beq.n	8005206 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2205      	movs	r2, #5
 80051ce:	4252      	negs	r2, r2
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f000 fa43 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80051ee:	e007      	b.n	8005200 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 fa36 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f7fc f90a 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2208      	movs	r2, #8
 800520a:	4013      	ands	r3, r2
 800520c:	d021      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	4013      	ands	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	4252      	negs	r2, r2
 800521e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2203      	movs	r2, #3
 800522e:	4013      	ands	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 fa1d 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 800523a:	e007      	b.n	800524c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fa10 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0018      	movs	r0, r3
 8005248:	f7fc f8e4 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d01e      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2211      	movs	r2, #17
 8005268:	4252      	negs	r2, r2
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	23c0      	movs	r3, #192	@ 0xc0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4013      	ands	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 f9f6 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005288:	e007      	b.n	800529a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f000 f9e9 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f7fc f8bd 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4013      	ands	r3, r2
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4013      	ands	r3, r2
 80052ae:	d008      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2202      	movs	r2, #2
 80052b6:	4252      	negs	r2, r2
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fc f937 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	4013      	ands	r3, r2
 80052c8:	d00c      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2280      	movs	r2, #128	@ 0x80
 80052ce:	4013      	ands	r3, r2
 80052d0:	d008      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2281      	movs	r2, #129	@ 0x81
 80052d8:	4252      	negs	r2, r2
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 fe62 	bl	8005fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2240      	movs	r2, #64	@ 0x40
 80052e8:	4013      	ands	r3, r2
 80052ea:	d00c      	beq.n	8005306 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2240      	movs	r2, #64	@ 0x40
 80052f0:	4013      	ands	r3, r2
 80052f2:	d008      	beq.n	8005306 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2241      	movs	r2, #65	@ 0x41
 80052fa:	4252      	negs	r2, r2
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0018      	movs	r0, r3
 8005302:	f000 f9bf 	bl	8005684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2220      	movs	r2, #32
 800530a:	4013      	ands	r3, r2
 800530c:	d00c      	beq.n	8005328 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	4013      	ands	r3, r2
 8005314:	d008      	beq.n	8005328 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2221      	movs	r2, #33	@ 0x21
 800531c:	4252      	negs	r2, r2
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0018      	movs	r0, r3
 8005324:	f000 fe38 	bl	8005f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b004      	add	sp, #16
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2317      	movs	r3, #23
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	223c      	movs	r2, #60	@ 0x3c
 8005348:	5c9b      	ldrb	r3, [r3, r2]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x22>
 800534e:	2302      	movs	r3, #2
 8005350:	e0ad      	b.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	223c      	movs	r2, #60	@ 0x3c
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d100      	bne.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005360:	e076      	b.n	8005450 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d900      	bls.n	800536a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005368:	e095      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x166>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d04e      	beq.n	800540e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d900      	bls.n	8005378 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005376:	e08e      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x56>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d021      	beq.n	80053c8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005384:	e087      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0011      	movs	r1, r2
 800538e:	0018      	movs	r0, r3
 8005390:	f000 faea 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2108      	movs	r1, #8
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2104      	movs	r1, #4
 80053b0:	438a      	bics	r2, r1
 80053b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	619a      	str	r2, [r3, #24]
      break;
 80053c6:	e06b      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	0011      	movs	r1, r2
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fb51 	bl	8005a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	0109      	lsls	r1, r1, #4
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4931      	ldr	r1, [pc, #196]	@ (80054b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80053f4:	400a      	ands	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e048      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fbb2 	bl	8005b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2108      	movs	r1, #8
 8005428:	430a      	orrs	r2, r1
 800542a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2104      	movs	r1, #4
 8005438:	438a      	bics	r2, r1
 800543a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69d9      	ldr	r1, [r3, #28]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	61da      	str	r2, [r3, #28]
      break;
 800544e:	e027      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	0011      	movs	r1, r2
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fc17 	bl	8005c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2180      	movs	r1, #128	@ 0x80
 800546a:	0109      	lsls	r1, r1, #4
 800546c:	430a      	orrs	r2, r1
 800546e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	490f      	ldr	r1, [pc, #60]	@ (80054b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800547c:	400a      	ands	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69d9      	ldr	r1, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	61da      	str	r2, [r3, #28]
      break;
 8005494:	e004      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005496:	2317      	movs	r3, #23
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
      break;
 800549e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	223c      	movs	r2, #60	@ 0x3c
 80054a4:	2100      	movs	r1, #0
 80054a6:	5499      	strb	r1, [r3, r2]

  return status;
 80054a8:	2317      	movs	r3, #23
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	781b      	ldrb	r3, [r3, #0]
}
 80054ae:	0018      	movs	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	fffffbff 	.word	0xfffffbff

080054bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	230f      	movs	r3, #15
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223c      	movs	r2, #60	@ 0x3c
 80054d2:	5c9b      	ldrb	r3, [r3, r2]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_ConfigClockSource+0x20>
 80054d8:	2302      	movs	r3, #2
 80054da:	e0bc      	b.n	8005656 <HAL_TIM_ConfigClockSource+0x19a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	223c      	movs	r2, #60	@ 0x3c
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	223d      	movs	r2, #61	@ 0x3d
 80054e8:	2102      	movs	r1, #2
 80054ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2277      	movs	r2, #119	@ 0x77
 80054f8:	4393      	bics	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a58      	ldr	r2, [pc, #352]	@ (8005660 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005500:	4013      	ands	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	0192      	lsls	r2, r2, #6
 8005514:	4293      	cmp	r3, r2
 8005516:	d040      	beq.n	800559a <HAL_TIM_ConfigClockSource+0xde>
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	0192      	lsls	r2, r2, #6
 800551c:	4293      	cmp	r3, r2
 800551e:	d900      	bls.n	8005522 <HAL_TIM_ConfigClockSource+0x66>
 8005520:	e088      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 8005522:	2280      	movs	r2, #128	@ 0x80
 8005524:	0152      	lsls	r2, r2, #5
 8005526:	4293      	cmp	r3, r2
 8005528:	d100      	bne.n	800552c <HAL_TIM_ConfigClockSource+0x70>
 800552a:	e088      	b.n	800563e <HAL_TIM_ConfigClockSource+0x182>
 800552c:	2280      	movs	r2, #128	@ 0x80
 800552e:	0152      	lsls	r2, r2, #5
 8005530:	4293      	cmp	r3, r2
 8005532:	d900      	bls.n	8005536 <HAL_TIM_ConfigClockSource+0x7a>
 8005534:	e07e      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 8005536:	2b70      	cmp	r3, #112	@ 0x70
 8005538:	d018      	beq.n	800556c <HAL_TIM_ConfigClockSource+0xb0>
 800553a:	d900      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x82>
 800553c:	e07a      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 800553e:	2b60      	cmp	r3, #96	@ 0x60
 8005540:	d04f      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x126>
 8005542:	d900      	bls.n	8005546 <HAL_TIM_ConfigClockSource+0x8a>
 8005544:	e076      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 8005546:	2b50      	cmp	r3, #80	@ 0x50
 8005548:	d03b      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x106>
 800554a:	d900      	bls.n	800554e <HAL_TIM_ConfigClockSource+0x92>
 800554c:	e072      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d057      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x146>
 8005552:	d900      	bls.n	8005556 <HAL_TIM_ConfigClockSource+0x9a>
 8005554:	e06e      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 8005556:	2b30      	cmp	r3, #48	@ 0x30
 8005558:	d063      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 800555a:	d86b      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d060      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 8005560:	d868      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d05d      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 8005566:	2b10      	cmp	r3, #16
 8005568:	d05b      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x166>
 800556a:	e063      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	f000 fc6a 	bl	8005e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2277      	movs	r2, #119	@ 0x77
 800558c:	4313      	orrs	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]
      break;
 8005598:	e052      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055aa:	f000 fc53 	bl	8005e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2180      	movs	r1, #128	@ 0x80
 80055ba:	01c9      	lsls	r1, r1, #7
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
      break;
 80055c0:	e03e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	001a      	movs	r2, r3
 80055d0:	f000 fbc6 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2150      	movs	r1, #80	@ 0x50
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 fc20 	bl	8005e20 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e02e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ee:	001a      	movs	r2, r3
 80055f0:	f000 fbe4 	bl	8005dbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2160      	movs	r1, #96	@ 0x60
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 fc10 	bl	8005e20 <TIM_ITRx_SetConfig>
      break;
 8005600:	e01e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	001a      	movs	r2, r3
 8005610:	f000 fba6 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2140      	movs	r1, #64	@ 0x40
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fc00 	bl	8005e20 <TIM_ITRx_SetConfig>
      break;
 8005620:	e00e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	0019      	movs	r1, r3
 800562c:	0010      	movs	r0, r2
 800562e:	f000 fbf7 	bl	8005e20 <TIM_ITRx_SetConfig>
      break;
 8005632:	e005      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005634:	230f      	movs	r3, #15
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
      break;
 800563c:	e000      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800563e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	223d      	movs	r2, #61	@ 0x3d
 8005644:	2101      	movs	r1, #1
 8005646:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	223c      	movs	r2, #60	@ 0x3c
 800564c:	2100      	movs	r1, #0
 800564e:	5499      	strb	r1, [r3, r2]

  return status;
 8005650:	230f      	movs	r3, #15
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	781b      	ldrb	r3, [r3, #0]
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b004      	add	sp, #16
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	ffff00ff 	.word	0xffff00ff

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566c:	46c0      	nop			@ (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800569c:	46c0      	nop			@ (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d107      	bne.n	80056cc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	223e      	movs	r2, #62	@ 0x3e
 80056c6:	2101      	movs	r1, #1
 80056c8:	5499      	strb	r1, [r3, r2]
 80056ca:	e02a      	b.n	8005722 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d107      	bne.n	80056e6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	223f      	movs	r2, #63	@ 0x3f
 80056e0:	2101      	movs	r1, #1
 80056e2:	5499      	strb	r1, [r3, r2]
 80056e4:	e01d      	b.n	8005722 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d107      	bne.n	8005700 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2204      	movs	r2, #4
 80056f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2240      	movs	r2, #64	@ 0x40
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	e010      	b.n	8005722 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d107      	bne.n	800571a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2208      	movs	r2, #8
 800570e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2241      	movs	r2, #65	@ 0x41
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]
 8005718:	e003      	b.n	8005722 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	223d      	movs	r2, #61	@ 0x3d
 800571e:	2101      	movs	r1, #1
 8005720:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff ffb5 	bl	8005694 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b004      	add	sp, #16
 8005736:	bd80      	pop	{r7, pc}

08005738 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d10b      	bne.n	8005768 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d136      	bne.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	223e      	movs	r2, #62	@ 0x3e
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]
 8005766:	e031      	b.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d10b      	bne.n	800578a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2202      	movs	r2, #2
 8005776:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d125      	bne.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	223f      	movs	r2, #63	@ 0x3f
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]
 8005788:	e020      	b.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d10b      	bne.n	80057ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2204      	movs	r2, #4
 8005798:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d114      	bne.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2240      	movs	r2, #64	@ 0x40
 80057a6:	2101      	movs	r1, #1
 80057a8:	5499      	strb	r1, [r3, r2]
 80057aa:	e00f      	b.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d10a      	bne.n	80057cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2208      	movs	r2, #8
 80057ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2241      	movs	r2, #65	@ 0x41
 80057c8:	2101      	movs	r1, #1
 80057ca:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7fb fe20 	bl	8001414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d103      	bne.n	8005802 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	771a      	strb	r2, [r3, #28]
 8005800:	e019      	b.n	8005836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d103      	bne.n	8005814 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2202      	movs	r2, #2
 8005810:	771a      	strb	r2, [r3, #28]
 8005812:	e010      	b.n	8005836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d103      	bne.n	8005826 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	771a      	strb	r2, [r3, #28]
 8005824:	e007      	b.n	8005836 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d102      	bne.n	8005836 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2208      	movs	r2, #8
 8005834:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	0018      	movs	r0, r3
 800583a:	f7fb fd67 	bl	800130c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	b004      	add	sp, #16
 800584a:	bd80      	pop	{r7, pc}

0800584c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3b      	ldr	r2, [pc, #236]	@ (800594c <TIM_Base_SetConfig+0x100>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d008      	beq.n	8005876 <TIM_Base_SetConfig+0x2a>
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	429a      	cmp	r2, r3
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x2a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <TIM_Base_SetConfig+0x104>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2270      	movs	r2, #112	@ 0x70
 800587a:	4393      	bics	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a30      	ldr	r2, [pc, #192]	@ (800594c <TIM_Base_SetConfig+0x100>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	05db      	lsls	r3, r3, #23
 8005896:	429a      	cmp	r2, r3
 8005898:	d013      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2c      	ldr	r2, [pc, #176]	@ (8005950 <TIM_Base_SetConfig+0x104>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005954 <TIM_Base_SetConfig+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <TIM_Base_SetConfig+0x10c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a29      	ldr	r2, [pc, #164]	@ (800595c <TIM_Base_SetConfig+0x110>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_Base_SetConfig+0x76>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <TIM_Base_SetConfig+0x114>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a27      	ldr	r2, [pc, #156]	@ (8005964 <TIM_Base_SetConfig+0x118>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2280      	movs	r2, #128	@ 0x80
 80058d8:	4393      	bics	r3, r2
 80058da:	001a      	movs	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <TIM_Base_SetConfig+0x100>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_Base_SetConfig+0xce>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a14      	ldr	r2, [pc, #80]	@ (8005958 <TIM_Base_SetConfig+0x10c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_Base_SetConfig+0xce>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a13      	ldr	r2, [pc, #76]	@ (800595c <TIM_Base_SetConfig+0x110>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_Base_SetConfig+0xce>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a12      	ldr	r2, [pc, #72]	@ (8005960 <TIM_Base_SetConfig+0x114>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d103      	bne.n	8005922 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2201      	movs	r2, #1
 800592e:	4013      	ands	r3, r2
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2201      	movs	r2, #1
 800593a:	4393      	bics	r3, r2
 800593c:	001a      	movs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	611a      	str	r2, [r3, #16]
  }
}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40000400 	.word	0x40000400
 8005954:	40002000 	.word	0x40002000
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	fffffcff 	.word	0xfffffcff

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	2201      	movs	r2, #1
 800597e:	4393      	bics	r3, r2
 8005980:	001a      	movs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2270      	movs	r2, #112	@ 0x70
 8005996:	4393      	bics	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2203      	movs	r2, #3
 800599e:	4393      	bics	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2202      	movs	r2, #2
 80059b0:	4393      	bics	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a27      	ldr	r2, [pc, #156]	@ (8005a60 <TIM_OC1_SetConfig+0xf8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC1_SetConfig+0x76>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a26      	ldr	r2, [pc, #152]	@ (8005a64 <TIM_OC1_SetConfig+0xfc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC1_SetConfig+0x76>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a25      	ldr	r2, [pc, #148]	@ (8005a68 <TIM_OC1_SetConfig+0x100>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC1_SetConfig+0x76>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a24      	ldr	r2, [pc, #144]	@ (8005a6c <TIM_OC1_SetConfig+0x104>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10c      	bne.n	80059f8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2208      	movs	r2, #8
 80059e2:	4393      	bics	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2204      	movs	r2, #4
 80059f4:	4393      	bics	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a19      	ldr	r2, [pc, #100]	@ (8005a60 <TIM_OC1_SetConfig+0xf8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_OC1_SetConfig+0xb0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <TIM_OC1_SetConfig+0xfc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_OC1_SetConfig+0xb0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	@ (8005a68 <TIM_OC1_SetConfig+0x100>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_OC1_SetConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <TIM_OC1_SetConfig+0x104>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d111      	bne.n	8005a3c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4a15      	ldr	r2, [pc, #84]	@ (8005a70 <TIM_OC1_SetConfig+0x108>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4a14      	ldr	r2, [pc, #80]	@ (8005a74 <TIM_OC1_SetConfig+0x10c>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b006      	add	sp, #24
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800
 8005a70:	fffffeff 	.word	0xfffffeff
 8005a74:	fffffdff 	.word	0xfffffdff

08005a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	4393      	bics	r3, r2
 8005a90:	001a      	movs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b60 <TIM_OC2_SetConfig+0xe8>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <TIM_OC2_SetConfig+0xec>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <TIM_OC2_SetConfig+0xf0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d10d      	bne.n	8005af6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2280      	movs	r2, #128	@ 0x80
 8005ade:	4393      	bics	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2240      	movs	r2, #64	@ 0x40
 8005af2:	4393      	bics	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <TIM_OC2_SetConfig+0xf0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC2_SetConfig+0x9e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <TIM_OC2_SetConfig+0xf4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC2_SetConfig+0x9e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <TIM_OC2_SetConfig+0xf8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC2_SetConfig+0x9e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <TIM_OC2_SetConfig+0xfc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <TIM_OC2_SetConfig+0x100>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <TIM_OC2_SetConfig+0x104>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b006      	add	sp, #24
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	ffff8fff 	.word	0xffff8fff
 8005b64:	fffffcff 	.word	0xfffffcff
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800
 8005b78:	fffffbff 	.word	0xfffffbff
 8005b7c:	fffff7ff 	.word	0xfffff7ff

08005b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	401a      	ands	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2270      	movs	r2, #112	@ 0x70
 8005bac:	4393      	bics	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4a28      	ldr	r2, [pc, #160]	@ (8005c68 <TIM_OC3_SetConfig+0xe8>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a24      	ldr	r2, [pc, #144]	@ (8005c6c <TIM_OC3_SetConfig+0xec>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10d      	bne.n	8005bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4a23      	ldr	r2, [pc, #140]	@ (8005c70 <TIM_OC3_SetConfig+0xf0>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <TIM_OC3_SetConfig+0xf4>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <TIM_OC3_SetConfig+0xec>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_OC3_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <TIM_OC3_SetConfig+0xf8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_OC3_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <TIM_OC3_SetConfig+0xfc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC3_SetConfig+0x9a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <TIM_OC3_SetConfig+0x100>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d113      	bne.n	8005c42 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	@ (8005c84 <TIM_OC3_SetConfig+0x104>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <TIM_OC3_SetConfig+0x108>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	621a      	str	r2, [r3, #32]
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b006      	add	sp, #24
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	fffffeff 	.word	0xfffffeff
 8005c68:	fffffdff 	.word	0xfffffdff
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	fffff7ff 	.word	0xfffff7ff
 8005c74:	fffffbff 	.word	0xfffffbff
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800
 8005c84:	ffffefff 	.word	0xffffefff
 8005c88:	ffffdfff 	.word	0xffffdfff

08005c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <TIM_OC4_SetConfig+0xb0>)
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a22      	ldr	r2, [pc, #136]	@ (8005d40 <TIM_OC4_SetConfig+0xb4>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a21      	ldr	r2, [pc, #132]	@ (8005d44 <TIM_OC4_SetConfig+0xb8>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d48 <TIM_OC4_SetConfig+0xbc>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	@ (8005d4c <TIM_OC4_SetConfig+0xc0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_OC4_SetConfig+0x78>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <TIM_OC4_SetConfig+0xc4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_OC4_SetConfig+0x78>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <TIM_OC4_SetConfig+0xc8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_OC4_SetConfig+0x78>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a16      	ldr	r2, [pc, #88]	@ (8005d58 <TIM_OC4_SetConfig+0xcc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d109      	bne.n	8005d18 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <TIM_OC4_SetConfig+0xd0>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b006      	add	sp, #24
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	ffffefff 	.word	0xffffefff
 8005d40:	ffff8fff 	.word	0xffff8fff
 8005d44:	fffffcff 	.word	0xfffffcff
 8005d48:	ffffdfff 	.word	0xffffdfff
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40014400 	.word	0x40014400
 8005d58:	40014800 	.word	0x40014800
 8005d5c:	ffffbfff 	.word	0xffffbfff

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	2201      	movs	r2, #1
 8005d78:	4393      	bics	r3, r2
 8005d7a:	001a      	movs	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	22f0      	movs	r2, #240	@ 0xf0
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	621a      	str	r2, [r3, #32]
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b006      	add	sp, #24
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	4393      	bics	r3, r2
 8005dd6:	001a      	movs	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e1c <TIM_TI2_ConfigInputStage+0x60>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	22a0      	movs	r2, #160	@ 0xa0
 8005df8:	4393      	bics	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b006      	add	sp, #24
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	ffff0fff 	.word	0xffff0fff

08005e20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2270      	movs	r2, #112	@ 0x70
 8005e34:	4393      	bics	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	2207      	movs	r2, #7
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	609a      	str	r2, [r3, #8]
}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b004      	add	sp, #16
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <TIM_ETR_SetConfig+0x3c>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	46c0      	nop			@ (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b006      	add	sp, #24
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	ffff00ff 	.word	0xffff00ff

08005e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	221f      	movs	r2, #31
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	0013      	movs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	43d2      	mvns	r2, r2
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	211f      	movs	r1, #31
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4099      	lsls	r1, r3
 8005eca:	000b      	movs	r3, r1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b006      	add	sp, #24
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	223c      	movs	r2, #60	@ 0x3c
 8005eea:	5c9b      	ldrb	r3, [r3, r2]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e047      	b.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	223c      	movs	r2, #60	@ 0x3c
 8005ef8:	2101      	movs	r1, #1
 8005efa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	223d      	movs	r2, #61	@ 0x3d
 8005f00:	2102      	movs	r1, #2
 8005f02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2270      	movs	r2, #112	@ 0x70
 8005f18:	4393      	bics	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a16      	ldr	r2, [pc, #88]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	05db      	lsls	r3, r3, #23
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d009      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a11      	ldr	r2, [pc, #68]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a10      	ldr	r2, [pc, #64]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d10c      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2280      	movs	r2, #128	@ 0x80
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	223d      	movs	r2, #61	@ 0x3d
 8005f76:	2101      	movs	r1, #1
 8005f78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	223c      	movs	r2, #60	@ 0x3c
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b004      	add	sp, #16
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40014000 	.word	0x40014000

08005f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b002      	add	sp, #8
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2244      	movs	r2, #68	@ 0x44
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <USB_EnableGlobalInt+0x28>)
 8005fca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	b299      	uxth	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2240      	movs	r2, #64	@ 0x40
 8005fd4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b004      	add	sp, #16
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	0000bf80 	.word	0x0000bf80

08005fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fec:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <USB_DisableGlobalInt+0x30>)
 8005fee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2240      	movs	r2, #64	@ 0x40
 8005ff4:	5a9b      	ldrh	r3, [r3, r2]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	43d2      	mvns	r2, r2
 8005ffe:	b292      	uxth	r2, r2
 8006000:	4013      	ands	r3, r2
 8006002:	b299      	uxth	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2240      	movs	r2, #64	@ 0x40
 8006008:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}
 8006014:	0000bf80 	.word	0x0000bf80

08006018 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	6019      	str	r1, [r3, #0]
 8006024:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2240      	movs	r2, #64	@ 0x40
 800602a:	2101      	movs	r1, #1
 800602c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2240      	movs	r2, #64	@ 0x40
 8006032:	2100      	movs	r1, #0
 8006034:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2244      	movs	r2, #68	@ 0x44
 800603a:	2100      	movs	r1, #0
 800603c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2250      	movs	r2, #80	@ 0x50
 8006042:	2100      	movs	r1, #0
 8006044:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	0018      	movs	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	b004      	add	sp, #16
 800604e:	bd80      	pop	{r7, pc}

08006050 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b09c      	sub	sp, #112	@ 0x70
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800605a:	236f      	movs	r3, #111	@ 0x6f
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	18d3      	adds	r3, r2, r3
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	236c      	movs	r3, #108	@ 0x6c
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	49a1      	ldr	r1, [pc, #644]	@ (80062fc <USB_ActivateEndpoint+0x2ac>)
 8006076:	400a      	ands	r2, r1
 8006078:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d017      	beq.n	80060b2 <USB_ActivateEndpoint+0x62>
 8006082:	dc28      	bgt.n	80060d6 <USB_ActivateEndpoint+0x86>
 8006084:	2b02      	cmp	r3, #2
 8006086:	d00e      	beq.n	80060a6 <USB_ActivateEndpoint+0x56>
 8006088:	dc25      	bgt.n	80060d6 <USB_ActivateEndpoint+0x86>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <USB_ActivateEndpoint+0x44>
 800608e:	2b01      	cmp	r3, #1
 8006090:	d018      	beq.n	80060c4 <USB_ActivateEndpoint+0x74>
 8006092:	e020      	b.n	80060d6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006094:	226c      	movs	r2, #108	@ 0x6c
 8006096:	18bb      	adds	r3, r7, r2
 8006098:	18ba      	adds	r2, r7, r2
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	2180      	movs	r1, #128	@ 0x80
 800609e:	0089      	lsls	r1, r1, #2
 80060a0:	430a      	orrs	r2, r1
 80060a2:	801a      	strh	r2, [r3, #0]
      break;
 80060a4:	e01c      	b.n	80060e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80060a6:	226c      	movs	r2, #108	@ 0x6c
 80060a8:	18bb      	adds	r3, r7, r2
 80060aa:	18ba      	adds	r2, r7, r2
 80060ac:	8812      	ldrh	r2, [r2, #0]
 80060ae:	801a      	strh	r2, [r3, #0]
      break;
 80060b0:	e016      	b.n	80060e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060b2:	226c      	movs	r2, #108	@ 0x6c
 80060b4:	18bb      	adds	r3, r7, r2
 80060b6:	18ba      	adds	r2, r7, r2
 80060b8:	8812      	ldrh	r2, [r2, #0]
 80060ba:	21c0      	movs	r1, #192	@ 0xc0
 80060bc:	00c9      	lsls	r1, r1, #3
 80060be:	430a      	orrs	r2, r1
 80060c0:	801a      	strh	r2, [r3, #0]
      break;
 80060c2:	e00d      	b.n	80060e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060c4:	226c      	movs	r2, #108	@ 0x6c
 80060c6:	18bb      	adds	r3, r7, r2
 80060c8:	18ba      	adds	r2, r7, r2
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	2180      	movs	r1, #128	@ 0x80
 80060ce:	00c9      	lsls	r1, r1, #3
 80060d0:	430a      	orrs	r2, r1
 80060d2:	801a      	strh	r2, [r3, #0]
      break;
 80060d4:	e004      	b.n	80060e0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80060d6:	236f      	movs	r3, #111	@ 0x6f
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
      break;
 80060de:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	18d3      	adds	r3, r2, r3
 80060ea:	226c      	movs	r2, #108	@ 0x6c
 80060ec:	18ba      	adds	r2, r7, r2
 80060ee:	8812      	ldrh	r2, [r2, #0]
 80060f0:	4983      	ldr	r1, [pc, #524]	@ (8006300 <USB_ActivateEndpoint+0x2b0>)
 80060f2:	430a      	orrs	r2, r1
 80060f4:	b292      	uxth	r2, r2
 80060f6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	18d3      	adds	r3, r2, r3
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	b21b      	sxth	r3, r3
 8006108:	4a7e      	ldr	r2, [pc, #504]	@ (8006304 <USB_ActivateEndpoint+0x2b4>)
 800610a:	4013      	ands	r3, r2
 800610c:	b21a      	sxth	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b21b      	sxth	r3, r3
 8006114:	4313      	orrs	r3, r2
 8006116:	b21a      	sxth	r2, r3
 8006118:	2166      	movs	r1, #102	@ 0x66
 800611a:	187b      	adds	r3, r7, r1
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	18d3      	adds	r3, r2, r3
 8006128:	187a      	adds	r2, r7, r1
 800612a:	8812      	ldrh	r2, [r2, #0]
 800612c:	4974      	ldr	r1, [pc, #464]	@ (8006300 <USB_ActivateEndpoint+0x2b0>)
 800612e:	430a      	orrs	r2, r1
 8006130:	b292      	uxth	r2, r2
 8006132:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	7b1b      	ldrb	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d000      	beq.n	800613e <USB_ActivateEndpoint+0xee>
 800613c:	e177      	b.n	800642e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d100      	bne.n	8006148 <USB_ActivateEndpoint+0xf8>
 8006146:	e07a      	b.n	800623e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2250      	movs	r2, #80	@ 0x50
 8006150:	5a9b      	ldrh	r3, [r3, r2]
 8006152:	b29b      	uxth	r3, r3
 8006154:	001a      	movs	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	189b      	adds	r3, r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	00da      	lsls	r2, r3, #3
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	18d3      	adds	r3, r2, r3
 8006166:	2280      	movs	r2, #128	@ 0x80
 8006168:	00d2      	lsls	r2, r2, #3
 800616a:	4694      	mov	ip, r2
 800616c:	4463      	add	r3, ip
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	88db      	ldrh	r3, [r3, #6]
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	b29b      	uxth	r3, r3
 8006178:	18db      	adds	r3, r3, r3
 800617a:	b29a      	uxth	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	18d2      	adds	r2, r2, r3
 800618a:	2112      	movs	r1, #18
 800618c:	187b      	adds	r3, r7, r1
 800618e:	8812      	ldrh	r2, [r2, #0]
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	187b      	adds	r3, r7, r1
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	2240      	movs	r2, #64	@ 0x40
 8006198:	4013      	ands	r3, r2
 800619a:	d016      	beq.n	80061ca <USB_ActivateEndpoint+0x17a>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	18d3      	adds	r3, r2, r3
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	2010      	movs	r0, #16
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	4955      	ldr	r1, [pc, #340]	@ (8006304 <USB_ActivateEndpoint+0x2b4>)
 80061b0:	400a      	ands	r2, r1
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	183a      	adds	r2, r7, r0
 80061c0:	8812      	ldrh	r2, [r2, #0]
 80061c2:	4951      	ldr	r1, [pc, #324]	@ (8006308 <USB_ActivateEndpoint+0x2b8>)
 80061c4:	430a      	orrs	r2, r1
 80061c6:	b292      	uxth	r2, r2
 80061c8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	78db      	ldrb	r3, [r3, #3]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d01d      	beq.n	800620e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	200c      	movs	r0, #12
 80061e2:	183b      	adds	r3, r7, r0
 80061e4:	4949      	ldr	r1, [pc, #292]	@ (800630c <USB_ActivateEndpoint+0x2bc>)
 80061e6:	400a      	ands	r2, r1
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	183b      	adds	r3, r7, r0
 80061ec:	183a      	adds	r2, r7, r0
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	2120      	movs	r1, #32
 80061f2:	404a      	eors	r2, r1
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	18d3      	adds	r3, r2, r3
 8006200:	183a      	adds	r2, r7, r0
 8006202:	8812      	ldrh	r2, [r2, #0]
 8006204:	493e      	ldr	r1, [pc, #248]	@ (8006300 <USB_ActivateEndpoint+0x2b0>)
 8006206:	430a      	orrs	r2, r1
 8006208:	b292      	uxth	r2, r2
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e2b5      	b.n	800677a <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	18d3      	adds	r3, r2, r3
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29a      	uxth	r2, r3
 800621c:	200e      	movs	r0, #14
 800621e:	183b      	adds	r3, r7, r0
 8006220:	493a      	ldr	r1, [pc, #232]	@ (800630c <USB_ActivateEndpoint+0x2bc>)
 8006222:	400a      	ands	r2, r1
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	18d3      	adds	r3, r2, r3
 8006230:	183a      	adds	r2, r7, r0
 8006232:	8812      	ldrh	r2, [r2, #0]
 8006234:	4932      	ldr	r1, [pc, #200]	@ (8006300 <USB_ActivateEndpoint+0x2b0>)
 8006236:	430a      	orrs	r2, r1
 8006238:	b292      	uxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e29d      	b.n	800677a <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	633b      	str	r3, [r7, #48]	@ 0x30
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2250      	movs	r2, #80	@ 0x50
 8006246:	5a9b      	ldrh	r3, [r3, r2]
 8006248:	b29b      	uxth	r3, r3
 800624a:	001a      	movs	r2, r3
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	189b      	adds	r3, r3, r2
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	00da      	lsls	r2, r3, #3
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	18d3      	adds	r3, r2, r3
 800625c:	4a2c      	ldr	r2, [pc, #176]	@ (8006310 <USB_ActivateEndpoint+0x2c0>)
 800625e:	4694      	mov	ip, r2
 8006260:	4463      	add	r3, ip
 8006262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	88db      	ldrh	r3, [r3, #6]
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	b29b      	uxth	r3, r3
 800626c:	18db      	adds	r3, r3, r3
 800626e:	b29a      	uxth	r2, r3
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2250      	movs	r2, #80	@ 0x50
 800627c:	5a9b      	ldrh	r3, [r3, r2]
 800627e:	b29b      	uxth	r3, r3
 8006280:	001a      	movs	r2, r3
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	189b      	adds	r3, r3, r2
 8006286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	00da      	lsls	r2, r3, #3
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	4a20      	ldr	r2, [pc, #128]	@ (8006314 <USB_ActivateEndpoint+0x2c4>)
 8006294:	4694      	mov	ip, r2
 8006296:	4463      	add	r3, ip
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	059b      	lsls	r3, r3, #22
 80062a2:	0d9b      	lsrs	r3, r3, #22
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <USB_ActivateEndpoint+0x274>
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4a17      	ldr	r2, [pc, #92]	@ (8006318 <USB_ActivateEndpoint+0x2c8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e045      	b.n	8006350 <USB_ActivateEndpoint+0x300>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ca:	d827      	bhi.n	800631c <USB_ActivateEndpoint+0x2cc>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2201      	movs	r2, #1
 80062da:	4013      	ands	r3, r2
 80062dc:	d002      	beq.n	80062e4 <USB_ActivateEndpoint+0x294>
 80062de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062e0:	3301      	adds	r3, #1
 80062e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e029      	b.n	8006350 <USB_ActivateEndpoint+0x300>
 80062fc:	ffff898f 	.word	0xffff898f
 8006300:	ffff8080 	.word	0xffff8080
 8006304:	ffff8f8f 	.word	0xffff8f8f
 8006308:	ffff80c0 	.word	0xffff80c0
 800630c:	ffff8fbf 	.word	0xffff8fbf
 8006310:	00000404 	.word	0x00000404
 8006314:	00000406 	.word	0x00000406
 8006318:	ffff8000 	.word	0xffff8000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	221f      	movs	r2, #31
 800632a:	4013      	ands	r3, r2
 800632c:	d102      	bne.n	8006334 <USB_ActivateEndpoint+0x2e4>
 800632e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006330:	3b01      	subs	r3, #1
 8006332:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29a      	uxth	r2, r3
 800633a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29b      	uxth	r3, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	4ab5      	ldr	r2, [pc, #724]	@ (800661c <USB_ActivateEndpoint+0x5cc>)
 8006348:	4313      	orrs	r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	18d2      	adds	r2, r2, r3
 800635a:	2122      	movs	r1, #34	@ 0x22
 800635c:	187b      	adds	r3, r7, r1
 800635e:	8812      	ldrh	r2, [r2, #0]
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	187b      	adds	r3, r7, r1
 8006364:	881a      	ldrh	r2, [r3, #0]
 8006366:	2380      	movs	r3, #128	@ 0x80
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	4013      	ands	r3, r2
 800636c:	d016      	beq.n	800639c <USB_ActivateEndpoint+0x34c>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	18d3      	adds	r3, r2, r3
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29a      	uxth	r2, r3
 800637c:	2020      	movs	r0, #32
 800637e:	183b      	adds	r3, r7, r0
 8006380:	49a7      	ldr	r1, [pc, #668]	@ (8006620 <USB_ActivateEndpoint+0x5d0>)
 8006382:	400a      	ands	r2, r1
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	183a      	adds	r2, r7, r0
 8006392:	8812      	ldrh	r2, [r2, #0]
 8006394:	49a3      	ldr	r1, [pc, #652]	@ (8006624 <USB_ActivateEndpoint+0x5d4>)
 8006396:	430a      	orrs	r2, r1
 8006398:	b292      	uxth	r2, r2
 800639a:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d125      	bne.n	80063f0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	18d3      	adds	r3, r2, r3
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	201c      	movs	r0, #28
 80063b4:	183b      	adds	r3, r7, r0
 80063b6:	499c      	ldr	r1, [pc, #624]	@ (8006628 <USB_ActivateEndpoint+0x5d8>)
 80063b8:	400a      	ands	r2, r1
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	183b      	adds	r3, r7, r0
 80063be:	183a      	adds	r2, r7, r0
 80063c0:	8812      	ldrh	r2, [r2, #0]
 80063c2:	2180      	movs	r1, #128	@ 0x80
 80063c4:	0149      	lsls	r1, r1, #5
 80063c6:	404a      	eors	r2, r1
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	183b      	adds	r3, r7, r0
 80063cc:	183a      	adds	r2, r7, r0
 80063ce:	8812      	ldrh	r2, [r2, #0]
 80063d0:	2180      	movs	r1, #128	@ 0x80
 80063d2:	0189      	lsls	r1, r1, #6
 80063d4:	404a      	eors	r2, r1
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	183a      	adds	r2, r7, r0
 80063e4:	8812      	ldrh	r2, [r2, #0]
 80063e6:	4991      	ldr	r1, [pc, #580]	@ (800662c <USB_ActivateEndpoint+0x5dc>)
 80063e8:	430a      	orrs	r2, r1
 80063ea:	b292      	uxth	r2, r2
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e1c4      	b.n	800677a <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	18d3      	adds	r3, r2, r3
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	201e      	movs	r0, #30
 8006400:	183b      	adds	r3, r7, r0
 8006402:	4989      	ldr	r1, [pc, #548]	@ (8006628 <USB_ActivateEndpoint+0x5d8>)
 8006404:	400a      	ands	r2, r1
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	183b      	adds	r3, r7, r0
 800640a:	183a      	adds	r2, r7, r0
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	0189      	lsls	r1, r1, #6
 8006412:	404a      	eors	r2, r1
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	18d3      	adds	r3, r2, r3
 8006420:	183a      	adds	r2, r7, r0
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	4981      	ldr	r1, [pc, #516]	@ (800662c <USB_ActivateEndpoint+0x5dc>)
 8006426:	430a      	orrs	r2, r1
 8006428:	b292      	uxth	r2, r2
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e1a5      	b.n	800677a <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	78db      	ldrb	r3, [r3, #3]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d117      	bne.n	8006466 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	18d3      	adds	r3, r2, r3
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29a      	uxth	r2, r3
 8006444:	2062      	movs	r0, #98	@ 0x62
 8006446:	183b      	adds	r3, r7, r0
 8006448:	4975      	ldr	r1, [pc, #468]	@ (8006620 <USB_ActivateEndpoint+0x5d0>)
 800644a:	400a      	ands	r2, r1
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	183a      	adds	r2, r7, r0
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	4974      	ldr	r1, [pc, #464]	@ (8006630 <USB_ActivateEndpoint+0x5e0>)
 800645e:	430a      	orrs	r2, r1
 8006460:	b292      	uxth	r2, r2
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e016      	b.n	8006494 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	18d3      	adds	r3, r2, r3
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29a      	uxth	r2, r3
 8006474:	2064      	movs	r0, #100	@ 0x64
 8006476:	183b      	adds	r3, r7, r0
 8006478:	496e      	ldr	r1, [pc, #440]	@ (8006634 <USB_ActivateEndpoint+0x5e4>)
 800647a:	400a      	ands	r2, r1
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	18d3      	adds	r3, r2, r3
 8006488:	183a      	adds	r2, r7, r0
 800648a:	8812      	ldrh	r2, [r2, #0]
 800648c:	4967      	ldr	r1, [pc, #412]	@ (800662c <USB_ActivateEndpoint+0x5dc>)
 800648e:	430a      	orrs	r2, r1
 8006490:	b292      	uxth	r2, r2
 8006492:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2250      	movs	r2, #80	@ 0x50
 800649c:	5a9b      	ldrh	r3, [r3, r2]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	001a      	movs	r2, r3
 80064a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a4:	189b      	adds	r3, r3, r2
 80064a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	00da      	lsls	r2, r3, #3
 80064ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	2280      	movs	r2, #128	@ 0x80
 80064b4:	00d2      	lsls	r2, r2, #3
 80064b6:	4694      	mov	ip, r2
 80064b8:	4463      	add	r3, ip
 80064ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	891b      	ldrh	r3, [r3, #8]
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	18db      	adds	r3, r3, r3
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2250      	movs	r2, #80	@ 0x50
 80064d4:	5a9b      	ldrh	r3, [r3, r2]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	001a      	movs	r2, r3
 80064da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	657b      	str	r3, [r7, #84]	@ 0x54
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00da      	lsls	r2, r3, #3
 80064e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e8:	18d3      	adds	r3, r2, r3
 80064ea:	4a53      	ldr	r2, [pc, #332]	@ (8006638 <USB_ActivateEndpoint+0x5e8>)
 80064ec:	4694      	mov	ip, r2
 80064ee:	4463      	add	r3, ip
 80064f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	895b      	ldrh	r3, [r3, #10]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	18db      	adds	r3, r3, r3
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006500:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d000      	beq.n	800650c <USB_ActivateEndpoint+0x4bc>
 800650a:	e09b      	b.n	8006644 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	18d2      	adds	r2, r2, r3
 8006516:	2140      	movs	r1, #64	@ 0x40
 8006518:	187b      	adds	r3, r7, r1
 800651a:	8812      	ldrh	r2, [r2, #0]
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	187b      	adds	r3, r7, r1
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	2380      	movs	r3, #128	@ 0x80
 8006524:	01db      	lsls	r3, r3, #7
 8006526:	4013      	ands	r3, r2
 8006528:	d016      	beq.n	8006558 <USB_ActivateEndpoint+0x508>
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	18d3      	adds	r3, r2, r3
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29a      	uxth	r2, r3
 8006538:	203e      	movs	r0, #62	@ 0x3e
 800653a:	183b      	adds	r3, r7, r0
 800653c:	4938      	ldr	r1, [pc, #224]	@ (8006620 <USB_ActivateEndpoint+0x5d0>)
 800653e:	400a      	ands	r2, r1
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	18d3      	adds	r3, r2, r3
 800654c:	183a      	adds	r2, r7, r0
 800654e:	8812      	ldrh	r2, [r2, #0]
 8006550:	4934      	ldr	r1, [pc, #208]	@ (8006624 <USB_ActivateEndpoint+0x5d4>)
 8006552:	430a      	orrs	r2, r1
 8006554:	b292      	uxth	r2, r2
 8006556:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	18d2      	adds	r2, r2, r3
 8006562:	213c      	movs	r1, #60	@ 0x3c
 8006564:	187b      	adds	r3, r7, r1
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	187b      	adds	r3, r7, r1
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	2240      	movs	r2, #64	@ 0x40
 8006570:	4013      	ands	r3, r2
 8006572:	d016      	beq.n	80065a2 <USB_ActivateEndpoint+0x552>
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	18d3      	adds	r3, r2, r3
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29a      	uxth	r2, r3
 8006582:	203a      	movs	r0, #58	@ 0x3a
 8006584:	183b      	adds	r3, r7, r0
 8006586:	4926      	ldr	r1, [pc, #152]	@ (8006620 <USB_ActivateEndpoint+0x5d0>)
 8006588:	400a      	ands	r2, r1
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	18d3      	adds	r3, r2, r3
 8006596:	183a      	adds	r2, r7, r0
 8006598:	8812      	ldrh	r2, [r2, #0]
 800659a:	4928      	ldr	r1, [pc, #160]	@ (800663c <USB_ActivateEndpoint+0x5ec>)
 800659c:	430a      	orrs	r2, r1
 800659e:	b292      	uxth	r2, r2
 80065a0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	18d3      	adds	r3, r2, r3
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	2038      	movs	r0, #56	@ 0x38
 80065b2:	183b      	adds	r3, r7, r0
 80065b4:	491c      	ldr	r1, [pc, #112]	@ (8006628 <USB_ActivateEndpoint+0x5d8>)
 80065b6:	400a      	ands	r2, r1
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	183b      	adds	r3, r7, r0
 80065bc:	183a      	adds	r2, r7, r0
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	2180      	movs	r1, #128	@ 0x80
 80065c2:	0149      	lsls	r1, r1, #5
 80065c4:	404a      	eors	r2, r1
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	183b      	adds	r3, r7, r0
 80065ca:	183a      	adds	r2, r7, r0
 80065cc:	8812      	ldrh	r2, [r2, #0]
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	0189      	lsls	r1, r1, #6
 80065d2:	404a      	eors	r2, r1
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	18d3      	adds	r3, r2, r3
 80065e0:	183a      	adds	r2, r7, r0
 80065e2:	8812      	ldrh	r2, [r2, #0]
 80065e4:	4911      	ldr	r1, [pc, #68]	@ (800662c <USB_ActivateEndpoint+0x5dc>)
 80065e6:	430a      	orrs	r2, r1
 80065e8:	b292      	uxth	r2, r2
 80065ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	18d3      	adds	r3, r2, r3
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	2036      	movs	r0, #54	@ 0x36
 80065fc:	183b      	adds	r3, r7, r0
 80065fe:	4910      	ldr	r1, [pc, #64]	@ (8006640 <USB_ActivateEndpoint+0x5f0>)
 8006600:	400a      	ands	r2, r1
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	18d3      	adds	r3, r2, r3
 800660e:	183a      	adds	r2, r7, r0
 8006610:	8812      	ldrh	r2, [r2, #0]
 8006612:	4906      	ldr	r1, [pc, #24]	@ (800662c <USB_ActivateEndpoint+0x5dc>)
 8006614:	430a      	orrs	r2, r1
 8006616:	b292      	uxth	r2, r2
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e0ae      	b.n	800677a <USB_ActivateEndpoint+0x72a>
 800661c:	ffff8000 	.word	0xffff8000
 8006620:	ffff8f8f 	.word	0xffff8f8f
 8006624:	ffffc080 	.word	0xffffc080
 8006628:	ffffbf8f 	.word	0xffffbf8f
 800662c:	ffff8080 	.word	0xffff8080
 8006630:	ffff8180 	.word	0xffff8180
 8006634:	ffff8e8f 	.word	0xffff8e8f
 8006638:	00000404 	.word	0x00000404
 800663c:	ffff80c0 	.word	0xffff80c0
 8006640:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	18d2      	adds	r2, r2, r3
 800664e:	214e      	movs	r1, #78	@ 0x4e
 8006650:	187b      	adds	r3, r7, r1
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	187b      	adds	r3, r7, r1
 8006658:	881a      	ldrh	r2, [r3, #0]
 800665a:	2380      	movs	r3, #128	@ 0x80
 800665c:	01db      	lsls	r3, r3, #7
 800665e:	4013      	ands	r3, r2
 8006660:	d016      	beq.n	8006690 <USB_ActivateEndpoint+0x640>
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	18d3      	adds	r3, r2, r3
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29a      	uxth	r2, r3
 8006670:	204c      	movs	r0, #76	@ 0x4c
 8006672:	183b      	adds	r3, r7, r0
 8006674:	4944      	ldr	r1, [pc, #272]	@ (8006788 <USB_ActivateEndpoint+0x738>)
 8006676:	400a      	ands	r2, r1
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	18d3      	adds	r3, r2, r3
 8006684:	183a      	adds	r2, r7, r0
 8006686:	8812      	ldrh	r2, [r2, #0]
 8006688:	4940      	ldr	r1, [pc, #256]	@ (800678c <USB_ActivateEndpoint+0x73c>)
 800668a:	430a      	orrs	r2, r1
 800668c:	b292      	uxth	r2, r2
 800668e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	18d2      	adds	r2, r2, r3
 800669a:	214a      	movs	r1, #74	@ 0x4a
 800669c:	187b      	adds	r3, r7, r1
 800669e:	8812      	ldrh	r2, [r2, #0]
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	187b      	adds	r3, r7, r1
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	2240      	movs	r2, #64	@ 0x40
 80066a8:	4013      	ands	r3, r2
 80066aa:	d016      	beq.n	80066da <USB_ActivateEndpoint+0x68a>
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	18d3      	adds	r3, r2, r3
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	2048      	movs	r0, #72	@ 0x48
 80066bc:	183b      	adds	r3, r7, r0
 80066be:	4932      	ldr	r1, [pc, #200]	@ (8006788 <USB_ActivateEndpoint+0x738>)
 80066c0:	400a      	ands	r2, r1
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	18d3      	adds	r3, r2, r3
 80066ce:	183a      	adds	r2, r7, r0
 80066d0:	8812      	ldrh	r2, [r2, #0]
 80066d2:	492f      	ldr	r1, [pc, #188]	@ (8006790 <USB_ActivateEndpoint+0x740>)
 80066d4:	430a      	orrs	r2, r1
 80066d6:	b292      	uxth	r2, r2
 80066d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	78db      	ldrb	r3, [r3, #3]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d01d      	beq.n	800671e <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	18d3      	adds	r3, r2, r3
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	2044      	movs	r0, #68	@ 0x44
 80066f2:	183b      	adds	r3, r7, r0
 80066f4:	4927      	ldr	r1, [pc, #156]	@ (8006794 <USB_ActivateEndpoint+0x744>)
 80066f6:	400a      	ands	r2, r1
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	183a      	adds	r2, r7, r0
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	2120      	movs	r1, #32
 8006702:	404a      	eors	r2, r1
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	183a      	adds	r2, r7, r0
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	4920      	ldr	r1, [pc, #128]	@ (8006798 <USB_ActivateEndpoint+0x748>)
 8006716:	430a      	orrs	r2, r1
 8006718:	b292      	uxth	r2, r2
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e016      	b.n	800674c <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	18d3      	adds	r3, r2, r3
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29a      	uxth	r2, r3
 800672c:	2046      	movs	r0, #70	@ 0x46
 800672e:	183b      	adds	r3, r7, r0
 8006730:	4918      	ldr	r1, [pc, #96]	@ (8006794 <USB_ActivateEndpoint+0x744>)
 8006732:	400a      	ands	r2, r1
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	18d3      	adds	r3, r2, r3
 8006740:	183a      	adds	r2, r7, r0
 8006742:	8812      	ldrh	r2, [r2, #0]
 8006744:	4914      	ldr	r1, [pc, #80]	@ (8006798 <USB_ActivateEndpoint+0x748>)
 8006746:	430a      	orrs	r2, r1
 8006748:	b292      	uxth	r2, r2
 800674a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	18d3      	adds	r3, r2, r3
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	2042      	movs	r0, #66	@ 0x42
 800675c:	183b      	adds	r3, r7, r0
 800675e:	490f      	ldr	r1, [pc, #60]	@ (800679c <USB_ActivateEndpoint+0x74c>)
 8006760:	400a      	ands	r2, r1
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	18d3      	adds	r3, r2, r3
 800676e:	183a      	adds	r2, r7, r0
 8006770:	8812      	ldrh	r2, [r2, #0]
 8006772:	4909      	ldr	r1, [pc, #36]	@ (8006798 <USB_ActivateEndpoint+0x748>)
 8006774:	430a      	orrs	r2, r1
 8006776:	b292      	uxth	r2, r2
 8006778:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800677a:	236f      	movs	r3, #111	@ 0x6f
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	781b      	ldrb	r3, [r3, #0]
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b01c      	add	sp, #112	@ 0x70
 8006786:	bd80      	pop	{r7, pc}
 8006788:	ffff8f8f 	.word	0xffff8f8f
 800678c:	ffffc080 	.word	0xffffc080
 8006790:	ffff80c0 	.word	0xffff80c0
 8006794:	ffff8fbf 	.word	0xffff8fbf
 8006798:	ffff8080 	.word	0xffff8080
 800679c:	ffffbf8f 	.word	0xffffbf8f

080067a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	7b1b      	ldrb	r3, [r3, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d000      	beq.n	80067b4 <USB_DeactivateEndpoint+0x14>
 80067b2:	e07e      	b.n	80068b2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d03c      	beq.n	8006836 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	18d2      	adds	r2, r2, r3
 80067c6:	210c      	movs	r1, #12
 80067c8:	187b      	adds	r3, r7, r1
 80067ca:	8812      	ldrh	r2, [r2, #0]
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	187b      	adds	r3, r7, r1
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	2240      	movs	r2, #64	@ 0x40
 80067d4:	4013      	ands	r3, r2
 80067d6:	d016      	beq.n	8006806 <USB_DeactivateEndpoint+0x66>
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	18d3      	adds	r3, r2, r3
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	200a      	movs	r0, #10
 80067e8:	183b      	adds	r3, r7, r0
 80067ea:	49c7      	ldr	r1, [pc, #796]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 80067ec:	400a      	ands	r2, r1
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	18d3      	adds	r3, r2, r3
 80067fa:	183a      	adds	r2, r7, r0
 80067fc:	8812      	ldrh	r2, [r2, #0]
 80067fe:	49c3      	ldr	r1, [pc, #780]	@ (8006b0c <USB_DeactivateEndpoint+0x36c>)
 8006800:	430a      	orrs	r2, r1
 8006802:	b292      	uxth	r2, r2
 8006804:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	18d3      	adds	r3, r2, r3
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29a      	uxth	r2, r3
 8006814:	2008      	movs	r0, #8
 8006816:	183b      	adds	r3, r7, r0
 8006818:	49bd      	ldr	r1, [pc, #756]	@ (8006b10 <USB_DeactivateEndpoint+0x370>)
 800681a:	400a      	ands	r2, r1
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	18d3      	adds	r3, r2, r3
 8006828:	183a      	adds	r2, r7, r0
 800682a:	8812      	ldrh	r2, [r2, #0]
 800682c:	49b9      	ldr	r1, [pc, #740]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 800682e:	430a      	orrs	r2, r1
 8006830:	b292      	uxth	r2, r2
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e163      	b.n	8006afe <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	18d2      	adds	r2, r2, r3
 8006840:	2112      	movs	r1, #18
 8006842:	187b      	adds	r3, r7, r1
 8006844:	8812      	ldrh	r2, [r2, #0]
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	187b      	adds	r3, r7, r1
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	2380      	movs	r3, #128	@ 0x80
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	4013      	ands	r3, r2
 8006852:	d016      	beq.n	8006882 <USB_DeactivateEndpoint+0xe2>
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	18d3      	adds	r3, r2, r3
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29a      	uxth	r2, r3
 8006862:	2010      	movs	r0, #16
 8006864:	183b      	adds	r3, r7, r0
 8006866:	49a8      	ldr	r1, [pc, #672]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006868:	400a      	ands	r2, r1
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	183a      	adds	r2, r7, r0
 8006878:	8812      	ldrh	r2, [r2, #0]
 800687a:	49a7      	ldr	r1, [pc, #668]	@ (8006b18 <USB_DeactivateEndpoint+0x378>)
 800687c:	430a      	orrs	r2, r1
 800687e:	b292      	uxth	r2, r2
 8006880:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	18d3      	adds	r3, r2, r3
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29a      	uxth	r2, r3
 8006890:	200e      	movs	r0, #14
 8006892:	183b      	adds	r3, r7, r0
 8006894:	49a1      	ldr	r1, [pc, #644]	@ (8006b1c <USB_DeactivateEndpoint+0x37c>)
 8006896:	400a      	ands	r2, r1
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	18d3      	adds	r3, r2, r3
 80068a4:	183a      	adds	r2, r7, r0
 80068a6:	8812      	ldrh	r2, [r2, #0]
 80068a8:	499a      	ldr	r1, [pc, #616]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 80068aa:	430a      	orrs	r2, r1
 80068ac:	b292      	uxth	r2, r2
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e125      	b.n	8006afe <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <USB_DeactivateEndpoint+0x11c>
 80068ba:	e090      	b.n	80069de <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	18d2      	adds	r2, r2, r3
 80068c6:	2120      	movs	r1, #32
 80068c8:	187b      	adds	r3, r7, r1
 80068ca:	8812      	ldrh	r2, [r2, #0]
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	01db      	lsls	r3, r3, #7
 80068d6:	4013      	ands	r3, r2
 80068d8:	d016      	beq.n	8006908 <USB_DeactivateEndpoint+0x168>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	18d3      	adds	r3, r2, r3
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	201e      	movs	r0, #30
 80068ea:	183b      	adds	r3, r7, r0
 80068ec:	4986      	ldr	r1, [pc, #536]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 80068ee:	400a      	ands	r2, r1
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	18d3      	adds	r3, r2, r3
 80068fc:	183a      	adds	r2, r7, r0
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	4985      	ldr	r1, [pc, #532]	@ (8006b18 <USB_DeactivateEndpoint+0x378>)
 8006902:	430a      	orrs	r2, r1
 8006904:	b292      	uxth	r2, r2
 8006906:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	18d2      	adds	r2, r2, r3
 8006912:	211c      	movs	r1, #28
 8006914:	187b      	adds	r3, r7, r1
 8006916:	8812      	ldrh	r2, [r2, #0]
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	187b      	adds	r3, r7, r1
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	2240      	movs	r2, #64	@ 0x40
 8006920:	4013      	ands	r3, r2
 8006922:	d016      	beq.n	8006952 <USB_DeactivateEndpoint+0x1b2>
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29a      	uxth	r2, r3
 8006932:	201a      	movs	r0, #26
 8006934:	183b      	adds	r3, r7, r0
 8006936:	4974      	ldr	r1, [pc, #464]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006938:	400a      	ands	r2, r1
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	18d3      	adds	r3, r2, r3
 8006946:	183a      	adds	r2, r7, r0
 8006948:	8812      	ldrh	r2, [r2, #0]
 800694a:	4970      	ldr	r1, [pc, #448]	@ (8006b0c <USB_DeactivateEndpoint+0x36c>)
 800694c:	430a      	orrs	r2, r1
 800694e:	b292      	uxth	r2, r2
 8006950:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	18d3      	adds	r3, r2, r3
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29a      	uxth	r2, r3
 8006960:	2018      	movs	r0, #24
 8006962:	183b      	adds	r3, r7, r0
 8006964:	4968      	ldr	r1, [pc, #416]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006966:	400a      	ands	r2, r1
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	18d3      	adds	r3, r2, r3
 8006974:	183a      	adds	r2, r7, r0
 8006976:	8812      	ldrh	r2, [r2, #0]
 8006978:	4964      	ldr	r1, [pc, #400]	@ (8006b0c <USB_DeactivateEndpoint+0x36c>)
 800697a:	430a      	orrs	r2, r1
 800697c:	b292      	uxth	r2, r2
 800697e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29a      	uxth	r2, r3
 800698e:	2016      	movs	r0, #22
 8006990:	183b      	adds	r3, r7, r0
 8006992:	4962      	ldr	r1, [pc, #392]	@ (8006b1c <USB_DeactivateEndpoint+0x37c>)
 8006994:	400a      	ands	r2, r1
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	18d3      	adds	r3, r2, r3
 80069a2:	183a      	adds	r2, r7, r0
 80069a4:	8812      	ldrh	r2, [r2, #0]
 80069a6:	495b      	ldr	r1, [pc, #364]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 80069a8:	430a      	orrs	r2, r1
 80069aa:	b292      	uxth	r2, r2
 80069ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	18d3      	adds	r3, r2, r3
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	2014      	movs	r0, #20
 80069be:	183b      	adds	r3, r7, r0
 80069c0:	4953      	ldr	r1, [pc, #332]	@ (8006b10 <USB_DeactivateEndpoint+0x370>)
 80069c2:	400a      	ands	r2, r1
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	183a      	adds	r2, r7, r0
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	494f      	ldr	r1, [pc, #316]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 80069d6:	430a      	orrs	r2, r1
 80069d8:	b292      	uxth	r2, r2
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e08f      	b.n	8006afe <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	18d2      	adds	r2, r2, r3
 80069e8:	212e      	movs	r1, #46	@ 0x2e
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	8812      	ldrh	r2, [r2, #0]
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	01db      	lsls	r3, r3, #7
 80069f8:	4013      	ands	r3, r2
 80069fa:	d016      	beq.n	8006a2a <USB_DeactivateEndpoint+0x28a>
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	18d3      	adds	r3, r2, r3
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	202c      	movs	r0, #44	@ 0x2c
 8006a0c:	183b      	adds	r3, r7, r0
 8006a0e:	493e      	ldr	r1, [pc, #248]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	18d3      	adds	r3, r2, r3
 8006a1e:	183a      	adds	r2, r7, r0
 8006a20:	8812      	ldrh	r2, [r2, #0]
 8006a22:	493d      	ldr	r1, [pc, #244]	@ (8006b18 <USB_DeactivateEndpoint+0x378>)
 8006a24:	430a      	orrs	r2, r1
 8006a26:	b292      	uxth	r2, r2
 8006a28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	18d2      	adds	r2, r2, r3
 8006a34:	212a      	movs	r1, #42	@ 0x2a
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	8812      	ldrh	r2, [r2, #0]
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	2240      	movs	r2, #64	@ 0x40
 8006a42:	4013      	ands	r3, r2
 8006a44:	d016      	beq.n	8006a74 <USB_DeactivateEndpoint+0x2d4>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	18d3      	adds	r3, r2, r3
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	2028      	movs	r0, #40	@ 0x28
 8006a56:	183b      	adds	r3, r7, r0
 8006a58:	492b      	ldr	r1, [pc, #172]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006a5a:	400a      	ands	r2, r1
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	18d3      	adds	r3, r2, r3
 8006a68:	183a      	adds	r2, r7, r0
 8006a6a:	8812      	ldrh	r2, [r2, #0]
 8006a6c:	4927      	ldr	r1, [pc, #156]	@ (8006b0c <USB_DeactivateEndpoint+0x36c>)
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	b292      	uxth	r2, r2
 8006a72:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	18d3      	adds	r3, r2, r3
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	2026      	movs	r0, #38	@ 0x26
 8006a84:	183b      	adds	r3, r7, r0
 8006a86:	4920      	ldr	r1, [pc, #128]	@ (8006b08 <USB_DeactivateEndpoint+0x368>)
 8006a88:	400a      	ands	r2, r1
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	18d3      	adds	r3, r2, r3
 8006a96:	183a      	adds	r2, r7, r0
 8006a98:	8812      	ldrh	r2, [r2, #0]
 8006a9a:	491f      	ldr	r1, [pc, #124]	@ (8006b18 <USB_DeactivateEndpoint+0x378>)
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	18d3      	adds	r3, r2, r3
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	2024      	movs	r0, #36	@ 0x24
 8006ab2:	183b      	adds	r3, r7, r0
 8006ab4:	4916      	ldr	r1, [pc, #88]	@ (8006b10 <USB_DeactivateEndpoint+0x370>)
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	18d3      	adds	r3, r2, r3
 8006ac4:	183a      	adds	r2, r7, r0
 8006ac6:	8812      	ldrh	r2, [r2, #0]
 8006ac8:	4912      	ldr	r1, [pc, #72]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 8006aca:	430a      	orrs	r2, r1
 8006acc:	b292      	uxth	r2, r2
 8006ace:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	18d3      	adds	r3, r2, r3
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	2022      	movs	r0, #34	@ 0x22
 8006ae0:	183b      	adds	r3, r7, r0
 8006ae2:	490e      	ldr	r1, [pc, #56]	@ (8006b1c <USB_DeactivateEndpoint+0x37c>)
 8006ae4:	400a      	ands	r2, r1
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	183a      	adds	r2, r7, r0
 8006af4:	8812      	ldrh	r2, [r2, #0]
 8006af6:	4907      	ldr	r1, [pc, #28]	@ (8006b14 <USB_DeactivateEndpoint+0x374>)
 8006af8:	430a      	orrs	r2, r1
 8006afa:	b292      	uxth	r2, r2
 8006afc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b00c      	add	sp, #48	@ 0x30
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	ffff8f8f 	.word	0xffff8f8f
 8006b0c:	ffff80c0 	.word	0xffff80c0
 8006b10:	ffff8fbf 	.word	0xffff8fbf
 8006b14:	ffff8080 	.word	0xffff8080
 8006b18:	ffffc080 	.word	0xffffc080
 8006b1c:	ffffbf8f 	.word	0xffffbf8f

08006b20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b0c3      	sub	sp, #268	@ 0x10c
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d001      	beq.n	8006b36 <USB_EPStartXfer+0x16>
 8006b32:	f000 fd2d 	bl	8007590 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d905      	bls.n	8006b4e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	1d7a      	adds	r2, r7, #5
 8006b48:	32ff      	adds	r2, #255	@ 0xff
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e004      	b.n	8006b58 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	1d7a      	adds	r2, r7, #5
 8006b54:	32ff      	adds	r2, #255	@ 0xff
 8006b56:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	7b1b      	ldrb	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d125      	bne.n	8006bac <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	6959      	ldr	r1, [r3, #20]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	88da      	ldrh	r2, [r3, #6]
 8006b68:	1d7b      	adds	r3, r7, #5
 8006b6a:	33ff      	adds	r3, #255	@ 0xff
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 fa3f 	bl	8007ff4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2250      	movs	r2, #80	@ 0x50
 8006b7e:	5a9b      	ldrh	r3, [r3, r2]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	001a      	movs	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	00da      	lsls	r2, r3, #3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	18d3      	adds	r3, r2, r3
 8006b94:	4ad7      	ldr	r2, [pc, #860]	@ (8006ef4 <USB_EPStartXfer+0x3d4>)
 8006b96:	4694      	mov	ip, r2
 8006b98:	4463      	add	r3, ip
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	1d7b      	adds	r3, r7, #5
 8006b9e:	33ff      	adds	r3, #255	@ 0xff
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	f000 fccd 	bl	8007546 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	78db      	ldrb	r3, [r3, #3]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d000      	beq.n	8006bb6 <USB_EPStartXfer+0x96>
 8006bb4:	e362      	b.n	800727c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d800      	bhi.n	8006bc4 <USB_EPStartXfer+0xa4>
 8006bc2:	e309      	b.n	80071d8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	2056      	movs	r0, #86	@ 0x56
 8006bd4:	183b      	adds	r3, r7, r0
 8006bd6:	49c8      	ldr	r1, [pc, #800]	@ (8006ef8 <USB_EPStartXfer+0x3d8>)
 8006bd8:	400a      	ands	r2, r1
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	18d3      	adds	r3, r2, r3
 8006be6:	183a      	adds	r2, r7, r0
 8006be8:	8812      	ldrh	r2, [r2, #0]
 8006bea:	49c4      	ldr	r1, [pc, #784]	@ (8006efc <USB_EPStartXfer+0x3dc>)
 8006bec:	430a      	orrs	r2, r1
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	1d7b      	adds	r3, r7, #5
 8006bf8:	33ff      	adds	r3, #255	@ 0xff
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	18d3      	adds	r3, r2, r3
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	001a      	movs	r2, r3
 8006c12:	2340      	movs	r3, #64	@ 0x40
 8006c14:	4013      	ands	r3, r2
 8006c16:	d100      	bne.n	8006c1a <USB_EPStartXfer+0xfa>
 8006c18:	e176      	b.n	8006f08 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d000      	beq.n	8006c28 <USB_EPStartXfer+0x108>
 8006c26:	e074      	b.n	8006d12 <USB_EPStartXfer+0x1f2>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2250      	movs	r2, #80	@ 0x50
 8006c30:	5a9b      	ldrh	r3, [r3, r2]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	001a      	movs	r2, r3
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	189b      	adds	r3, r3, r2
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	00da      	lsls	r2, r3, #3
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	18d3      	adds	r3, r2, r3
 8006c46:	4aae      	ldr	r2, [pc, #696]	@ (8006f00 <USB_EPStartXfer+0x3e0>)
 8006c48:	4694      	mov	ip, r2
 8006c4a:	4463      	add	r3, ip
 8006c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	059b      	lsls	r3, r3, #22
 8006c56:	0d9b      	lsrs	r3, r3, #22
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	1d7b      	adds	r3, r7, #5
 8006c60:	33ff      	adds	r3, #255	@ 0xff
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d108      	bne.n	8006c7a <USB_EPStartXfer+0x15a>
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4aa5      	ldr	r2, [pc, #660]	@ (8006f04 <USB_EPStartXfer+0x3e4>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	e066      	b.n	8006d48 <USB_EPStartXfer+0x228>
 8006c7a:	1d7b      	adds	r3, r7, #5
 8006c7c:	33ff      	adds	r3, #255	@ 0xff
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c82:	d821      	bhi.n	8006cc8 <USB_EPStartXfer+0x1a8>
 8006c84:	1d7b      	adds	r3, r7, #5
 8006c86:	33ff      	adds	r3, #255	@ 0xff
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	1c7a      	adds	r2, r7, #1
 8006c8e:	32ff      	adds	r2, #255	@ 0xff
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	1d7b      	adds	r3, r7, #5
 8006c94:	33ff      	adds	r3, #255	@ 0xff
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d006      	beq.n	8006cac <USB_EPStartXfer+0x18c>
 8006c9e:	1c7b      	adds	r3, r7, #1
 8006ca0:	33ff      	adds	r3, #255	@ 0xff
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	1c7a      	adds	r2, r7, #1
 8006ca8:	32ff      	adds	r2, #255	@ 0xff
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	1c7b      	adds	r3, r7, #1
 8006cb4:	33ff      	adds	r3, #255	@ 0xff
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e03f      	b.n	8006d48 <USB_EPStartXfer+0x228>
 8006cc8:	1d7b      	adds	r3, r7, #5
 8006cca:	33ff      	adds	r3, #255	@ 0xff
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	1c7a      	adds	r2, r7, #1
 8006cd2:	32ff      	adds	r2, #255	@ 0xff
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	1d7b      	adds	r3, r7, #5
 8006cd8:	33ff      	adds	r3, #255	@ 0xff
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	221f      	movs	r2, #31
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d106      	bne.n	8006cf0 <USB_EPStartXfer+0x1d0>
 8006ce2:	1c7b      	adds	r3, r7, #1
 8006ce4:	33ff      	adds	r3, #255	@ 0xff
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	1c7a      	adds	r2, r7, #1
 8006cec:	32ff      	adds	r2, #255	@ 0xff
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	1c7b      	adds	r3, r7, #1
 8006cf8:	33ff      	adds	r3, #255	@ 0xff
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4a7f      	ldr	r2, [pc, #508]	@ (8006f04 <USB_EPStartXfer+0x3e4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e01a      	b.n	8006d48 <USB_EPStartXfer+0x228>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d116      	bne.n	8006d48 <USB_EPStartXfer+0x228>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2250      	movs	r2, #80	@ 0x50
 8006d1e:	5a9b      	ldrh	r3, [r3, r2]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	001a      	movs	r2, r3
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	189b      	adds	r3, r3, r2
 8006d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	00da      	lsls	r2, r3, #3
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	18d3      	adds	r3, r2, r3
 8006d34:	4a72      	ldr	r2, [pc, #456]	@ (8006f00 <USB_EPStartXfer+0x3e0>)
 8006d36:	4694      	mov	ip, r2
 8006d38:	4463      	add	r3, ip
 8006d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d3c:	1d7b      	adds	r3, r7, #5
 8006d3e:	33ff      	adds	r3, #255	@ 0xff
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d48:	2076      	movs	r0, #118	@ 0x76
 8006d4a:	183b      	adds	r3, r7, r0
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	8952      	ldrh	r2, [r2, #10]
 8006d50:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6959      	ldr	r1, [r3, #20]
 8006d56:	1d7b      	adds	r3, r7, #5
 8006d58:	33ff      	adds	r3, #255	@ 0xff
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b29c      	uxth	r4, r3
 8006d5e:	183b      	adds	r3, r7, r0
 8006d60:	881a      	ldrh	r2, [r3, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	0023      	movs	r3, r4
 8006d66:	f001 f945 	bl	8007ff4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	1d7b      	adds	r3, r7, #5
 8006d70:	33ff      	adds	r3, #255	@ 0xff
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	18d2      	adds	r2, r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d908      	bls.n	8006d98 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	1d7b      	adds	r3, r7, #5
 8006d8c:	33ff      	adds	r3, #255	@ 0xff
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	621a      	str	r2, [r3, #32]
 8006d96:	e007      	b.n	8006da8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	1d7a      	adds	r2, r7, #5
 8006d9e:	32ff      	adds	r2, #255	@ 0xff
 8006da0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d000      	beq.n	8006db2 <USB_EPStartXfer+0x292>
 8006db0:	e070      	b.n	8006e94 <USB_EPStartXfer+0x374>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2250      	movs	r2, #80	@ 0x50
 8006dba:	5a9b      	ldrh	r3, [r3, r2]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	00da      	lsls	r2, r3, #3
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	18d3      	adds	r3, r2, r3
 8006dd0:	4a48      	ldr	r2, [pc, #288]	@ (8006ef4 <USB_EPStartXfer+0x3d4>)
 8006dd2:	4694      	mov	ip, r2
 8006dd4:	4463      	add	r3, ip
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	059b      	lsls	r3, r3, #22
 8006de0:	0d9b      	lsrs	r3, r3, #22
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	1d7b      	adds	r3, r7, #5
 8006dea:	33ff      	adds	r3, #255	@ 0xff
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d108      	bne.n	8006e04 <USB_EPStartXfer+0x2e4>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	4a42      	ldr	r2, [pc, #264]	@ (8006f04 <USB_EPStartXfer+0x3e4>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e064      	b.n	8006ece <USB_EPStartXfer+0x3ae>
 8006e04:	1d7b      	adds	r3, r7, #5
 8006e06:	33ff      	adds	r3, #255	@ 0xff
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e0c:	d81f      	bhi.n	8006e4e <USB_EPStartXfer+0x32e>
 8006e0e:	1d7b      	adds	r3, r7, #5
 8006e10:	33ff      	adds	r3, #255	@ 0xff
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	21fc      	movs	r1, #252	@ 0xfc
 8006e18:	187a      	adds	r2, r7, r1
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	1d7b      	adds	r3, r7, #5
 8006e1e:	33ff      	adds	r3, #255	@ 0xff
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2201      	movs	r2, #1
 8006e24:	4013      	ands	r3, r2
 8006e26:	d004      	beq.n	8006e32 <USB_EPStartXfer+0x312>
 8006e28:	187b      	adds	r3, r7, r1
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	187a      	adds	r2, r7, r1
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	23fc      	movs	r3, #252	@ 0xfc
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e03f      	b.n	8006ece <USB_EPStartXfer+0x3ae>
 8006e4e:	1d7b      	adds	r3, r7, #5
 8006e50:	33ff      	adds	r3, #255	@ 0xff
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	21fc      	movs	r1, #252	@ 0xfc
 8006e58:	187a      	adds	r2, r7, r1
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	1d7b      	adds	r3, r7, #5
 8006e5e:	33ff      	adds	r3, #255	@ 0xff
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	221f      	movs	r2, #31
 8006e64:	4013      	ands	r3, r2
 8006e66:	d104      	bne.n	8006e72 <USB_EPStartXfer+0x352>
 8006e68:	187b      	adds	r3, r7, r1
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	187a      	adds	r2, r7, r1
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	23fc      	movs	r3, #252	@ 0xfc
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	029b      	lsls	r3, r3, #10
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <USB_EPStartXfer+0x3e4>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e01c      	b.n	8006ece <USB_EPStartXfer+0x3ae>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d118      	bne.n	8006ece <USB_EPStartXfer+0x3ae>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	623b      	str	r3, [r7, #32]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2250      	movs	r2, #80	@ 0x50
 8006ea4:	5a9b      	ldrh	r3, [r3, r2]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	001a      	movs	r2, r3
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	189b      	adds	r3, r3, r2
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	00da      	lsls	r2, r3, #3
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	18d3      	adds	r3, r2, r3
 8006eba:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef4 <USB_EPStartXfer+0x3d4>)
 8006ebc:	4694      	mov	ip, r2
 8006ebe:	4463      	add	r3, ip
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	1d7b      	adds	r3, r7, #5
 8006ec4:	33ff      	adds	r3, #255	@ 0xff
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ece:	2076      	movs	r0, #118	@ 0x76
 8006ed0:	183b      	adds	r3, r7, r0
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	8912      	ldrh	r2, [r2, #8]
 8006ed6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6959      	ldr	r1, [r3, #20]
 8006edc:	1d7b      	adds	r3, r7, #5
 8006ede:	33ff      	adds	r3, #255	@ 0xff
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	b29c      	uxth	r4, r3
 8006ee4:	183b      	adds	r3, r7, r0
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	0023      	movs	r3, r4
 8006eec:	f001 f882 	bl	8007ff4 <USB_WritePMA>
 8006ef0:	e329      	b.n	8007546 <USB_EPStartXfer+0xa26>
 8006ef2:	46c0      	nop			@ (mov r8, r8)
 8006ef4:	00000402 	.word	0x00000402
 8006ef8:	ffff8f8f 	.word	0xffff8f8f
 8006efc:	ffff8180 	.word	0xffff8180
 8006f00:	00000406 	.word	0x00000406
 8006f04:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d000      	beq.n	8006f12 <USB_EPStartXfer+0x3f2>
 8006f10:	e070      	b.n	8006ff4 <USB_EPStartXfer+0x4d4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2250      	movs	r2, #80	@ 0x50
 8006f1a:	5a9b      	ldrh	r3, [r3, r2]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	001a      	movs	r2, r3
 8006f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2e:	18d3      	adds	r3, r2, r3
 8006f30:	4acd      	ldr	r2, [pc, #820]	@ (8007268 <USB_EPStartXfer+0x748>)
 8006f32:	4694      	mov	ip, r2
 8006f34:	4463      	add	r3, ip
 8006f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	059b      	lsls	r3, r3, #22
 8006f40:	0d9b      	lsrs	r3, r3, #22
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	1d7b      	adds	r3, r7, #5
 8006f4a:	33ff      	adds	r3, #255	@ 0xff
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d108      	bne.n	8006f64 <USB_EPStartXfer+0x444>
 8006f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4ac4      	ldr	r2, [pc, #784]	@ (800726c <USB_EPStartXfer+0x74c>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	e064      	b.n	800702e <USB_EPStartXfer+0x50e>
 8006f64:	1d7b      	adds	r3, r7, #5
 8006f66:	33ff      	adds	r3, #255	@ 0xff
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f6c:	d81f      	bhi.n	8006fae <USB_EPStartXfer+0x48e>
 8006f6e:	1d7b      	adds	r3, r7, #5
 8006f70:	33ff      	adds	r3, #255	@ 0xff
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	21f8      	movs	r1, #248	@ 0xf8
 8006f78:	187a      	adds	r2, r7, r1
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	1d7b      	adds	r3, r7, #5
 8006f7e:	33ff      	adds	r3, #255	@ 0xff
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2201      	movs	r2, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	d004      	beq.n	8006f92 <USB_EPStartXfer+0x472>
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	187a      	adds	r2, r7, r1
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	23f8      	movs	r3, #248	@ 0xf8
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e03f      	b.n	800702e <USB_EPStartXfer+0x50e>
 8006fae:	1d7b      	adds	r3, r7, #5
 8006fb0:	33ff      	adds	r3, #255	@ 0xff
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	21f8      	movs	r1, #248	@ 0xf8
 8006fb8:	187a      	adds	r2, r7, r1
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	1d7b      	adds	r3, r7, #5
 8006fbe:	33ff      	adds	r3, #255	@ 0xff
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	221f      	movs	r2, #31
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0x4b2>
 8006fc8:	187b      	adds	r3, r7, r1
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	187a      	adds	r2, r7, r1
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	23f8      	movs	r3, #248	@ 0xf8
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4aa0      	ldr	r2, [pc, #640]	@ (800726c <USB_EPStartXfer+0x74c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e01c      	b.n	800702e <USB_EPStartXfer+0x50e>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d118      	bne.n	800702e <USB_EPStartXfer+0x50e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2250      	movs	r2, #80	@ 0x50
 8007004:	5a9b      	ldrh	r3, [r3, r2]
 8007006:	b29b      	uxth	r3, r3
 8007008:	001a      	movs	r2, r3
 800700a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700c:	189b      	adds	r3, r3, r2
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	00da      	lsls	r2, r3, #3
 8007016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007018:	18d3      	adds	r3, r2, r3
 800701a:	4a93      	ldr	r2, [pc, #588]	@ (8007268 <USB_EPStartXfer+0x748>)
 800701c:	4694      	mov	ip, r2
 800701e:	4463      	add	r3, ip
 8007020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007022:	1d7b      	adds	r3, r7, #5
 8007024:	33ff      	adds	r3, #255	@ 0xff
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	b29a      	uxth	r2, r3
 800702a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800702c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800702e:	2076      	movs	r0, #118	@ 0x76
 8007030:	183b      	adds	r3, r7, r0
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	8912      	ldrh	r2, [r2, #8]
 8007036:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6959      	ldr	r1, [r3, #20]
 800703c:	1d7b      	adds	r3, r7, #5
 800703e:	33ff      	adds	r3, #255	@ 0xff
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	b29c      	uxth	r4, r3
 8007044:	183b      	adds	r3, r7, r0
 8007046:	881a      	ldrh	r2, [r3, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	0023      	movs	r3, r4
 800704c:	f000 ffd2 	bl	8007ff4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	1d7b      	adds	r3, r7, #5
 8007056:	33ff      	adds	r3, #255	@ 0xff
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	18d2      	adds	r2, r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d908      	bls.n	800707e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	1d7b      	adds	r3, r7, #5
 8007072:	33ff      	adds	r3, #255	@ 0xff
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	621a      	str	r2, [r3, #32]
 800707c:	e007      	b.n	800708e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	1d7a      	adds	r2, r7, #5
 8007084:	32ff      	adds	r2, #255	@ 0xff
 8007086:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	643b      	str	r3, [r7, #64]	@ 0x40
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d000      	beq.n	800709c <USB_EPStartXfer+0x57c>
 800709a:	e070      	b.n	800717e <USB_EPStartXfer+0x65e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2250      	movs	r2, #80	@ 0x50
 80070a4:	5a9b      	ldrh	r3, [r3, r2]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	001a      	movs	r2, r3
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	189b      	adds	r3, r3, r2
 80070ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00da      	lsls	r2, r3, #3
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	4a6d      	ldr	r2, [pc, #436]	@ (8007270 <USB_EPStartXfer+0x750>)
 80070bc:	4694      	mov	ip, r2
 80070be:	4463      	add	r3, ip
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	0d9b      	lsrs	r3, r3, #22
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	1d7b      	adds	r3, r7, #5
 80070d4:	33ff      	adds	r3, #255	@ 0xff
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d108      	bne.n	80070ee <USB_EPStartXfer+0x5ce>
 80070dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4a62      	ldr	r2, [pc, #392]	@ (800726c <USB_EPStartXfer+0x74c>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e062      	b.n	80071b4 <USB_EPStartXfer+0x694>
 80070ee:	1d7b      	adds	r3, r7, #5
 80070f0:	33ff      	adds	r3, #255	@ 0xff
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80070f6:	d81f      	bhi.n	8007138 <USB_EPStartXfer+0x618>
 80070f8:	1d7b      	adds	r3, r7, #5
 80070fa:	33ff      	adds	r3, #255	@ 0xff
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	21f4      	movs	r1, #244	@ 0xf4
 8007102:	187a      	adds	r2, r7, r1
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	1d7b      	adds	r3, r7, #5
 8007108:	33ff      	adds	r3, #255	@ 0xff
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2201      	movs	r2, #1
 800710e:	4013      	ands	r3, r2
 8007110:	d004      	beq.n	800711c <USB_EPStartXfer+0x5fc>
 8007112:	187b      	adds	r3, r7, r1
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	187a      	adds	r2, r7, r1
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29a      	uxth	r2, r3
 8007122:	23f4      	movs	r3, #244	@ 0xf4
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	029b      	lsls	r3, r3, #10
 800712c:	b29b      	uxth	r3, r3
 800712e:	4313      	orrs	r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e03d      	b.n	80071b4 <USB_EPStartXfer+0x694>
 8007138:	1d7b      	adds	r3, r7, #5
 800713a:	33ff      	adds	r3, #255	@ 0xff
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	21f4      	movs	r1, #244	@ 0xf4
 8007142:	187a      	adds	r2, r7, r1
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	1d7b      	adds	r3, r7, #5
 8007148:	33ff      	adds	r3, #255	@ 0xff
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	221f      	movs	r2, #31
 800714e:	4013      	ands	r3, r2
 8007150:	d104      	bne.n	800715c <USB_EPStartXfer+0x63c>
 8007152:	187b      	adds	r3, r7, r1
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3b01      	subs	r3, #1
 8007158:	187a      	adds	r2, r7, r1
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29a      	uxth	r2, r3
 8007162:	23f4      	movs	r3, #244	@ 0xf4
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	b29b      	uxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b29b      	uxth	r3, r3
 8007172:	4a3e      	ldr	r2, [pc, #248]	@ (800726c <USB_EPStartXfer+0x74c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e01a      	b.n	80071b4 <USB_EPStartXfer+0x694>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d116      	bne.n	80071b4 <USB_EPStartXfer+0x694>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2250      	movs	r2, #80	@ 0x50
 800718a:	5a9b      	ldrh	r3, [r3, r2]
 800718c:	b29b      	uxth	r3, r3
 800718e:	001a      	movs	r2, r3
 8007190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007192:	189b      	adds	r3, r3, r2
 8007194:	643b      	str	r3, [r7, #64]	@ 0x40
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	00da      	lsls	r2, r3, #3
 800719c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719e:	18d3      	adds	r3, r2, r3
 80071a0:	4a33      	ldr	r2, [pc, #204]	@ (8007270 <USB_EPStartXfer+0x750>)
 80071a2:	4694      	mov	ip, r2
 80071a4:	4463      	add	r3, ip
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a8:	1d7b      	adds	r3, r7, #5
 80071aa:	33ff      	adds	r3, #255	@ 0xff
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071b4:	2076      	movs	r0, #118	@ 0x76
 80071b6:	183b      	adds	r3, r7, r0
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	8952      	ldrh	r2, [r2, #10]
 80071bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6959      	ldr	r1, [r3, #20]
 80071c2:	1d7b      	adds	r3, r7, #5
 80071c4:	33ff      	adds	r3, #255	@ 0xff
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b29c      	uxth	r4, r3
 80071ca:	183b      	adds	r3, r7, r0
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	0023      	movs	r3, r4
 80071d2:	f000 ff0f 	bl	8007ff4 <USB_WritePMA>
 80071d6:	e1b6      	b.n	8007546 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	1d7a      	adds	r2, r7, #5
 80071de:	32ff      	adds	r2, #255	@ 0xff
 80071e0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	18d3      	adds	r3, r2, r3
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	2062      	movs	r0, #98	@ 0x62
 80071f2:	183b      	adds	r3, r7, r0
 80071f4:	491f      	ldr	r1, [pc, #124]	@ (8007274 <USB_EPStartXfer+0x754>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	18d3      	adds	r3, r2, r3
 8007204:	183a      	adds	r2, r7, r0
 8007206:	8812      	ldrh	r2, [r2, #0]
 8007208:	491b      	ldr	r1, [pc, #108]	@ (8007278 <USB_EPStartXfer+0x758>)
 800720a:	430a      	orrs	r2, r1
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2250      	movs	r2, #80	@ 0x50
 8007218:	5a9b      	ldrh	r3, [r3, r2]
 800721a:	b29b      	uxth	r3, r3
 800721c:	001a      	movs	r2, r3
 800721e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007220:	189b      	adds	r3, r3, r2
 8007222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	00da      	lsls	r2, r3, #3
 800722a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800722c:	18d3      	adds	r3, r2, r3
 800722e:	4a0e      	ldr	r2, [pc, #56]	@ (8007268 <USB_EPStartXfer+0x748>)
 8007230:	4694      	mov	ip, r2
 8007232:	4463      	add	r3, ip
 8007234:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007236:	1d7b      	adds	r3, r7, #5
 8007238:	33ff      	adds	r3, #255	@ 0xff
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007240:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007242:	2076      	movs	r0, #118	@ 0x76
 8007244:	183b      	adds	r3, r7, r0
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	8912      	ldrh	r2, [r2, #8]
 800724a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6959      	ldr	r1, [r3, #20]
 8007250:	1d7b      	adds	r3, r7, #5
 8007252:	33ff      	adds	r3, #255	@ 0xff
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	b29c      	uxth	r4, r3
 8007258:	183b      	adds	r3, r7, r0
 800725a:	881a      	ldrh	r2, [r3, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	0023      	movs	r3, r4
 8007260:	f000 fec8 	bl	8007ff4 <USB_WritePMA>
 8007264:	e16f      	b.n	8007546 <USB_EPStartXfer+0xa26>
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	00000402 	.word	0x00000402
 800726c:	ffff8000 	.word	0xffff8000
 8007270:	00000406 	.word	0x00000406
 8007274:	ffff8e8f 	.word	0xffff8e8f
 8007278:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	1d7b      	adds	r3, r7, #5
 8007282:	33ff      	adds	r3, #255	@ 0xff
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	18d3      	adds	r3, r2, r3
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	001a      	movs	r2, r3
 800729c:	2340      	movs	r3, #64	@ 0x40
 800729e:	4013      	ands	r3, r2
 80072a0:	d100      	bne.n	80072a4 <USB_EPStartXfer+0x784>
 80072a2:	e0a4      	b.n	80073ee <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d000      	beq.n	80072b2 <USB_EPStartXfer+0x792>
 80072b0:	e070      	b.n	8007394 <USB_EPStartXfer+0x874>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2250      	movs	r2, #80	@ 0x50
 80072ba:	5a9b      	ldrh	r3, [r3, r2]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	001a      	movs	r2, r3
 80072c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072c2:	189b      	adds	r3, r3, r2
 80072c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ce:	18d3      	adds	r3, r2, r3
 80072d0:	4ada      	ldr	r2, [pc, #872]	@ (800763c <USB_EPStartXfer+0xb1c>)
 80072d2:	4694      	mov	ip, r2
 80072d4:	4463      	add	r3, ip
 80072d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80072d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	059b      	lsls	r3, r3, #22
 80072e0:	0d9b      	lsrs	r3, r3, #22
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	1d7b      	adds	r3, r7, #5
 80072ea:	33ff      	adds	r3, #255	@ 0xff
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d108      	bne.n	8007304 <USB_EPStartXfer+0x7e4>
 80072f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4ad1      	ldr	r2, [pc, #836]	@ (8007640 <USB_EPStartXfer+0xb20>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e062      	b.n	80073ca <USB_EPStartXfer+0x8aa>
 8007304:	1d7b      	adds	r3, r7, #5
 8007306:	33ff      	adds	r3, #255	@ 0xff
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b3e      	cmp	r3, #62	@ 0x3e
 800730c:	d81f      	bhi.n	800734e <USB_EPStartXfer+0x82e>
 800730e:	1d7b      	adds	r3, r7, #5
 8007310:	33ff      	adds	r3, #255	@ 0xff
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	21f0      	movs	r1, #240	@ 0xf0
 8007318:	187a      	adds	r2, r7, r1
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	1d7b      	adds	r3, r7, #5
 800731e:	33ff      	adds	r3, #255	@ 0xff
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2201      	movs	r2, #1
 8007324:	4013      	ands	r3, r2
 8007326:	d004      	beq.n	8007332 <USB_EPStartXfer+0x812>
 8007328:	187b      	adds	r3, r7, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	187a      	adds	r2, r7, r1
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29a      	uxth	r2, r3
 8007338:	23f0      	movs	r3, #240	@ 0xf0
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29b      	uxth	r3, r3
 8007344:	4313      	orrs	r3, r2
 8007346:	b29a      	uxth	r2, r3
 8007348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e03d      	b.n	80073ca <USB_EPStartXfer+0x8aa>
 800734e:	1d7b      	adds	r3, r7, #5
 8007350:	33ff      	adds	r3, #255	@ 0xff
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	21f0      	movs	r1, #240	@ 0xf0
 8007358:	187a      	adds	r2, r7, r1
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	1d7b      	adds	r3, r7, #5
 800735e:	33ff      	adds	r3, #255	@ 0xff
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	221f      	movs	r2, #31
 8007364:	4013      	ands	r3, r2
 8007366:	d104      	bne.n	8007372 <USB_EPStartXfer+0x852>
 8007368:	187b      	adds	r3, r7, r1
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3b01      	subs	r3, #1
 800736e:	187a      	adds	r2, r7, r1
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29a      	uxth	r2, r3
 8007378:	23f0      	movs	r3, #240	@ 0xf0
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29b      	uxth	r3, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	b29b      	uxth	r3, r3
 8007388:	4aad      	ldr	r2, [pc, #692]	@ (8007640 <USB_EPStartXfer+0xb20>)
 800738a:	4313      	orrs	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e01a      	b.n	80073ca <USB_EPStartXfer+0x8aa>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d116      	bne.n	80073ca <USB_EPStartXfer+0x8aa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2250      	movs	r2, #80	@ 0x50
 80073a0:	5a9b      	ldrh	r3, [r3, r2]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	001a      	movs	r2, r3
 80073a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073b4:	18d3      	adds	r3, r2, r3
 80073b6:	4aa1      	ldr	r2, [pc, #644]	@ (800763c <USB_EPStartXfer+0xb1c>)
 80073b8:	4694      	mov	ip, r2
 80073ba:	4463      	add	r3, ip
 80073bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073be:	1d7b      	adds	r3, r7, #5
 80073c0:	33ff      	adds	r3, #255	@ 0xff
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073ca:	2076      	movs	r0, #118	@ 0x76
 80073cc:	183b      	adds	r3, r7, r0
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	8952      	ldrh	r2, [r2, #10]
 80073d2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	6959      	ldr	r1, [r3, #20]
 80073d8:	1d7b      	adds	r3, r7, #5
 80073da:	33ff      	adds	r3, #255	@ 0xff
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	b29c      	uxth	r4, r3
 80073e0:	183b      	adds	r3, r7, r0
 80073e2:	881a      	ldrh	r2, [r3, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	0023      	movs	r3, r4
 80073e8:	f000 fe04 	bl	8007ff4 <USB_WritePMA>
 80073ec:	e0ab      	b.n	8007546 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d000      	beq.n	80073f8 <USB_EPStartXfer+0x8d8>
 80073f6:	e070      	b.n	80074da <USB_EPStartXfer+0x9ba>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2250      	movs	r2, #80	@ 0x50
 8007400:	5a9b      	ldrh	r3, [r3, r2]
 8007402:	b29b      	uxth	r3, r3
 8007404:	001a      	movs	r2, r3
 8007406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007408:	189b      	adds	r3, r3, r2
 800740a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	00da      	lsls	r2, r3, #3
 8007412:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007414:	18d3      	adds	r3, r2, r3
 8007416:	4a8b      	ldr	r2, [pc, #556]	@ (8007644 <USB_EPStartXfer+0xb24>)
 8007418:	4694      	mov	ip, r2
 800741a:	4463      	add	r3, ip
 800741c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800741e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	059b      	lsls	r3, r3, #22
 8007426:	0d9b      	lsrs	r3, r3, #22
 8007428:	b29a      	uxth	r2, r3
 800742a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	1d7b      	adds	r3, r7, #5
 8007430:	33ff      	adds	r3, #255	@ 0xff
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <USB_EPStartXfer+0x92a>
 8007438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	4a80      	ldr	r2, [pc, #512]	@ (8007640 <USB_EPStartXfer+0xb20>)
 8007440:	4313      	orrs	r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e06c      	b.n	8007524 <USB_EPStartXfer+0xa04>
 800744a:	1d7b      	adds	r3, r7, #5
 800744c:	33ff      	adds	r3, #255	@ 0xff
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b3e      	cmp	r3, #62	@ 0x3e
 8007452:	d81f      	bhi.n	8007494 <USB_EPStartXfer+0x974>
 8007454:	1d7b      	adds	r3, r7, #5
 8007456:	33ff      	adds	r3, #255	@ 0xff
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	21ec      	movs	r1, #236	@ 0xec
 800745e:	187a      	adds	r2, r7, r1
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	1d7b      	adds	r3, r7, #5
 8007464:	33ff      	adds	r3, #255	@ 0xff
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2201      	movs	r2, #1
 800746a:	4013      	ands	r3, r2
 800746c:	d004      	beq.n	8007478 <USB_EPStartXfer+0x958>
 800746e:	187b      	adds	r3, r7, r1
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	187a      	adds	r2, r7, r1
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29a      	uxth	r2, r3
 800747e:	23ec      	movs	r3, #236	@ 0xec
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b29a      	uxth	r2, r3
 800748e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e047      	b.n	8007524 <USB_EPStartXfer+0xa04>
 8007494:	1d7b      	adds	r3, r7, #5
 8007496:	33ff      	adds	r3, #255	@ 0xff
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	21ec      	movs	r1, #236	@ 0xec
 800749e:	187a      	adds	r2, r7, r1
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	1d7b      	adds	r3, r7, #5
 80074a4:	33ff      	adds	r3, #255	@ 0xff
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	221f      	movs	r2, #31
 80074aa:	4013      	ands	r3, r2
 80074ac:	d104      	bne.n	80074b8 <USB_EPStartXfer+0x998>
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	187a      	adds	r2, r7, r1
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	23ec      	movs	r3, #236	@ 0xec
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4a5c      	ldr	r2, [pc, #368]	@ (8007640 <USB_EPStartXfer+0xb20>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074d6:	801a      	strh	r2, [r3, #0]
 80074d8:	e024      	b.n	8007524 <USB_EPStartXfer+0xa04>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d120      	bne.n	8007524 <USB_EPStartXfer+0xa04>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2184      	movs	r1, #132	@ 0x84
 80074e6:	187a      	adds	r2, r7, r1
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2250      	movs	r2, #80	@ 0x50
 80074ee:	5a9b      	ldrh	r3, [r3, r2]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	001a      	movs	r2, r3
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	189b      	adds	r3, r3, r2
 80074fa:	187a      	adds	r2, r7, r1
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	00da      	lsls	r2, r3, #3
 8007504:	187b      	adds	r3, r7, r1
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	4a4e      	ldr	r2, [pc, #312]	@ (8007644 <USB_EPStartXfer+0xb24>)
 800750c:	4694      	mov	ip, r2
 800750e:	4463      	add	r3, ip
 8007510:	2180      	movs	r1, #128	@ 0x80
 8007512:	187a      	adds	r2, r7, r1
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	1d7b      	adds	r3, r7, #5
 8007518:	33ff      	adds	r3, #255	@ 0xff
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	187b      	adds	r3, r7, r1
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007524:	2076      	movs	r0, #118	@ 0x76
 8007526:	183b      	adds	r3, r7, r0
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	8912      	ldrh	r2, [r2, #8]
 800752c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6959      	ldr	r1, [r3, #20]
 8007532:	1d7b      	adds	r3, r7, #5
 8007534:	33ff      	adds	r3, #255	@ 0xff
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	b29c      	uxth	r4, r3
 800753a:	183b      	adds	r3, r7, r0
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	0023      	movs	r3, r4
 8007542:	f000 fd57 	bl	8007ff4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	18d3      	adds	r3, r2, r3
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29a      	uxth	r2, r3
 8007554:	200a      	movs	r0, #10
 8007556:	183b      	adds	r3, r7, r0
 8007558:	493b      	ldr	r1, [pc, #236]	@ (8007648 <USB_EPStartXfer+0xb28>)
 800755a:	400a      	ands	r2, r1
 800755c:	801a      	strh	r2, [r3, #0]
 800755e:	183b      	adds	r3, r7, r0
 8007560:	183a      	adds	r2, r7, r0
 8007562:	8812      	ldrh	r2, [r2, #0]
 8007564:	2110      	movs	r1, #16
 8007566:	404a      	eors	r2, r1
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	183b      	adds	r3, r7, r0
 800756c:	183a      	adds	r2, r7, r0
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	2120      	movs	r1, #32
 8007572:	404a      	eors	r2, r1
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	18d3      	adds	r3, r2, r3
 8007580:	183a      	adds	r2, r7, r0
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	4931      	ldr	r1, [pc, #196]	@ (800764c <USB_EPStartXfer+0xb2c>)
 8007586:	430a      	orrs	r2, r1
 8007588:	b292      	uxth	r2, r2
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	f000 fbe9 	bl	8007d62 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	7b1b      	ldrb	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d000      	beq.n	800759a <USB_EPStartXfer+0xa7a>
 8007598:	e0a8      	b.n	80076ec <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d90d      	bls.n	80075c2 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	1d7a      	adds	r2, r7, #5
 80075ac:	32ff      	adds	r2, #255	@ 0xff
 80075ae:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	1d7b      	adds	r3, r7, #5
 80075b6:	33ff      	adds	r3, #255	@ 0xff
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	619a      	str	r2, [r3, #24]
 80075c0:	e007      	b.n	80075d2 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	1d7a      	adds	r2, r7, #5
 80075c8:	32ff      	adds	r2, #255	@ 0xff
 80075ca:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2200      	movs	r2, #0
 80075d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2190      	movs	r1, #144	@ 0x90
 80075d6:	187a      	adds	r2, r7, r1
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2250      	movs	r2, #80	@ 0x50
 80075de:	5a9b      	ldrh	r3, [r3, r2]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	001a      	movs	r2, r3
 80075e4:	187b      	adds	r3, r7, r1
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	187a      	adds	r2, r7, r1
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	18d3      	adds	r3, r2, r3
 80075fa:	4a10      	ldr	r2, [pc, #64]	@ (800763c <USB_EPStartXfer+0xb1c>)
 80075fc:	4694      	mov	ip, r2
 80075fe:	4463      	add	r3, ip
 8007600:	218c      	movs	r1, #140	@ 0x8c
 8007602:	187a      	adds	r2, r7, r1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	187b      	adds	r3, r7, r1
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	059b      	lsls	r3, r3, #22
 8007610:	0d9b      	lsrs	r3, r3, #22
 8007612:	b29a      	uxth	r2, r3
 8007614:	187b      	adds	r3, r7, r1
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	1d7b      	adds	r3, r7, #5
 800761c:	33ff      	adds	r3, #255	@ 0xff
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d115      	bne.n	8007650 <USB_EPStartXfer+0xb30>
 8007624:	187b      	adds	r3, r7, r1
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	4a04      	ldr	r2, [pc, #16]	@ (8007640 <USB_EPStartXfer+0xb20>)
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	187b      	adds	r3, r7, r1
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e36e      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
 800763a:	46c0      	nop			@ (mov r8, r8)
 800763c:	00000406 	.word	0x00000406
 8007640:	ffff8000 	.word	0xffff8000
 8007644:	00000402 	.word	0x00000402
 8007648:	ffff8fbf 	.word	0xffff8fbf
 800764c:	ffff8080 	.word	0xffff8080
 8007650:	1d7b      	adds	r3, r7, #5
 8007652:	33ff      	adds	r3, #255	@ 0xff
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b3e      	cmp	r3, #62	@ 0x3e
 8007658:	d822      	bhi.n	80076a0 <USB_EPStartXfer+0xb80>
 800765a:	1d7b      	adds	r3, r7, #5
 800765c:	33ff      	adds	r3, #255	@ 0xff
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	21e8      	movs	r1, #232	@ 0xe8
 8007664:	187a      	adds	r2, r7, r1
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	1d7b      	adds	r3, r7, #5
 800766a:	33ff      	adds	r3, #255	@ 0xff
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2201      	movs	r2, #1
 8007670:	4013      	ands	r3, r2
 8007672:	d004      	beq.n	800767e <USB_EPStartXfer+0xb5e>
 8007674:	187b      	adds	r3, r7, r1
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	187a      	adds	r2, r7, r1
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	218c      	movs	r1, #140	@ 0x8c
 8007680:	187b      	adds	r3, r7, r1
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	23e8      	movs	r3, #232	@ 0xe8
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	187b      	adds	r3, r7, r1
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e33b      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
 80076a0:	1d7b      	adds	r3, r7, #5
 80076a2:	33ff      	adds	r3, #255	@ 0xff
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	21e8      	movs	r1, #232	@ 0xe8
 80076aa:	187a      	adds	r2, r7, r1
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	1d7b      	adds	r3, r7, #5
 80076b0:	33ff      	adds	r3, #255	@ 0xff
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	221f      	movs	r2, #31
 80076b6:	4013      	ands	r3, r2
 80076b8:	d104      	bne.n	80076c4 <USB_EPStartXfer+0xba4>
 80076ba:	187b      	adds	r3, r7, r1
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	187a      	adds	r2, r7, r1
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	218c      	movs	r1, #140	@ 0x8c
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	23e8      	movs	r3, #232	@ 0xe8
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	029b      	lsls	r3, r3, #10
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	4ad7      	ldr	r2, [pc, #860]	@ (8007a3c <USB_EPStartXfer+0xf1c>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	187b      	adds	r3, r7, r1
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	e315      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	78db      	ldrb	r3, [r3, #3]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d000      	beq.n	80076f6 <USB_EPStartXfer+0xbd6>
 80076f4:	e189      	b.n	8007a0a <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d000      	beq.n	8007700 <USB_EPStartXfer+0xbe0>
 80076fe:	e07b      	b.n	80077f8 <USB_EPStartXfer+0xcd8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	21ac      	movs	r1, #172	@ 0xac
 8007704:	187a      	adds	r2, r7, r1
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2250      	movs	r2, #80	@ 0x50
 800770c:	5a9b      	ldrh	r3, [r3, r2]
 800770e:	b29b      	uxth	r3, r3
 8007710:	001a      	movs	r2, r3
 8007712:	187b      	adds	r3, r7, r1
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	189b      	adds	r3, r3, r2
 8007718:	187a      	adds	r2, r7, r1
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	00da      	lsls	r2, r3, #3
 8007722:	187b      	adds	r3, r7, r1
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	18d3      	adds	r3, r2, r3
 8007728:	4ac5      	ldr	r2, [pc, #788]	@ (8007a40 <USB_EPStartXfer+0xf20>)
 800772a:	4694      	mov	ip, r2
 800772c:	4463      	add	r3, ip
 800772e:	21a8      	movs	r1, #168	@ 0xa8
 8007730:	187a      	adds	r2, r7, r1
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	187b      	adds	r3, r7, r1
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	0d9b      	lsrs	r3, r3, #22
 8007740:	b29a      	uxth	r2, r3
 8007742:	187b      	adds	r3, r7, r1
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <USB_EPStartXfer+0xc46>
 8007750:	187b      	adds	r3, r7, r1
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	4ab8      	ldr	r2, [pc, #736]	@ (8007a3c <USB_EPStartXfer+0xf1c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	187b      	adds	r3, r7, r1
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e06c      	b.n	8007840 <USB_EPStartXfer+0xd20>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b3e      	cmp	r3, #62	@ 0x3e
 800776c:	d820      	bhi.n	80077b0 <USB_EPStartXfer+0xc90>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	21e4      	movs	r1, #228	@ 0xe4
 8007776:	187a      	adds	r2, r7, r1
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2201      	movs	r2, #1
 8007780:	4013      	ands	r3, r2
 8007782:	d004      	beq.n	800778e <USB_EPStartXfer+0xc6e>
 8007784:	187b      	adds	r3, r7, r1
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	187a      	adds	r2, r7, r1
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	21a8      	movs	r1, #168	@ 0xa8
 8007790:	187b      	adds	r3, r7, r1
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29a      	uxth	r2, r3
 8007798:	23e4      	movs	r3, #228	@ 0xe4
 800779a:	18fb      	adds	r3, r7, r3
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	029b      	lsls	r3, r3, #10
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	4313      	orrs	r3, r2
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	187b      	adds	r3, r7, r1
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e047      	b.n	8007840 <USB_EPStartXfer+0xd20>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	21e4      	movs	r1, #228	@ 0xe4
 80077b8:	187a      	adds	r2, r7, r1
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	221f      	movs	r2, #31
 80077c2:	4013      	ands	r3, r2
 80077c4:	d104      	bne.n	80077d0 <USB_EPStartXfer+0xcb0>
 80077c6:	187b      	adds	r3, r7, r1
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	187a      	adds	r2, r7, r1
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	21a8      	movs	r1, #168	@ 0xa8
 80077d2:	187b      	adds	r3, r7, r1
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	23e4      	movs	r3, #228	@ 0xe4
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4a94      	ldr	r2, [pc, #592]	@ (8007a3c <USB_EPStartXfer+0xf1c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	187b      	adds	r3, r7, r1
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e023      	b.n	8007840 <USB_EPStartXfer+0xd20>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d11f      	bne.n	8007840 <USB_EPStartXfer+0xd20>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	21b4      	movs	r1, #180	@ 0xb4
 8007804:	187a      	adds	r2, r7, r1
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2250      	movs	r2, #80	@ 0x50
 800780c:	5a9b      	ldrh	r3, [r3, r2]
 800780e:	b29b      	uxth	r3, r3
 8007810:	001a      	movs	r2, r3
 8007812:	187b      	adds	r3, r7, r1
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	189b      	adds	r3, r3, r2
 8007818:	187a      	adds	r2, r7, r1
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	00da      	lsls	r2, r3, #3
 8007822:	187b      	adds	r3, r7, r1
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	18d3      	adds	r3, r2, r3
 8007828:	4a85      	ldr	r2, [pc, #532]	@ (8007a40 <USB_EPStartXfer+0xf20>)
 800782a:	4694      	mov	ip, r2
 800782c:	4463      	add	r3, ip
 800782e:	21b0      	movs	r1, #176	@ 0xb0
 8007830:	187a      	adds	r2, r7, r1
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	b29a      	uxth	r2, r3
 800783a:	187b      	adds	r3, r7, r1
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	22a4      	movs	r2, #164	@ 0xa4
 8007844:	18ba      	adds	r2, r7, r2
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d000      	beq.n	8007852 <USB_EPStartXfer+0xd32>
 8007850:	e07b      	b.n	800794a <USB_EPStartXfer+0xe2a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	219c      	movs	r1, #156	@ 0x9c
 8007856:	187a      	adds	r2, r7, r1
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2250      	movs	r2, #80	@ 0x50
 800785e:	5a9b      	ldrh	r3, [r3, r2]
 8007860:	b29b      	uxth	r3, r3
 8007862:	001a      	movs	r2, r3
 8007864:	187b      	adds	r3, r7, r1
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	189b      	adds	r3, r3, r2
 800786a:	187a      	adds	r2, r7, r1
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	00da      	lsls	r2, r3, #3
 8007874:	187b      	adds	r3, r7, r1
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	18d3      	adds	r3, r2, r3
 800787a:	4a72      	ldr	r2, [pc, #456]	@ (8007a44 <USB_EPStartXfer+0xf24>)
 800787c:	4694      	mov	ip, r2
 800787e:	4463      	add	r3, ip
 8007880:	2198      	movs	r1, #152	@ 0x98
 8007882:	187a      	adds	r2, r7, r1
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	187b      	adds	r3, r7, r1
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	059b      	lsls	r3, r3, #22
 8007890:	0d9b      	lsrs	r3, r3, #22
 8007892:	b29a      	uxth	r2, r3
 8007894:	187b      	adds	r3, r7, r1
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <USB_EPStartXfer+0xd98>
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4a64      	ldr	r2, [pc, #400]	@ (8007a3c <USB_EPStartXfer+0xf1c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	e069      	b.n	800798c <USB_EPStartXfer+0xe6c>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80078be:	d820      	bhi.n	8007902 <USB_EPStartXfer+0xde2>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	21e0      	movs	r1, #224	@ 0xe0
 80078c8:	187a      	adds	r2, r7, r1
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2201      	movs	r2, #1
 80078d2:	4013      	ands	r3, r2
 80078d4:	d004      	beq.n	80078e0 <USB_EPStartXfer+0xdc0>
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	187a      	adds	r2, r7, r1
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	2198      	movs	r1, #152	@ 0x98
 80078e2:	187b      	adds	r3, r7, r1
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	23e0      	movs	r3, #224	@ 0xe0
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	029b      	lsls	r3, r3, #10
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e044      	b.n	800798c <USB_EPStartXfer+0xe6c>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	21e0      	movs	r1, #224	@ 0xe0
 800790a:	187a      	adds	r2, r7, r1
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	221f      	movs	r2, #31
 8007914:	4013      	ands	r3, r2
 8007916:	d104      	bne.n	8007922 <USB_EPStartXfer+0xe02>
 8007918:	187b      	adds	r3, r7, r1
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	187a      	adds	r2, r7, r1
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	2198      	movs	r1, #152	@ 0x98
 8007924:	187b      	adds	r3, r7, r1
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29a      	uxth	r2, r3
 800792c:	23e0      	movs	r3, #224	@ 0xe0
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	029b      	lsls	r3, r3, #10
 8007936:	b29b      	uxth	r3, r3
 8007938:	4313      	orrs	r3, r2
 800793a:	b29b      	uxth	r3, r3
 800793c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a3c <USB_EPStartXfer+0xf1c>)
 800793e:	4313      	orrs	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	187b      	adds	r3, r7, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	e020      	b.n	800798c <USB_EPStartXfer+0xe6c>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d11c      	bne.n	800798c <USB_EPStartXfer+0xe6c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2250      	movs	r2, #80	@ 0x50
 8007956:	5a9b      	ldrh	r3, [r3, r2]
 8007958:	b29b      	uxth	r3, r3
 800795a:	001a      	movs	r2, r3
 800795c:	21a4      	movs	r1, #164	@ 0xa4
 800795e:	187b      	adds	r3, r7, r1
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	189b      	adds	r3, r3, r2
 8007964:	187a      	adds	r2, r7, r1
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	00da      	lsls	r2, r3, #3
 800796e:	187b      	adds	r3, r7, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	18d3      	adds	r3, r2, r3
 8007974:	4a33      	ldr	r2, [pc, #204]	@ (8007a44 <USB_EPStartXfer+0xf24>)
 8007976:	4694      	mov	ip, r2
 8007978:	4463      	add	r3, ip
 800797a:	21a0      	movs	r1, #160	@ 0xa0
 800797c:	187a      	adds	r2, r7, r1
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	b29a      	uxth	r2, r3
 8007986:	187b      	adds	r3, r7, r1
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d100      	bne.n	8007996 <USB_EPStartXfer+0xe76>
 8007994:	e1c0      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	18d2      	adds	r2, r2, r3
 80079a0:	2196      	movs	r1, #150	@ 0x96
 80079a2:	187b      	adds	r3, r7, r1
 80079a4:	8812      	ldrh	r2, [r2, #0]
 80079a6:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	01db      	lsls	r3, r3, #7
 80079b0:	4013      	ands	r3, r2
 80079b2:	d004      	beq.n	80079be <USB_EPStartXfer+0xe9e>
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	2240      	movs	r2, #64	@ 0x40
 80079ba:	4013      	ands	r3, r2
 80079bc:	d10d      	bne.n	80079da <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079be:	2196      	movs	r1, #150	@ 0x96
 80079c0:	187b      	adds	r3, r7, r1
 80079c2:	881a      	ldrh	r2, [r3, #0]
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	01db      	lsls	r3, r3, #7
 80079c8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079ca:	d000      	beq.n	80079ce <USB_EPStartXfer+0xeae>
 80079cc:	e1a4      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079ce:	187b      	adds	r3, r7, r1
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	2240      	movs	r2, #64	@ 0x40
 80079d4:	4013      	ands	r3, r2
 80079d6:	d000      	beq.n	80079da <USB_EPStartXfer+0xeba>
 80079d8:	e19e      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	18d3      	adds	r3, r2, r3
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	2094      	movs	r0, #148	@ 0x94
 80079ea:	183b      	adds	r3, r7, r0
 80079ec:	4916      	ldr	r1, [pc, #88]	@ (8007a48 <USB_EPStartXfer+0xf28>)
 80079ee:	400a      	ands	r2, r1
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	18d3      	adds	r3, r2, r3
 80079fc:	183a      	adds	r2, r7, r0
 80079fe:	8812      	ldrh	r2, [r2, #0]
 8007a00:	4912      	ldr	r1, [pc, #72]	@ (8007a4c <USB_EPStartXfer+0xf2c>)
 8007a02:	430a      	orrs	r2, r1
 8007a04:	b292      	uxth	r2, r2
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e186      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	78db      	ldrb	r3, [r3, #3]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d000      	beq.n	8007a14 <USB_EPStartXfer+0xef4>
 8007a12:	e17f      	b.n	8007d14 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d917      	bls.n	8007a50 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	1d7a      	adds	r2, r7, #5
 8007a26:	32ff      	adds	r2, #255	@ 0xff
 8007a28:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	1d7b      	adds	r3, r7, #5
 8007a30:	33ff      	adds	r3, #255	@ 0xff
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	619a      	str	r2, [r3, #24]
 8007a3a:	e011      	b.n	8007a60 <USB_EPStartXfer+0xf40>
 8007a3c:	ffff8000 	.word	0xffff8000
 8007a40:	00000402 	.word	0x00000402
 8007a44:	00000406 	.word	0x00000406
 8007a48:	ffff8f8f 	.word	0xffff8f8f
 8007a4c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	1d7a      	adds	r2, r7, #5
 8007a56:	32ff      	adds	r2, #255	@ 0xff
 8007a58:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d000      	beq.n	8007a6a <USB_EPStartXfer+0xf4a>
 8007a68:	e081      	b.n	8007b6e <USB_EPStartXfer+0x104e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	21cc      	movs	r1, #204	@ 0xcc
 8007a6e:	187a      	adds	r2, r7, r1
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2250      	movs	r2, #80	@ 0x50
 8007a76:	5a9b      	ldrh	r3, [r3, r2]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	189b      	adds	r3, r3, r2
 8007a82:	187a      	adds	r2, r7, r1
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	00da      	lsls	r2, r3, #3
 8007a8c:	187b      	adds	r3, r7, r1
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	18d3      	adds	r3, r2, r3
 8007a92:	4ab6      	ldr	r2, [pc, #728]	@ (8007d6c <USB_EPStartXfer+0x124c>)
 8007a94:	4694      	mov	ip, r2
 8007a96:	4463      	add	r3, ip
 8007a98:	21c8      	movs	r1, #200	@ 0xc8
 8007a9a:	187a      	adds	r2, r7, r1
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	059b      	lsls	r3, r3, #22
 8007aa8:	0d9b      	lsrs	r3, r3, #22
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	801a      	strh	r2, [r3, #0]
 8007ab2:	1d7b      	adds	r3, r7, #5
 8007ab4:	33ff      	adds	r3, #255	@ 0xff
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <USB_EPStartXfer+0xfb2>
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	4aaa      	ldr	r2, [pc, #680]	@ (8007d70 <USB_EPStartXfer+0x1250>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	187b      	adds	r3, r7, r1
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e072      	b.n	8007bb8 <USB_EPStartXfer+0x1098>
 8007ad2:	1d7b      	adds	r3, r7, #5
 8007ad4:	33ff      	adds	r3, #255	@ 0xff
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ada:	d822      	bhi.n	8007b22 <USB_EPStartXfer+0x1002>
 8007adc:	1d7b      	adds	r3, r7, #5
 8007ade:	33ff      	adds	r3, #255	@ 0xff
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	21dc      	movs	r1, #220	@ 0xdc
 8007ae6:	187a      	adds	r2, r7, r1
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	1d7b      	adds	r3, r7, #5
 8007aec:	33ff      	adds	r3, #255	@ 0xff
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2201      	movs	r2, #1
 8007af2:	4013      	ands	r3, r2
 8007af4:	d004      	beq.n	8007b00 <USB_EPStartXfer+0xfe0>
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	187a      	adds	r2, r7, r1
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	21c8      	movs	r1, #200	@ 0xc8
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	23dc      	movs	r3, #220	@ 0xdc
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	029b      	lsls	r3, r3, #10
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	187b      	adds	r3, r7, r1
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	e04a      	b.n	8007bb8 <USB_EPStartXfer+0x1098>
 8007b22:	1d7b      	adds	r3, r7, #5
 8007b24:	33ff      	adds	r3, #255	@ 0xff
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	21dc      	movs	r1, #220	@ 0xdc
 8007b2c:	187a      	adds	r2, r7, r1
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	1d7b      	adds	r3, r7, #5
 8007b32:	33ff      	adds	r3, #255	@ 0xff
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	221f      	movs	r2, #31
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d104      	bne.n	8007b46 <USB_EPStartXfer+0x1026>
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	187a      	adds	r2, r7, r1
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	21c8      	movs	r1, #200	@ 0xc8
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	23dc      	movs	r3, #220	@ 0xdc
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	029b      	lsls	r3, r3, #10
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	4a83      	ldr	r2, [pc, #524]	@ (8007d70 <USB_EPStartXfer+0x1250>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	187b      	adds	r3, r7, r1
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e024      	b.n	8007bb8 <USB_EPStartXfer+0x1098>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d120      	bne.n	8007bb8 <USB_EPStartXfer+0x1098>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	21d4      	movs	r1, #212	@ 0xd4
 8007b7a:	187a      	adds	r2, r7, r1
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2250      	movs	r2, #80	@ 0x50
 8007b82:	5a9b      	ldrh	r3, [r3, r2]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	001a      	movs	r2, r3
 8007b88:	187b      	adds	r3, r7, r1
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	189b      	adds	r3, r3, r2
 8007b8e:	187a      	adds	r2, r7, r1
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	00da      	lsls	r2, r3, #3
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	18d3      	adds	r3, r2, r3
 8007b9e:	4a73      	ldr	r2, [pc, #460]	@ (8007d6c <USB_EPStartXfer+0x124c>)
 8007ba0:	4694      	mov	ip, r2
 8007ba2:	4463      	add	r3, ip
 8007ba4:	21d0      	movs	r1, #208	@ 0xd0
 8007ba6:	187a      	adds	r2, r7, r1
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	1d7b      	adds	r3, r7, #5
 8007bac:	33ff      	adds	r3, #255	@ 0xff
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	187b      	adds	r3, r7, r1
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	22c4      	movs	r2, #196	@ 0xc4
 8007bbc:	18ba      	adds	r2, r7, r2
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d000      	beq.n	8007bca <USB_EPStartXfer+0x10aa>
 8007bc8:	e081      	b.n	8007cce <USB_EPStartXfer+0x11ae>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	21bc      	movs	r1, #188	@ 0xbc
 8007bce:	187a      	adds	r2, r7, r1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2250      	movs	r2, #80	@ 0x50
 8007bd6:	5a9b      	ldrh	r3, [r3, r2]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	001a      	movs	r2, r3
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	189b      	adds	r3, r3, r2
 8007be2:	187a      	adds	r2, r7, r1
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	00da      	lsls	r2, r3, #3
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	18d3      	adds	r3, r2, r3
 8007bf2:	4a60      	ldr	r2, [pc, #384]	@ (8007d74 <USB_EPStartXfer+0x1254>)
 8007bf4:	4694      	mov	ip, r2
 8007bf6:	4463      	add	r3, ip
 8007bf8:	21b8      	movs	r1, #184	@ 0xb8
 8007bfa:	187a      	adds	r2, r7, r1
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	187b      	adds	r3, r7, r1
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	059b      	lsls	r3, r3, #22
 8007c08:	0d9b      	lsrs	r3, r3, #22
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	187b      	adds	r3, r7, r1
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	1d7b      	adds	r3, r7, #5
 8007c14:	33ff      	adds	r3, #255	@ 0xff
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <USB_EPStartXfer+0x1112>
 8007c1c:	187b      	adds	r3, r7, r1
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4a52      	ldr	r2, [pc, #328]	@ (8007d70 <USB_EPStartXfer+0x1250>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e072      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
 8007c32:	1d7b      	adds	r3, r7, #5
 8007c34:	33ff      	adds	r3, #255	@ 0xff
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c3a:	d822      	bhi.n	8007c82 <USB_EPStartXfer+0x1162>
 8007c3c:	1d7b      	adds	r3, r7, #5
 8007c3e:	33ff      	adds	r3, #255	@ 0xff
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	21d8      	movs	r1, #216	@ 0xd8
 8007c46:	187a      	adds	r2, r7, r1
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	1d7b      	adds	r3, r7, #5
 8007c4c:	33ff      	adds	r3, #255	@ 0xff
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	4013      	ands	r3, r2
 8007c54:	d004      	beq.n	8007c60 <USB_EPStartXfer+0x1140>
 8007c56:	187b      	adds	r3, r7, r1
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	187a      	adds	r2, r7, r1
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	21b8      	movs	r1, #184	@ 0xb8
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	23d8      	movs	r3, #216	@ 0xd8
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e04a      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
 8007c82:	1d7b      	adds	r3, r7, #5
 8007c84:	33ff      	adds	r3, #255	@ 0xff
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	21d8      	movs	r1, #216	@ 0xd8
 8007c8c:	187a      	adds	r2, r7, r1
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	1d7b      	adds	r3, r7, #5
 8007c92:	33ff      	adds	r3, #255	@ 0xff
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	221f      	movs	r2, #31
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d104      	bne.n	8007ca6 <USB_EPStartXfer+0x1186>
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	187a      	adds	r2, r7, r1
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	21b8      	movs	r1, #184	@ 0xb8
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	23d8      	movs	r3, #216	@ 0xd8
 8007cb2:	18fb      	adds	r3, r7, r3
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	029b      	lsls	r3, r3, #10
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d70 <USB_EPStartXfer+0x1250>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	187b      	adds	r3, r7, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	e024      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d120      	bne.n	8007d18 <USB_EPStartXfer+0x11f8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2250      	movs	r2, #80	@ 0x50
 8007cda:	5a9b      	ldrh	r3, [r3, r2]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	001a      	movs	r2, r3
 8007ce0:	21c4      	movs	r1, #196	@ 0xc4
 8007ce2:	187b      	adds	r3, r7, r1
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	187a      	adds	r2, r7, r1
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	187b      	adds	r3, r7, r1
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	18d3      	adds	r3, r2, r3
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <USB_EPStartXfer+0x1254>)
 8007cfa:	4694      	mov	ip, r2
 8007cfc:	4463      	add	r3, ip
 8007cfe:	21c0      	movs	r1, #192	@ 0xc0
 8007d00:	187a      	adds	r2, r7, r1
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	1d7b      	adds	r3, r7, #5
 8007d06:	33ff      	adds	r3, #255	@ 0xff
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	187b      	adds	r3, r7, r1
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	801a      	strh	r2, [r3, #0]
 8007d12:	e001      	b.n	8007d18 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e025      	b.n	8007d64 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	18d3      	adds	r3, r2, r3
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	208a      	movs	r0, #138	@ 0x8a
 8007d28:	183b      	adds	r3, r7, r0
 8007d2a:	4913      	ldr	r1, [pc, #76]	@ (8007d78 <USB_EPStartXfer+0x1258>)
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	183b      	adds	r3, r7, r0
 8007d32:	183a      	adds	r2, r7, r0
 8007d34:	8812      	ldrh	r2, [r2, #0]
 8007d36:	2180      	movs	r1, #128	@ 0x80
 8007d38:	0149      	lsls	r1, r1, #5
 8007d3a:	404a      	eors	r2, r1
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	183b      	adds	r3, r7, r0
 8007d40:	183a      	adds	r2, r7, r0
 8007d42:	8812      	ldrh	r2, [r2, #0]
 8007d44:	2180      	movs	r1, #128	@ 0x80
 8007d46:	0189      	lsls	r1, r1, #6
 8007d48:	404a      	eors	r2, r1
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	18d3      	adds	r3, r2, r3
 8007d56:	183a      	adds	r2, r7, r0
 8007d58:	8812      	ldrh	r2, [r2, #0]
 8007d5a:	4908      	ldr	r1, [pc, #32]	@ (8007d7c <USB_EPStartXfer+0x125c>)
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	b292      	uxth	r2, r2
 8007d60:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	0018      	movs	r0, r3
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b043      	add	sp, #268	@ 0x10c
 8007d6a:	bd90      	pop	{r4, r7, pc}
 8007d6c:	00000402 	.word	0x00000402
 8007d70:	ffff8000 	.word	0xffff8000
 8007d74:	00000406 	.word	0x00000406
 8007d78:	ffffbf8f 	.word	0xffffbf8f
 8007d7c:	ffff8080 	.word	0xffff8080

08007d80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01d      	beq.n	8007dce <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	18d3      	adds	r3, r2, r3
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	200c      	movs	r0, #12
 8007da2:	183b      	adds	r3, r7, r0
 8007da4:	491b      	ldr	r1, [pc, #108]	@ (8007e14 <USB_EPSetStall+0x94>)
 8007da6:	400a      	ands	r2, r1
 8007da8:	801a      	strh	r2, [r3, #0]
 8007daa:	183b      	adds	r3, r7, r0
 8007dac:	183a      	adds	r2, r7, r0
 8007dae:	8812      	ldrh	r2, [r2, #0]
 8007db0:	2110      	movs	r1, #16
 8007db2:	404a      	eors	r2, r1
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	18d3      	adds	r3, r2, r3
 8007dc0:	183a      	adds	r2, r7, r0
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	4914      	ldr	r1, [pc, #80]	@ (8007e18 <USB_EPSetStall+0x98>)
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	b292      	uxth	r2, r2
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e01d      	b.n	8007e0a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	18d3      	adds	r3, r2, r3
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	200e      	movs	r0, #14
 8007dde:	183b      	adds	r3, r7, r0
 8007de0:	490e      	ldr	r1, [pc, #56]	@ (8007e1c <USB_EPSetStall+0x9c>)
 8007de2:	400a      	ands	r2, r1
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	183b      	adds	r3, r7, r0
 8007de8:	183a      	adds	r2, r7, r0
 8007dea:	8812      	ldrh	r2, [r2, #0]
 8007dec:	2180      	movs	r1, #128	@ 0x80
 8007dee:	0149      	lsls	r1, r1, #5
 8007df0:	404a      	eors	r2, r1
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	183a      	adds	r2, r7, r0
 8007e00:	8812      	ldrh	r2, [r2, #0]
 8007e02:	4905      	ldr	r1, [pc, #20]	@ (8007e18 <USB_EPSetStall+0x98>)
 8007e04:	430a      	orrs	r2, r1
 8007e06:	b292      	uxth	r2, r2
 8007e08:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b004      	add	sp, #16
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	ffff8fbf 	.word	0xffff8fbf
 8007e18:	ffff8080 	.word	0xffff8080
 8007e1c:	ffffbf8f 	.word	0xffffbf8f

08007e20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	7b1b      	ldrb	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d000      	beq.n	8007e34 <USB_EPClearStall+0x14>
 8007e32:	e095      	b.n	8007f60 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d046      	beq.n	8007eca <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	18d2      	adds	r2, r2, r3
 8007e46:	2110      	movs	r1, #16
 8007e48:	187b      	adds	r3, r7, r1
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2240      	movs	r2, #64	@ 0x40
 8007e54:	4013      	ands	r3, r2
 8007e56:	d016      	beq.n	8007e86 <USB_EPClearStall+0x66>
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	18d3      	adds	r3, r2, r3
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	200e      	movs	r0, #14
 8007e68:	183b      	adds	r3, r7, r0
 8007e6a:	4940      	ldr	r1, [pc, #256]	@ (8007f6c <USB_EPClearStall+0x14c>)
 8007e6c:	400a      	ands	r2, r1
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	18d3      	adds	r3, r2, r3
 8007e7a:	183a      	adds	r2, r7, r0
 8007e7c:	8812      	ldrh	r2, [r2, #0]
 8007e7e:	493c      	ldr	r1, [pc, #240]	@ (8007f70 <USB_EPClearStall+0x150>)
 8007e80:	430a      	orrs	r2, r1
 8007e82:	b292      	uxth	r2, r2
 8007e84:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	78db      	ldrb	r3, [r3, #3]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d068      	beq.n	8007f60 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	200c      	movs	r0, #12
 8007e9e:	183b      	adds	r3, r7, r0
 8007ea0:	4934      	ldr	r1, [pc, #208]	@ (8007f74 <USB_EPClearStall+0x154>)
 8007ea2:	400a      	ands	r2, r1
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	183b      	adds	r3, r7, r0
 8007ea8:	183a      	adds	r2, r7, r0
 8007eaa:	8812      	ldrh	r2, [r2, #0]
 8007eac:	2120      	movs	r1, #32
 8007eae:	404a      	eors	r2, r1
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	18d3      	adds	r3, r2, r3
 8007ebc:	183a      	adds	r2, r7, r0
 8007ebe:	8812      	ldrh	r2, [r2, #0]
 8007ec0:	492d      	ldr	r1, [pc, #180]	@ (8007f78 <USB_EPClearStall+0x158>)
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	e04a      	b.n	8007f60 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	18d2      	adds	r2, r2, r3
 8007ed4:	2116      	movs	r1, #22
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	8812      	ldrh	r2, [r2, #0]
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	187b      	adds	r3, r7, r1
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	2380      	movs	r3, #128	@ 0x80
 8007ee2:	01db      	lsls	r3, r3, #7
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d016      	beq.n	8007f16 <USB_EPClearStall+0xf6>
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	18d3      	adds	r3, r2, r3
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	2014      	movs	r0, #20
 8007ef8:	183b      	adds	r3, r7, r0
 8007efa:	491c      	ldr	r1, [pc, #112]	@ (8007f6c <USB_EPClearStall+0x14c>)
 8007efc:	400a      	ands	r2, r1
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	18d3      	adds	r3, r2, r3
 8007f0a:	183a      	adds	r2, r7, r0
 8007f0c:	8812      	ldrh	r2, [r2, #0]
 8007f0e:	491b      	ldr	r1, [pc, #108]	@ (8007f7c <USB_EPClearStall+0x15c>)
 8007f10:	430a      	orrs	r2, r1
 8007f12:	b292      	uxth	r2, r2
 8007f14:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	18d3      	adds	r3, r2, r3
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	2012      	movs	r0, #18
 8007f26:	183b      	adds	r3, r7, r0
 8007f28:	4915      	ldr	r1, [pc, #84]	@ (8007f80 <USB_EPClearStall+0x160>)
 8007f2a:	400a      	ands	r2, r1
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	183b      	adds	r3, r7, r0
 8007f30:	183a      	adds	r2, r7, r0
 8007f32:	8812      	ldrh	r2, [r2, #0]
 8007f34:	2180      	movs	r1, #128	@ 0x80
 8007f36:	0149      	lsls	r1, r1, #5
 8007f38:	404a      	eors	r2, r1
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	183b      	adds	r3, r7, r0
 8007f3e:	183a      	adds	r2, r7, r0
 8007f40:	8812      	ldrh	r2, [r2, #0]
 8007f42:	2180      	movs	r1, #128	@ 0x80
 8007f44:	0189      	lsls	r1, r1, #6
 8007f46:	404a      	eors	r2, r1
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	18d3      	adds	r3, r2, r3
 8007f54:	183a      	adds	r2, r7, r0
 8007f56:	8812      	ldrh	r2, [r2, #0]
 8007f58:	4907      	ldr	r1, [pc, #28]	@ (8007f78 <USB_EPClearStall+0x158>)
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	b292      	uxth	r2, r2
 8007f5e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b006      	add	sp, #24
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	ffff8f8f 	.word	0xffff8f8f
 8007f70:	ffff80c0 	.word	0xffff80c0
 8007f74:	ffff8fbf 	.word	0xffff8fbf
 8007f78:	ffff8080 	.word	0xffff8080
 8007f7c:	ffffc080 	.word	0xffffc080
 8007f80:	ffffbf8f 	.word	0xffffbf8f

08007f84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	000a      	movs	r2, r1
 8007f8e:	1cfb      	adds	r3, r7, #3
 8007f90:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007f92:	1cfb      	adds	r3, r7, #3
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	224c      	movs	r2, #76	@ 0x4c
 8007f9e:	2180      	movs	r1, #128	@ 0x80
 8007fa0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2258      	movs	r2, #88	@ 0x58
 8007fb8:	5a9b      	ldrh	r3, [r3, r2]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4a05      	ldr	r2, [pc, #20]	@ (8007fd4 <USB_DevConnect+0x28>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b299      	uxth	r1, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2258      	movs	r2, #88	@ 0x58
 8007fc6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	0018      	movs	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	b002      	add	sp, #8
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	ffff8000 	.word	0xffff8000

08007fd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2244      	movs	r2, #68	@ 0x44
 8007fe4:	5a9b      	ldrh	r3, [r3, r2]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	0018      	movs	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b004      	add	sp, #16
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	@ 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	0019      	movs	r1, r3
 8008000:	1dbb      	adds	r3, r7, #6
 8008002:	801a      	strh	r2, [r3, #0]
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	1c0a      	adds	r2, r1, #0
 8008008:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800800a:	1d3b      	adds	r3, r7, #4
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	085b      	lsrs	r3, r3, #1
 8008012:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800801c:	1dbb      	adds	r3, r7, #6
 800801e:	881a      	ldrh	r2, [r3, #0]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	18d3      	adds	r3, r2, r3
 8008024:	2280      	movs	r2, #128	@ 0x80
 8008026:	00d2      	lsls	r2, r2, #3
 8008028:	4694      	mov	ip, r2
 800802a:	4463      	add	r3, ip
 800802c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
 8008032:	e021      	b.n	8008078 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	2112      	movs	r1, #18
 800803a:	187b      	adds	r3, r7, r1
 800803c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	3301      	adds	r3, #1
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b21b      	sxth	r3, r3
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	b21a      	sxth	r2, r3
 800804a:	187b      	adds	r3, r7, r1
 800804c:	2000      	movs	r0, #0
 800804e:	5e1b      	ldrsh	r3, [r3, r0]
 8008050:	4313      	orrs	r3, r2
 8008052:	b21a      	sxth	r2, r3
 8008054:	187b      	adds	r3, r7, r1
 8008056:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	187a      	adds	r2, r7, r1
 800805c:	8812      	ldrh	r2, [r2, #0]
 800805e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	3302      	adds	r3, #2
 8008064:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	3301      	adds	r3, #1
 800806a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	3b01      	subs	r3, #1
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1da      	bne.n	8008034 <USB_WritePMA+0x40>
  }
}
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	46c0      	nop			@ (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b00a      	add	sp, #40	@ 0x28
 8008086:	bd80      	pop	{r7, pc}

08008088 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	@ 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	0019      	movs	r1, r3
 8008094:	1dbb      	adds	r3, r7, #6
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	1c0a      	adds	r2, r1, #0
 800809c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080b0:	1dbb      	adds	r3, r7, #6
 80080b2:	881a      	ldrh	r2, [r3, #0]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	18d3      	adds	r3, r2, r3
 80080b8:	2280      	movs	r2, #128	@ 0x80
 80080ba:	00d2      	lsls	r2, r2, #3
 80080bc:	4694      	mov	ip, r2
 80080be:	4463      	add	r3, ip
 80080c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	e018      	b.n	80080fa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	3302      	adds	r3, #2
 80080d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3301      	adds	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	3b01      	subs	r3, #1
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e3      	bne.n	80080c8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008100:	1d3b      	adds	r3, r7, #4
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	b2da      	uxtb	r2, r3
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	701a      	strb	r2, [r3, #0]
  }
}
 800811e:	46c0      	nop			@ (mov r8, r8)
 8008120:	46bd      	mov	sp, r7
 8008122:	b00a      	add	sp, #40	@ 0x28
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008126:	b590      	push	{r4, r7, lr}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	000a      	movs	r2, r1
 8008130:	1cfb      	adds	r3, r7, #3
 8008132:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008134:	240f      	movs	r4, #15
 8008136:	193b      	adds	r3, r7, r4
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	2302      	movs	r3, #2
 8008140:	2203      	movs	r2, #3
 8008142:	2181      	movs	r1, #129	@ 0x81
 8008144:	f001 ff19 	bl	8009f7a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	2302      	movs	r3, #2
 8008152:	2203      	movs	r2, #3
 8008154:	2101      	movs	r1, #1
 8008156:	f001 ff10 	bl	8009f7a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	23b6      	movs	r3, #182	@ 0xb6
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	2101      	movs	r1, #1
 8008162:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008164:	201c      	movs	r0, #28
 8008166:	f002 f889 	bl	800a27c <USBD_static_malloc>
 800816a:	0001      	movs	r1, r0
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	23ae      	movs	r3, #174	@ 0xae
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	23ae      	movs	r3, #174	@ 0xae
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	58d3      	ldr	r3, [r2, r3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <USBD_CUSTOM_HID_Init+0x62>
  {
    ret = 1U;
 8008180:	193b      	adds	r3, r7, r4
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e013      	b.n	80081b0 <USBD_CUSTOM_HID_Init+0x8a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	23ae      	movs	r3, #174	@ 0xae
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	58d3      	ldr	r3, [r2, r3]
 8008190:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	761a      	strb	r2, [r3, #24]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	23af      	movs	r3, #175	@ 0xaf
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	58d3      	ldr	r3, [r2, r3]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	2308      	movs	r3, #8
 80081aa:	2101      	movs	r1, #1
 80081ac:	f002 f82f 	bl	800a20e <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80081b0:	230f      	movs	r3, #15
 80081b2:	18fb      	adds	r3, r7, r3
 80081b4:	781b      	ldrb	r3, [r3, #0]
}
 80081b6:	0018      	movs	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b005      	add	sp, #20
 80081bc:	bd90      	pop	{r4, r7, pc}

080081be <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	000a      	movs	r2, r1
 80081c8:	1cfb      	adds	r3, r7, #3
 80081ca:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2181      	movs	r1, #129	@ 0x81
 80081d0:	0018      	movs	r0, r3
 80081d2:	f001 ff09 	bl	8009fe8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2101      	movs	r1, #1
 80081e0:	0018      	movs	r0, r3
 80081e2:	f001 ff01 	bl	8009fe8 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	23b6      	movs	r3, #182	@ 0xb6
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	2100      	movs	r1, #0
 80081ee:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	23ae      	movs	r3, #174	@ 0xae
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	58d3      	ldr	r3, [r2, r3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d011      	beq.n	8008220 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	23af      	movs	r3, #175	@ 0xaf
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	58d3      	ldr	r3, [r2, r3]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	23ae      	movs	r3, #174	@ 0xae
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	58d3      	ldr	r3, [r2, r3]
 8008210:	0018      	movs	r0, r3
 8008212:	f002 f83f 	bl	800a294 <USBD_static_free>
    pdev->pClassData = NULL;
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	23ae      	movs	r3, #174	@ 0xae
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	2100      	movs	r1, #0
 800821e:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	0018      	movs	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	b002      	add	sp, #8
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	23ae      	movs	r3, #174	@ 0xae
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	58d3      	ldr	r3, [r2, r3]
 800823e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008240:	231e      	movs	r3, #30
 8008242:	18fb      	adds	r3, r7, r3
 8008244:	2200      	movs	r2, #0
 8008246:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800824c:	230e      	movs	r3, #14
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	2200      	movs	r2, #0
 8008252:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008254:	2317      	movs	r3, #23
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	001a      	movs	r2, r3
 8008262:	2360      	movs	r3, #96	@ 0x60
 8008264:	4013      	ands	r3, r2
 8008266:	d044      	beq.n	80082f2 <USBD_CUSTOM_HID_Setup+0xc6>
 8008268:	2b20      	cmp	r3, #32
 800826a:	d000      	beq.n	800826e <USBD_CUSTOM_HID_Setup+0x42>
 800826c:	e0d8      	b.n	8008420 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	2b0b      	cmp	r3, #11
 8008274:	d831      	bhi.n	80082da <USBD_CUSTOM_HID_Setup+0xae>
 8008276:	009a      	lsls	r2, r3, #2
 8008278:	4b72      	ldr	r3, [pc, #456]	@ (8008444 <USBD_CUSTOM_HID_Setup+0x218>)
 800827a:	18d3      	adds	r3, r2, r3
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	001a      	movs	r2, r3
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	609a      	str	r2, [r3, #8]
          break;
 800828c:	e030      	b.n	80082f0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3308      	adds	r3, #8
 8008292:	0019      	movs	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	0018      	movs	r0, r3
 800829a:	f001 faf8 	bl	800988e <USBD_CtlSendData>
          break;
 800829e:	e027      	b.n	80082f0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	885b      	ldrh	r3, [r3, #2]
 80082a4:	0a1b      	lsrs	r3, r3, #8
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	001a      	movs	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	60da      	str	r2, [r3, #12]
          break;
 80082b0:	e01e      	b.n	80082f0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	330c      	adds	r3, #12
 80082b6:	0019      	movs	r1, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	0018      	movs	r0, r3
 80082be:	f001 fae6 	bl	800988e <USBD_CtlSendData>
          break;
 80082c2:	e015      	b.n	80082f0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2201      	movs	r2, #1
 80082c8:	615a      	str	r2, [r3, #20]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80082ca:	6939      	ldr	r1, [r7, #16]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88da      	ldrh	r2, [r3, #6]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	0018      	movs	r0, r3
 80082d4:	f001 fb0e 	bl	80098f4 <USBD_CtlPrepareRx>
          break;
 80082d8:	e00a      	b.n	80082f0 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	0011      	movs	r1, r2
 80082e0:	0018      	movs	r0, r3
 80082e2:	f001 fa56 	bl	8009792 <USBD_CtlError>
          ret = USBD_FAIL;
 80082e6:	2317      	movs	r3, #23
 80082e8:	18fb      	adds	r3, r7, r3
 80082ea:	2202      	movs	r2, #2
 80082ec:	701a      	strb	r2, [r3, #0]
          break;
 80082ee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80082f0:	e0a1      	b.n	8008436 <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b0b      	cmp	r3, #11
 80082f8:	d100      	bne.n	80082fc <USBD_CUSTOM_HID_Setup+0xd0>
 80082fa:	e06d      	b.n	80083d8 <USBD_CUSTOM_HID_Setup+0x1ac>
 80082fc:	dd00      	ble.n	8008300 <USBD_CUSTOM_HID_Setup+0xd4>
 80082fe:	e083      	b.n	8008408 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008300:	2b0a      	cmp	r3, #10
 8008302:	d04f      	beq.n	80083a4 <USBD_CUSTOM_HID_Setup+0x178>
 8008304:	dd00      	ble.n	8008308 <USBD_CUSTOM_HID_Setup+0xdc>
 8008306:	e07f      	b.n	8008408 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <USBD_CUSTOM_HID_Setup+0xe6>
 800830c:	2b06      	cmp	r3, #6
 800830e:	d019      	beq.n	8008344 <USBD_CUSTOM_HID_Setup+0x118>
 8008310:	e07a      	b.n	8008408 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	23a7      	movs	r3, #167	@ 0xa7
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	5cd3      	ldrb	r3, [r2, r3]
 800831a:	2b03      	cmp	r3, #3
 800831c:	d107      	bne.n	800832e <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800831e:	230e      	movs	r3, #14
 8008320:	18f9      	adds	r1, r7, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	0018      	movs	r0, r3
 8008328:	f001 fab1 	bl	800988e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800832c:	e077      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	0011      	movs	r1, r2
 8008334:	0018      	movs	r0, r3
 8008336:	f001 fa2c 	bl	8009792 <USBD_CtlError>
            ret = USBD_FAIL;
 800833a:	2317      	movs	r3, #23
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	2202      	movs	r2, #2
 8008340:	701a      	strb	r2, [r3, #0]
          break;
 8008342:	e06c      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	0a1b      	lsrs	r3, r3, #8
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b22      	cmp	r3, #34	@ 0x22
 800834e:	d10f      	bne.n	8008370 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	88db      	ldrh	r3, [r3, #6]
 8008354:	221e      	movs	r2, #30
 8008356:	18ba      	adds	r2, r7, r2
 8008358:	b299      	uxth	r1, r3
 800835a:	293f      	cmp	r1, #63	@ 0x3f
 800835c:	d900      	bls.n	8008360 <USBD_CUSTOM_HID_Setup+0x134>
 800835e:	233f      	movs	r3, #63	@ 0x3f
 8008360:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	23af      	movs	r3, #175	@ 0xaf
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	58d3      	ldr	r3, [r2, r3]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	61bb      	str	r3, [r7, #24]
 800836e:	e010      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	885b      	ldrh	r3, [r3, #2]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b21      	cmp	r3, #33	@ 0x21
 800837a:	d10a      	bne.n	8008392 <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800837c:	4b32      	ldr	r3, [pc, #200]	@ (8008448 <USBD_CUSTOM_HID_Setup+0x21c>)
 800837e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	88db      	ldrh	r3, [r3, #6]
 8008384:	221e      	movs	r2, #30
 8008386:	18ba      	adds	r2, r7, r2
 8008388:	b299      	uxth	r1, r3
 800838a:	2909      	cmp	r1, #9
 800838c:	d900      	bls.n	8008390 <USBD_CUSTOM_HID_Setup+0x164>
 800838e:	2309      	movs	r3, #9
 8008390:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008392:	231e      	movs	r3, #30
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	881a      	ldrh	r2, [r3, #0]
 8008398:	69b9      	ldr	r1, [r7, #24]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	0018      	movs	r0, r3
 800839e:	f001 fa76 	bl	800988e <USBD_CtlSendData>
          break;
 80083a2:	e03c      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	23a7      	movs	r3, #167	@ 0xa7
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	5cd3      	ldrb	r3, [r2, r3]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d108      	bne.n	80083c2 <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	3310      	adds	r3, #16
 80083b4:	0019      	movs	r1, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	0018      	movs	r0, r3
 80083bc:	f001 fa67 	bl	800988e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c0:	e02d      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	0011      	movs	r1, r2
 80083c8:	0018      	movs	r0, r3
 80083ca:	f001 f9e2 	bl	8009792 <USBD_CtlError>
            ret = USBD_FAIL;
 80083ce:	2317      	movs	r3, #23
 80083d0:	18fb      	adds	r3, r7, r3
 80083d2:	2202      	movs	r2, #2
 80083d4:	701a      	strb	r2, [r3, #0]
          break;
 80083d6:	e022      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	23a7      	movs	r3, #167	@ 0xa7
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	5cd3      	ldrb	r3, [r2, r3]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d106      	bne.n	80083f2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	885b      	ldrh	r3, [r3, #2]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	001a      	movs	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083f0:	e015      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	0011      	movs	r1, r2
 80083f8:	0018      	movs	r0, r3
 80083fa:	f001 f9ca 	bl	8009792 <USBD_CtlError>
            ret = USBD_FAIL;
 80083fe:	2317      	movs	r3, #23
 8008400:	18fb      	adds	r3, r7, r3
 8008402:	2202      	movs	r2, #2
 8008404:	701a      	strb	r2, [r3, #0]
          break;
 8008406:	e00a      	b.n	800841e <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f001 f9bf 	bl	8009792 <USBD_CtlError>
          ret = USBD_FAIL;
 8008414:	2317      	movs	r3, #23
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	2202      	movs	r2, #2
 800841a:	701a      	strb	r2, [r3, #0]
          break;
 800841c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800841e:	e00a      	b.n	8008436 <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0011      	movs	r1, r2
 8008426:	0018      	movs	r0, r3
 8008428:	f001 f9b3 	bl	8009792 <USBD_CtlError>
      ret = USBD_FAIL;
 800842c:	2317      	movs	r3, #23
 800842e:	18fb      	adds	r3, r7, r3
 8008430:	2202      	movs	r2, #2
 8008432:	701a      	strb	r2, [r3, #0]
      break;
 8008434:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8008436:	2317      	movs	r3, #23
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	781b      	ldrb	r3, [r3, #0]
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b008      	add	sp, #32
 8008442:	bd80      	pop	{r7, pc}
 8008444:	0800a464 	.word	0x0800a464
 8008448:	200001f4 	.word	0x200001f4

0800844c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2229      	movs	r2, #41	@ 0x29
 8008458:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800845a:	4b02      	ldr	r3, [pc, #8]	@ (8008464 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b002      	add	sp, #8
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000170 	.word	0x20000170

08008468 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2229      	movs	r2, #41	@ 0x29
 8008474:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008476:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8008478:	0018      	movs	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	b002      	add	sp, #8
 800847e:	bd80      	pop	{r7, pc}
 8008480:	2000019c 	.word	0x2000019c

08008484 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2229      	movs	r2, #41	@ 0x29
 8008490:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008492:	4b02      	ldr	r3, [pc, #8]	@ (800849c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8008494:	0018      	movs	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	b002      	add	sp, #8
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200001c8 	.word	0x200001c8

080084a0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	000a      	movs	r2, r1
 80084aa:	1cfb      	adds	r3, r7, #3
 80084ac:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23ae      	movs	r3, #174	@ 0xae
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	58d3      	ldr	r3, [r2, r3]
 80084b6:	2200      	movs	r2, #0
 80084b8:	761a      	strb	r2, [r3, #24]

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	0018      	movs	r0, r3
 80084be:	46bd      	mov	sp, r7
 80084c0:	b002      	add	sp, #8
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	000a      	movs	r2, r1
 80084ce:	1cfb      	adds	r3, r7, #3
 80084d0:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	23ae      	movs	r3, #174	@ 0xae
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	58d3      	ldr	r3, [r2, r3]
 80084da:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	23af      	movs	r3, #175	@ 0xaf
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	58d3      	ldr	r3, [r2, r3]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	7810      	ldrb	r0, [r2, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	7852      	ldrb	r2, [r2, #1]
 80084ee:	0011      	movs	r1, r2
 80084f0:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	2308      	movs	r3, #8
 80084f8:	2101      	movs	r1, #1
 80084fa:	f001 fe88 	bl	800a20e <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	0018      	movs	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	b004      	add	sp, #16
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	23ae      	movs	r3, #174	@ 0xae
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	58d3      	ldr	r3, [r2, r3]
 8008518:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10d      	bne.n	800853e <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	23af      	movs	r3, #175	@ 0xaf
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	58d3      	ldr	r3, [r2, r3]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	7810      	ldrb	r0, [r2, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	7852      	ldrb	r2, [r2, #1]
 8008534:	0011      	movs	r1, r2
 8008536:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	615a      	str	r2, [r3, #20]
  }

  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	0018      	movs	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	b004      	add	sp, #16
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	220a      	movs	r2, #10
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008556:	4b02      	ldr	r3, [pc, #8]	@ (8008560 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8008558:	0018      	movs	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20000200 	.word	0x20000200

08008564 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800856e:	200f      	movs	r0, #15
 8008570:	183b      	adds	r3, r7, r0
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	23af      	movs	r3, #175	@ 0xaf
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8008586:	183b      	adds	r3, r7, r0
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800858c:	230f      	movs	r3, #15
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	781b      	ldrb	r3, [r3, #0]
}
 8008592:	0018      	movs	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	b004      	add	sp, #16
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	1dfb      	adds	r3, r7, #7
 80085a6:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085ae:	2302      	movs	r3, #2
 80085b0:	e020      	b.n	80085f4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	23ad      	movs	r3, #173	@ 0xad
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	58d3      	ldr	r3, [r2, r3]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	23ad      	movs	r3, #173	@ 0xad
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	2100      	movs	r1, #0
 80085c6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d004      	beq.n	80085d8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	23ac      	movs	r3, #172	@ 0xac
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	23a7      	movs	r3, #167	@ 0xa7
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	2101      	movs	r1, #1
 80085e0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1dfa      	adds	r2, r7, #7
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	0018      	movs	r0, r3
 80085ee:	f001 fc47 	bl	8009e80 <USBD_LL_Init>

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	0018      	movs	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b004      	add	sp, #16
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008606:	200f      	movs	r0, #15
 8008608:	183b      	adds	r3, r7, r0
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	23ad      	movs	r3, #173	@ 0xad
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800861e:	183b      	adds	r3, r7, r0
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e003      	b.n	800862e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008626:	230f      	movs	r3, #15
 8008628:	18fb      	adds	r3, r7, r3
 800862a:	2202      	movs	r2, #2
 800862c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800862e:	230f      	movs	r3, #15
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	781b      	ldrb	r3, [r3, #0]
}
 8008634:	0018      	movs	r0, r3
 8008636:	46bd      	mov	sp, r7
 8008638:	b004      	add	sp, #16
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0018      	movs	r0, r3
 8008648:	f001 fc72 	bl	8009f30 <USBD_LL_Start>

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b002      	add	sp, #8
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	0018      	movs	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	b002      	add	sp, #8
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	000a      	movs	r2, r1
 8008672:	1cfb      	adds	r3, r7, #3
 8008674:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008676:	240f      	movs	r4, #15
 8008678:	193b      	adds	r3, r7, r4
 800867a:	2202      	movs	r2, #2
 800867c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	23ad      	movs	r3, #173	@ 0xad
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	58d3      	ldr	r3, [r2, r3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	23ad      	movs	r3, #173	@ 0xad
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	58d3      	ldr	r3, [r2, r3]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	1cfa      	adds	r2, r7, #3
 8008696:	7811      	ldrb	r1, [r2, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	0010      	movs	r0, r2
 800869c:	4798      	blx	r3
 800869e:	1e03      	subs	r3, r0, #0
 80086a0:	d102      	bne.n	80086a8 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80086a2:	193b      	adds	r3, r7, r4
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80086a8:	230f      	movs	r3, #15
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	781b      	ldrb	r3, [r3, #0]
}
 80086ae:	0018      	movs	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b005      	add	sp, #20
 80086b4:	bd90      	pop	{r4, r7, pc}

080086b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	000a      	movs	r2, r1
 80086c0:	1cfb      	adds	r3, r7, #3
 80086c2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	23ad      	movs	r3, #173	@ 0xad
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	58d3      	ldr	r3, [r2, r3]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	1cfa      	adds	r2, r7, #3
 80086d0:	7811      	ldrb	r1, [r2, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	0010      	movs	r0, r2
 80086d6:	4798      	blx	r3

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	0018      	movs	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	b002      	add	sp, #8
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	22aa      	movs	r2, #170	@ 0xaa
 80086f2:	0092      	lsls	r2, r2, #2
 80086f4:	4694      	mov	ip, r2
 80086f6:	4463      	add	r3, ip
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	0011      	movs	r1, r2
 80086fc:	0018      	movs	r0, r3
 80086fe:	f001 f810 	bl	8009722 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	23a5      	movs	r3, #165	@ 0xa5
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	2101      	movs	r1, #1
 800870a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a23      	ldr	r2, [pc, #140]	@ (800879c <USBD_LL_SetupStage+0xb8>)
 8008710:	5a9b      	ldrh	r3, [r3, r2]
 8008712:	0019      	movs	r1, r3
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	23a6      	movs	r3, #166	@ 0xa6
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	23aa      	movs	r3, #170	@ 0xaa
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	5cd3      	ldrb	r3, [r2, r3]
 8008724:	001a      	movs	r2, r3
 8008726:	231f      	movs	r3, #31
 8008728:	4013      	ands	r3, r2
 800872a:	2b02      	cmp	r3, #2
 800872c:	d019      	beq.n	8008762 <USBD_LL_SetupStage+0x7e>
 800872e:	d822      	bhi.n	8008776 <USBD_LL_SetupStage+0x92>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <USBD_LL_SetupStage+0x56>
 8008734:	2b01      	cmp	r3, #1
 8008736:	d00a      	beq.n	800874e <USBD_LL_SetupStage+0x6a>
 8008738:	e01d      	b.n	8008776 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	22aa      	movs	r2, #170	@ 0xaa
 800873e:	0092      	lsls	r2, r2, #2
 8008740:	189a      	adds	r2, r3, r2
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	0011      	movs	r1, r2
 8008746:	0018      	movs	r0, r3
 8008748:	f000 fa10 	bl	8008b6c <USBD_StdDevReq>
      break;
 800874c:	e020      	b.n	8008790 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	22aa      	movs	r2, #170	@ 0xaa
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	189a      	adds	r2, r3, r2
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	0011      	movs	r1, r2
 800875a:	0018      	movs	r0, r3
 800875c:	f000 fa78 	bl	8008c50 <USBD_StdItfReq>
      break;
 8008760:	e016      	b.n	8008790 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	22aa      	movs	r2, #170	@ 0xaa
 8008766:	0092      	lsls	r2, r2, #2
 8008768:	189a      	adds	r2, r3, r2
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0011      	movs	r1, r2
 800876e:	0018      	movs	r0, r3
 8008770:	f000 fac5 	bl	8008cfe <USBD_StdEPReq>
      break;
 8008774:	e00c      	b.n	8008790 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	23aa      	movs	r3, #170	@ 0xaa
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	5cd3      	ldrb	r3, [r2, r3]
 800877e:	227f      	movs	r2, #127	@ 0x7f
 8008780:	4393      	bics	r3, r2
 8008782:	b2da      	uxtb	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	0011      	movs	r1, r2
 8008788:	0018      	movs	r0, r3
 800878a:	f001 fc58 	bl	800a03e <USBD_LL_StallEP>
      break;
 800878e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	0018      	movs	r0, r3
 8008794:	46bd      	mov	sp, r7
 8008796:	b002      	add	sp, #8
 8008798:	bd80      	pop	{r7, pc}
 800879a:	46c0      	nop			@ (mov r8, r8)
 800879c:	000002ae 	.word	0x000002ae

080087a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	200b      	movs	r0, #11
 80087ac:	183b      	adds	r3, r7, r0
 80087ae:	1c0a      	adds	r2, r1, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087b2:	183b      	adds	r3, r7, r0
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d154      	bne.n	8008864 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3355      	adds	r3, #85	@ 0x55
 80087be:	33ff      	adds	r3, #255	@ 0xff
 80087c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	23a5      	movs	r3, #165	@ 0xa5
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	58d3      	ldr	r3, [r2, r3]
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d139      	bne.n	8008842 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d919      	bls.n	800880e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d203      	bcs.n	80087fc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	e002      	b.n	8008802 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008800:	b29b      	uxth	r3, r3
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	001a      	movs	r2, r3
 8008808:	f001 f898 	bl	800993c <USBD_CtlContinueRx>
 800880c:	e045      	b.n	800889a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	23ad      	movs	r3, #173	@ 0xad
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	58d3      	ldr	r3, [r2, r3]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00d      	beq.n	8008838 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	23a7      	movs	r3, #167	@ 0xa7
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008824:	2b03      	cmp	r3, #3
 8008826:	d107      	bne.n	8008838 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	23ad      	movs	r3, #173	@ 0xad
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	58d3      	ldr	r3, [r2, r3]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	0010      	movs	r0, r2
 8008836:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	0018      	movs	r0, r3
 800883c:	f001 f891 	bl	8009962 <USBD_CtlSendStatus>
 8008840:	e02b      	b.n	800889a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	23a5      	movs	r3, #165	@ 0xa5
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	58d3      	ldr	r3, [r2, r3]
 800884a:	2b05      	cmp	r3, #5
 800884c:	d125      	bne.n	800889a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	23a5      	movs	r3, #165	@ 0xa5
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	2100      	movs	r1, #0
 8008856:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2100      	movs	r1, #0
 800885c:	0018      	movs	r0, r3
 800885e:	f001 fbee 	bl	800a03e <USBD_LL_StallEP>
 8008862:	e01a      	b.n	800889a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	23ad      	movs	r3, #173	@ 0xad
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	58d3      	ldr	r3, [r2, r3]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d011      	beq.n	8008896 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	23a7      	movs	r3, #167	@ 0xa7
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800887a:	2b03      	cmp	r3, #3
 800887c:	d10b      	bne.n	8008896 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	23ad      	movs	r3, #173	@ 0xad
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	58d3      	ldr	r3, [r2, r3]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	220b      	movs	r2, #11
 800888a:	18ba      	adds	r2, r7, r2
 800888c:	7811      	ldrb	r1, [r2, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	0010      	movs	r0, r2
 8008892:	4798      	blx	r3
 8008894:	e001      	b.n	800889a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	e000      	b.n	800889c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	0018      	movs	r0, r3
 800889e:	46bd      	mov	sp, r7
 80088a0:	b006      	add	sp, #24
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	200b      	movs	r0, #11
 80088b0:	183b      	adds	r3, r7, r0
 80088b2:	1c0a      	adds	r2, r1, #0
 80088b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088b6:	183b      	adds	r3, r7, r0
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d000      	beq.n	80088c0 <USBD_LL_DataInStage+0x1c>
 80088be:	e08e      	b.n	80089de <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3314      	adds	r3, #20
 80088c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	23a5      	movs	r3, #165	@ 0xa5
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	58d3      	ldr	r3, [r2, r3]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d164      	bne.n	800899c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d915      	bls.n	800890a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	1ad2      	subs	r2, r2, r3
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	0018      	movs	r0, r3
 80088f8:	f000 ffe9 	bl	80098ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	2100      	movs	r1, #0
 8008904:	f001 fc83 	bl	800a20e <USBD_LL_PrepareReceive>
 8008908:	e059      	b.n	80089be <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	0019      	movs	r1, r3
 8008914:	0010      	movs	r0, r2
 8008916:	f7f7 fc7d 	bl	8000214 <__aeabi_uidivmod>
 800891a:	1e0b      	subs	r3, r1, #0
 800891c:	d11f      	bne.n	800895e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008926:	429a      	cmp	r2, r3
 8008928:	d319      	bcc.n	800895e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	23a6      	movs	r3, #166	@ 0xa6
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008936:	429a      	cmp	r2, r3
 8008938:	d211      	bcs.n	800895e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	2100      	movs	r1, #0
 8008940:	0018      	movs	r0, r3
 8008942:	f000 ffc4 	bl	80098ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	23a6      	movs	r3, #166	@ 0xa6
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	2100      	movs	r1, #0
 800894e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	2300      	movs	r3, #0
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	f001 fc59 	bl	800a20e <USBD_LL_PrepareReceive>
 800895c:	e02f      	b.n	80089be <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	23ad      	movs	r3, #173	@ 0xad
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	58d3      	ldr	r3, [r2, r3]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00d      	beq.n	8008988 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	23a7      	movs	r3, #167	@ 0xa7
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008974:	2b03      	cmp	r3, #3
 8008976:	d107      	bne.n	8008988 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	23ad      	movs	r3, #173	@ 0xad
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	58d3      	ldr	r3, [r2, r3]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	0010      	movs	r0, r2
 8008986:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2180      	movs	r1, #128	@ 0x80
 800898c:	0018      	movs	r0, r3
 800898e:	f001 fb56 	bl	800a03e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	0018      	movs	r0, r3
 8008996:	f000 fff8 	bl	800998a <USBD_CtlReceiveStatus>
 800899a:	e010      	b.n	80089be <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	23a5      	movs	r3, #165	@ 0xa5
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	58d3      	ldr	r3, [r2, r3]
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d005      	beq.n	80089b4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	23a5      	movs	r3, #165	@ 0xa5
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2180      	movs	r1, #128	@ 0x80
 80089b8:	0018      	movs	r0, r3
 80089ba:	f001 fb40 	bl	800a03e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	23a8      	movs	r3, #168	@ 0xa8
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	5cd3      	ldrb	r3, [r2, r3]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d124      	bne.n	8008a14 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7ff fe42 	bl	8008656 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	23a8      	movs	r3, #168	@ 0xa8
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	2100      	movs	r1, #0
 80089da:	54d1      	strb	r1, [r2, r3]
 80089dc:	e01a      	b.n	8008a14 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	23ad      	movs	r3, #173	@ 0xad
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	58d3      	ldr	r3, [r2, r3]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d011      	beq.n	8008a10 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	23a7      	movs	r3, #167	@ 0xa7
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d10b      	bne.n	8008a10 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	23ad      	movs	r3, #173	@ 0xad
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	58d3      	ldr	r3, [r2, r3]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	220b      	movs	r2, #11
 8008a04:	18ba      	adds	r2, r7, r2
 8008a06:	7811      	ldrb	r1, [r2, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	0010      	movs	r0, r2
 8008a0c:	4798      	blx	r3
 8008a0e:	e001      	b.n	8008a14 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e000      	b.n	8008a16 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	0018      	movs	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b006      	add	sp, #24
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	2340      	movs	r3, #64	@ 0x40
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f001 faa4 	bl	8009f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	23ac      	movs	r3, #172	@ 0xac
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	23b2      	movs	r3, #178	@ 0xb2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	2140      	movs	r1, #64	@ 0x40
 8008a44:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	2340      	movs	r3, #64	@ 0x40
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2180      	movs	r1, #128	@ 0x80
 8008a4e:	f001 fa94 	bl	8009f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2240      	movs	r2, #64	@ 0x40
 8008a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	23a7      	movs	r3, #167	@ 0xa7
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	2101      	movs	r1, #1
 8008a66:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	23a5      	movs	r3, #165	@ 0xa5
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	2100      	movs	r1, #0
 8008a70:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	23a9      	movs	r3, #169	@ 0xa9
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	2100      	movs	r1, #0
 8008a80:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	23ae      	movs	r3, #174	@ 0xae
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	58d3      	ldr	r3, [r2, r3]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	23ad      	movs	r3, #173	@ 0xad
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	58d3      	ldr	r3, [r2, r3]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	b2d9      	uxtb	r1, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	4790      	blx	r2
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	000a      	movs	r2, r1
 8008ab8:	1cfb      	adds	r3, r7, #3
 8008aba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	1cfa      	adds	r2, r7, #3
 8008ac0:	7812      	ldrb	r2, [r2, #0]
 8008ac2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	b002      	add	sp, #8
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	23a7      	movs	r3, #167	@ 0xa7
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	5cd1      	ldrb	r1, [r2, r3]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a06      	ldr	r2, [pc, #24]	@ (8008afc <USBD_LL_Suspend+0x2c>)
 8008ae4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	23a7      	movs	r3, #167	@ 0xa7
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	2104      	movs	r1, #4
 8008aee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b002      	add	sp, #8
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	0000029d 	.word	0x0000029d

08008b00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	23a7      	movs	r3, #167	@ 0xa7
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d106      	bne.n	8008b22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a05      	ldr	r2, [pc, #20]	@ (8008b2c <USBD_LL_Resume+0x2c>)
 8008b18:	5c99      	ldrb	r1, [r3, r2]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	23a7      	movs	r3, #167	@ 0xa7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b002      	add	sp, #8
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	0000029d 	.word	0x0000029d

08008b30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	23a7      	movs	r3, #167	@ 0xa7
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	5cd3      	ldrb	r3, [r2, r3]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d10e      	bne.n	8008b62 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	23ad      	movs	r3, #173	@ 0xad
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	58d3      	ldr	r3, [r2, r3]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	23ad      	movs	r3, #173	@ 0xad
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	58d3      	ldr	r3, [r2, r3]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	0010      	movs	r0, r2
 8008b60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	0018      	movs	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b002      	add	sp, #8
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b76:	230f      	movs	r3, #15
 8008b78:	18fb      	adds	r3, r7, r3
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	001a      	movs	r2, r3
 8008b84:	2360      	movs	r3, #96	@ 0x60
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d004      	beq.n	8008b96 <USBD_StdDevReq+0x2a>
 8008b8c:	d84f      	bhi.n	8008c2e <USBD_StdDevReq+0xc2>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <USBD_StdDevReq+0x3e>
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d14b      	bne.n	8008c2e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	23ad      	movs	r3, #173	@ 0xad
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	58d3      	ldr	r3, [r2, r3]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	0010      	movs	r0, r2
 8008ba6:	4798      	blx	r3
      break;
 8008ba8:	e048      	b.n	8008c3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b09      	cmp	r3, #9
 8008bb0:	d835      	bhi.n	8008c1e <USBD_StdDevReq+0xb2>
 8008bb2:	009a      	lsls	r2, r3, #2
 8008bb4:	4b25      	ldr	r3, [pc, #148]	@ (8008c4c <USBD_StdDevReq+0xe0>)
 8008bb6:	18d3      	adds	r3, r2, r3
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	0011      	movs	r1, r2
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f000 fa52 	bl	800906c <USBD_GetDescriptor>
          break;
 8008bc8:	e030      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0011      	movs	r1, r2
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f000 fbfd 	bl	80093d0 <USBD_SetAddress>
          break;
 8008bd6:	e029      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	0011      	movs	r1, r2
 8008bde:	0018      	movs	r0, r3
 8008be0:	f000 fc4a 	bl	8009478 <USBD_SetConfig>
          break;
 8008be4:	e022      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f000 fce7 	bl	80095c0 <USBD_GetConfig>
          break;
 8008bf2:	e01b      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	0011      	movs	r1, r2
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 fd1b 	bl	8009636 <USBD_GetStatus>
          break;
 8008c00:	e014      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	0011      	movs	r1, r2
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f000 fd4e 	bl	80096aa <USBD_SetFeature>
          break;
 8008c0e:	e00d      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	0011      	movs	r1, r2
 8008c16:	0018      	movs	r0, r3
 8008c18:	f000 fd5d 	bl	80096d6 <USBD_ClrFeature>
          break;
 8008c1c:	e006      	b.n	8008c2c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	0011      	movs	r1, r2
 8008c24:	0018      	movs	r0, r3
 8008c26:	f000 fdb4 	bl	8009792 <USBD_CtlError>
          break;
 8008c2a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008c2c:	e006      	b.n	8008c3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	0011      	movs	r1, r2
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 fdac 	bl	8009792 <USBD_CtlError>
      break;
 8008c3a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008c3c:	230f      	movs	r3, #15
 8008c3e:	18fb      	adds	r3, r7, r3
 8008c40:	781b      	ldrb	r3, [r3, #0]
}
 8008c42:	0018      	movs	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	b004      	add	sp, #16
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	46c0      	nop			@ (mov r8, r8)
 8008c4c:	0800a494 	.word	0x0800a494

08008c50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c50:	b5b0      	push	{r4, r5, r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5a:	230f      	movs	r3, #15
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	001a      	movs	r2, r3
 8008c68:	2360      	movs	r3, #96	@ 0x60
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b40      	cmp	r3, #64	@ 0x40
 8008c6e:	d004      	beq.n	8008c7a <USBD_StdItfReq+0x2a>
 8008c70:	d839      	bhi.n	8008ce6 <USBD_StdItfReq+0x96>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <USBD_StdItfReq+0x2a>
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d135      	bne.n	8008ce6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	23a7      	movs	r3, #167	@ 0xa7
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	5cd3      	ldrb	r3, [r2, r3]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d825      	bhi.n	8008cd4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	889b      	ldrh	r3, [r3, #4]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d819      	bhi.n	8008cc6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	23ad      	movs	r3, #173	@ 0xad
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	58d3      	ldr	r3, [r2, r3]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	250f      	movs	r5, #15
 8008c9e:	197c      	adds	r4, r7, r5
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	0010      	movs	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	0003      	movs	r3, r0
 8008caa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	88db      	ldrh	r3, [r3, #6]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d116      	bne.n	8008ce2 <USBD_StdItfReq+0x92>
 8008cb4:	197b      	adds	r3, r7, r5
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d112      	bne.n	8008ce2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f000 fe4f 	bl	8009962 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cc4:	e00d      	b.n	8008ce2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	0011      	movs	r1, r2
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f000 fd60 	bl	8009792 <USBD_CtlError>
          break;
 8008cd2:	e006      	b.n	8008ce2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	0011      	movs	r1, r2
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fd59 	bl	8009792 <USBD_CtlError>
          break;
 8008ce0:	e000      	b.n	8008ce4 <USBD_StdItfReq+0x94>
          break;
 8008ce2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008ce4:	e006      	b.n	8008cf4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	0011      	movs	r1, r2
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 fd50 	bl	8009792 <USBD_CtlError>
      break;
 8008cf2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b004      	add	sp, #16
 8008cfc:	bdb0      	pop	{r4, r5, r7, pc}

08008cfe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008cfe:	b5b0      	push	{r4, r5, r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d08:	230f      	movs	r3, #15
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	889a      	ldrh	r2, [r3, #4]
 8008d14:	230e      	movs	r3, #14
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	001a      	movs	r2, r3
 8008d20:	2360      	movs	r3, #96	@ 0x60
 8008d22:	4013      	ands	r3, r2
 8008d24:	2b40      	cmp	r3, #64	@ 0x40
 8008d26:	d006      	beq.n	8008d36 <USBD_StdEPReq+0x38>
 8008d28:	d900      	bls.n	8008d2c <USBD_StdEPReq+0x2e>
 8008d2a:	e190      	b.n	800904e <USBD_StdEPReq+0x350>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <USBD_StdEPReq+0x4c>
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	d000      	beq.n	8008d36 <USBD_StdEPReq+0x38>
 8008d34:	e18b      	b.n	800904e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	23ad      	movs	r3, #173	@ 0xad
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	58d3      	ldr	r3, [r2, r3]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	0010      	movs	r0, r2
 8008d46:	4798      	blx	r3
      break;
 8008d48:	e188      	b.n	800905c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	001a      	movs	r2, r3
 8008d50:	2360      	movs	r3, #96	@ 0x60
 8008d52:	4013      	ands	r3, r2
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d10f      	bne.n	8008d78 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	23ad      	movs	r3, #173	@ 0xad
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	58d3      	ldr	r3, [r2, r3]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	250f      	movs	r5, #15
 8008d64:	197c      	adds	r4, r7, r5
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	0010      	movs	r0, r2
 8008d6c:	4798      	blx	r3
 8008d6e:	0003      	movs	r3, r0
 8008d70:	7023      	strb	r3, [r4, #0]

        return ret;
 8008d72:	197b      	adds	r3, r7, r5
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	e174      	b.n	8009062 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d007      	beq.n	8008d90 <USBD_StdEPReq+0x92>
 8008d80:	dd00      	ble.n	8008d84 <USBD_StdEPReq+0x86>
 8008d82:	e15c      	b.n	800903e <USBD_StdEPReq+0x340>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d100      	bne.n	8008d8a <USBD_StdEPReq+0x8c>
 8008d88:	e092      	b.n	8008eb0 <USBD_StdEPReq+0x1b2>
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d04b      	beq.n	8008e26 <USBD_StdEPReq+0x128>
 8008d8e:	e156      	b.n	800903e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	23a7      	movs	r3, #167	@ 0xa7
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	5cd3      	ldrb	r3, [r2, r3]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d002      	beq.n	8008da2 <USBD_StdEPReq+0xa4>
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d01d      	beq.n	8008ddc <USBD_StdEPReq+0xde>
 8008da0:	e039      	b.n	8008e16 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da2:	220e      	movs	r2, #14
 8008da4:	18bb      	adds	r3, r7, r2
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d010      	beq.n	8008dce <USBD_StdEPReq+0xd0>
 8008dac:	18bb      	adds	r3, r7, r2
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b80      	cmp	r3, #128	@ 0x80
 8008db2:	d00c      	beq.n	8008dce <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008db4:	18bb      	adds	r3, r7, r2
 8008db6:	781a      	ldrb	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	0011      	movs	r1, r2
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f001 f93e 	bl	800a03e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2180      	movs	r1, #128	@ 0x80
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f001 f939 	bl	800a03e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dcc:	e02a      	b.n	8008e24 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 fcdc 	bl	8009792 <USBD_CtlError>
              break;
 8008dda:	e023      	b.n	8008e24 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	885b      	ldrh	r3, [r3, #2]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d113      	bne.n	8008e0c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008de4:	220e      	movs	r2, #14
 8008de6:	18bb      	adds	r3, r7, r2
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00e      	beq.n	8008e0c <USBD_StdEPReq+0x10e>
 8008dee:	18bb      	adds	r3, r7, r2
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b80      	cmp	r3, #128	@ 0x80
 8008df4:	d00a      	beq.n	8008e0c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008dfe:	18bb      	adds	r3, r7, r2
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	0011      	movs	r1, r2
 8008e06:	0018      	movs	r0, r3
 8008e08:	f001 f919 	bl	800a03e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 fda7 	bl	8009962 <USBD_CtlSendStatus>

              break;
 8008e14:	e006      	b.n	8008e24 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	0011      	movs	r1, r2
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f000 fcb8 	bl	8009792 <USBD_CtlError>
              break;
 8008e22:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008e24:	e112      	b.n	800904c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	23a7      	movs	r3, #167	@ 0xa7
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	5cd3      	ldrb	r3, [r2, r3]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d002      	beq.n	8008e38 <USBD_StdEPReq+0x13a>
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d01d      	beq.n	8008e72 <USBD_StdEPReq+0x174>
 8008e36:	e032      	b.n	8008e9e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e38:	220e      	movs	r2, #14
 8008e3a:	18bb      	adds	r3, r7, r2
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d010      	beq.n	8008e64 <USBD_StdEPReq+0x166>
 8008e42:	18bb      	adds	r3, r7, r2
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b80      	cmp	r3, #128	@ 0x80
 8008e48:	d00c      	beq.n	8008e64 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e4a:	18bb      	adds	r3, r7, r2
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	0011      	movs	r1, r2
 8008e52:	0018      	movs	r0, r3
 8008e54:	f001 f8f3 	bl	800a03e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2180      	movs	r1, #128	@ 0x80
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f001 f8ee 	bl	800a03e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e62:	e024      	b.n	8008eae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	0011      	movs	r1, r2
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f000 fc91 	bl	8009792 <USBD_CtlError>
              break;
 8008e70:	e01d      	b.n	8008eae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d118      	bne.n	8008eac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e7a:	210e      	movs	r1, #14
 8008e7c:	187b      	adds	r3, r7, r1
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	227f      	movs	r2, #127	@ 0x7f
 8008e82:	4013      	ands	r3, r2
 8008e84:	d006      	beq.n	8008e94 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e86:	187b      	adds	r3, r7, r1
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0011      	movs	r1, r2
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f001 f900 	bl	800a094 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	0018      	movs	r0, r3
 8008e98:	f000 fd63 	bl	8009962 <USBD_CtlSendStatus>
              }
              break;
 8008e9c:	e006      	b.n	8008eac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	0011      	movs	r1, r2
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f000 fc74 	bl	8009792 <USBD_CtlError>
              break;
 8008eaa:	e000      	b.n	8008eae <USBD_StdEPReq+0x1b0>
              break;
 8008eac:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008eae:	e0cd      	b.n	800904c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	23a7      	movs	r3, #167	@ 0xa7
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	5cd3      	ldrb	r3, [r2, r3]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d002      	beq.n	8008ec2 <USBD_StdEPReq+0x1c4>
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d03c      	beq.n	8008f3a <USBD_StdEPReq+0x23c>
 8008ec0:	e0b5      	b.n	800902e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ec2:	220e      	movs	r2, #14
 8008ec4:	18bb      	adds	r3, r7, r2
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <USBD_StdEPReq+0x1e4>
 8008ecc:	18bb      	adds	r3, r7, r2
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b80      	cmp	r3, #128	@ 0x80
 8008ed2:	d006      	beq.n	8008ee2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	0011      	movs	r1, r2
 8008eda:	0018      	movs	r0, r3
 8008edc:	f000 fc59 	bl	8009792 <USBD_CtlError>
                break;
 8008ee0:	e0ac      	b.n	800903c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ee2:	220e      	movs	r2, #14
 8008ee4:	18bb      	adds	r3, r7, r2
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da0c      	bge.n	8008f08 <USBD_StdEPReq+0x20a>
 8008eee:	18bb      	adds	r3, r7, r2
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	227f      	movs	r2, #127	@ 0x7f
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	0013      	movs	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	189b      	adds	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	3310      	adds	r3, #16
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	3304      	adds	r3, #4
 8008f06:	e00d      	b.n	8008f24 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f08:	230e      	movs	r3, #14
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	227f      	movs	r2, #127	@ 0x7f
 8008f10:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f12:	0013      	movs	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	189b      	adds	r3, r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	3351      	adds	r3, #81	@ 0x51
 8008f1c:	33ff      	adds	r3, #255	@ 0xff
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	18d3      	adds	r3, r2, r3
 8008f22:	3304      	adds	r3, #4
 8008f24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	0018      	movs	r0, r3
 8008f34:	f000 fcab 	bl	800988e <USBD_CtlSendData>
              break;
 8008f38:	e080      	b.n	800903c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f3a:	220e      	movs	r2, #14
 8008f3c:	18bb      	adds	r3, r7, r2
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da14      	bge.n	8008f70 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f46:	18bb      	adds	r3, r7, r2
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	220f      	movs	r2, #15
 8008f4c:	401a      	ands	r2, r3
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	0013      	movs	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	18cb      	adds	r3, r1, r3
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d11e      	bne.n	8008fa0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	0011      	movs	r1, r2
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f000 fc12 	bl	8009792 <USBD_CtlError>
                  break;
 8008f6e:	e065      	b.n	800903c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f70:	230e      	movs	r3, #14
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	220f      	movs	r2, #15
 8008f78:	401a      	ands	r2, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	23ac      	movs	r3, #172	@ 0xac
 8008f7e:	0059      	lsls	r1, r3, #1
 8008f80:	0013      	movs	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	18c3      	adds	r3, r0, r3
 8008f8a:	185b      	adds	r3, r3, r1
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	0011      	movs	r1, r2
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f000 fbfa 	bl	8009792 <USBD_CtlError>
                  break;
 8008f9e:	e04d      	b.n	800903c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa0:	220e      	movs	r2, #14
 8008fa2:	18bb      	adds	r3, r7, r2
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	b25b      	sxtb	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	da0c      	bge.n	8008fc6 <USBD_StdEPReq+0x2c8>
 8008fac:	18bb      	adds	r3, r7, r2
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	227f      	movs	r2, #127	@ 0x7f
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	0013      	movs	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	3310      	adds	r3, #16
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	18d3      	adds	r3, r2, r3
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	e00d      	b.n	8008fe2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc6:	230e      	movs	r3, #14
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	227f      	movs	r2, #127	@ 0x7f
 8008fce:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd0:	0013      	movs	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	189b      	adds	r3, r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	3351      	adds	r3, #81	@ 0x51
 8008fda:	33ff      	adds	r3, #255	@ 0xff
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	18d3      	adds	r3, r2, r3
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fe4:	220e      	movs	r2, #14
 8008fe6:	18bb      	adds	r3, r7, r2
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <USBD_StdEPReq+0x2f8>
 8008fee:	18bb      	adds	r3, r7, r2
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b80      	cmp	r3, #128	@ 0x80
 8008ff4:	d103      	bne.n	8008ffe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e010      	b.n	8009020 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ffe:	230e      	movs	r3, #14
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	781a      	ldrb	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f001 f86e 	bl	800a0ea <USBD_LL_IsStallEP>
 800900e:	1e03      	subs	r3, r0, #0
 8009010:	d003      	beq.n	800901a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2201      	movs	r2, #1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e002      	b.n	8009020 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	0018      	movs	r0, r3
 8009028:	f000 fc31 	bl	800988e <USBD_CtlSendData>
              break;
 800902c:	e006      	b.n	800903c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	0011      	movs	r1, r2
 8009034:	0018      	movs	r0, r3
 8009036:	f000 fbac 	bl	8009792 <USBD_CtlError>
              break;
 800903a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800903c:	e006      	b.n	800904c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	0011      	movs	r1, r2
 8009044:	0018      	movs	r0, r3
 8009046:	f000 fba4 	bl	8009792 <USBD_CtlError>
          break;
 800904a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800904c:	e006      	b.n	800905c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	0011      	movs	r1, r2
 8009054:	0018      	movs	r0, r3
 8009056:	f000 fb9c 	bl	8009792 <USBD_CtlError>
      break;
 800905a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800905c:	230f      	movs	r3, #15
 800905e:	18fb      	adds	r3, r7, r3
 8009060:	781b      	ldrb	r3, [r3, #0]
}
 8009062:	0018      	movs	r0, r3
 8009064:	46bd      	mov	sp, r7
 8009066:	b004      	add	sp, #16
 8009068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800906c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009076:	2308      	movs	r3, #8
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	2200      	movs	r2, #0
 800907c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009082:	230b      	movs	r3, #11
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	885b      	ldrh	r3, [r3, #2]
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b07      	cmp	r3, #7
 8009094:	d900      	bls.n	8009098 <USBD_GetDescriptor+0x2c>
 8009096:	e159      	b.n	800934c <USBD_GetDescriptor+0x2e0>
 8009098:	009a      	lsls	r2, r3, #2
 800909a:	4bcb      	ldr	r3, [pc, #812]	@ (80093c8 <USBD_GetDescriptor+0x35c>)
 800909c:	18d3      	adds	r3, r2, r3
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	23ac      	movs	r3, #172	@ 0xac
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	58d3      	ldr	r3, [r2, r3]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7c12      	ldrb	r2, [r2, #16]
 80090b0:	2108      	movs	r1, #8
 80090b2:	1879      	adds	r1, r7, r1
 80090b4:	0010      	movs	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	0003      	movs	r3, r0
 80090ba:	60fb      	str	r3, [r7, #12]
      break;
 80090bc:	e153      	b.n	8009366 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7c1b      	ldrb	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10f      	bne.n	80090e6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	23ad      	movs	r3, #173	@ 0xad
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	58d3      	ldr	r3, [r2, r3]
 80090ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d0:	2208      	movs	r2, #8
 80090d2:	18ba      	adds	r2, r7, r2
 80090d4:	0010      	movs	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	0003      	movs	r3, r0
 80090da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	2202      	movs	r2, #2
 80090e2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e4:	e13f      	b.n	8009366 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	23ad      	movs	r3, #173	@ 0xad
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	58d3      	ldr	r3, [r2, r3]
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	2208      	movs	r2, #8
 80090f2:	18ba      	adds	r2, r7, r2
 80090f4:	0010      	movs	r0, r2
 80090f6:	4798      	blx	r3
 80090f8:	0003      	movs	r3, r0
 80090fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	2202      	movs	r2, #2
 8009102:	701a      	strb	r2, [r3, #0]
      break;
 8009104:	e12f      	b.n	8009366 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	885b      	ldrh	r3, [r3, #2]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b05      	cmp	r3, #5
 800910e:	d900      	bls.n	8009112 <USBD_GetDescriptor+0xa6>
 8009110:	e0d0      	b.n	80092b4 <USBD_GetDescriptor+0x248>
 8009112:	009a      	lsls	r2, r3, #2
 8009114:	4bad      	ldr	r3, [pc, #692]	@ (80093cc <USBD_GetDescriptor+0x360>)
 8009116:	18d3      	adds	r3, r2, r3
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	23ac      	movs	r3, #172	@ 0xac
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	58d3      	ldr	r3, [r2, r3]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00d      	beq.n	8009146 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	23ac      	movs	r3, #172	@ 0xac
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	58d3      	ldr	r3, [r2, r3]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	2108      	movs	r1, #8
 800913a:	1879      	adds	r1, r7, r1
 800913c:	0010      	movs	r0, r2
 800913e:	4798      	blx	r3
 8009140:	0003      	movs	r3, r0
 8009142:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009144:	e0c3      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	0011      	movs	r1, r2
 800914c:	0018      	movs	r0, r3
 800914e:	f000 fb20 	bl	8009792 <USBD_CtlError>
            err++;
 8009152:	210b      	movs	r1, #11
 8009154:	187b      	adds	r3, r7, r1
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	187b      	adds	r3, r7, r1
 800915a:	3201      	adds	r2, #1
 800915c:	701a      	strb	r2, [r3, #0]
          break;
 800915e:	e0b6      	b.n	80092ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	23ac      	movs	r3, #172	@ 0xac
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	58d3      	ldr	r3, [r2, r3]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00d      	beq.n	800918a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	23ac      	movs	r3, #172	@ 0xac
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	58d3      	ldr	r3, [r2, r3]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	7c12      	ldrb	r2, [r2, #16]
 800917c:	2108      	movs	r1, #8
 800917e:	1879      	adds	r1, r7, r1
 8009180:	0010      	movs	r0, r2
 8009182:	4798      	blx	r3
 8009184:	0003      	movs	r3, r0
 8009186:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009188:	e0a1      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	0011      	movs	r1, r2
 8009190:	0018      	movs	r0, r3
 8009192:	f000 fafe 	bl	8009792 <USBD_CtlError>
            err++;
 8009196:	210b      	movs	r1, #11
 8009198:	187b      	adds	r3, r7, r1
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	187b      	adds	r3, r7, r1
 800919e:	3201      	adds	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
          break;
 80091a2:	e094      	b.n	80092ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	23ac      	movs	r3, #172	@ 0xac
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	58d3      	ldr	r3, [r2, r3]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	23ac      	movs	r3, #172	@ 0xac
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	58d3      	ldr	r3, [r2, r3]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	7c12      	ldrb	r2, [r2, #16]
 80091c0:	2108      	movs	r1, #8
 80091c2:	1879      	adds	r1, r7, r1
 80091c4:	0010      	movs	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	0003      	movs	r3, r0
 80091ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091cc:	e07f      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	0011      	movs	r1, r2
 80091d4:	0018      	movs	r0, r3
 80091d6:	f000 fadc 	bl	8009792 <USBD_CtlError>
            err++;
 80091da:	210b      	movs	r1, #11
 80091dc:	187b      	adds	r3, r7, r1
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	3201      	adds	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
          break;
 80091e6:	e072      	b.n	80092ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	23ac      	movs	r3, #172	@ 0xac
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	58d3      	ldr	r3, [r2, r3]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00d      	beq.n	8009212 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	23ac      	movs	r3, #172	@ 0xac
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	58d3      	ldr	r3, [r2, r3]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	2108      	movs	r1, #8
 8009206:	1879      	adds	r1, r7, r1
 8009208:	0010      	movs	r0, r2
 800920a:	4798      	blx	r3
 800920c:	0003      	movs	r3, r0
 800920e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009210:	e05d      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0011      	movs	r1, r2
 8009218:	0018      	movs	r0, r3
 800921a:	f000 faba 	bl	8009792 <USBD_CtlError>
            err++;
 800921e:	210b      	movs	r1, #11
 8009220:	187b      	adds	r3, r7, r1
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	187b      	adds	r3, r7, r1
 8009226:	3201      	adds	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
          break;
 800922a:	e050      	b.n	80092ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	23ac      	movs	r3, #172	@ 0xac
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	58d3      	ldr	r3, [r2, r3]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	23ac      	movs	r3, #172	@ 0xac
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	58d3      	ldr	r3, [r2, r3]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	2108      	movs	r1, #8
 800924a:	1879      	adds	r1, r7, r1
 800924c:	0010      	movs	r0, r2
 800924e:	4798      	blx	r3
 8009250:	0003      	movs	r3, r0
 8009252:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009254:	e03b      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	0011      	movs	r1, r2
 800925c:	0018      	movs	r0, r3
 800925e:	f000 fa98 	bl	8009792 <USBD_CtlError>
            err++;
 8009262:	210b      	movs	r1, #11
 8009264:	187b      	adds	r3, r7, r1
 8009266:	781a      	ldrb	r2, [r3, #0]
 8009268:	187b      	adds	r3, r7, r1
 800926a:	3201      	adds	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
          break;
 800926e:	e02e      	b.n	80092ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	23ac      	movs	r3, #172	@ 0xac
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	58d3      	ldr	r3, [r2, r3]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00d      	beq.n	800929a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	23ac      	movs	r3, #172	@ 0xac
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	58d3      	ldr	r3, [r2, r3]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	2108      	movs	r1, #8
 800928e:	1879      	adds	r1, r7, r1
 8009290:	0010      	movs	r0, r2
 8009292:	4798      	blx	r3
 8009294:	0003      	movs	r3, r0
 8009296:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009298:	e019      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	0011      	movs	r1, r2
 80092a0:	0018      	movs	r0, r3
 80092a2:	f000 fa76 	bl	8009792 <USBD_CtlError>
            err++;
 80092a6:	210b      	movs	r1, #11
 80092a8:	187b      	adds	r3, r7, r1
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	187b      	adds	r3, r7, r1
 80092ae:	3201      	adds	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
          break;
 80092b2:	e00c      	b.n	80092ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	0011      	movs	r1, r2
 80092ba:	0018      	movs	r0, r3
 80092bc:	f000 fa69 	bl	8009792 <USBD_CtlError>
          err++;
 80092c0:	210b      	movs	r1, #11
 80092c2:	187b      	adds	r3, r7, r1
 80092c4:	781a      	ldrb	r2, [r3, #0]
 80092c6:	187b      	adds	r3, r7, r1
 80092c8:	3201      	adds	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80092cc:	e04b      	b.n	8009366 <USBD_GetDescriptor+0x2fa>
 80092ce:	e04a      	b.n	8009366 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7c1b      	ldrb	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10b      	bne.n	80092f0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	23ad      	movs	r3, #173	@ 0xad
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	58d3      	ldr	r3, [r2, r3]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e2:	2208      	movs	r2, #8
 80092e4:	18ba      	adds	r2, r7, r2
 80092e6:	0010      	movs	r0, r2
 80092e8:	4798      	blx	r3
 80092ea:	0003      	movs	r3, r0
 80092ec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092ee:	e03a      	b.n	8009366 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	0011      	movs	r1, r2
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 fa4b 	bl	8009792 <USBD_CtlError>
        err++;
 80092fc:	210b      	movs	r1, #11
 80092fe:	187b      	adds	r3, r7, r1
 8009300:	781a      	ldrb	r2, [r3, #0]
 8009302:	187b      	adds	r3, r7, r1
 8009304:	3201      	adds	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]
      break;
 8009308:	e02d      	b.n	8009366 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7c1b      	ldrb	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10f      	bne.n	8009332 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	23ad      	movs	r3, #173	@ 0xad
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	58d3      	ldr	r3, [r2, r3]
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	2208      	movs	r2, #8
 800931e:	18ba      	adds	r2, r7, r2
 8009320:	0010      	movs	r0, r2
 8009322:	4798      	blx	r3
 8009324:	0003      	movs	r3, r0
 8009326:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	2207      	movs	r2, #7
 800932e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009330:	e019      	b.n	8009366 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	0011      	movs	r1, r2
 8009338:	0018      	movs	r0, r3
 800933a:	f000 fa2a 	bl	8009792 <USBD_CtlError>
        err++;
 800933e:	210b      	movs	r1, #11
 8009340:	187b      	adds	r3, r7, r1
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	187b      	adds	r3, r7, r1
 8009346:	3201      	adds	r2, #1
 8009348:	701a      	strb	r2, [r3, #0]
      break;
 800934a:	e00c      	b.n	8009366 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	0011      	movs	r1, r2
 8009352:	0018      	movs	r0, r3
 8009354:	f000 fa1d 	bl	8009792 <USBD_CtlError>
      err++;
 8009358:	210b      	movs	r1, #11
 800935a:	187b      	adds	r3, r7, r1
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	187b      	adds	r3, r7, r1
 8009360:	3201      	adds	r2, #1
 8009362:	701a      	strb	r2, [r3, #0]
      break;
 8009364:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8009366:	230b      	movs	r3, #11
 8009368:	18fb      	adds	r3, r7, r3
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d127      	bne.n	80093c0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009370:	2108      	movs	r1, #8
 8009372:	187b      	adds	r3, r7, r1
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d019      	beq.n	80093ae <USBD_GetDescriptor+0x342>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d015      	beq.n	80093ae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	88da      	ldrh	r2, [r3, #6]
 8009386:	187b      	adds	r3, r7, r1
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	1c18      	adds	r0, r3, #0
 800938c:	1c11      	adds	r1, r2, #0
 800938e:	b28a      	uxth	r2, r1
 8009390:	b283      	uxth	r3, r0
 8009392:	429a      	cmp	r2, r3
 8009394:	d900      	bls.n	8009398 <USBD_GetDescriptor+0x32c>
 8009396:	1c01      	adds	r1, r0, #0
 8009398:	b28a      	uxth	r2, r1
 800939a:	2108      	movs	r1, #8
 800939c:	187b      	adds	r3, r7, r1
 800939e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	881a      	ldrh	r2, [r3, #0]
 80093a4:	68f9      	ldr	r1, [r7, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 fa70 	bl	800988e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	88db      	ldrh	r3, [r3, #6]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d105      	bne.n	80093c2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	0018      	movs	r0, r3
 80093ba:	f000 fad2 	bl	8009962 <USBD_CtlSendStatus>
 80093be:	e000      	b.n	80093c2 <USBD_GetDescriptor+0x356>
    return;
 80093c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b004      	add	sp, #16
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	0800a4bc 	.word	0x0800a4bc
 80093cc:	0800a4dc 	.word	0x0800a4dc

080093d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093d0:	b590      	push	{r4, r7, lr}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	889b      	ldrh	r3, [r3, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d13d      	bne.n	800945e <USBD_SetAddress+0x8e>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	88db      	ldrh	r3, [r3, #6]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d139      	bne.n	800945e <USBD_SetAddress+0x8e>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80093f0:	d835      	bhi.n	800945e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	230f      	movs	r3, #15
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	217f      	movs	r1, #127	@ 0x7f
 80093fe:	400a      	ands	r2, r1
 8009400:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	23a7      	movs	r3, #167	@ 0xa7
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	5cd3      	ldrb	r3, [r2, r3]
 800940a:	2b03      	cmp	r3, #3
 800940c:	d106      	bne.n	800941c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	0011      	movs	r1, r2
 8009414:	0018      	movs	r0, r3
 8009416:	f000 f9bc 	bl	8009792 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941a:	e027      	b.n	800946c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	240f      	movs	r4, #15
 8009420:	193a      	adds	r2, r7, r4
 8009422:	4914      	ldr	r1, [pc, #80]	@ (8009474 <USBD_SetAddress+0xa4>)
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009428:	193b      	adds	r3, r7, r4
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	0011      	movs	r1, r2
 8009430:	0018      	movs	r0, r3
 8009432:	f000 fe8a 	bl	800a14a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	0018      	movs	r0, r3
 800943a:	f000 fa92 	bl	8009962 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800943e:	193b      	adds	r3, r7, r4
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	23a7      	movs	r3, #167	@ 0xa7
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	2102      	movs	r1, #2
 800944e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009450:	e00c      	b.n	800946c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	23a7      	movs	r3, #167	@ 0xa7
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	2101      	movs	r1, #1
 800945a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945c:	e006      	b.n	800946c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	0011      	movs	r1, r2
 8009464:	0018      	movs	r0, r3
 8009466:	f000 f994 	bl	8009792 <USBD_CtlError>
  }
}
 800946a:	46c0      	nop			@ (mov r8, r8)
 800946c:	46c0      	nop			@ (mov r8, r8)
 800946e:	46bd      	mov	sp, r7
 8009470:	b005      	add	sp, #20
 8009472:	bd90      	pop	{r4, r7, pc}
 8009474:	0000029e 	.word	0x0000029e

08009478 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	885b      	ldrh	r3, [r3, #2]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	4b4c      	ldr	r3, [pc, #304]	@ (80095bc <USBD_SetConfig+0x144>)
 800948a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800948c:	4b4b      	ldr	r3, [pc, #300]	@ (80095bc <USBD_SetConfig+0x144>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d906      	bls.n	80094a2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	0011      	movs	r1, r2
 800949a:	0018      	movs	r0, r3
 800949c:	f000 f979 	bl	8009792 <USBD_CtlError>
 80094a0:	e088      	b.n	80095b4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	23a7      	movs	r3, #167	@ 0xa7
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	5cd3      	ldrb	r3, [r2, r3]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d002      	beq.n	80094b4 <USBD_SetConfig+0x3c>
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d029      	beq.n	8009506 <USBD_SetConfig+0x8e>
 80094b2:	e071      	b.n	8009598 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094b4:	4b41      	ldr	r3, [pc, #260]	@ (80095bc <USBD_SetConfig+0x144>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01f      	beq.n	80094fc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80094bc:	4b3f      	ldr	r3, [pc, #252]	@ (80095bc <USBD_SetConfig+0x144>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	001a      	movs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	23a7      	movs	r3, #167	@ 0xa7
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	2103      	movs	r1, #3
 80094ce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094d0:	4b3a      	ldr	r3, [pc, #232]	@ (80095bc <USBD_SetConfig+0x144>)
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	0011      	movs	r1, r2
 80094d8:	0018      	movs	r0, r3
 80094da:	f7ff f8c5 	bl	8008668 <USBD_SetClassConfig>
 80094de:	0003      	movs	r3, r0
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d106      	bne.n	80094f2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	0011      	movs	r1, r2
 80094ea:	0018      	movs	r0, r3
 80094ec:	f000 f951 	bl	8009792 <USBD_CtlError>
            return;
 80094f0:	e060      	b.n	80095b4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	0018      	movs	r0, r3
 80094f6:	f000 fa34 	bl	8009962 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094fa:	e05b      	b.n	80095b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0018      	movs	r0, r3
 8009500:	f000 fa2f 	bl	8009962 <USBD_CtlSendStatus>
        break;
 8009504:	e056      	b.n	80095b4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009506:	4b2d      	ldr	r3, [pc, #180]	@ (80095bc <USBD_SetConfig+0x144>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d115      	bne.n	800953a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	23a7      	movs	r3, #167	@ 0xa7
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	2102      	movs	r1, #2
 8009516:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009518:	4b28      	ldr	r3, [pc, #160]	@ (80095bc <USBD_SetConfig+0x144>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	001a      	movs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009522:	4b26      	ldr	r3, [pc, #152]	@ (80095bc <USBD_SetConfig+0x144>)
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	0011      	movs	r1, r2
 800952a:	0018      	movs	r0, r3
 800952c:	f7ff f8c3 	bl	80086b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	0018      	movs	r0, r3
 8009534:	f000 fa15 	bl	8009962 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009538:	e03c      	b.n	80095b4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800953a:	4b20      	ldr	r3, [pc, #128]	@ (80095bc <USBD_SetConfig+0x144>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	001a      	movs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	429a      	cmp	r2, r3
 8009546:	d022      	beq.n	800958e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	0011      	movs	r1, r2
 8009552:	0018      	movs	r0, r3
 8009554:	f7ff f8af 	bl	80086b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009558:	4b18      	ldr	r3, [pc, #96]	@ (80095bc <USBD_SetConfig+0x144>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	001a      	movs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009562:	4b16      	ldr	r3, [pc, #88]	@ (80095bc <USBD_SetConfig+0x144>)
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	0011      	movs	r1, r2
 800956a:	0018      	movs	r0, r3
 800956c:	f7ff f87c 	bl	8008668 <USBD_SetClassConfig>
 8009570:	0003      	movs	r3, r0
 8009572:	2b02      	cmp	r3, #2
 8009574:	d106      	bne.n	8009584 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	0011      	movs	r1, r2
 800957c:	0018      	movs	r0, r3
 800957e:	f000 f908 	bl	8009792 <USBD_CtlError>
            return;
 8009582:	e017      	b.n	80095b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	0018      	movs	r0, r3
 8009588:	f000 f9eb 	bl	8009962 <USBD_CtlSendStatus>
        break;
 800958c:	e012      	b.n	80095b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	0018      	movs	r0, r3
 8009592:	f000 f9e6 	bl	8009962 <USBD_CtlSendStatus>
        break;
 8009596:	e00d      	b.n	80095b4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	0011      	movs	r1, r2
 800959e:	0018      	movs	r0, r3
 80095a0:	f000 f8f7 	bl	8009792 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095a4:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <USBD_SetConfig+0x144>)
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	0011      	movs	r1, r2
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7ff f882 	bl	80086b6 <USBD_ClrClassConfig>
        break;
 80095b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80095b4:	46bd      	mov	sp, r7
 80095b6:	b002      	add	sp, #8
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	46c0      	nop			@ (mov r8, r8)
 80095bc:	200005e8 	.word	0x200005e8

080095c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	88db      	ldrh	r3, [r3, #6]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d006      	beq.n	80095e0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	0011      	movs	r1, r2
 80095d8:	0018      	movs	r0, r3
 80095da:	f000 f8da 	bl	8009792 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095de:	e026      	b.n	800962e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	23a7      	movs	r3, #167	@ 0xa7
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	5cd3      	ldrb	r3, [r2, r3]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	dc02      	bgt.n	80095f2 <USBD_GetConfig+0x32>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc03      	bgt.n	80095f8 <USBD_GetConfig+0x38>
 80095f0:	e016      	b.n	8009620 <USBD_GetConfig+0x60>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d00c      	beq.n	8009610 <USBD_GetConfig+0x50>
 80095f6:	e013      	b.n	8009620 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3308      	adds	r3, #8
 8009602:	0019      	movs	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	0018      	movs	r0, r3
 800960a:	f000 f940 	bl	800988e <USBD_CtlSendData>
        break;
 800960e:	e00e      	b.n	800962e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	1d19      	adds	r1, r3, #4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	0018      	movs	r0, r3
 800961a:	f000 f938 	bl	800988e <USBD_CtlSendData>
        break;
 800961e:	e006      	b.n	800962e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	0011      	movs	r1, r2
 8009626:	0018      	movs	r0, r3
 8009628:	f000 f8b3 	bl	8009792 <USBD_CtlError>
        break;
 800962c:	46c0      	nop			@ (mov r8, r8)
}
 800962e:	46c0      	nop			@ (mov r8, r8)
 8009630:	46bd      	mov	sp, r7
 8009632:	b002      	add	sp, #8
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	23a7      	movs	r3, #167	@ 0xa7
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	5cd3      	ldrb	r3, [r2, r3]
 8009648:	3b01      	subs	r3, #1
 800964a:	2b02      	cmp	r3, #2
 800964c:	d822      	bhi.n	8009694 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	88db      	ldrh	r3, [r3, #6]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d006      	beq.n	8009664 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	0011      	movs	r1, r2
 800965c:	0018      	movs	r0, r3
 800965e:	f000 f898 	bl	8009792 <USBD_CtlError>
        break;
 8009662:	e01e      	b.n	80096a2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	23a9      	movs	r3, #169	@ 0xa9
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	58d3      	ldr	r3, [r2, r3]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	2202      	movs	r2, #2
 800967c:	431a      	orrs	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	330c      	adds	r3, #12
 8009686:	0019      	movs	r1, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	0018      	movs	r0, r3
 800968e:	f000 f8fe 	bl	800988e <USBD_CtlSendData>
      break;
 8009692:	e006      	b.n	80096a2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	0011      	movs	r1, r2
 800969a:	0018      	movs	r0, r3
 800969c:	f000 f879 	bl	8009792 <USBD_CtlError>
      break;
 80096a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80096a2:	46c0      	nop			@ (mov r8, r8)
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b002      	add	sp, #8
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	885b      	ldrh	r3, [r3, #2]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d108      	bne.n	80096ce <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	23a9      	movs	r3, #169	@ 0xa9
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	2101      	movs	r1, #1
 80096c4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 f94a 	bl	8009962 <USBD_CtlSendStatus>
  }
}
 80096ce:	46c0      	nop			@ (mov r8, r8)
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b002      	add	sp, #8
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	23a7      	movs	r3, #167	@ 0xa7
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	5cd3      	ldrb	r3, [r2, r3]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d80d      	bhi.n	800970a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	885b      	ldrh	r3, [r3, #2]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d110      	bne.n	8009718 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	23a9      	movs	r3, #169	@ 0xa9
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	2100      	movs	r1, #0
 80096fe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	0018      	movs	r0, r3
 8009704:	f000 f92d 	bl	8009962 <USBD_CtlSendStatus>
      }
      break;
 8009708:	e006      	b.n	8009718 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	0011      	movs	r1, r2
 8009710:	0018      	movs	r0, r3
 8009712:	f000 f83e 	bl	8009792 <USBD_CtlError>
      break;
 8009716:	e000      	b.n	800971a <USBD_ClrFeature+0x44>
      break;
 8009718:	46c0      	nop			@ (mov r8, r8)
  }
}
 800971a:	46c0      	nop			@ (mov r8, r8)
 800971c:	46bd      	mov	sp, r7
 800971e:	b002      	add	sp, #8
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	785a      	ldrb	r2, [r3, #1]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3302      	adds	r3, #2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	001a      	movs	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	3303      	adds	r3, #3
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	18d3      	adds	r3, r2, r3
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	3304      	adds	r3, #4
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	001a      	movs	r2, r3
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	3305      	adds	r3, #5
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	021b      	lsls	r3, r3, #8
 8009766:	b29b      	uxth	r3, r3
 8009768:	18d3      	adds	r3, r2, r3
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	3306      	adds	r3, #6
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	001a      	movs	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3307      	adds	r3, #7
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	18d3      	adds	r3, r2, r3
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	80da      	strh	r2, [r3, #6]

}
 800978a:	46c0      	nop			@ (mov r8, r8)
 800978c:	46bd      	mov	sp, r7
 800978e:	b002      	add	sp, #8
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2180      	movs	r1, #128	@ 0x80
 80097a0:	0018      	movs	r0, r3
 80097a2:	f000 fc4c 	bl	800a03e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2100      	movs	r1, #0
 80097aa:	0018      	movs	r0, r3
 80097ac:	f000 fc47 	bl	800a03e <USBD_LL_StallEP>
}
 80097b0:	46c0      	nop			@ (mov r8, r8)
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b002      	add	sp, #8
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097c4:	2417      	movs	r4, #23
 80097c6:	193b      	adds	r3, r7, r4
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d03c      	beq.n	800984c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	0018      	movs	r0, r3
 80097d6:	f000 f83d 	bl	8009854 <USBD_GetLen>
 80097da:	0003      	movs	r3, r0
 80097dc:	3301      	adds	r3, #1
 80097de:	b29b      	uxth	r3, r3
 80097e0:	18db      	adds	r3, r3, r3
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097e8:	193b      	adds	r3, r7, r4
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	193a      	adds	r2, r7, r4
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	7011      	strb	r1, [r2, #0]
 80097f2:	001a      	movs	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7812      	ldrb	r2, [r2, #0]
 80097fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097fe:	193b      	adds	r3, r7, r4
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	193a      	adds	r2, r7, r4
 8009804:	1c59      	adds	r1, r3, #1
 8009806:	7011      	strb	r1, [r2, #0]
 8009808:	001a      	movs	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	189b      	adds	r3, r3, r2
 800980e:	2203      	movs	r2, #3
 8009810:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009812:	e017      	b.n	8009844 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	60fa      	str	r2, [r7, #12]
 800981a:	2417      	movs	r4, #23
 800981c:	193a      	adds	r2, r7, r4
 800981e:	7812      	ldrb	r2, [r2, #0]
 8009820:	1939      	adds	r1, r7, r4
 8009822:	1c50      	adds	r0, r2, #1
 8009824:	7008      	strb	r0, [r1, #0]
 8009826:	0011      	movs	r1, r2
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	1852      	adds	r2, r2, r1
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009830:	193b      	adds	r3, r7, r4
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	193a      	adds	r2, r7, r4
 8009836:	1c59      	adds	r1, r3, #1
 8009838:	7011      	strb	r1, [r2, #0]
 800983a:	001a      	movs	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	189b      	adds	r3, r3, r2
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e3      	bne.n	8009814 <USBD_GetString+0x5c>
    }
  }
}
 800984c:	46c0      	nop			@ (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b007      	add	sp, #28
 8009852:	bd90      	pop	{r4, r7, pc}

08009854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800985c:	230f      	movs	r3, #15
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8009864:	e008      	b.n	8009878 <USBD_GetLen+0x24>
  {
    len++;
 8009866:	210f      	movs	r1, #15
 8009868:	187b      	adds	r3, r7, r1
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	187b      	adds	r3, r7, r1
 800986e:	3201      	adds	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]
    buf++;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3301      	adds	r3, #1
 8009876:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f2      	bne.n	8009866 <USBD_GetLen+0x12>
  }

  return len;
 8009880:	230f      	movs	r3, #15
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	781b      	ldrb	r3, [r3, #0]
}
 8009886:	0018      	movs	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	b004      	add	sp, #16
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	1dbb      	adds	r3, r7, #6
 800989a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	23a5      	movs	r3, #165	@ 0xa5
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	2102      	movs	r1, #2
 80098a4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80098a6:	1dbb      	adds	r3, r7, #6
 80098a8:	881a      	ldrh	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098ae:	1dbb      	adds	r3, r7, #6
 80098b0:	881a      	ldrh	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098b6:	1dbb      	adds	r3, r7, #6
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	2100      	movs	r1, #0
 80098c0:	f000 fc6e 	bl	800a1a0 <USBD_LL_Transmit>

  return USBD_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	0018      	movs	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	b004      	add	sp, #16
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	1dbb      	adds	r3, r7, #6
 80098da:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098dc:	1dbb      	adds	r3, r7, #6
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	2100      	movs	r1, #0
 80098e6:	f000 fc5b 	bl	800a1a0 <USBD_LL_Transmit>

  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	0018      	movs	r0, r3
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b004      	add	sp, #16
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	1dbb      	adds	r3, r7, #6
 8009900:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	23a5      	movs	r3, #165	@ 0xa5
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	2103      	movs	r1, #3
 800990a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800990c:	1dbb      	adds	r3, r7, #6
 800990e:	8819      	ldrh	r1, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	23ae      	movs	r3, #174	@ 0xae
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8009918:	1dbb      	adds	r3, r7, #6
 800991a:	8819      	ldrh	r1, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	23b0      	movs	r3, #176	@ 0xb0
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009924:	1dbb      	adds	r3, r7, #6
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	2100      	movs	r1, #0
 800992e:	f000 fc6e 	bl	800a20e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	0018      	movs	r0, r3
 8009936:	46bd      	mov	sp, r7
 8009938:	b004      	add	sp, #16
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	1dbb      	adds	r3, r7, #6
 8009948:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800994a:	1dbb      	adds	r3, r7, #6
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	2100      	movs	r1, #0
 8009954:	f000 fc5b 	bl	800a20e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	0018      	movs	r0, r3
 800995c:	46bd      	mov	sp, r7
 800995e:	b004      	add	sp, #16
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	23a5      	movs	r3, #165	@ 0xa5
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	2104      	movs	r1, #4
 8009972:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	2300      	movs	r3, #0
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	f000 fc10 	bl	800a1a0 <USBD_LL_Transmit>

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	0018      	movs	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	b002      	add	sp, #8
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	23a5      	movs	r3, #165	@ 0xa5
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	2105      	movs	r1, #5
 800999a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	2300      	movs	r3, #0
 80099a0:	2200      	movs	r2, #0
 80099a2:	2100      	movs	r1, #0
 80099a4:	f000 fc33 	bl	800a20e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	0018      	movs	r0, r3
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b002      	add	sp, #8
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099b8:	4914      	ldr	r1, [pc, #80]	@ (8009a0c <MX_USB_DEVICE_Init+0x58>)
 80099ba:	4b15      	ldr	r3, [pc, #84]	@ (8009a10 <MX_USB_DEVICE_Init+0x5c>)
 80099bc:	2200      	movs	r2, #0
 80099be:	0018      	movs	r0, r3
 80099c0:	f7fe fdeb 	bl	800859a <USBD_Init>
 80099c4:	1e03      	subs	r3, r0, #0
 80099c6:	d001      	beq.n	80099cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099c8:	f7f7 fb0c 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80099cc:	4a11      	ldr	r2, [pc, #68]	@ (8009a14 <MX_USB_DEVICE_Init+0x60>)
 80099ce:	4b10      	ldr	r3, [pc, #64]	@ (8009a10 <MX_USB_DEVICE_Init+0x5c>)
 80099d0:	0011      	movs	r1, r2
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7fe fe12 	bl	80085fc <USBD_RegisterClass>
 80099d8:	1e03      	subs	r3, r0, #0
 80099da:	d001      	beq.n	80099e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80099dc:	f7f7 fb02 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80099e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009a18 <MX_USB_DEVICE_Init+0x64>)
 80099e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009a10 <MX_USB_DEVICE_Init+0x5c>)
 80099e4:	0011      	movs	r1, r2
 80099e6:	0018      	movs	r0, r3
 80099e8:	f7fe fdbc 	bl	8008564 <USBD_CUSTOM_HID_RegisterInterface>
 80099ec:	1e03      	subs	r3, r0, #0
 80099ee:	d001      	beq.n	80099f4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80099f0:	f7f7 faf8 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099f4:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <MX_USB_DEVICE_Init+0x5c>)
 80099f6:	0018      	movs	r0, r3
 80099f8:	f7fe fe20 	bl	800863c <USBD_Start>
 80099fc:	1e03      	subs	r3, r0, #0
 80099fe:	d001      	beq.n	8009a04 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009a00:	f7f7 faf0 	bl	8000fe4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a04:	46c0      	nop			@ (mov r8, r8)
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	46c0      	nop			@ (mov r8, r8)
 8009a0c:	2000025c 	.word	0x2000025c
 8009a10:	200005ec 	.word	0x200005ec
 8009a14:	20000138 	.word	0x20000138
 8009a18:	2000024c 	.word	0x2000024c

08009a1c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a22:	0018      	movs	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009a2c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	0002      	movs	r2, r0
 8009a3c:	1dfb      	adds	r3, r7, #7
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	1dbb      	adds	r3, r7, #6
 8009a42:	1c0a      	adds	r2, r1, #0
 8009a44:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009a46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a48:	0018      	movs	r0, r3
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b002      	add	sp, #8
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	0002      	movs	r2, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	1dfb      	adds	r3, r7, #7
 8009a5c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2212      	movs	r2, #18
 8009a62:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a64:	4b02      	ldr	r3, [pc, #8]	@ (8009a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a66:	0018      	movs	r0, r3
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	b002      	add	sp, #8
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	46c0      	nop			@ (mov r8, r8)
 8009a70:	20000278 	.word	0x20000278

08009a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	0002      	movs	r2, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	1dfb      	adds	r3, r7, #7
 8009a80:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2204      	movs	r2, #4
 8009a86:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a88:	4b02      	ldr	r3, [pc, #8]	@ (8009a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	b002      	add	sp, #8
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	46c0      	nop			@ (mov r8, r8)
 8009a94:	2000028c 	.word	0x2000028c

08009a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	1dfb      	adds	r3, r7, #7
 8009aa4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4908      	ldr	r1, [pc, #32]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009ab2:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <USBD_FS_ProductStrDescriptor+0x40>)
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7ff fe7f 	bl	80097b8 <USBD_GetString>
 8009aba:	e005      	b.n	8009ac8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	4905      	ldr	r1, [pc, #20]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009ac0:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <USBD_FS_ProductStrDescriptor+0x40>)
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f7ff fe78 	bl	80097b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac8:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009aca:	0018      	movs	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	b002      	add	sp, #8
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	200008b0 	.word	0x200008b0
 8009ad8:	0800a390 	.word	0x0800a390

08009adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	0002      	movs	r2, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	1dfb      	adds	r3, r7, #7
 8009ae8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4904      	ldr	r1, [pc, #16]	@ (8009b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009aee:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009af0:	0018      	movs	r0, r3
 8009af2:	f7ff fe61 	bl	80097b8 <USBD_GetString>
  return USBD_StrDesc;
 8009af6:	4b02      	ldr	r3, [pc, #8]	@ (8009b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009af8:	0018      	movs	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	b002      	add	sp, #8
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200008b0 	.word	0x200008b0
 8009b04:	0800a3a0 	.word	0x0800a3a0

08009b08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	0002      	movs	r2, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	1dfb      	adds	r3, r7, #7
 8009b14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	221a      	movs	r2, #26
 8009b1a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b1c:	f000 f84c 	bl	8009bb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b20:	4b02      	ldr	r3, [pc, #8]	@ (8009b2c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009b22:	0018      	movs	r0, r3
 8009b24:	46bd      	mov	sp, r7
 8009b26:	b002      	add	sp, #8
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	20000290 	.word	0x20000290

08009b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	0002      	movs	r2, r0
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	1dfb      	adds	r3, r7, #7
 8009b3c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009b3e:	1dfb      	adds	r3, r7, #7
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	4908      	ldr	r1, [pc, #32]	@ (8009b6c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f7ff fe33 	bl	80097b8 <USBD_GetString>
 8009b52:	e005      	b.n	8009b60 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	4905      	ldr	r1, [pc, #20]	@ (8009b6c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	f7ff fe2c 	bl	80097b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b60:	4b02      	ldr	r3, [pc, #8]	@ (8009b6c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009b62:	0018      	movs	r0, r3
 8009b64:	46bd      	mov	sp, r7
 8009b66:	b002      	add	sp, #8
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	46c0      	nop			@ (mov r8, r8)
 8009b6c:	200008b0 	.word	0x200008b0
 8009b70:	0800a3b4 	.word	0x0800a3b4

08009b74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	1dfb      	adds	r3, r7, #7
 8009b80:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009b82:	1dfb      	adds	r3, r7, #7
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	4908      	ldr	r1, [pc, #32]	@ (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009b8e:	4b09      	ldr	r3, [pc, #36]	@ (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009b90:	0018      	movs	r0, r3
 8009b92:	f7ff fe11 	bl	80097b8 <USBD_GetString>
 8009b96:	e005      	b.n	8009ba4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	4905      	ldr	r1, [pc, #20]	@ (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009b9c:	4b05      	ldr	r3, [pc, #20]	@ (8009bb4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7ff fe0a 	bl	80097b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ba4:	4b02      	ldr	r3, [pc, #8]	@ (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b002      	add	sp, #8
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	46c0      	nop			@ (mov r8, r8)
 8009bb0:	200008b0 	.word	0x200008b0
 8009bb4:	0800a3c8 	.word	0x0800a3c8

08009bb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bbe:	4b10      	ldr	r3, [pc, #64]	@ (8009c00 <Get_SerialNum+0x48>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8009c04 <Get_SerialNum+0x4c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bca:	4b0f      	ldr	r3, [pc, #60]	@ (8009c08 <Get_SerialNum+0x50>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bde:	490b      	ldr	r1, [pc, #44]	@ (8009c0c <Get_SerialNum+0x54>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2208      	movs	r2, #8
 8009be4:	0018      	movs	r0, r3
 8009be6:	f000 f815 	bl	8009c14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bea:	4909      	ldr	r1, [pc, #36]	@ (8009c10 <Get_SerialNum+0x58>)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2204      	movs	r2, #4
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f000 f80f 	bl	8009c14 <IntToUnicode>
  }
}
 8009bf6:	46c0      	nop			@ (mov r8, r8)
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b004      	add	sp, #16
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	46c0      	nop			@ (mov r8, r8)
 8009c00:	1ffff7ac 	.word	0x1ffff7ac
 8009c04:	1ffff7b0 	.word	0x1ffff7b0
 8009c08:	1ffff7b4 	.word	0x1ffff7b4
 8009c0c:	20000292 	.word	0x20000292
 8009c10:	200002a2 	.word	0x200002a2

08009c14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	1dfb      	adds	r3, r7, #7
 8009c20:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009c22:	2117      	movs	r1, #23
 8009c24:	187b      	adds	r3, r7, r1
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e02f      	b.n	8009c92 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	0f1b      	lsrs	r3, r3, #28
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d80d      	bhi.n	8009c56 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	0f1b      	lsrs	r3, r3, #28
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	2317      	movs	r3, #23
 8009c42:	18fb      	adds	r3, r7, r3
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	0019      	movs	r1, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	185b      	adds	r3, r3, r1
 8009c4e:	3230      	adds	r2, #48	@ 0x30
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	e00c      	b.n	8009c70 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	0f1b      	lsrs	r3, r3, #28
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	2317      	movs	r3, #23
 8009c5e:	18fb      	adds	r3, r7, r3
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	0019      	movs	r1, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	185b      	adds	r3, r3, r1
 8009c6a:	3237      	adds	r2, #55	@ 0x37
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c76:	2117      	movs	r1, #23
 8009c78:	187b      	adds	r3, r7, r1
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	3301      	adds	r3, #1
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	18d3      	adds	r3, r2, r3
 8009c84:	2200      	movs	r2, #0
 8009c86:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c88:	187b      	adds	r3, r7, r1
 8009c8a:	781a      	ldrb	r2, [r3, #0]
 8009c8c:	187b      	adds	r3, r7, r1
 8009c8e:	3201      	adds	r2, #1
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	2317      	movs	r3, #23
 8009c94:	18fa      	adds	r2, r7, r3
 8009c96:	1dfb      	adds	r3, r7, #7
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d3c8      	bcc.n	8009c32 <IntToUnicode+0x1e>
  }
}
 8009ca0:	46c0      	nop			@ (mov r8, r8)
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	b006      	add	sp, #24
 8009ca8:	bd80      	pop	{r7, pc}
	...

08009cac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8009cf4 <HAL_PCD_MspInit+0x48>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d115      	bne.n	8009cea <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf8 <HAL_PCD_MspInit+0x4c>)
 8009cc0:	69da      	ldr	r2, [r3, #28]
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf8 <HAL_PCD_MspInit+0x4c>)
 8009cc4:	2180      	movs	r1, #128	@ 0x80
 8009cc6:	0409      	lsls	r1, r1, #16
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	61da      	str	r2, [r3, #28]
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <HAL_PCD_MspInit+0x4c>)
 8009cce:	69da      	ldr	r2, [r3, #28]
 8009cd0:	2380      	movs	r3, #128	@ 0x80
 8009cd2:	041b      	lsls	r3, r3, #16
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	201f      	movs	r0, #31
 8009ce0:	f7f7 feec 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009ce4:	201f      	movs	r0, #31
 8009ce6:	f7f7 fefe 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b004      	add	sp, #16
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	40005c00 	.word	0x40005c00
 8009cf8:	40021000 	.word	0x40021000

08009cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	23b6      	movs	r3, #182	@ 0xb6
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	58d2      	ldr	r2, [r2, r3]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	21a6      	movs	r1, #166	@ 0xa6
 8009d10:	0089      	lsls	r1, r1, #2
 8009d12:	468c      	mov	ip, r1
 8009d14:	4463      	add	r3, ip
 8009d16:	0019      	movs	r1, r3
 8009d18:	0010      	movs	r0, r2
 8009d1a:	f7fe fce3 	bl	80086e4 <USBD_LL_SetupStage>
}
 8009d1e:	46c0      	nop			@ (mov r8, r8)
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b002      	add	sp, #8
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d26:	b590      	push	{r4, r7, lr}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	000a      	movs	r2, r1
 8009d30:	1cfb      	adds	r3, r7, #3
 8009d32:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	23b6      	movs	r3, #182	@ 0xb6
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	58d4      	ldr	r4, [r2, r3]
 8009d3c:	1cfb      	adds	r3, r7, #3
 8009d3e:	781a      	ldrb	r2, [r3, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	23b2      	movs	r3, #178	@ 0xb2
 8009d44:	0059      	lsls	r1, r3, #1
 8009d46:	0013      	movs	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	18c3      	adds	r3, r0, r3
 8009d50:	185b      	adds	r3, r3, r1
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	1cfb      	adds	r3, r7, #3
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	0019      	movs	r1, r3
 8009d5a:	0020      	movs	r0, r4
 8009d5c:	f7fe fd20 	bl	80087a0 <USBD_LL_DataOutStage>
}
 8009d60:	46c0      	nop			@ (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b003      	add	sp, #12
 8009d66:	bd90      	pop	{r4, r7, pc}

08009d68 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	000a      	movs	r2, r1
 8009d72:	1cfb      	adds	r3, r7, #3
 8009d74:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	23b6      	movs	r3, #182	@ 0xb6
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	58d0      	ldr	r0, [r2, r3]
 8009d7e:	1cfb      	adds	r3, r7, #3
 8009d80:	781a      	ldrb	r2, [r3, #0]
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	0013      	movs	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	189b      	adds	r3, r3, r2
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	18cb      	adds	r3, r1, r3
 8009d8e:	3324      	adds	r3, #36	@ 0x24
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	1cfb      	adds	r3, r7, #3
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	0019      	movs	r1, r3
 8009d98:	f7fe fd84 	bl	80088a4 <USBD_LL_DataInStage>
}
 8009d9c:	46c0      	nop			@ (mov r8, r8)
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b002      	add	sp, #8
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	23b6      	movs	r3, #182	@ 0xb6
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	58d3      	ldr	r3, [r2, r3]
 8009db4:	0018      	movs	r0, r3
 8009db6:	f7fe febb 	bl	8008b30 <USBD_LL_SOF>
}
 8009dba:	46c0      	nop			@ (mov r8, r8)
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	b002      	add	sp, #8
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009dca:	230f      	movs	r3, #15
 8009dcc:	18fb      	adds	r3, r7, r3
 8009dce:	2201      	movs	r2, #1
 8009dd0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d001      	beq.n	8009dde <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8009dda:	f7f7 f903 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	23b6      	movs	r3, #182	@ 0xb6
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	58d2      	ldr	r2, [r2, r3]
 8009de6:	230f      	movs	r3, #15
 8009de8:	18fb      	adds	r3, r7, r3
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	0019      	movs	r1, r3
 8009dee:	0010      	movs	r0, r2
 8009df0:	f7fe fe5d 	bl	8008aae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	23b6      	movs	r3, #182	@ 0xb6
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	58d3      	ldr	r3, [r2, r3]
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	f7fe fe0e 	bl	8008a1e <USBD_LL_Reset>
}
 8009e02:	46c0      	nop			@ (mov r8, r8)
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b004      	add	sp, #16
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	23b6      	movs	r3, #182	@ 0xb6
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	58d3      	ldr	r3, [r2, r3]
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	f7fe fe57 	bl	8008ad0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7a5b      	ldrb	r3, [r3, #9]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e2a:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <HAL_PCD_SuspendCallback+0x34>)
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <HAL_PCD_SuspendCallback+0x34>)
 8009e30:	2106      	movs	r1, #6
 8009e32:	430a      	orrs	r2, r1
 8009e34:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b002      	add	sp, #8
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	46c0      	nop			@ (mov r8, r8)
 8009e40:	e000ed00 	.word	0xe000ed00

08009e44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7a5b      	ldrb	r3, [r3, #9]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e54:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <HAL_PCD_ResumeCallback+0x38>)
 8009e56:	691a      	ldr	r2, [r3, #16]
 8009e58:	4b08      	ldr	r3, [pc, #32]	@ (8009e7c <HAL_PCD_ResumeCallback+0x38>)
 8009e5a:	2106      	movs	r1, #6
 8009e5c:	438a      	bics	r2, r1
 8009e5e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009e60:	f000 fa20 	bl	800a2a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	23b6      	movs	r3, #182	@ 0xb6
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	58d3      	ldr	r3, [r2, r3]
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f7fe fe47 	bl	8008b00 <USBD_LL_Resume>
}
 8009e72:	46c0      	nop			@ (mov r8, r8)
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b002      	add	sp, #8
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			@ (mov r8, r8)
 8009e7c:	e000ed00 	.word	0xe000ed00

08009e80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009e88:	4a27      	ldr	r2, [pc, #156]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009e8a:	23b6      	movs	r3, #182	@ 0xb6
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	23b0      	movs	r3, #176	@ 0xb0
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4923      	ldr	r1, [pc, #140]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009e9a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009e9c:	4b22      	ldr	r3, [pc, #136]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009e9e:	4a23      	ldr	r2, [pc, #140]	@ (8009f2c <USBD_LL_Init+0xac>)
 8009ea0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ea2:	4b21      	ldr	r3, [pc, #132]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009eaa:	2202      	movs	r2, #2
 8009eac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eae:	4b1e      	ldr	r3, [pc, #120]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009eba:	4b1b      	ldr	r3, [pc, #108]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ec0:	4b19      	ldr	r3, [pc, #100]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ec6:	4b18      	ldr	r3, [pc, #96]	@ (8009f28 <USBD_LL_Init+0xa8>)
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f7f8 f9b9 	bl	8002240 <HAL_PCD_Init>
 8009ece:	1e03      	subs	r3, r0, #0
 8009ed0:	d001      	beq.n	8009ed6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009ed2:	f7f7 f887 	bl	8000fe4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	23b0      	movs	r3, #176	@ 0xb0
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	58d0      	ldr	r0, [r2, r3]
 8009ede:	2318      	movs	r3, #24
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f7f9 ff52 	bl	8003d8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	23b0      	movs	r3, #176	@ 0xb0
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	58d0      	ldr	r0, [r2, r3]
 8009ef0:	2358      	movs	r3, #88	@ 0x58
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2180      	movs	r1, #128	@ 0x80
 8009ef6:	f7f9 ff49 	bl	8003d8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	23b0      	movs	r3, #176	@ 0xb0
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	58d0      	ldr	r0, [r2, r3]
 8009f02:	2398      	movs	r3, #152	@ 0x98
 8009f04:	2200      	movs	r2, #0
 8009f06:	2181      	movs	r1, #129	@ 0x81
 8009f08:	f7f9 ff40 	bl	8003d8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	23b0      	movs	r3, #176	@ 0xb0
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	58d0      	ldr	r0, [r2, r3]
 8009f14:	23d8      	movs	r3, #216	@ 0xd8
 8009f16:	2200      	movs	r2, #0
 8009f18:	2101      	movs	r1, #1
 8009f1a:	f7f9 ff37 	bl	8003d8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	0018      	movs	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b002      	add	sp, #8
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20000ab0 	.word	0x20000ab0
 8009f2c:	40005c00 	.word	0x40005c00

08009f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f38:	210f      	movs	r1, #15
 8009f3a:	187b      	adds	r3, r7, r1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f40:	260e      	movs	r6, #14
 8009f42:	19bb      	adds	r3, r7, r6
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	23b0      	movs	r3, #176	@ 0xb0
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	58d3      	ldr	r3, [r2, r3]
 8009f50:	000d      	movs	r5, r1
 8009f52:	187c      	adds	r4, r7, r1
 8009f54:	0018      	movs	r0, r3
 8009f56:	f7f8 fa67 	bl	8002428 <HAL_PCD_Start>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5e:	19bc      	adds	r4, r7, r6
 8009f60:	197b      	adds	r3, r7, r5
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	0018      	movs	r0, r3
 8009f66:	f000 f9a4 	bl	800a2b2 <USBD_Get_USB_Status>
 8009f6a:	0003      	movs	r3, r0
 8009f6c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f6e:	19bb      	adds	r3, r7, r6
 8009f70:	781b      	ldrb	r3, [r3, #0]
}
 8009f72:	0018      	movs	r0, r3
 8009f74:	46bd      	mov	sp, r7
 8009f76:	b005      	add	sp, #20
 8009f78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	000c      	movs	r4, r1
 8009f84:	0010      	movs	r0, r2
 8009f86:	0019      	movs	r1, r3
 8009f88:	1cfb      	adds	r3, r7, #3
 8009f8a:	1c22      	adds	r2, r4, #0
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	1cbb      	adds	r3, r7, #2
 8009f90:	1c02      	adds	r2, r0, #0
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	003b      	movs	r3, r7
 8009f96:	1c0a      	adds	r2, r1, #0
 8009f98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9a:	260f      	movs	r6, #15
 8009f9c:	19bb      	adds	r3, r7, r6
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa2:	250e      	movs	r5, #14
 8009fa4:	197b      	adds	r3, r7, r5
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	23b0      	movs	r3, #176	@ 0xb0
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	58d0      	ldr	r0, [r2, r3]
 8009fb2:	19bc      	adds	r4, r7, r6
 8009fb4:	1cbb      	adds	r3, r7, #2
 8009fb6:	781d      	ldrb	r5, [r3, #0]
 8009fb8:	003b      	movs	r3, r7
 8009fba:	881a      	ldrh	r2, [r3, #0]
 8009fbc:	1cfb      	adds	r3, r7, #3
 8009fbe:	7819      	ldrb	r1, [r3, #0]
 8009fc0:	002b      	movs	r3, r5
 8009fc2:	f7f8 fbc5 	bl	8002750 <HAL_PCD_EP_Open>
 8009fc6:	0003      	movs	r3, r0
 8009fc8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fca:	250e      	movs	r5, #14
 8009fcc:	197c      	adds	r4, r7, r5
 8009fce:	19bb      	adds	r3, r7, r6
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f000 f96d 	bl	800a2b2 <USBD_Get_USB_Status>
 8009fd8:	0003      	movs	r3, r0
 8009fda:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009fdc:	197b      	adds	r3, r7, r5
 8009fde:	781b      	ldrb	r3, [r3, #0]
}
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b005      	add	sp, #20
 8009fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fe8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	000a      	movs	r2, r1
 8009ff2:	1cfb      	adds	r3, r7, #3
 8009ff4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff6:	210f      	movs	r1, #15
 8009ff8:	187b      	adds	r3, r7, r1
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffe:	260e      	movs	r6, #14
 800a000:	19bb      	adds	r3, r7, r6
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	23b0      	movs	r3, #176	@ 0xb0
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	58d2      	ldr	r2, [r2, r3]
 800a00e:	000d      	movs	r5, r1
 800a010:	187c      	adds	r4, r7, r1
 800a012:	1cfb      	adds	r3, r7, #3
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	0019      	movs	r1, r3
 800a018:	0010      	movs	r0, r2
 800a01a:	f7f8 fc08 	bl	800282e <HAL_PCD_EP_Close>
 800a01e:	0003      	movs	r3, r0
 800a020:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a022:	19bc      	adds	r4, r7, r6
 800a024:	197b      	adds	r3, r7, r5
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	0018      	movs	r0, r3
 800a02a:	f000 f942 	bl	800a2b2 <USBD_Get_USB_Status>
 800a02e:	0003      	movs	r3, r0
 800a030:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a032:	19bb      	adds	r3, r7, r6
 800a034:	781b      	ldrb	r3, [r3, #0]
}
 800a036:	0018      	movs	r0, r3
 800a038:	46bd      	mov	sp, r7
 800a03a:	b005      	add	sp, #20
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a03e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	000a      	movs	r2, r1
 800a048:	1cfb      	adds	r3, r7, #3
 800a04a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04c:	210f      	movs	r1, #15
 800a04e:	187b      	adds	r3, r7, r1
 800a050:	2200      	movs	r2, #0
 800a052:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a054:	260e      	movs	r6, #14
 800a056:	19bb      	adds	r3, r7, r6
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	23b0      	movs	r3, #176	@ 0xb0
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	58d2      	ldr	r2, [r2, r3]
 800a064:	000d      	movs	r5, r1
 800a066:	187c      	adds	r4, r7, r1
 800a068:	1cfb      	adds	r3, r7, #3
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	0019      	movs	r1, r3
 800a06e:	0010      	movs	r0, r2
 800a070:	f7f8 fca1 	bl	80029b6 <HAL_PCD_EP_SetStall>
 800a074:	0003      	movs	r3, r0
 800a076:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a078:	19bc      	adds	r4, r7, r6
 800a07a:	197b      	adds	r3, r7, r5
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	0018      	movs	r0, r3
 800a080:	f000 f917 	bl	800a2b2 <USBD_Get_USB_Status>
 800a084:	0003      	movs	r3, r0
 800a086:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a088:	19bb      	adds	r3, r7, r6
 800a08a:	781b      	ldrb	r3, [r3, #0]
}
 800a08c:	0018      	movs	r0, r3
 800a08e:	46bd      	mov	sp, r7
 800a090:	b005      	add	sp, #20
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a094 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	000a      	movs	r2, r1
 800a09e:	1cfb      	adds	r3, r7, #3
 800a0a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a2:	210f      	movs	r1, #15
 800a0a4:	187b      	adds	r3, r7, r1
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0aa:	260e      	movs	r6, #14
 800a0ac:	19bb      	adds	r3, r7, r6
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	23b0      	movs	r3, #176	@ 0xb0
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	58d2      	ldr	r2, [r2, r3]
 800a0ba:	000d      	movs	r5, r1
 800a0bc:	187c      	adds	r4, r7, r1
 800a0be:	1cfb      	adds	r3, r7, #3
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	0019      	movs	r1, r3
 800a0c4:	0010      	movs	r0, r2
 800a0c6:	f7f8 fcd2 	bl	8002a6e <HAL_PCD_EP_ClrStall>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ce:	19bc      	adds	r4, r7, r6
 800a0d0:	197b      	adds	r3, r7, r5
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f000 f8ec 	bl	800a2b2 <USBD_Get_USB_Status>
 800a0da:	0003      	movs	r3, r0
 800a0dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a0de:	19bb      	adds	r3, r7, r6
 800a0e0:	781b      	ldrb	r3, [r3, #0]
}
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	b005      	add	sp, #20
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	000a      	movs	r2, r1
 800a0f4:	1cfb      	adds	r3, r7, #3
 800a0f6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	23b0      	movs	r3, #176	@ 0xb0
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	58d3      	ldr	r3, [r2, r3]
 800a100:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a102:	1cfb      	adds	r3, r7, #3
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b25b      	sxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	da0c      	bge.n	800a126 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a10c:	1cfb      	adds	r3, r7, #3
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	227f      	movs	r2, #127	@ 0x7f
 800a112:	401a      	ands	r2, r3
 800a114:	68f9      	ldr	r1, [r7, #12]
 800a116:	0013      	movs	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	189b      	adds	r3, r3, r2
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	18cb      	adds	r3, r1, r3
 800a120:	3312      	adds	r3, #18
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	e00d      	b.n	800a142 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a126:	1cfb      	adds	r3, r7, #3
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	227f      	movs	r2, #127	@ 0x7f
 800a12c:	401a      	ands	r2, r3
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	23a9      	movs	r3, #169	@ 0xa9
 800a132:	0059      	lsls	r1, r3, #1
 800a134:	0013      	movs	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	189b      	adds	r3, r3, r2
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	18c3      	adds	r3, r0, r3
 800a13e:	185b      	adds	r3, r3, r1
 800a140:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a142:	0018      	movs	r0, r3
 800a144:	46bd      	mov	sp, r7
 800a146:	b004      	add	sp, #16
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a14a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	000a      	movs	r2, r1
 800a154:	1cfb      	adds	r3, r7, #3
 800a156:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	210f      	movs	r1, #15
 800a15a:	187b      	adds	r3, r7, r1
 800a15c:	2200      	movs	r2, #0
 800a15e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a160:	260e      	movs	r6, #14
 800a162:	19bb      	adds	r3, r7, r6
 800a164:	2200      	movs	r2, #0
 800a166:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	23b0      	movs	r3, #176	@ 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	58d2      	ldr	r2, [r2, r3]
 800a170:	000d      	movs	r5, r1
 800a172:	187c      	adds	r4, r7, r1
 800a174:	1cfb      	adds	r3, r7, #3
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	0019      	movs	r1, r3
 800a17a:	0010      	movs	r0, r2
 800a17c:	f7f8 fabe 	bl	80026fc <HAL_PCD_SetAddress>
 800a180:	0003      	movs	r3, r0
 800a182:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	19bc      	adds	r4, r7, r6
 800a186:	197b      	adds	r3, r7, r5
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f000 f891 	bl	800a2b2 <USBD_Get_USB_Status>
 800a190:	0003      	movs	r3, r0
 800a192:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a194:	19bb      	adds	r3, r7, r6
 800a196:	781b      	ldrb	r3, [r3, #0]
}
 800a198:	0018      	movs	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b005      	add	sp, #20
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	0008      	movs	r0, r1
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	230b      	movs	r3, #11
 800a1b0:	18fb      	adds	r3, r7, r3
 800a1b2:	1c02      	adds	r2, r0, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	2408      	movs	r4, #8
 800a1b8:	193b      	adds	r3, r7, r4
 800a1ba:	1c0a      	adds	r2, r1, #0
 800a1bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1be:	2117      	movs	r1, #23
 800a1c0:	187b      	adds	r3, r7, r1
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c6:	2516      	movs	r5, #22
 800a1c8:	197b      	adds	r3, r7, r5
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	23b0      	movs	r3, #176	@ 0xb0
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	58d0      	ldr	r0, [r2, r3]
 800a1d6:	193b      	adds	r3, r7, r4
 800a1d8:	881d      	ldrh	r5, [r3, #0]
 800a1da:	000e      	movs	r6, r1
 800a1dc:	187c      	adds	r4, r7, r1
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	230b      	movs	r3, #11
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	7819      	ldrb	r1, [r3, #0]
 800a1e6:	002b      	movs	r3, r5
 800a1e8:	f7f8 fba9 	bl	800293e <HAL_PCD_EP_Transmit>
 800a1ec:	0003      	movs	r3, r0
 800a1ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f0:	2516      	movs	r5, #22
 800a1f2:	197c      	adds	r4, r7, r5
 800a1f4:	19bb      	adds	r3, r7, r6
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f000 f85a 	bl	800a2b2 <USBD_Get_USB_Status>
 800a1fe:	0003      	movs	r3, r0
 800a200:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a202:	197b      	adds	r3, r7, r5
 800a204:	781b      	ldrb	r3, [r3, #0]
}
 800a206:	0018      	movs	r0, r3
 800a208:	46bd      	mov	sp, r7
 800a20a:	b007      	add	sp, #28
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a20e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a210:	b087      	sub	sp, #28
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	0008      	movs	r0, r1
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	0019      	movs	r1, r3
 800a21c:	230b      	movs	r3, #11
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	1c02      	adds	r2, r0, #0
 800a222:	701a      	strb	r2, [r3, #0]
 800a224:	2408      	movs	r4, #8
 800a226:	193b      	adds	r3, r7, r4
 800a228:	1c0a      	adds	r2, r1, #0
 800a22a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22c:	2117      	movs	r1, #23
 800a22e:	187b      	adds	r3, r7, r1
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2516      	movs	r5, #22
 800a236:	197b      	adds	r3, r7, r5
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	23b0      	movs	r3, #176	@ 0xb0
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	58d0      	ldr	r0, [r2, r3]
 800a244:	193b      	adds	r3, r7, r4
 800a246:	881d      	ldrh	r5, [r3, #0]
 800a248:	000e      	movs	r6, r1
 800a24a:	187c      	adds	r4, r7, r1
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	230b      	movs	r3, #11
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	7819      	ldrb	r1, [r3, #0]
 800a254:	002b      	movs	r3, r5
 800a256:	f7f8 fb3b 	bl	80028d0 <HAL_PCD_EP_Receive>
 800a25a:	0003      	movs	r3, r0
 800a25c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a25e:	2516      	movs	r5, #22
 800a260:	197c      	adds	r4, r7, r5
 800a262:	19bb      	adds	r3, r7, r6
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	0018      	movs	r0, r3
 800a268:	f000 f823 	bl	800a2b2 <USBD_Get_USB_Status>
 800a26c:	0003      	movs	r3, r0
 800a26e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a270:	197b      	adds	r3, r7, r5
 800a272:	781b      	ldrb	r3, [r3, #0]
}
 800a274:	0018      	movs	r0, r3
 800a276:	46bd      	mov	sp, r7
 800a278:	b007      	add	sp, #28
 800a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a27c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a284:	4b02      	ldr	r3, [pc, #8]	@ (800a290 <USBD_static_malloc+0x14>)
}
 800a286:	0018      	movs	r0, r3
 800a288:	46bd      	mov	sp, r7
 800a28a:	b002      	add	sp, #8
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	20000d8c 	.word	0x20000d8c

0800a294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

}
 800a29c:	46c0      	nop			@ (mov r8, r8)
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	b002      	add	sp, #8
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2a8:	f7f6 fcc4 	bl	8000c34 <SystemClock_Config>
}
 800a2ac:	46c0      	nop			@ (mov r8, r8)
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	0002      	movs	r2, r0
 800a2ba:	1dfb      	adds	r3, r7, #7
 800a2bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2be:	230f      	movs	r3, #15
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a2c6:	1dfb      	adds	r3, r7, #7
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d017      	beq.n	800a2fe <USBD_Get_USB_Status+0x4c>
 800a2ce:	dc1b      	bgt.n	800a308 <USBD_Get_USB_Status+0x56>
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d00f      	beq.n	800a2f4 <USBD_Get_USB_Status+0x42>
 800a2d4:	dc18      	bgt.n	800a308 <USBD_Get_USB_Status+0x56>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <USBD_Get_USB_Status+0x2e>
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d005      	beq.n	800a2ea <USBD_Get_USB_Status+0x38>
 800a2de:	e013      	b.n	800a308 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2e0:	230f      	movs	r3, #15
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
    break;
 800a2e8:	e013      	b.n	800a312 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ea:	230f      	movs	r3, #15
 800a2ec:	18fb      	adds	r3, r7, r3
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	701a      	strb	r2, [r3, #0]
    break;
 800a2f2:	e00e      	b.n	800a312 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2f4:	230f      	movs	r3, #15
 800a2f6:	18fb      	adds	r3, r7, r3
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	701a      	strb	r2, [r3, #0]
    break;
 800a2fc:	e009      	b.n	800a312 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2fe:	230f      	movs	r3, #15
 800a300:	18fb      	adds	r3, r7, r3
 800a302:	2202      	movs	r2, #2
 800a304:	701a      	strb	r2, [r3, #0]
    break;
 800a306:	e004      	b.n	800a312 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a308:	230f      	movs	r3, #15
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	2202      	movs	r2, #2
 800a30e:	701a      	strb	r2, [r3, #0]
    break;
 800a310:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800a312:	230f      	movs	r3, #15
 800a314:	18fb      	adds	r3, r7, r3
 800a316:	781b      	ldrb	r3, [r3, #0]
}
 800a318:	0018      	movs	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	b004      	add	sp, #16
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <memset>:
 800a320:	0003      	movs	r3, r0
 800a322:	1882      	adds	r2, r0, r2
 800a324:	4293      	cmp	r3, r2
 800a326:	d100      	bne.n	800a32a <memset+0xa>
 800a328:	4770      	bx	lr
 800a32a:	7019      	strb	r1, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	e7f9      	b.n	800a324 <memset+0x4>

0800a330 <__libc_init_array>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	2600      	movs	r6, #0
 800a334:	4c0c      	ldr	r4, [pc, #48]	@ (800a368 <__libc_init_array+0x38>)
 800a336:	4d0d      	ldr	r5, [pc, #52]	@ (800a36c <__libc_init_array+0x3c>)
 800a338:	1b64      	subs	r4, r4, r5
 800a33a:	10a4      	asrs	r4, r4, #2
 800a33c:	42a6      	cmp	r6, r4
 800a33e:	d109      	bne.n	800a354 <__libc_init_array+0x24>
 800a340:	2600      	movs	r6, #0
 800a342:	f000 f819 	bl	800a378 <_init>
 800a346:	4c0a      	ldr	r4, [pc, #40]	@ (800a370 <__libc_init_array+0x40>)
 800a348:	4d0a      	ldr	r5, [pc, #40]	@ (800a374 <__libc_init_array+0x44>)
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	42a6      	cmp	r6, r4
 800a350:	d105      	bne.n	800a35e <__libc_init_array+0x2e>
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	00b3      	lsls	r3, r6, #2
 800a356:	58eb      	ldr	r3, [r5, r3]
 800a358:	4798      	blx	r3
 800a35a:	3601      	adds	r6, #1
 800a35c:	e7ee      	b.n	800a33c <__libc_init_array+0xc>
 800a35e:	00b3      	lsls	r3, r6, #2
 800a360:	58eb      	ldr	r3, [r5, r3]
 800a362:	4798      	blx	r3
 800a364:	3601      	adds	r6, #1
 800a366:	e7f2      	b.n	800a34e <__libc_init_array+0x1e>
 800a368:	0800a4f4 	.word	0x0800a4f4
 800a36c:	0800a4f4 	.word	0x0800a4f4
 800a370:	0800a4f8 	.word	0x0800a4f8
 800a374:	0800a4f4 	.word	0x0800a4f4

0800a378 <_init>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr

0800a384 <_fini>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	46c0      	nop			@ (mov r8, r8)
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr
