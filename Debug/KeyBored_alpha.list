
KeyBored_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a148  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a208  0800a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a36c  0800a36c  0000c1ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a36c  0800a36c  0000c1ac  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a36c  0800a36c  0000c1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a36c  0800a36c  0000b36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a370  0800a370  0000b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ac  20000000  0800a374  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  200001ac  0800a520  0000c1ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce0  0800a520  0000cce0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b4a  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9b  00000000  00000000  0001ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00022bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d65  00000000  00000000  00023d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db92  00000000  00000000  00024afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198a2  00000000  00000000  0004268f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2d7  00000000  00000000  0005bf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c54  00000000  00000000  000f624c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f9ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ac 	.word	0x200001ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a1f0 	.word	0x0800a1f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b0 	.word	0x200001b0
 8000104:	0800a1f0 	.word	0x0800a1f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ProcessusKeys_Init>:

//Fonctions privees
void Process_KEYS(void);

void ProcessusKeys_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[PROCESSUS_KEYS_PHASE] = Process_KEYS;
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <ProcessusKeys_Init+0x10>)
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <ProcessusKeys_Init+0x14>)
 8000228:	609a      	str	r2, [r3, #8]
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200001dc 	.word	0x200001dc
 8000234:	08000239 	.word	0x08000239

08000238 <Process_KEYS>:

void Process_KEYS(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	static bool wasActionDone = false;
	static uint8_t i = 0;

	if(matriceDebouncing[4][5].state == PRESSED && wasActionDone == false)
 800023c:	4b17      	ldr	r3, [pc, #92]	@ (800029c <Process_KEYS+0x64>)
 800023e:	227a      	movs	r2, #122	@ 0x7a
 8000240:	5c9b      	ldrb	r3, [r3, r2]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d11a      	bne.n	800027c <Process_KEYS+0x44>
 8000246:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <Process_KEYS+0x68>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2201      	movs	r2, #1
 800024c:	4053      	eors	r3, r2
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d013      	beq.n	800027c <Process_KEYS+0x44>
	{
		i++;
 8000254:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <Process_KEYS+0x6c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	b2da      	uxtb	r2, r3
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <Process_KEYS+0x6c>)
 800025e:	701a      	strb	r2, [r3, #0]
		if(i > 2) { i = 0; }
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <Process_KEYS+0x6c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d902      	bls.n	800026e <Process_KEYS+0x36>
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <Process_KEYS+0x6c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]

		leds.phase = i;
 800026e:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <Process_KEYS+0x6c>)
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <Process_KEYS+0x70>)
 8000274:	709a      	strb	r2, [r3, #2]

		wasActionDone = true;
 8000276:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <Process_KEYS+0x68>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
	}
	if(matriceDebouncing[4][5].state == IDLE && wasActionDone == true)
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <Process_KEYS+0x64>)
 800027e:	227a      	movs	r2, #122	@ 0x7a
 8000280:	5c9b      	ldrb	r3, [r3, r2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d106      	bne.n	8000294 <Process_KEYS+0x5c>
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <Process_KEYS+0x68>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d002      	beq.n	8000294 <Process_KEYS+0x5c>
	{
		wasActionDone = false;
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <Process_KEYS+0x68>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
	}

}
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	200001ec 	.word	0x200001ec
 80002a0:	200001c8 	.word	0x200001c8
 80002a4:	200001c9 	.word	0x200001c9
 80002a8:	200001d8 	.word	0x200001d8

080002ac <Process_LEDS>:

//Fonctions privees
void Process_LEDS(void);

void Process_LEDS(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	static uint8_t compteur_LEDS;

	compteur_LEDS++;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <Process_LEDS+0x3c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <Process_LEDS+0x3c>)
 80002ba:	701a      	strb	r2, [r3, #0]

	if(compteur_LEDS > 30)
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <Process_LEDS+0x3c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b1e      	cmp	r3, #30
 80002c2:	d90e      	bls.n	80002e2 <Process_LEDS+0x36>
	{
		Processus_LEDS_execute[leds.phase](leds.hue, leds.brightness);
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <Process_LEDS+0x40>)
 80002c6:	789b      	ldrb	r3, [r3, #2]
 80002c8:	001a      	movs	r2, r3
 80002ca:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <Process_LEDS+0x44>)
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	58d3      	ldr	r3, [r2, r3]
 80002d0:	4a06      	ldr	r2, [pc, #24]	@ (80002ec <Process_LEDS+0x40>)
 80002d2:	7810      	ldrb	r0, [r2, #0]
 80002d4:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <Process_LEDS+0x40>)
 80002d6:	7852      	ldrb	r2, [r2, #1]
 80002d8:	0011      	movs	r1, r2
 80002da:	4798      	blx	r3
		compteur_LEDS = 0;
 80002dc:	4b02      	ldr	r3, [pc, #8]	@ (80002e8 <Process_LEDS+0x3c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
	}
}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200001db 	.word	0x200001db
 80002ec:	200001d8 	.word	0x200001d8
 80002f0:	200001cc 	.word	0x200001cc

080002f4 <ProcessusLEDS_init>:

LEDS leds;

//Fonctions publiques
void ProcessusLEDS_init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  serviceBaseDeTemps_execute[PROCESSUS_LEDS_PHASE] = Process_LEDS;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <ProcessusLEDS_init+0x34>)
 80002fa:	4a0c      	ldr	r2, [pc, #48]	@ (800032c <ProcessusLEDS_init+0x38>)
 80002fc:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_RAINBOW_PHASE] = effet_Rainbow;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <ProcessusLEDS_init+0x3c>)
 8000300:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <ProcessusLEDS_init+0x40>)
 8000302:	601a      	str	r2, [r3, #0]
  Processus_LEDS_execute[LEDS_BREATHING_PHASE] = effet_Breathing;
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <ProcessusLEDS_init+0x3c>)
 8000306:	4a0c      	ldr	r2, [pc, #48]	@ (8000338 <ProcessusLEDS_init+0x44>)
 8000308:	605a      	str	r2, [r3, #4]
  Processus_LEDS_execute[LEDS_STATIC_PHASE] = effet_StaticColor;
 800030a:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <ProcessusLEDS_init+0x3c>)
 800030c:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <ProcessusLEDS_init+0x48>)
 800030e:	609a      	str	r2, [r3, #8]
  leds.hue = ORANGE_HUE;
 8000310:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <ProcessusLEDS_init+0x4c>)
 8000312:	2214      	movs	r2, #20
 8000314:	701a      	strb	r2, [r3, #0]
  leds.phase = LEDS_STATIC_PHASE;
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <ProcessusLEDS_init+0x4c>)
 8000318:	2202      	movs	r2, #2
 800031a:	709a      	strb	r2, [r3, #2]
  leds.brightness = 20;
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <ProcessusLEDS_init+0x4c>)
 800031e:	2214      	movs	r2, #20
 8000320:	705a      	strb	r2, [r3, #1]
}
 8000322:	46c0      	nop			@ (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200001dc 	.word	0x200001dc
 800032c:	080002ad 	.word	0x080002ad
 8000330:	200001cc 	.word	0x200001cc
 8000334:	08000815 	.word	0x08000815
 8000338:	080008cd 	.word	0x080008cd
 800033c:	08000971 	.word	0x08000971
 8000340:	200001d8 	.word	0x200001d8

08000344 <serviceBaseDeTemps_gere>:
//Definitions de variables privees:
//pas de variables privees

//Definitions de fonctions privees:
void serviceBaseDeTemps_gere(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e00a      	b.n	8000368 <serviceBaseDeTemps_gere+0x24>
  {
    serviceBaseDeTemps_execute[i]();
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	4b09      	ldr	r3, [pc, #36]	@ (800037c <serviceBaseDeTemps_gere+0x38>)
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	58d3      	ldr	r3, [r2, r3]
 800035c:	4798      	blx	r3
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	3201      	adds	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b03      	cmp	r3, #3
 800036e:	d9f0      	bls.n	8000352 <serviceBaseDeTemps_gere+0xe>
  }
}
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	200001dc 	.word	0x200001dc

08000380 <serviceBaseDeTemps_initialise>:
//Definitions de variables publiques:
void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);

//Definitions de fonctions publiques:
void serviceBaseDeTemps_initialise(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e00a      	b.n	80003a4 <serviceBaseDeTemps_initialise+0x24>
  {
    serviceBaseDeTemps_execute[i] = doNothing;
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <serviceBaseDeTemps_initialise+0x3c>)
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	490a      	ldr	r1, [pc, #40]	@ (80003c0 <serviceBaseDeTemps_initialise+0x40>)
 8000398:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800039a:	1dfb      	adds	r3, r7, #7
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	3201      	adds	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d9f0      	bls.n	800038e <serviceBaseDeTemps_initialise+0xe>
  }
  piloteTimer14_execute = serviceBaseDeTemps_gere;
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <serviceBaseDeTemps_initialise+0x44>)
 80003ae:	4a06      	ldr	r2, [pc, #24]	@ (80003c8 <serviceBaseDeTemps_initialise+0x48>)
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b002      	add	sp, #8
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	200001dc 	.word	0x200001dc
 80003c0:	080009db 	.word	0x080009db
 80003c4:	20000514 	.word	0x20000514
 80003c8:	08000345 	.word	0x08000345

080003cc <Debounce_Switch_Matrix>:


KeyState matriceDebouncing[NUM_ROWS][NUM_COLS];

//Definitions fonctions publiques
void Debounce_Switch_Matrix(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++) {
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e07e      	b.n	80004d6 <Debounce_Switch_Matrix+0x10a>
        for (int col = 0; col < NUM_COLS; col++) {
 80003d8:	2300      	movs	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	e075      	b.n	80004ca <Debounce_Switch_Matrix+0xfe>
            bool physicalState = matrice[row][col];
 80003de:	1df9      	adds	r1, r7, #7
 80003e0:	4841      	ldr	r0, [pc, #260]	@ (80004e8 <Debounce_Switch_Matrix+0x11c>)
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	0013      	movs	r3, r2
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	18c2      	adds	r2, r0, r3
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	18d3      	adds	r3, r2, r3
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	700b      	strb	r3, [r1, #0]
            KeyState *key = &matriceDebouncing[row][col];
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	0013      	movs	r3, r2
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	189b      	adds	r3, r3, r2
 8000404:	005a      	lsls	r2, r3, #1
 8000406:	4b39      	ldr	r3, [pc, #228]	@ (80004ec <Debounce_Switch_Matrix+0x120>)
 8000408:	18d3      	adds	r3, r2, r3
 800040a:	603b      	str	r3, [r7, #0]

            switch (key->state) {
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d037      	beq.n	8000484 <Debounce_Switch_Matrix+0xb8>
 8000414:	dc56      	bgt.n	80004c4 <Debounce_Switch_Matrix+0xf8>
 8000416:	2b02      	cmp	r3, #2
 8000418:	d026      	beq.n	8000468 <Debounce_Switch_Matrix+0x9c>
 800041a:	dc53      	bgt.n	80004c4 <Debounce_Switch_Matrix+0xf8>
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <Debounce_Switch_Matrix+0x5a>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d00b      	beq.n	800043c <Debounce_Switch_Matrix+0x70>
 8000424:	e04e      	b.n	80004c4 <Debounce_Switch_Matrix+0xf8>
                case IDLE:
                    if (physicalState) {
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d043      	beq.n	80004b6 <Debounce_Switch_Matrix+0xea>
                        key->state = BOUNCE_PRESS;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	2200      	movs	r2, #0
 8000438:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 800043a:	e03c      	b.n	80004b6 <Debounce_Switch_Matrix+0xea>
                case BOUNCE_PRESS:
                    if (physicalState) {
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d00d      	beq.n	8000460 <Debounce_Switch_Matrix+0x94>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	785b      	ldrb	r3, [r3, #1]
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	705a      	strb	r2, [r3, #1]
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	785b      	ldrb	r3, [r3, #1]
 8000454:	2b04      	cmp	r3, #4
 8000456:	d930      	bls.n	80004ba <Debounce_Switch_Matrix+0xee>
                            key->state = PRESSED;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2202      	movs	r2, #2
 800045c:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = IDLE;
                    }
                    break;
 800045e:	e02c      	b.n	80004ba <Debounce_Switch_Matrix+0xee>
                        key->state = IDLE;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
                    break;
 8000466:	e028      	b.n	80004ba <Debounce_Switch_Matrix+0xee>
                case PRESSED:
                    if (!physicalState) {
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2201      	movs	r2, #1
 800046e:	4053      	eors	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d023      	beq.n	80004be <Debounce_Switch_Matrix+0xf2>
                        key->state = BOUNCE_RELEASE;
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2203      	movs	r2, #3
 800047a:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	2200      	movs	r2, #0
 8000480:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 8000482:	e01c      	b.n	80004be <Debounce_Switch_Matrix+0xf2>
                case BOUNCE_RELEASE:
                    if (!physicalState) {
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2201      	movs	r2, #1
 800048a:	4053      	eors	r3, r2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d00d      	beq.n	80004ae <Debounce_Switch_Matrix+0xe2>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	3301      	adds	r3, #1
 8000498:	b2da      	uxtb	r2, r3
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	705a      	strb	r2, [r3, #1]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	785b      	ldrb	r3, [r3, #1]
 80004a2:	2b04      	cmp	r3, #4
 80004a4:	d90d      	bls.n	80004c2 <Debounce_Switch_Matrix+0xf6>
                            key->state = IDLE;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = PRESSED;
                    }
                    break;
 80004ac:	e009      	b.n	80004c2 <Debounce_Switch_Matrix+0xf6>
                        key->state = PRESSED;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2202      	movs	r2, #2
 80004b2:	701a      	strb	r2, [r3, #0]
                    break;
 80004b4:	e005      	b.n	80004c2 <Debounce_Switch_Matrix+0xf6>
                    break;
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	e004      	b.n	80004c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	e002      	b.n	80004c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	e000      	b.n	80004c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80004c2:	46c0      	nop			@ (mov r8, r8)
        for (int col = 0; col < NUM_COLS; col++) {
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b0d      	cmp	r3, #13
 80004ce:	dd86      	ble.n	80003de <Debounce_Switch_Matrix+0x12>
    for (int row = 0; row < NUM_ROWS; row++) {
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b04      	cmp	r3, #4
 80004da:	dc00      	bgt.n	80004de <Debounce_Switch_Matrix+0x112>
 80004dc:	e77c      	b.n	80003d8 <Debounce_Switch_Matrix+0xc>
            }
        }
    }
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000278 	.word	0x20000278
 80004ec:	200001ec 	.word	0x200001ec

080004f0 <InterfaceDebouncing_Init>:

void InterfaceDebouncing_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[DEBOUNCE_MATRICE_PHASE] = Debounce_Switch_Matrix;
 80004f4:	4b02      	ldr	r3, [pc, #8]	@ (8000500 <InterfaceDebouncing_Init+0x10>)
 80004f6:	4a03      	ldr	r2, [pc, #12]	@ (8000504 <InterfaceDebouncing_Init+0x14>)
 80004f8:	605a      	str	r2, [r3, #4]
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200001dc 	.word	0x200001dc
 8000504:	080003cd 	.word	0x080003cd

08000508 <ScanMatrice>:
//
//		Reset_Column(col);
//	}
//}
void ScanMatrice(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	Set_All_Rows();
 800050e:	f000 fcd3 	bl	8000eb8 <Set_All_Rows>

	for (int row = 0; row < NUM_ROWS; row++)
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e030      	b.n	800057a <ScanMatrice+0x72>
	{
		Reset_Row(row);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	b29b      	uxth	r3, r3
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fcb3 	bl	8000e88 <Reset_Row>

		for(int col = 0; col < NUM_COLS; col++)
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	e01d      	b.n	8000564 <ScanMatrice+0x5c>
		{
			matrice[row][col] = (Read_Col(col) == 0) ? 1 : 0;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fc77 	bl	8000e20 <Read_Col>
 8000532:	0003      	movs	r3, r0
 8000534:	1e5a      	subs	r2, r3, #1
 8000536:	4193      	sbcs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2201      	movs	r2, #1
 800053c:	4053      	eors	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	1c1a      	adds	r2, r3, #0
 8000542:	2301      	movs	r3, #1
 8000544:	4013      	ands	r3, r2
 8000546:	b2d8      	uxtb	r0, r3
 8000548:	4910      	ldr	r1, [pc, #64]	@ (800058c <ScanMatrice+0x84>)
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	0013      	movs	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	18ca      	adds	r2, r1, r3
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	1c02      	adds	r2, r0, #0
 800055c:	701a      	strb	r2, [r3, #0]
		for(int col = 0; col < NUM_COLS; col++)
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b0d      	cmp	r3, #13
 8000568:	ddde      	ble.n	8000528 <ScanMatrice+0x20>
		}

		Set_Row(row);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	b29b      	uxth	r3, r3
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fc72 	bl	8000e58 <Set_Row>
	for (int row = 0; row < NUM_ROWS; row++)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b04      	cmp	r3, #4
 800057e:	ddcb      	ble.n	8000518 <ScanMatrice+0x10>
	}
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	20000278 	.word	0x20000278

08000590 <InterfaceMatrice_Init>:

void InterfaceMatrice_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[SCAN_MATRICE_PHASE] = ScanMatrice;
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <InterfaceMatrice_Init+0x10>)
 8000596:	4a03      	ldr	r2, [pc, #12]	@ (80005a4 <InterfaceMatrice_Init+0x14>)
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200001dc 	.word	0x200001dc
 80005a4:	08000509 	.word	0x08000509

080005a8 <hsl_to_rgb>:
  55, 56, 57, 58, 59, 60, 61, 62, 63
};


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	0004      	movs	r4, r0
 80005b0:	0008      	movs	r0, r1
 80005b2:	0011      	movs	r1, r2
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	1c22      	adds	r2, r4, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	1c02      	adds	r2, r0, #0
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	1d7b      	adds	r3, r7, #5
 80005c2:	1c0a      	adds	r2, r1, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	if(l == 0) return 0;
 80005c6:	1d7b      	adds	r3, r7, #5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <hsl_to_rgb+0x2a>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e119      	b.n	8000806 <hsl_to_rgb+0x25e>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80005d2:	1d7b      	adds	r3, r7, #5
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	210c      	movs	r1, #12
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	801a      	strh	r2, [r3, #0]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80005e2:	1d7b      	adds	r3, r7, #5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0c      	blt.n	8000606 <hsl_to_rgb+0x5e>
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	1dba      	adds	r2, r7, #6
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	4353      	muls	r3, r2
 80005fa:	121b      	asrs	r3, r3, #8
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	2313      	movs	r3, #19
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e00f      	b.n	8000626 <hsl_to_rgb+0x7e>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000606:	230c      	movs	r3, #12
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	b29b      	uxth	r3, r3
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	1dba      	adds	r2, r7, #6
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	4353      	muls	r3, r2
 800061c:	121b      	asrs	r3, r3, #8
 800061e:	b2da      	uxtb	r2, r3
 8000620:	2313      	movs	r3, #19
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	701a      	strb	r2, [r3, #0]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	1c1a      	adds	r2, r3, #0
 800062e:	1c13      	adds	r3, r2, #0
 8000630:	18db      	adds	r3, r3, r3
 8000632:	189b      	adds	r3, r3, r2
 8000634:	18db      	adds	r3, r3, r3
 8000636:	b29a      	uxth	r2, r3
 8000638:	210a      	movs	r1, #10
 800063a:	187b      	adds	r3, r7, r1
 800063c:	801a      	strh	r2, [r3, #0]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 800063e:	187b      	adds	r3, r7, r1
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	2014      	movs	r0, #20
 8000648:	183b      	adds	r3, r7, r0
 800064a:	701a      	strb	r2, [r3, #0]
	h1 = lo + 1;
 800064c:	183b      	adds	r3, r7, r0
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3301      	adds	r3, #1
 8000654:	b29a      	uxth	r2, r3
 8000656:	200e      	movs	r0, #14
 8000658:	183b      	adds	r3, r7, r0
 800065a:	801a      	strh	r2, [r3, #0]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 800065c:	187b      	adds	r3, r7, r1
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	001a      	movs	r2, r3
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4013      	ands	r3, r2
 800066a:	d10e      	bne.n	800068a <hsl_to_rgb+0xe2>
 800066c:	183b      	adds	r3, r7, r0
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	001a      	movs	r2, r3
 8000674:	2313      	movs	r3, #19
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4353      	muls	r3, r2
 800067e:	121b      	asrs	r3, r3, #8
 8000680:	b2da      	uxtb	r2, r3
 8000682:	2312      	movs	r3, #18
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e011      	b.n	80006ae <hsl_to_rgb+0x106>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 800068a:	230e      	movs	r3, #14
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	001a      	movs	r2, r3
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	2213      	movs	r2, #19
 800069c:	18ba      	adds	r2, r7, r2
 800069e:	7812      	ldrb	r2, [r2, #0]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	4353      	muls	r3, r2
 80006a4:	121b      	asrs	r3, r3, #8
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	2312      	movs	r3, #18
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	701a      	strb	r2, [r3, #0]

	m = l - (c >> 1);
 80006ae:	2313      	movs	r3, #19
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	085b      	lsrs	r3, r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	1d7a      	adds	r2, r7, #5
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	2311      	movs	r3, #17
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	701a      	strb	r2, [r3, #0]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 80006c8:	230a      	movs	r3, #10
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d863      	bhi.n	80007a0 <hsl_to_rgb+0x1f8>
 80006d8:	009a      	lsls	r2, r3, #2
 80006da:	4b4d      	ldr	r3, [pc, #308]	@ (8000810 <hsl_to_rgb+0x268>)
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	469f      	mov	pc, r3
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80006e2:	2313      	movs	r3, #19
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	2317      	movs	r3, #23
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	2312      	movs	r3, #18
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	2316      	movs	r3, #22
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	2315      	movs	r3, #21
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e05e      	b.n	80007c6 <hsl_to_rgb+0x21e>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000708:	2312      	movs	r3, #18
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	2317      	movs	r3, #23
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	2313      	movs	r3, #19
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	2316      	movs	r3, #22
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	2315      	movs	r3, #21
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e04b      	b.n	80007c6 <hsl_to_rgb+0x21e>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 800072e:	2317      	movs	r3, #23
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	2313      	movs	r3, #19
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	2316      	movs	r3, #22
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	2312      	movs	r3, #18
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	2315      	movs	r3, #21
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e038      	b.n	80007c6 <hsl_to_rgb+0x21e>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8000754:	2317      	movs	r3, #23
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	2312      	movs	r3, #18
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	2316      	movs	r3, #22
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	2313      	movs	r3, #19
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	2315      	movs	r3, #21
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e025      	b.n	80007c6 <hsl_to_rgb+0x21e>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800077a:	2312      	movs	r3, #18
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	2317      	movs	r3, #23
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	2316      	movs	r3, #22
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	2313      	movs	r3, #19
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	2315      	movs	r3, #21
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e012      	b.n	80007c6 <hsl_to_rgb+0x21e>
	 default: r = c; g = 0; b = x; break; // M to R
 80007a0:	2313      	movs	r3, #19
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	2317      	movs	r3, #23
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	2316      	movs	r3, #22
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	2312      	movs	r3, #18
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	2315      	movs	r3, #21
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	46c0      	nop			@ (mov r8, r8)
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80007c6:	2317      	movs	r3, #23
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	001a      	movs	r2, r3
 80007d0:	2011      	movs	r0, #17
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	041a      	lsls	r2, r3, #16
 80007dc:	2316      	movs	r3, #22
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	0019      	movs	r1, r3
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	18cb      	adds	r3, r1, r3
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2315      	movs	r3, #21
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	0019      	movs	r1, r3
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	18cb      	adds	r3, r1, r3
 8000804:	4313      	orrs	r3, r2
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b007      	add	sp, #28
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	0800a298 	.word	0x0800a298

08000814 <effet_Rainbow>:


void effet_Rainbow(uint8_t hue, uint8_t brightness)
{
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	1dbb      	adds	r3, r7, #6
 8000822:	1c0a      	adds	r2, r1, #0
 8000824:	701a      	strb	r2, [r3, #0]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 8000826:	230e      	movs	r3, #14
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2212      	movs	r2, #18
 800082c:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 800082e:	230f      	movs	r3, #15
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e031      	b.n	800089c <effet_Rainbow+0x88>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 8000838:	250f      	movs	r5, #15
 800083a:	197b      	adds	r3, r7, r5
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	260d      	movs	r6, #13
 8000840:	19bb      	adds	r3, r7, r6
 8000842:	4920      	ldr	r1, [pc, #128]	@ (80008c4 <effet_Rainbow+0xb0>)
 8000844:	5c8a      	ldrb	r2, [r1, r2]
 8000846:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, brightness);
 8000848:	197b      	adds	r3, r7, r5
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	223f      	movs	r2, #63	@ 0x3f
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	220e      	movs	r2, #14
 8000854:	18ba      	adds	r2, r7, r2
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	4353      	muls	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <effet_Rainbow+0xb4>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	b2d8      	uxtb	r0, r3
 8000868:	1dbb      	adds	r3, r7, #6
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	001a      	movs	r2, r3
 800086e:	21ff      	movs	r1, #255	@ 0xff
 8000870:	f7ff fe9a 	bl	80005a8 <hsl_to_rgb>
 8000874:	0003      	movs	r3, r0
 8000876:	60bb      	str	r3, [r7, #8]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b2da      	uxtb	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	b2dc      	uxtb	r4, r3
 8000888:	19bb      	adds	r3, r7, r6
 800088a:	7818      	ldrb	r0, [r3, #0]
 800088c:	0023      	movs	r3, r4
 800088e:	f000 fb3d 	bl	8000f0c <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8000892:	197b      	adds	r3, r7, r5
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	197b      	adds	r3, r7, r5
 8000898:	3201      	adds	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	230f      	movs	r3, #15
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a4:	d9c8      	bls.n	8000838 <effet_Rainbow+0x24>
	}

	// Write to LED
	++angle;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <effet_Rainbow+0xb4>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <effet_Rainbow+0xb4>)
 80008b6:	701a      	strb	r2, [r3, #0]
	led_render();
 80008b8:	f000 fb92 	bl	8000fe0 <led_render>
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b005      	add	sp, #20
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	0800a258 	.word	0x0800a258
 80008c8:	200002be 	.word	0x200002be

080008cc <effet_Breathing>:


void effet_Breathing(uint8_t hue, uint8_t brightness)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	1c0a      	adds	r2, r1, #0
 80008dc:	701a      	strb	r2, [r3, #0]
    static uint8_t current_brightness = 0;
    static int8_t direction = 1;

    // Adjust brightness
    current_brightness += direction;
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <effet_Breathing+0x9c>)
 80008e0:	781a      	ldrb	r2, [r3, #0]
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <effet_Breathing+0xa0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <effet_Breathing+0x9c>)
 80008f0:	701a      	strb	r2, [r3, #0]
    if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/brightness) direction = -direction;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <effet_Breathing+0x9c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <effet_Breathing+0x3a>
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <effet_Breathing+0x9c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	1dba      	adds	r2, r7, #6
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d108      	bne.n	8000918 <effet_Breathing+0x4c>
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <effet_Breathing+0xa0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	425b      	negs	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	b25a      	sxtb	r2, r3
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <effet_Breathing+0xa0>)
 8000916:	701a      	strb	r2, [r3, #0]

    // Set all LEDs to the same color with fading
    uint32_t rgb = hsl_to_rgb(hue, 255, current_brightness); // Static hue
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <effet_Breathing+0x9c>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	21ff      	movs	r1, #255	@ 0xff
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fe40 	bl	80005a8 <hsl_to_rgb>
 8000928:	0003      	movs	r3, r0
 800092a:	60fb      	str	r3, [r7, #12]
    uint8_t r = (rgb >> 16) & 0xFF;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	0c1a      	lsrs	r2, r3, #16
 8000930:	200b      	movs	r0, #11
 8000932:	183b      	adds	r3, r7, r0
 8000934:	701a      	strb	r2, [r3, #0]
    uint8_t g = (rgb >> 8) & 0xFF;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	0a1a      	lsrs	r2, r3, #8
 800093a:	210a      	movs	r1, #10
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
    uint8_t b = rgb & 0xFF;
 8000940:	2409      	movs	r4, #9
 8000942:	193b      	adds	r3, r7, r4
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	701a      	strb	r2, [r3, #0]

    led_set_all_RGB(r, g, b);
 8000948:	193b      	adds	r3, r7, r4
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	187b      	adds	r3, r7, r1
 800094e:	7819      	ldrb	r1, [r3, #0]
 8000950:	183b      	adds	r3, r7, r0
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fb1b 	bl	8000f90 <led_set_all_RGB>
    led_render();
 800095a:	f000 fb41 	bl	8000fe0 <led_render>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b005      	add	sp, #20
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	200002bf 	.word	0x200002bf
 800096c:	20000000 	.word	0x20000000

08000970 <effet_StaticColor>:



void effet_StaticColor(uint8_t hue, uint8_t brightness)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	1c0a      	adds	r2, r1, #0
 8000980:	701a      	strb	r2, [r3, #0]
	uint32_t rgb_color = hsl_to_rgb(hue, 255, brightness);
 8000982:	1dbb      	adds	r3, r7, #6
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	21ff      	movs	r1, #255	@ 0xff
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fe0b 	bl	80005a8 <hsl_to_rgb>
 8000992:	0003      	movs	r3, r0
 8000994:	60fb      	str	r3, [r7, #12]
	led_set_all_RGB((rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	0c1b      	lsrs	r3, r3, #16
 800099a:	b2d8      	uxtb	r0, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	0019      	movs	r1, r3
 80009a8:	f000 faf2 	bl	8000f90 <led_set_all_RGB>
	led_render();
 80009ac:	f000 fb18 	bl	8000fe0 <led_render>
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Main_Init>:


keyboardReportDes HIDkeyboard = {0, 0, 0, 0, 0, 0, 0, 0};

void Main_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	piloteTimer14_initialise();
 80009bc:	f000 fcf0 	bl	80013a0 <piloteTimer14_initialise>
	serviceBaseDeTemps_initialise();
 80009c0:	f7ff fcde 	bl	8000380 <serviceBaseDeTemps_initialise>
	InterfaceMatrice_Init();
 80009c4:	f7ff fde4 	bl	8000590 <InterfaceMatrice_Init>
	InterfaceDebouncing_Init();
 80009c8:	f7ff fd92 	bl	80004f0 <InterfaceDebouncing_Init>
	ProcessusKeys_Init();
 80009cc:	f7ff fc28 	bl	8000220 <ProcessusKeys_Init>
	ProcessusLEDS_init();
 80009d0:	f7ff fc90 	bl	80002f4 <ProcessusLEDS_init>
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <doNothing>:

void doNothing(void){}
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e8:	f000 fe94 	bl	8001714 <HAL_Init>

  /* USER CODE BEGIN Init */

  Main_Init();
 80009ec:	f7ff ffe4 	bl	80009b8 <Main_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f810 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 f9a2 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80009f8:	f000 f982 	bl	8000d00 <MX_DMA_Init>
  MX_TIM2_Init();
 80009fc:	f000 f85e 	bl	8000abc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a00:	f000 f8da 	bl	8000bb8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000a04:	f008 ff12 	bl	800982c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000a08:	f000 f954 	bl	8000cb4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  piloteTimer14_permetLesInterruptions();
 8000a0c:	f000 fcbc 	bl	8001388 <piloteTimer14_permetLesInterruptions>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	e7fd      	b.n	8000a10 <main+0x2c>

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b099      	sub	sp, #100	@ 0x64
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	242c      	movs	r4, #44	@ 0x2c
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2334      	movs	r3, #52	@ 0x34
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f009 fbb7 	bl	800a198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2a:	231c      	movs	r3, #28
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2310      	movs	r3, #16
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f009 fbaf 	bl	800a198 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	231c      	movs	r3, #28
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f009 fba8 	bl	800a198 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2201      	movs	r2, #1
 8000a52:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f003 f955 	bl	8003d0c <HAL_RCC_OscConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000a66:	f000 f9d5 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	211c      	movs	r1, #28
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2207      	movs	r2, #7
 8000a70:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2203      	movs	r2, #3
 8000a76:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2101      	movs	r1, #1
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f003 fcc5 	bl	8004418 <HAL_RCC_ClockConfig>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a92:	f000 f9bf 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	0292      	lsls	r2, r2, #10
 8000a9c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f003 fe02 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ab0:	f000 f9b0 	bl	8000e14 <Error_Handler>
  }
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b019      	add	sp, #100	@ 0x64
 8000aba:	bd90      	pop	{r4, r7, pc}

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	2328      	movs	r3, #40	@ 0x28
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2310      	movs	r3, #16
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f009 fb63 	bl	800a198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2308      	movs	r3, #8
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f009 fb5b 	bl	800a198 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	231c      	movs	r3, #28
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f009 fb54 	bl	800a198 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000af2:	2280      	movs	r2, #128	@ 0x80
 8000af4:	05d2      	lsls	r2, r2, #23
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8000b04:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b06:	223b      	movs	r2, #59	@ 0x3b
 8000b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f003 fec7 	bl	80048ac <HAL_TIM_Base_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 f977 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	2128      	movs	r1, #40	@ 0x28
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	0152      	lsls	r2, r2, #5
 8000b2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 fbfc 	bl	8005334 <HAL_TIM_ConfigClockSource>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000b40:	f000 f968 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f003 ff52 	bl	80049f0 <HAL_TIM_PWM_Init>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 f960 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2120      	movs	r1, #32
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b62:	187a      	adds	r2, r7, r1
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f005 f8f3 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000b72:	f000 f94f 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2260      	movs	r2, #96	@ 0x60
 8000b7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	1d39      	adds	r1, r7, #4
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f004 fb07 	bl	80051a8 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000b9e:	f000 f939 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <MX_TIM2_Init+0xf8>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fcd5 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b00e      	add	sp, #56	@ 0x38
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	200002c0 	.word	0x200002c0

08000bb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	@ 0x38
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	2328      	movs	r3, #40	@ 0x28
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f009 fae5 	bl	800a198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	2320      	movs	r3, #32
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f009 fadd 	bl	800a198 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	0018      	movs	r0, r3
 8000be2:	231c      	movs	r3, #28
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f009 fad6 	bl	800a198 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000bee:	4a30      	ldr	r2, [pc, #192]	@ (8000cb0 <MX_TIM3_Init+0xf8>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c00:	223b      	movs	r2, #59	@ 0x3b
 8000c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 fe4a 	bl	80048ac <HAL_TIM_Base_Init>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c1c:	f000 f8fa 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	2128      	movs	r1, #40	@ 0x28
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	0152      	lsls	r2, r2, #5
 8000c28:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f004 fb7f 	bl	8005334 <HAL_TIM_ConfigClockSource>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c3a:	f000 f8eb 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c40:	0018      	movs	r0, r3
 8000c42:	f003 fed5 	bl	80049f0 <HAL_TIM_PWM_Init>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c4a:	f000 f8e3 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2120      	movs	r1, #32
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5c:	187a      	adds	r2, r7, r1
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c60:	0011      	movs	r1, r2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f005 f876 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000c6c:	f000 f8d2 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2260      	movs	r2, #96	@ 0x60
 8000c74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c88:	1d39      	adds	r1, r7, #4
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f004 fa8a 	bl	80051a8 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000c98:	f000 f8bc 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <MX_TIM3_Init+0xf4>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fc58 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b00e      	add	sp, #56	@ 0x38
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000308 	.word	0x20000308
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <MX_TIM14_Init+0x44>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <MX_TIM14_Init+0x48>)
 8000cce:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <MX_TIM14_Init+0x40>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f003 fde4 	bl	80048ac <HAL_TIM_Base_Init>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ce8:	f000 f894 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000350 	.word	0x20000350
 8000cf8:	40002000 	.word	0x40002000
 8000cfc:	0000ffff 	.word	0x0000ffff

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_DMA_Init+0x38>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	2201      	movs	r2, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	200b      	movs	r0, #11
 8000d24:	f000 fe06 	bl	8001934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000d28:	200b      	movs	r0, #11
 8000d2a:	f000 fe18 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	40021000 	.word	0x40021000

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	240c      	movs	r4, #12
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	0018      	movs	r0, r3
 8000d48:	2314      	movs	r3, #20
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f009 fa23 	bl	800a198 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d54:	695a      	ldr	r2, [r3, #20]
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	0289      	lsls	r1, r1, #10
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	02c9      	lsls	r1, r1, #11
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_GPIO_Init+0xcc>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	02db      	lsls	r3, r3, #11
 8000d84:	4013      	ands	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8000d8a:	2390      	movs	r3, #144	@ 0x90
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2200      	movs	r2, #0
 8000d90:	211f      	movs	r1, #31
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 f973 	bl	800207e <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	601a      	str	r2, [r3, #0]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2201      	movs	r2, #1
 8000da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	193a      	adds	r2, r7, r4
 8000db2:	2390      	movs	r3, #144	@ 0x90
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 ffcb 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OS1_Pin OS2_Pin OS3_Pin */
  GPIO_InitStruct.Pin = OS1_Pin|OS2_Pin|OS3_Pin;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	22e0      	movs	r2, #224	@ 0xe0
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	193a      	adds	r2, r7, r4
 8000dd4:	2390      	movs	r3, #144	@ 0x90
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 ffba 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL11_Pin
                           COL12_Pin COL13_Pin COL14_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           COL9_Pin COL10_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL11_Pin
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <MX_GPIO_Init+0xd0>)
 8000de4:	601a      	str	r2, [r3, #0]
                          |COL12_Pin|COL13_Pin|COL14_Pin|COL4_Pin
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |COL9_Pin|COL10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2201      	movs	r2, #1
 8000df0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <MX_GPIO_Init+0xd4>)
 8000df6:	0019      	movs	r1, r3
 8000df8:	0010      	movs	r0, r2
 8000dfa:	f000 ffab 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b009      	add	sp, #36	@ 0x24
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	00003fff 	.word	0x00003fff
 8000e10:	48000400 	.word	0x48000400

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <Read_Col>:

uint16_t col_pin[NUM_COLS] = { COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,
							COL10, COL11, COL12, COL13, COL14 };

bool Read_Col(uint16_t col_index)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	801a      	strh	r2, [r3, #0]
	return HAL_GPIO_ReadPin(COL_PORT, col_pin[col_index]);
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	881a      	ldrh	r2, [r3, #0]
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <Read_Col+0x30>)
 8000e32:	0052      	lsls	r2, r2, #1
 8000e34:	5ad3      	ldrh	r3, [r2, r3]
 8000e36:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <Read_Col+0x34>)
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	f001 f902 	bl	8002044 <HAL_GPIO_ReadPin>
 8000e40:	0003      	movs	r3, r0
 8000e42:	1e5a      	subs	r2, r3, #1
 8000e44:	4193      	sbcs	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000004 	.word	0x20000004
 8000e54:	48000400 	.word	0x48000400

08000e58 <Set_Row>:
#include "pilote_ROW.h"

uint16_t row_pin[NUM_ROWS] = { ROW1, ROW2, ROW3, ROW4, ROW5};

void Set_Row(uint16_t row_index)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_SET);
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <Set_Row+0x2c>)
 8000e6a:	0052      	lsls	r2, r2, #1
 8000e6c:	5ad1      	ldrh	r1, [r2, r3]
 8000e6e:	2390      	movs	r3, #144	@ 0x90
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	2201      	movs	r2, #1
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f902 	bl	800207e <HAL_GPIO_WritePin>
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	20000020 	.word	0x20000020

08000e88 <Reset_Row>:

void Reset_Row(uint16_t row_index)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	0002      	movs	r2, r0
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_RESET);
 8000e94:	1dbb      	adds	r3, r7, #6
 8000e96:	881a      	ldrh	r2, [r3, #0]
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <Reset_Row+0x2c>)
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	5ad1      	ldrh	r1, [r2, r3]
 8000e9e:	2390      	movs	r3, #144	@ 0x90
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 f8ea 	bl	800207e <HAL_GPIO_WritePin>
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	20000020 	.word	0x20000020

08000eb8 <Set_All_Rows>:

void Set_All_Rows(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	e007      	b.n	8000ed4 <Set_All_Rows+0x1c>
	{
		Set_Row(i);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ffc5 	bl	8000e58 <Set_Row>
	for(int i = 0; i < NUM_ROWS; i++)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	ddf4      	ble.n	8000ec4 <Set_All_Rows+0xc>
	}
}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <scale8>:
// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	1c0a      	adds	r2, r1, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
  return ((uint16_t)x * scale) >> 8;
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	1dba      	adds	r2, r7, #6
 8000efc:	7812      	ldrb	r2, [r2, #0]
 8000efe:	4353      	muls	r3, r2
 8000f00:	121b      	asrs	r3, r3, #8
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <led_set_RGB>:


// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0005      	movs	r5, r0
 8000f14:	000c      	movs	r4, r1
 8000f16:	0010      	movs	r0, r2
 8000f18:	0019      	movs	r1, r3
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	1c2a      	adds	r2, r5, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	1dbb      	adds	r3, r7, #6
 8000f22:	1c22      	adds	r2, r4, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	1d7b      	adds	r3, r7, #5
 8000f28:	1c02      	adds	r2, r0, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	1c0a      	adds	r2, r1, #0
 8000f30:	701a      	strb	r2, [r3, #0]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	0013      	movs	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	189c      	adds	r4, r3, r2
 8000f3c:	1d7b      	adds	r3, r7, #5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	21b0      	movs	r1, #176	@ 0xb0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ffce 	bl	8000ee4 <scale8>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <led_set_RGB+0x80>)
 8000f4e:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	0013      	movs	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	189b      	adds	r3, r3, r2
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <led_set_RGB+0x80>)
 8000f5e:	1db9      	adds	r1, r7, #6
 8000f60:	7809      	ldrb	r1, [r1, #0]
 8000f62:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	0013      	movs	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	189b      	adds	r3, r3, r2
 8000f6e:	1c9c      	adds	r4, r3, #2
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	21f0      	movs	r1, #240	@ 0xf0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ffb4 	bl	8000ee4 <scale8>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	001a      	movs	r2, r3
 8000f80:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <led_set_RGB+0x80>)
 8000f82:	551a      	strb	r2, [r3, r4]
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	20000420 	.word	0x20000420

08000f90 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	0004      	movs	r4, r0
 8000f98:	0008      	movs	r0, r1
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	1c22      	adds	r2, r4, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	1c02      	adds	r2, r0, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	1d7b      	adds	r3, r7, #5
 8000faa:	1c0a      	adds	r2, r1, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < LED_CNT; ++i) led_set_RGB(i, r, g, b);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e00d      	b.n	8000fd0 <led_set_all_RGB+0x40>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b2d8      	uxtb	r0, r3
 8000fb8:	1d7b      	adds	r3, r7, #5
 8000fba:	781c      	ldrb	r4, [r3, #0]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	7819      	ldrb	r1, [r3, #0]
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	f7ff ffa1 	bl	8000f0c <led_set_RGB>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fd4:	d9ee      	bls.n	8000fb4 <led_set_all_RGB+0x24>
}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b005      	add	sp, #20
 8000fde:	bd90      	pop	{r4, r7, pc}

08000fe0 <led_render>:

// Shuttle the data to the LEDs!
void led_render()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 8000fe6:	4b50      	ldr	r3, [pc, #320]	@ (8001128 <led_render+0x148>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <led_render+0x1a>
 8000fee:	4b4f      	ldr	r3, [pc, #316]	@ (800112c <led_render+0x14c>)
 8000ff0:	2221      	movs	r2, #33	@ 0x21
 8000ff2:	5c9b      	ldrb	r3, [r3, r2]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d01a      	beq.n	8001030 <led_render+0x50>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e009      	b.n	8001016 <led_render+0x36>
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4a4a      	ldr	r2, [pc, #296]	@ (8001130 <led_render+0x150>)
 8001008:	2100      	movs	r1, #0
 800100a:	54d1      	strb	r1, [r2, r3]
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	3201      	adds	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b2f      	cmp	r3, #47	@ 0x2f
 800101c:	d9f1      	bls.n	8001002 <led_render+0x22>
    wr_buf_p = 0;
 800101e:	4b42      	ldr	r3, [pc, #264]	@ (8001128 <led_render+0x148>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001024:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <led_render+0x154>)
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f003 feef 	bl	8004e0c <HAL_TIM_PWM_Stop_DMA>
    return;
 800102e:	e078      	b.n	8001122 <led_render+0x142>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e069      	b.n	800110a <led_render+0x12a>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001036:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <led_render+0x158>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	001a      	movs	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd01      	ble.n	800104e <led_render+0x6e>
 800104a:	2126      	movs	r1, #38	@ 0x26
 800104c:	e000      	b.n	8001050 <led_render+0x70>
 800104e:	2113      	movs	r1, #19
 8001050:	4a37      	ldr	r2, [pc, #220]	@ (8001130 <led_render+0x150>)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	1c0a      	adds	r2, r1, #0
 8001058:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800105a:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <led_render+0x158>)
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	001a      	movs	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	dd01      	ble.n	8001072 <led_render+0x92>
 800106e:	2126      	movs	r1, #38	@ 0x26
 8001070:	e000      	b.n	8001074 <led_render+0x94>
 8001072:	2113      	movs	r1, #19
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3308      	adds	r3, #8
 8001078:	4a2d      	ldr	r2, [pc, #180]	@ (8001130 <led_render+0x150>)
 800107a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <led_render+0x158>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	001a      	movs	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd01      	ble.n	8001094 <led_render+0xb4>
 8001090:	2126      	movs	r1, #38	@ 0x26
 8001092:	e000      	b.n	8001096 <led_render+0xb6>
 8001094:	2113      	movs	r1, #19
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3310      	adds	r3, #16
 800109a:	4a25      	ldr	r2, [pc, #148]	@ (8001130 <led_render+0x150>)
 800109c:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <led_render+0x158>)
 80010a0:	78db      	ldrb	r3, [r3, #3]
 80010a2:	001a      	movs	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd01      	ble.n	80010b6 <led_render+0xd6>
 80010b2:	2126      	movs	r1, #38	@ 0x26
 80010b4:	e000      	b.n	80010b8 <led_render+0xd8>
 80010b6:	2113      	movs	r1, #19
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3318      	adds	r3, #24
 80010bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <led_render+0x150>)
 80010be:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80010c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <led_render+0x158>)
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	001a      	movs	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd01      	ble.n	80010d8 <led_render+0xf8>
 80010d4:	2126      	movs	r1, #38	@ 0x26
 80010d6:	e000      	b.n	80010da <led_render+0xfa>
 80010d8:	2113      	movs	r1, #19
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3320      	adds	r3, #32
 80010de:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <led_render+0x150>)
 80010e0:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <led_render+0x158>)
 80010e4:	795b      	ldrb	r3, [r3, #5]
 80010e6:	001a      	movs	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd01      	ble.n	80010fa <led_render+0x11a>
 80010f6:	2126      	movs	r1, #38	@ 0x26
 80010f8:	e000      	b.n	80010fc <led_render+0x11c>
 80010fa:	2113      	movs	r1, #19
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3328      	adds	r3, #40	@ 0x28
 8001100:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <led_render+0x150>)
 8001102:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b07      	cmp	r3, #7
 800110e:	d992      	bls.n	8001036 <led_render+0x56>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <led_render+0x150>)
 8001112:	4808      	ldr	r0, [pc, #32]	@ (8001134 <led_render+0x154>)
 8001114:	2330      	movs	r3, #48	@ 0x30
 8001116:	2100      	movs	r1, #0
 8001118:	f003 fcc2 	bl	8004aa0 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <led_render+0x148>)
 800111e:	2202      	movs	r2, #2
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000510 	.word	0x20000510
 800112c:	20000398 	.word	0x20000398
 8001130:	200004e0 	.word	0x200004e0
 8001134:	200002c0 	.word	0x200002c0
 8001138:	20000420 	.word	0x20000420

0800113c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001144:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b3f      	cmp	r3, #63	@ 0x3f
 800114a:	d853      	bhi.n	80011f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e047      	b.n	80011e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001152:	4b39      	ldr	r3, [pc, #228]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	0013      	movs	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	189b      	adds	r3, r3, r2
 800115c:	4a37      	ldr	r2, [pc, #220]	@ (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	001a      	movs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd01      	ble.n	8001174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001170:	2126      	movs	r1, #38	@ 0x26
 8001172:	e000      	b.n	8001176 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001174:	2113      	movs	r1, #19
 8001176:	4a32      	ldr	r2, [pc, #200]	@ (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	18d3      	adds	r3, r2, r3
 800117c:	1c0a      	adds	r2, r1, #0
 800117e:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001180:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	0013      	movs	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	189b      	adds	r3, r3, r2
 800118a:	3301      	adds	r3, #1
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	001a      	movs	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd01      	ble.n	80011a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80011a0:	2126      	movs	r1, #38	@ 0x26
 80011a2:	e000      	b.n	80011a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 80011a4:	2113      	movs	r1, #19
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3308      	adds	r3, #8
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80011ac:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80011ae:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	0013      	movs	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	189b      	adds	r3, r3, r2
 80011b8:	3302      	adds	r3, #2
 80011ba:	4a20      	ldr	r2, [pc, #128]	@ (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	001a      	movs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dd01      	ble.n	80011d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80011ce:	2126      	movs	r1, #38	@ 0x26
 80011d0:	e000      	b.n	80011d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80011d2:	2113      	movs	r1, #19
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3310      	adds	r3, #16
 80011d8:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80011da:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9b4      	bls.n	8001152 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011f0:	601a      	str	r2, [r3, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80011f2:	e01d      	b.n	8001230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
  } else if (wr_buf_p < LED_CNT + 2) {
 80011f4:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b41      	cmp	r3, #65	@ 0x41
 80011fa:	d819      	bhi.n	8001230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80011fc:	230b      	movs	r3, #11
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e00a      	b.n	800121c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>
 8001206:	200b      	movs	r0, #11
 8001208:	183b      	adds	r3, r7, r0
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 800120e:	2100      	movs	r1, #0
 8001210:	54d1      	strb	r1, [r2, r3]
 8001212:	183b      	adds	r3, r7, r0
 8001214:	183a      	adds	r2, r7, r0
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	3201      	adds	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	230b      	movs	r3, #11
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b17      	cmp	r3, #23
 8001224:	d9ef      	bls.n	8001206 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xca>
    wr_buf_p++;
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4b02      	ldr	r3, [pc, #8]	@ (8001238 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b004      	add	sp, #16
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000510 	.word	0x20000510
 800123c:	20000420 	.word	0x20000420
 8001240:	200004e0 	.word	0x200004e0

08001244 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 800124c:	4b40      	ldr	r3, [pc, #256]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b3f      	cmp	r3, #63	@ 0x3f
 8001252:	d852      	bhi.n	80012fa <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    //Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e046      	b.n	80012e8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800125a:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	0013      	movs	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	189b      	adds	r3, r3, r2
 8001264:	4a3b      	ldr	r2, [pc, #236]	@ (8001354 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	001a      	movs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	dd01      	ble.n	800127c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001278:	2126      	movs	r1, #38	@ 0x26
 800127a:	e000      	b.n	800127e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800127c:	2113      	movs	r1, #19
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3318      	adds	r3, #24
 8001282:	4a35      	ldr	r2, [pc, #212]	@ (8001358 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001284:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001286:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	0013      	movs	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	189b      	adds	r3, r3, r2
 8001290:	3301      	adds	r3, #1
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	001a      	movs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dd01      	ble.n	80012aa <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 80012a6:	2126      	movs	r1, #38	@ 0x26
 80012a8:	e000      	b.n	80012ac <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80012aa:	2113      	movs	r1, #19
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3320      	adds	r3, #32
 80012b0:	4a29      	ldr	r2, [pc, #164]	@ (8001358 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80012b2:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	0013      	movs	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	189b      	adds	r3, r3, r2
 80012be:	3302      	adds	r3, #2
 80012c0:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	001a      	movs	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd01      	ble.n	80012d8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80012d4:	2126      	movs	r1, #38	@ 0x26
 80012d6:	e000      	b.n	80012da <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80012d8:	2113      	movs	r1, #19
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3328      	adds	r3, #40	@ 0x28
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80012e0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d9b5      	bls.n	800125a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012f6:	601a      	str	r2, [r3, #0]
  } else {

    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80012f8:	e026      	b.n	8001348 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
  } else if (wr_buf_p < LED_CNT + 2) {
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b41      	cmp	r3, #65	@ 0x41
 8001300:	d81a      	bhi.n	8001338 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001302:	230b      	movs	r3, #11
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	2218      	movs	r2, #24
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e00a      	b.n	8001322 <HAL_TIM_PWM_PulseFinishedCallback+0xde>
 800130c:	200b      	movs	r0, #11
 800130e:	183b      	adds	r3, r7, r0
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001314:	2100      	movs	r1, #0
 8001316:	54d1      	strb	r1, [r2, r3]
 8001318:	183b      	adds	r3, r7, r0
 800131a:	183a      	adds	r2, r7, r0
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	3201      	adds	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	230b      	movs	r3, #11
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b2f      	cmp	r3, #47	@ 0x2f
 800132a:	d9ef      	bls.n	800130c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
    ++wr_buf_p;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	e007      	b.n	8001348 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
    wr_buf_p = 0;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001340:	2100      	movs	r1, #0
 8001342:	0018      	movs	r0, r3
 8001344:	f003 fd62 	bl	8004e0c <HAL_TIM_PWM_Stop_DMA>
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b004      	add	sp, #16
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000510 	.word	0x20000510
 8001354:	20000420 	.word	0x20000420
 8001358:	200004e0 	.word	0x200004e0
 800135c:	200002c0 	.word	0x200002c0

08001360 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer14_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136c:	429a      	cmp	r2, r3
 800136e:	d102      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  piloteTimer14_execute();
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4798      	blx	r3
  }
}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	20000350 	.word	0x20000350
 8001384:	20000514 	.word	0x20000514

08001388 <piloteTimer14_permetLesInterruptions>:

void piloteTimer14_permetLesInterruptions(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim14);
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <piloteTimer14_permetLesInterruptions+0x14>)
 800138e:	0018      	movs	r0, r3
 8001390:	f003 fadc 	bl	800494c <HAL_TIM_Base_Start_IT>
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	20000350 	.word	0x20000350

080013a0 <piloteTimer14_initialise>:

void piloteTimer14_initialise(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  piloteTimer14_execute = doNothing;
 80013a4:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <piloteTimer14_initialise+0x10>)
 80013a6:	4a03      	ldr	r2, [pc, #12]	@ (80013b4 <piloteTimer14_initialise+0x14>)
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000514 	.word	0x20000514
 80013b4:	080009db 	.word	0x080009db

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_MspInit+0x44>)
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_MspInit+0x44>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x44>)
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_MspInit+0x44>)
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	0549      	lsls	r1, r1, #21
 80013e0:	430a      	orrs	r2, r1
 80013e2:	61da      	str	r2, [r3, #28]
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_MspInit+0x44>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	055b      	lsls	r3, r3, #21
 80013ec:	4013      	ands	r3, r2
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	429a      	cmp	r2, r3
 8001412:	d133      	bne.n	800147c <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001414:	4b48      	ldr	r3, [pc, #288]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 800141a:	2101      	movs	r1, #1
 800141c:	430a      	orrs	r2, r1
 800141e:	61da      	str	r2, [r3, #28]
 8001420:	4b45      	ldr	r3, [pc, #276]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2201      	movs	r2, #1
 8001426:	4013      	ands	r3, r2
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800142c:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 800142e:	4a44      	ldr	r2, [pc, #272]	@ (8001540 <HAL_TIM_Base_MspInit+0x140>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001432:	4b42      	ldr	r3, [pc, #264]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001434:	2210      	movs	r2, #16
 8001436:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b40      	ldr	r3, [pc, #256]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b3f      	ldr	r3, [pc, #252]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001446:	2280      	movs	r2, #128	@ 0x80
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144c:	4b3b      	ldr	r3, [pc, #236]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001452:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001454:	2220      	movs	r2, #32
 8001456:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001460:	0018      	movs	r0, r3
 8001462:	f000 fa99 	bl	8001998 <HAL_DMA_Init>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800146a:	f7ff fcd3 	bl	8000e14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a32      	ldr	r2, [pc, #200]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24
 8001474:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_TIM_Base_MspInit+0x13c>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800147a:	e059      	b.n	8001530 <HAL_TIM_Base_MspInit+0x130>
  else if(htim_base->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a30      	ldr	r2, [pc, #192]	@ (8001544 <HAL_TIM_Base_MspInit+0x144>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d139      	bne.n	80014fa <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 800148c:	2102      	movs	r1, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	61da      	str	r2, [r3, #28]
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014a0:	4a2a      	ldr	r2, [pc, #168]	@ (800154c <HAL_TIM_Base_MspInit+0x14c>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014a6:	2210      	movs	r2, #16
 80014a8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80014aa:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80014b0:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014be:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014c6:	2220      	movs	r2, #32
 80014c8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fa60 	bl	8001998 <HAL_DMA_Init>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 80014dc:	f7ff fc9a 	bl	8000e14 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_TIM_Base_MspInit+0x148>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80014f8:	e01a      	b.n	8001530 <HAL_TIM_Base_MspInit+0x130>
  else if(htim_base->Instance==TIM14)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <HAL_TIM_Base_MspInit+0x150>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d115      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_TIM_Base_MspInit+0x138>)
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2013      	movs	r0, #19
 8001526:	f000 fa05 	bl	8001934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800152a:	2013      	movs	r0, #19
 800152c:	f000 fa17 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b006      	add	sp, #24
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	20000398 	.word	0x20000398
 8001540:	40020058 	.word	0x40020058
 8001544:	40000400 	.word	0x40000400
 8001548:	200003dc 	.word	0x200003dc
 800154c:	40020044 	.word	0x40020044
 8001550:	40002000 	.word	0x40002000

08001554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08b      	sub	sp, #44	@ 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	2414      	movs	r4, #20
 800155e:	193b      	adds	r3, r7, r4
 8001560:	0018      	movs	r0, r3
 8001562:	2314      	movs	r3, #20
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f008 fe16 	bl	800a198 <memset>
  if(htim->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	429a      	cmp	r2, r3
 8001576:	d126      	bne.n	80015c6 <HAL_TIM_MspPostInit+0x72>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0289      	lsls	r1, r1, #10
 8001582:	430a      	orrs	r2, r1
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	029b      	lsls	r3, r3, #10
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_OUT_Pin;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	0212      	lsls	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	0021      	movs	r1, r4
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2202      	movs	r2, #2
 80015a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2202      	movs	r2, #2
 80015b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_OUT_GPIO_Port, &GPIO_InitStruct);
 80015b6:	187a      	adds	r2, r7, r1
 80015b8:	2390      	movs	r3, #144	@ 0x90
 80015ba:	05db      	lsls	r3, r3, #23
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 fbc8 	bl	8001d54 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015c4:	e029      	b.n	800161a <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM3)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_TIM_MspPostInit+0xd4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d124      	bne.n	800161a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0289      	lsls	r1, r1, #10
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_TIM_MspPostInit+0xd0>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDS_STAT_Pin;
 80015ec:	2114      	movs	r1, #20
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2240      	movs	r2, #64	@ 0x40
 80015f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2202      	movs	r2, #2
 80015f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2201      	movs	r2, #1
 800160a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_STAT_GPIO_Port, &GPIO_InitStruct);
 800160c:	187a      	adds	r2, r7, r1
 800160e:	2390      	movs	r3, #144	@ 0x90
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f000 fb9d 	bl	8001d54 <HAL_GPIO_Init>
}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b00b      	add	sp, #44	@ 0x2c
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	40021000 	.word	0x40021000
 8001628:	40000400 	.word	0x40000400

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f8a6 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8001666:	0018      	movs	r0, r3
 8001668:	f000 fa89 	bl	8001b7e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800166e:	0018      	movs	r0, r3
 8001670:	f000 fa85 	bl	8001b7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	200003dc 	.word	0x200003dc
 8001680:	20000398 	.word	0x20000398

08001684 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <TIM14_IRQHandler+0x14>)
 800168a:	0018      	movs	r0, r3
 800168c:	f003 fc9e 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001690:	46c0      	nop			@ (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	20000350 	.word	0x20000350

0800169c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <USB_IRQHandler+0x14>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 fe22 	bl	80022ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	200009e4 	.word	0x200009e4

080016b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <Reset_Handler>:
 80016c0:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <LoopForever+0x2>)
 80016c2:	4685      	mov	sp, r0
 80016c4:	f7ff fff6 	bl	80016b4 <SystemInit>
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <LoopForever+0x6>)
 80016ca:	490d      	ldr	r1, [pc, #52]	@ (8001700 <LoopForever+0xa>)
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <LoopForever+0xe>)
 80016ce:	2300      	movs	r3, #0
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:
 80016d2:	58d4      	ldr	r4, [r2, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:
 80016d8:	18c4      	adds	r4, r0, r3
 80016da:	428c      	cmp	r4, r1
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <LoopForever+0x12>)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	@ (800170c <LoopForever+0x16>)
 80016e2:	2300      	movs	r3, #0
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:
 80016ea:	42a2      	cmp	r2, r4
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
 80016ee:	f008 fd5b 	bl	800a1a8 <__libc_init_array>
 80016f2:	f7ff f977 	bl	80009e4 <main>

080016f6 <LoopForever>:
 80016f6:	e7fe      	b.n	80016f6 <LoopForever>
 80016f8:	20004000 	.word	0x20004000
 80016fc:	20000000 	.word	0x20000000
 8001700:	200001ac 	.word	0x200001ac
 8001704:	0800a374 	.word	0x0800a374
 8001708:	200001ac 	.word	0x200001ac
 800170c:	20000ce0 	.word	0x20000ce0

08001710 <ADC1_COMP_IRQHandler>:
 8001710:	e7fe      	b.n	8001710 <ADC1_COMP_IRQHandler>
	...

08001714 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <HAL_Init+0x24>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_Init+0x24>)
 800171e:	2110      	movs	r1, #16
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f809 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fe45 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_InitTick+0x5c>)
 8001746:	681c      	ldr	r4, [r3, #0]
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_InitTick+0x60>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	0019      	movs	r1, r3
 800174e:	23fa      	movs	r3, #250	@ 0xfa
 8001750:	0098      	lsls	r0, r3, #2
 8001752:	f7fe fcd9 	bl	8000108 <__udivsi3>
 8001756:	0003      	movs	r3, r0
 8001758:	0019      	movs	r1, r3
 800175a:	0020      	movs	r0, r4
 800175c:	f7fe fcd4 	bl	8000108 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	0018      	movs	r0, r3
 8001764:	f000 f90b 	bl	800197e <HAL_SYSTICK_Config>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d001      	beq.n	8001770 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e00f      	b.n	8001790 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d80b      	bhi.n	800178e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	2301      	movs	r3, #1
 800177a:	425b      	negs	r3, r3
 800177c:	2200      	movs	r2, #0
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f8d8 	bl	8001934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_InitTick+0x64>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b003      	add	sp, #12
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	2000002c 	.word	0x2000002c
 800179c:	20000034 	.word	0x20000034
 80017a0:	20000030 	.word	0x20000030

080017a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_IncTick+0x1c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_IncTick+0x20>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	18d2      	adds	r2, r2, r3
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_IncTick+0x20>)
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	20000034 	.word	0x20000034
 80017c4:	20000518 	.word	0x20000518

080017c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b02      	ldr	r3, [pc, #8]	@ (80017d8 <HAL_GetTick+0x10>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000518 	.word	0x20000518

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	0002      	movs	r2, r0
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ee:	d809      	bhi.n	8001804 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	231f      	movs	r3, #31
 80017f8:	401a      	ands	r2, r3
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_EnableIRQ+0x30>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	4091      	lsls	r1, r2
 8001800:	000a      	movs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
  }
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	0002      	movs	r2, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b7f      	cmp	r3, #127	@ 0x7f
 8001824:	d828      	bhi.n	8001878 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001826:	4a2f      	ldr	r2, [pc, #188]	@ (80018e4 <__NVIC_SetPriority+0xd4>)
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	33c0      	adds	r3, #192	@ 0xc0
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	589b      	ldr	r3, [r3, r2]
 8001836:	1dfa      	adds	r2, r7, #7
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	0011      	movs	r1, r2
 800183c:	2203      	movs	r2, #3
 800183e:	400a      	ands	r2, r1
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	21ff      	movs	r1, #255	@ 0xff
 8001844:	4091      	lsls	r1, r2
 8001846:	000a      	movs	r2, r1
 8001848:	43d2      	mvns	r2, r2
 800184a:	401a      	ands	r2, r3
 800184c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	401a      	ands	r2, r3
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0018      	movs	r0, r3
 800185c:	2303      	movs	r3, #3
 800185e:	4003      	ands	r3, r0
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001864:	481f      	ldr	r0, [pc, #124]	@ (80018e4 <__NVIC_SetPriority+0xd4>)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b25b      	sxtb	r3, r3
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	430a      	orrs	r2, r1
 8001870:	33c0      	adds	r3, #192	@ 0xc0
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001876:	e031      	b.n	80018dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001878:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <__NVIC_SetPriority+0xd8>)
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0019      	movs	r1, r3
 8001880:	230f      	movs	r3, #15
 8001882:	400b      	ands	r3, r1
 8001884:	3b08      	subs	r3, #8
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3306      	adds	r3, #6
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1dfa      	adds	r2, r7, #7
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	0011      	movs	r1, r2
 8001898:	2203      	movs	r2, #3
 800189a:	400a      	ands	r2, r1
 800189c:	00d2      	lsls	r2, r2, #3
 800189e:	21ff      	movs	r1, #255	@ 0xff
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	401a      	ands	r2, r3
 80018a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	22ff      	movs	r2, #255	@ 0xff
 80018b0:	401a      	ands	r2, r3
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	2303      	movs	r3, #3
 80018ba:	4003      	ands	r3, r0
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <__NVIC_SetPriority+0xd8>)
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001c      	movs	r4, r3
 80018c8:	230f      	movs	r3, #15
 80018ca:	4023      	ands	r3, r4
 80018cc:	3b08      	subs	r3, #8
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	430a      	orrs	r2, r1
 80018d2:	3306      	adds	r3, #6
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	18c3      	adds	r3, r0, r3
 80018d8:	3304      	adds	r3, #4
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b003      	add	sp, #12
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	045b      	lsls	r3, r3, #17
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d301      	bcc.n	8001904 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001900:	2301      	movs	r3, #1
 8001902:	e010      	b.n	8001926 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001904:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <SysTick_Config+0x44>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	3a01      	subs	r2, #1
 800190a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190c:	2301      	movs	r3, #1
 800190e:	425b      	negs	r3, r3
 8001910:	2103      	movs	r1, #3
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff ff7c 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x44>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x44>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	210f      	movs	r1, #15
 8001940:	187b      	adds	r3, r7, r1
 8001942:	1c02      	adds	r2, r0, #0
 8001944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	187b      	adds	r3, r7, r1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	0002      	movs	r2, r0
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff33 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ffaf 	bl	80018ec <SysTick_Config>
 800198e:	0003      	movs	r3, r0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e036      	b.n	8001a1c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2221      	movs	r2, #33	@ 0x21
 80019b2:	2102      	movs	r1, #2
 80019b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_DMA_Init+0x8c>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f98c 	bl	8001d1c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2221      	movs	r2, #33	@ 0x21
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2220      	movs	r2, #32
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	ffffc00f 	.word	0xffffc00f

08001a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	2317      	movs	r3, #23
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	5c9b      	ldrb	r3, [r3, r2]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_DMA_Start_IT+0x24>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e04f      	b.n	8001aec <HAL_DMA_Start_IT+0xc4>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	2101      	movs	r1, #1
 8001a52:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2221      	movs	r2, #33	@ 0x21
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d13a      	bne.n	8001ad6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2221      	movs	r2, #33	@ 0x21
 8001a64:	2102      	movs	r1, #2
 8001a66:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f91c 	bl	8001cc2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	210e      	movs	r1, #14
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00f      	b.n	8001ac4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	210a      	movs	r1, #10
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e007      	b.n	8001ae6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b006      	add	sp, #24
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	210f      	movs	r1, #15
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2221      	movs	r2, #33	@ 0x21
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d006      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2204      	movs	r2, #4
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e028      	b.n	8001b70 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	210e      	movs	r1, #14
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	438a      	bics	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	2101      	movs	r1, #1
 8001b48:	4091      	lsls	r1, r2
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2221      	movs	r2, #33	@ 0x21
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	0010      	movs	r0, r2
 8001b6e:	4798      	blx	r3
    }
  }
  return status;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d024      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x72>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4013      	ands	r3, r2
 8001bac:	d020      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d107      	bne.n	8001bca <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	438a      	bics	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4091      	lsls	r1, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x66>
 8001be2:	e06a      	b.n	8001cba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	0010      	movs	r0, r2
 8001bec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bee:	e064      	b.n	8001cba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d02b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xda>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d027      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	4013      	ands	r3, r2
 8001c12:	d10b      	bne.n	8001c2c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	210a      	movs	r1, #10
 8001c20:	438a      	bics	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2221      	movs	r2, #33	@ 0x21
 8001c28:	2101      	movs	r1, #1
 8001c2a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c34:	2102      	movs	r1, #2
 8001c36:	4091      	lsls	r1, r2
 8001c38:	000a      	movs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	0010      	movs	r0, r2
 8001c54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c56:	e030      	b.n	8001cba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	d028      	beq.n	8001cba <HAL_DMA_IRQHandler+0x13c>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d024      	beq.n	8001cba <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	210e      	movs	r1, #14
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4091      	lsls	r1, r2
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2221      	movs	r2, #33	@ 0x21
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	4798      	blx	r3
    }
  }
}
 8001cb8:	e7ff      	b.n	8001cba <HAL_DMA_IRQHandler+0x13c>
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4091      	lsls	r1, r2
 8001cdc:	000a      	movs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d108      	bne.n	8001d02 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d00:	e007      	b.n	8001d12 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <DMA_CalcBaseAndBitshift+0x30>)
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4463      	add	r3, ip
 8001d2e:	2114      	movs	r1, #20
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7fe f9e9 	bl	8000108 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a03      	ldr	r2, [pc, #12]	@ (8001d50 <DMA_CalcBaseAndBitshift+0x34>)
 8001d42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	bffdfff8 	.word	0xbffdfff8
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	e155      	b.n	8002010 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4091      	lsls	r1, r2
 8001d6e:	000a      	movs	r2, r1
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <HAL_GPIO_Init+0x28>
 8001d7a:	e146      	b.n	800200a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d005      	beq.n	8001d94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	409a      	lsls	r2, r3
 8001da2:	0013      	movs	r3, r2
 8001da4:	43da      	mvns	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	2201      	movs	r2, #1
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d017      	beq.n	8001e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d123      	bne.n	8001e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	58d3      	ldr	r3, [r2, r3]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2207      	movs	r2, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2107      	movs	r1, #7
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	0013      	movs	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	43da      	mvns	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	23c0      	movs	r3, #192	@ 0xc0
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d100      	bne.n	8001ec8 <HAL_GPIO_Init+0x174>
 8001ec6:	e0a0      	b.n	800200a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <HAL_GPIO_Init+0x2d4>)
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <HAL_GPIO_Init+0x2d4>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	4b54      	ldr	r3, [pc, #336]	@ (8002028 <HAL_GPIO_Init+0x2d4>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_GPIO_Init+0x2d8>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	589b      	ldr	r3, [r3, r2]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	43da      	mvns	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	2390      	movs	r3, #144	@ 0x90
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a47      	ldr	r2, [pc, #284]	@ (8002030 <HAL_GPIO_Init+0x2dc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x1ea>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a46      	ldr	r2, [pc, #280]	@ (8002034 <HAL_GPIO_Init+0x2e0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x1e6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a45      	ldr	r2, [pc, #276]	@ (8002038 <HAL_GPIO_Init+0x2e4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x1e2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a44      	ldr	r2, [pc, #272]	@ (800203c <HAL_GPIO_Init+0x2e8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x1de>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x1f0>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x1f0>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x1f0>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x1f0>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x1f0>
 8001f42:	2300      	movs	r3, #0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	2103      	movs	r1, #3
 8001f48:	400a      	ands	r2, r1
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <HAL_GPIO_Init+0x2d8>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b37      	ldr	r3, [pc, #220]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	035b      	lsls	r3, r3, #13
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	039b      	lsls	r3, r3, #14
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_GPIO_Init+0x2ec>)
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	40da      	lsrs	r2, r3
 8002018:	1e13      	subs	r3, r2, #0
 800201a:	d000      	beq.n	800201e <HAL_GPIO_Init+0x2ca>
 800201c:	e6a2      	b.n	8001d64 <HAL_GPIO_Init+0x10>
  } 
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	46c0      	nop			@ (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b006      	add	sp, #24
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	000a      	movs	r2, r1
 800204e:	1cbb      	adds	r3, r7, #2
 8002050:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	1cba      	adds	r2, r7, #2
 8002058:	8812      	ldrh	r2, [r2, #0]
 800205a:	4013      	ands	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800205e:	230f      	movs	r3, #15
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e003      	b.n	8002070 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
  }
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	0008      	movs	r0, r1
 8002088:	0011      	movs	r1, r2
 800208a:	1cbb      	adds	r3, r7, #2
 800208c:	1c02      	adds	r2, r0, #0
 800208e:	801a      	strh	r2, [r3, #0]
 8002090:	1c7b      	adds	r3, r7, #1
 8002092:	1c0a      	adds	r2, r1, #0
 8002094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002096:	1c7b      	adds	r3, r7, #1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209e:	1cbb      	adds	r3, r7, #2
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a8:	1cbb      	adds	r3, r7, #2
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0e4      	b.n	8002294 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a73      	ldr	r2, [pc, #460]	@ (800229c <HAL_PCD_Init+0x1e4>)
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	23a4      	movs	r3, #164	@ 0xa4
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	2100      	movs	r1, #0
 80020de:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f007 fd1e 	bl	8009b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a6c      	ldr	r2, [pc, #432]	@ (800229c <HAL_PCD_Init+0x1e4>)
 80020ec:	2103      	movs	r1, #3
 80020ee:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f003 feb1 	bl	8005e5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	230f      	movs	r3, #15
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e047      	b.n	8002194 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002104:	200f      	movs	r0, #15
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	0013      	movs	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	189b      	adds	r3, r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	18cb      	adds	r3, r1, r3
 8002116:	3311      	adds	r3, #17
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800211c:	183b      	adds	r3, r7, r0
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	0013      	movs	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	189b      	adds	r3, r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	18cb      	adds	r3, r1, r3
 800212c:	3310      	adds	r3, #16
 800212e:	183a      	adds	r2, r7, r0
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002134:	183b      	adds	r3, r7, r0
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	0013      	movs	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	189b      	adds	r3, r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	18cb      	adds	r3, r1, r3
 8002144:	3313      	adds	r3, #19
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214a:	183b      	adds	r3, r7, r0
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	0013      	movs	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	189b      	adds	r3, r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	18cb      	adds	r3, r1, r3
 800215a:	3320      	adds	r3, #32
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002160:	183b      	adds	r3, r7, r0
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	0013      	movs	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	189b      	adds	r3, r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	18cb      	adds	r3, r1, r3
 8002170:	3324      	adds	r3, #36	@ 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002176:	183b      	adds	r3, r7, r0
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	0013      	movs	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	189b      	adds	r3, r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	2200      	movs	r2, #0
 8002188:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	183b      	adds	r3, r7, r0
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	183b      	adds	r3, r7, r0
 8002190:	3201      	adds	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	210f      	movs	r1, #15
 800219a:	187a      	adds	r2, r7, r1
 800219c:	7812      	ldrb	r2, [r2, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d3b0      	bcc.n	8002104 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e056      	b.n	8002258 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021aa:	240f      	movs	r4, #15
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	2352      	movs	r3, #82	@ 0x52
 80021b4:	33ff      	adds	r3, #255	@ 0xff
 80021b6:	0019      	movs	r1, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	18c3      	adds	r3, r0, r3
 80021c2:	185b      	adds	r3, r3, r1
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	23a8      	movs	r3, #168	@ 0xa8
 80021d0:	0059      	lsls	r1, r3, #1
 80021d2:	0013      	movs	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	18c3      	adds	r3, r0, r3
 80021dc:	185b      	adds	r3, r3, r1
 80021de:	193a      	adds	r2, r7, r4
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	2354      	movs	r3, #84	@ 0x54
 80021ec:	33ff      	adds	r3, #255	@ 0xff
 80021ee:	0019      	movs	r1, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	189b      	adds	r3, r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	18c3      	adds	r3, r0, r3
 80021fa:	185b      	adds	r3, r3, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002200:	193b      	adds	r3, r7, r4
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	23b0      	movs	r3, #176	@ 0xb0
 8002208:	0059      	lsls	r1, r3, #1
 800220a:	0013      	movs	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	189b      	adds	r3, r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	18c3      	adds	r3, r0, r3
 8002214:	185b      	adds	r3, r3, r1
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	23b2      	movs	r3, #178	@ 0xb2
 8002222:	0059      	lsls	r1, r3, #1
 8002224:	0013      	movs	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	189b      	adds	r3, r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	18c3      	adds	r3, r0, r3
 800222e:	185b      	adds	r3, r3, r1
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	23b4      	movs	r3, #180	@ 0xb4
 800223c:	0059      	lsls	r1, r3, #1
 800223e:	0013      	movs	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	189b      	adds	r3, r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	18c3      	adds	r3, r0, r3
 8002248:	185b      	adds	r3, r3, r1
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	193b      	adds	r3, r7, r4
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	193b      	adds	r3, r7, r4
 8002254:	3201      	adds	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	220f      	movs	r2, #15
 800225e:	18ba      	adds	r2, r7, r2
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3a1      	bcc.n	80021aa <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	f003 fe0e 	bl	8005e90 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_PCD_Init+0x1e4>)
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d103      	bne.n	8002292 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f001 fd07 	bl	8003ca0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b005      	add	sp, #20
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	00000291 	.word	0x00000291

080022a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	23a4      	movs	r3, #164	@ 0xa4
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_Start+0x18>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e014      	b.n	80022e2 <HAL_PCD_Start+0x42>
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	23a4      	movs	r3, #164	@ 0xa4
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	2101      	movs	r1, #1
 80022c0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f003 fdb2 	bl	8005e30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f005 fda7 	bl	8007e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	23a4      	movs	r3, #164	@ 0xa4
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	2100      	movs	r1, #0
 80022de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f005 fda9 	bl	8007e50 <USB_ReadInterrupts>
 80022fe:	0003      	movs	r3, r0
 8002300:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	4013      	ands	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 fb48 	bl	80029a4 <PCD_EP_ISR_Handler>

    return;
 8002314:	e11d      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4013      	ands	r3, r2
 800231e:	d015      	beq.n	800234c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2244      	movs	r2, #68	@ 0x44
 8002326:	5a9b      	ldrh	r3, [r3, r2]
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	498a      	ldr	r1, [pc, #552]	@ (8002558 <HAL_PCD_IRQHandler+0x26c>)
 8002330:	400a      	ands	r2, r1
 8002332:	b291      	uxth	r1, r2
 8002334:	2244      	movs	r2, #68	@ 0x44
 8002336:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	0018      	movs	r0, r3
 800233c:	f007 fc7d 	bl	8009c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2100      	movs	r1, #0
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f915 	bl	8002574 <HAL_PCD_SetAddress>

    return;
 800234a:	e102      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	01db      	lsls	r3, r3, #7
 8002352:	4013      	ands	r3, r2
 8002354:	d00c      	beq.n	8002370 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2244      	movs	r2, #68	@ 0x44
 800235c:	5a9b      	ldrh	r3, [r3, r2]
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	497d      	ldr	r1, [pc, #500]	@ (800255c <HAL_PCD_IRQHandler+0x270>)
 8002366:	400a      	ands	r2, r1
 8002368:	b291      	uxth	r1, r2
 800236a:	2244      	movs	r2, #68	@ 0x44
 800236c:	5299      	strh	r1, [r3, r2]

    return;
 800236e:	e0f0      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	4013      	ands	r3, r2
 8002378:	d00c      	beq.n	8002394 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2244      	movs	r2, #68	@ 0x44
 8002380:	5a9b      	ldrh	r3, [r3, r2]
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4975      	ldr	r1, [pc, #468]	@ (8002560 <HAL_PCD_IRQHandler+0x274>)
 800238a:	400a      	ands	r2, r1
 800238c:	b291      	uxth	r1, r2
 800238e:	2244      	movs	r2, #68	@ 0x44
 8002390:	5299      	strh	r1, [r3, r2]

    return;
 8002392:	e0de      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	4013      	ands	r3, r2
 800239c:	d038      	beq.n	8002410 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	5a9b      	ldrh	r3, [r3, r2]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2104      	movs	r1, #4
 80023ae:	438a      	bics	r2, r1
 80023b0:	b291      	uxth	r1, r2
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2240      	movs	r2, #64	@ 0x40
 80023bc:	5a9b      	ldrh	r3, [r3, r2]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2108      	movs	r1, #8
 80023c6:	438a      	bics	r2, r1
 80023c8:	b291      	uxth	r1, r2
 80023ca:	2240      	movs	r2, #64	@ 0x40
 80023cc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	23b2      	movs	r3, #178	@ 0xb2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d109      	bne.n	80023ee <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	23b2      	movs	r3, #178	@ 0xb2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	2100      	movs	r1, #0
 80023e2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2100      	movs	r1, #0
 80023e8:	0018      	movs	r0, r3
 80023ea:	f001 fc83 	bl	8003cf4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f007 fc63 	bl	8009cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2244      	movs	r2, #68	@ 0x44
 80023fc:	5a9b      	ldrh	r3, [r3, r2]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4957      	ldr	r1, [pc, #348]	@ (8002564 <HAL_PCD_IRQHandler+0x278>)
 8002406:	400a      	ands	r2, r1
 8002408:	b291      	uxth	r1, r2
 800240a:	2244      	movs	r2, #68	@ 0x44
 800240c:	5299      	strh	r1, [r3, r2]

    return;
 800240e:	e0a0      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d028      	beq.n	800246c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2240      	movs	r2, #64	@ 0x40
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2108      	movs	r1, #8
 800242a:	430a      	orrs	r2, r1
 800242c:	b291      	uxth	r1, r2
 800242e:	2240      	movs	r2, #64	@ 0x40
 8002430:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2244      	movs	r2, #68	@ 0x44
 8002438:	5a9b      	ldrh	r3, [r3, r2]
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4949      	ldr	r1, [pc, #292]	@ (8002568 <HAL_PCD_IRQHandler+0x27c>)
 8002442:	400a      	ands	r2, r1
 8002444:	b291      	uxth	r1, r2
 8002446:	2244      	movs	r2, #68	@ 0x44
 8002448:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	5a9b      	ldrh	r3, [r3, r2]
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2104      	movs	r1, #4
 800245a:	430a      	orrs	r2, r1
 800245c:	b291      	uxth	r1, r2
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f007 fc0d 	bl	8009c84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800246a:	e072      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	4013      	ands	r3, r2
 8002472:	d046      	beq.n	8002502 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2244      	movs	r2, #68	@ 0x44
 800247a:	5a9b      	ldrh	r3, [r3, r2]
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	438a      	bics	r2, r1
 8002486:	b291      	uxth	r1, r2
 8002488:	2244      	movs	r2, #68	@ 0x44
 800248a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	23b2      	movs	r3, #178	@ 0xb2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12f      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	5a9b      	ldrh	r3, [r3, r2]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2104      	movs	r1, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	b291      	uxth	r1, r2
 80024ac:	2240      	movs	r2, #64	@ 0x40
 80024ae:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2240      	movs	r2, #64	@ 0x40
 80024b6:	5a9b      	ldrh	r3, [r3, r2]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2108      	movs	r1, #8
 80024c0:	430a      	orrs	r2, r1
 80024c2:	b291      	uxth	r1, r2
 80024c4:	2240      	movs	r2, #64	@ 0x40
 80024c6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	23b2      	movs	r3, #178	@ 0xb2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	2101      	movs	r1, #1
 80024d0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2254      	movs	r2, #84	@ 0x54
 80024d8:	5a9b      	ldrh	r3, [r3, r2]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	223c      	movs	r2, #60	@ 0x3c
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	23b3      	movs	r3, #179	@ 0xb3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2101      	movs	r1, #1
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 fbff 	bl	8003cf4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024f6:	e02c      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f007 fbc2 	bl	8009c84 <HAL_PCD_SuspendCallback>
    return;
 8002500:	e027      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d010      	beq.n	800252e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2244      	movs	r2, #68	@ 0x44
 8002512:	5a9b      	ldrh	r3, [r3, r2]
 8002514:	b29a      	uxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4914      	ldr	r1, [pc, #80]	@ (800256c <HAL_PCD_IRQHandler+0x280>)
 800251c:	400a      	ands	r2, r1
 800251e:	b291      	uxth	r1, r2
 8002520:	2244      	movs	r2, #68	@ 0x44
 8002522:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	f007 fb78 	bl	8009c1c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800252c:	e011      	b.n	8002552 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4013      	ands	r3, r2
 8002536:	d00c      	beq.n	8002552 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2244      	movs	r2, #68	@ 0x44
 800253e:	5a9b      	ldrh	r3, [r3, r2]
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_PCD_IRQHandler+0x284>)
 8002548:	400a      	ands	r2, r1
 800254a:	b291      	uxth	r1, r2
 800254c:	2244      	movs	r2, #68	@ 0x44
 800254e:	5299      	strh	r1, [r3, r2]

    return;
 8002550:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002552:	46bd      	mov	sp, r7
 8002554:	b004      	add	sp, #16
 8002556:	bd80      	pop	{r7, pc}
 8002558:	fffffbff 	.word	0xfffffbff
 800255c:	ffffbfff 	.word	0xffffbfff
 8002560:	ffffdfff 	.word	0xffffdfff
 8002564:	ffffefff 	.word	0xffffefff
 8002568:	fffff7ff 	.word	0xfffff7ff
 800256c:	fffffdff 	.word	0xfffffdff
 8002570:	fffffeff 	.word	0xfffffeff

08002574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	000a      	movs	r2, r1
 800257e:	1cfb      	adds	r3, r7, #3
 8002580:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	23a4      	movs	r3, #164	@ 0xa4
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_SetAddress+0x1e>
 800258e:	2302      	movs	r3, #2
 8002590:	e016      	b.n	80025c0 <HAL_PCD_SetAddress+0x4c>
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	23a4      	movs	r3, #164	@ 0xa4
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	2101      	movs	r1, #1
 800259a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1cfa      	adds	r2, r7, #3
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	1cfb      	adds	r3, r7, #3
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	0019      	movs	r1, r3
 80025ae:	0010      	movs	r0, r2
 80025b0:	f005 fc24 	bl	8007dfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	23a4      	movs	r3, #164	@ 0xa4
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	000c      	movs	r4, r1
 80025d2:	0010      	movs	r0, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	1c22      	adds	r2, r4, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	003b      	movs	r3, r7
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	1cbb      	adds	r3, r7, #2
 80025e4:	1c0a      	adds	r2, r1, #0
 80025e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025e8:	230b      	movs	r3, #11
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f0:	1cfb      	adds	r3, r7, #3
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da0f      	bge.n	800261a <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	1cfb      	adds	r3, r7, #3
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2207      	movs	r2, #7
 8002600:	401a      	ands	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	189b      	adds	r3, r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	3310      	adds	r3, #16
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	18d3      	adds	r3, r2, r3
 8002610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	705a      	strb	r2, [r3, #1]
 8002618:	e00f      	b.n	800263a <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261a:	1cfb      	adds	r3, r7, #3
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2207      	movs	r2, #7
 8002620:	401a      	ands	r2, r3
 8002622:	0013      	movs	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	189b      	adds	r3, r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	3351      	adds	r3, #81	@ 0x51
 800262c:	33ff      	adds	r3, #255	@ 0xff
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	18d3      	adds	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800263a:	1cfb      	adds	r3, r7, #3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2207      	movs	r2, #7
 8002640:	4013      	ands	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002648:	003b      	movs	r3, r7
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1cba      	adds	r2, r7, #2
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002658:	1cbb      	adds	r3, r7, #2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d102      	bne.n	8002666 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	23a4      	movs	r3, #164	@ 0xa4
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_PCD_EP_Open+0xae>
 8002672:	2302      	movs	r3, #2
 8002674:	e013      	b.n	800269e <HAL_PCD_EP_Open+0xd6>
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	23a4      	movs	r3, #164	@ 0xa4
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	2101      	movs	r1, #1
 800267e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f003 fc1d 	bl	8005ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	23a4      	movs	r3, #164	@ 0xa4
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	2100      	movs	r1, #0
 8002696:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002698:	230b      	movs	r3, #11
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b005      	add	sp, #20
 80026a4:	bd90      	pop	{r4, r7, pc}

080026a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	000a      	movs	r2, r1
 80026b0:	1cfb      	adds	r3, r7, #3
 80026b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b4:	1cfb      	adds	r3, r7, #3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da0f      	bge.n	80026de <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026be:	1cfb      	adds	r3, r7, #3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2207      	movs	r2, #7
 80026c4:	401a      	ands	r2, r3
 80026c6:	0013      	movs	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	3310      	adds	r3, #16
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	e00f      	b.n	80026fe <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026de:	1cfb      	adds	r3, r7, #3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2207      	movs	r2, #7
 80026e4:	401a      	ands	r2, r3
 80026e6:	0013      	movs	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	3351      	adds	r3, #81	@ 0x51
 80026f0:	33ff      	adds	r3, #255	@ 0xff
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	18d3      	adds	r3, r2, r3
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fe:	1cfb      	adds	r3, r7, #3
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2207      	movs	r2, #7
 8002704:	4013      	ands	r3, r2
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	23a4      	movs	r3, #164	@ 0xa4
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_EP_Close+0x76>
 8002718:	2302      	movs	r3, #2
 800271a:	e011      	b.n	8002740 <HAL_PCD_EP_Close+0x9a>
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	23a4      	movs	r3, #164	@ 0xa4
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	2101      	movs	r1, #1
 8002724:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f003 ff72 	bl	8006618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	23a4      	movs	r3, #164	@ 0xa4
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	2100      	movs	r1, #0
 800273c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	200b      	movs	r0, #11
 8002756:	183b      	adds	r3, r7, r0
 8002758:	1c0a      	adds	r2, r1, #0
 800275a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275c:	0001      	movs	r1, r0
 800275e:	187b      	adds	r3, r7, r1
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2207      	movs	r2, #7
 8002764:	401a      	ands	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	189b      	adds	r3, r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	3351      	adds	r3, #81	@ 0x51
 8002770:	33ff      	adds	r3, #255	@ 0xff
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2207      	movs	r2, #7
 8002796:	4013      	ands	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	0011      	movs	r1, r2
 80027a6:	0018      	movs	r0, r3
 80027a8:	f004 f8f6 	bl	8006998 <USB_EPStartXfer>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b006      	add	sp, #24
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	200b      	movs	r0, #11
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	1c0a      	adds	r2, r1, #0
 80027c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	183b      	adds	r3, r7, r0
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	401a      	ands	r2, r3
 80027d2:	0013      	movs	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	189b      	adds	r3, r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	3310      	adds	r3, #16
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	18d3      	adds	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2224      	movs	r2, #36	@ 0x24
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2201      	movs	r2, #1
 8002806:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	183b      	adds	r3, r7, r0
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	b2da      	uxtb	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f004 f8ba 	bl	8006998 <USB_EPStartXfer>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	000a      	movs	r2, r1
 8002838:	1cfb      	adds	r3, r7, #3
 800283a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800283c:	1cfb      	adds	r3, r7, #3
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2207      	movs	r2, #7
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	7912      	ldrb	r2, [r2, #4]
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e046      	b.n	80028de <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002850:	1cfb      	adds	r3, r7, #3
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	da0f      	bge.n	800287a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2207      	movs	r2, #7
 8002860:	401a      	ands	r2, r3
 8002862:	0013      	movs	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	189b      	adds	r3, r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	3310      	adds	r3, #16
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
 8002878:	e00d      	b.n	8002896 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800287a:	1cfb      	adds	r3, r7, #3
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	0013      	movs	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	189b      	adds	r3, r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	3351      	adds	r3, #81	@ 0x51
 8002888:	33ff      	adds	r3, #255	@ 0xff
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	18d3      	adds	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	1cfb      	adds	r3, r7, #3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2207      	movs	r2, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	23a4      	movs	r3, #164	@ 0xa4
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_PCD_EP_SetStall+0x8c>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e011      	b.n	80028de <HAL_PCD_EP_SetStall+0xb0>
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	23a4      	movs	r3, #164	@ 0xa4
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	2101      	movs	r1, #1
 80028c2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f005 f993 	bl	8007bf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	23a4      	movs	r3, #164	@ 0xa4
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	2100      	movs	r1, #0
 80028da:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	000a      	movs	r2, r1
 80028f0:	1cfb      	adds	r3, r7, #3
 80028f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028f4:	1cfb      	adds	r3, r7, #3
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	220f      	movs	r2, #15
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e048      	b.n	800299a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002908:	1cfb      	adds	r3, r7, #3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b25b      	sxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	da0f      	bge.n	8002932 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002912:	1cfb      	adds	r3, r7, #3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2207      	movs	r2, #7
 8002918:	401a      	ands	r2, r3
 800291a:	0013      	movs	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	189b      	adds	r3, r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	3310      	adds	r3, #16
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	18d3      	adds	r3, r2, r3
 8002928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	705a      	strb	r2, [r3, #1]
 8002930:	e00f      	b.n	8002952 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002932:	1cfb      	adds	r3, r7, #3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2207      	movs	r2, #7
 8002938:	401a      	ands	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	189b      	adds	r3, r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	3351      	adds	r3, #81	@ 0x51
 8002944:	33ff      	adds	r3, #255	@ 0xff
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2207      	movs	r2, #7
 800295e:	4013      	ands	r3, r2
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	23a4      	movs	r3, #164	@ 0xa4
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_PCD_EP_ClrStall+0x90>
 8002972:	2302      	movs	r3, #2
 8002974:	e011      	b.n	800299a <HAL_PCD_EP_ClrStall+0xb4>
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	23a4      	movs	r3, #164	@ 0xa4
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	2101      	movs	r1, #1
 800297e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f005 f985 	bl	8007c98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	23a4      	movs	r3, #164	@ 0xa4
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	2100      	movs	r1, #0
 8002996:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b096      	sub	sp, #88	@ 0x58
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ac:	f000 fbea 	bl	8003184 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2048      	movs	r0, #72	@ 0x48
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	2144      	movs	r1, #68	@ 0x44
 80029ba:	5a52      	ldrh	r2, [r2, r1]
 80029bc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029be:	183b      	adds	r3, r7, r0
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	244f      	movs	r4, #79	@ 0x4f
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	210f      	movs	r1, #15
 80029ca:	400a      	ands	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d000      	beq.n	80029d8 <PCD_EP_ISR_Handler+0x34>
 80029d6:	e18d      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d152      	bne.n	8002a88 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	200e      	movs	r0, #14
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	49ba      	ldr	r1, [pc, #744]	@ (8002cd8 <PCD_EP_ISR_Handler+0x334>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	183a      	adds	r2, r7, r0
 80029fa:	8812      	ldrh	r2, [r2, #0]
 80029fc:	49b7      	ldr	r1, [pc, #732]	@ (8002cdc <PCD_EP_ISR_Handler+0x338>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3310      	adds	r3, #16
 8002a08:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2250      	movs	r2, #80	@ 0x50
 8002a10:	5a9b      	ldrh	r3, [r3, r2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	001a      	movs	r2, r3
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	18d2      	adds	r2, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	4aae      	ldr	r2, [pc, #696]	@ (8002ce0 <PCD_EP_ISR_Handler+0x33c>)
 8002a26:	4694      	mov	ip, r2
 8002a28:	4463      	add	r3, ip
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	059b      	lsls	r3, r3, #22
 8002a2e:	0d9a      	lsrs	r2, r3, #22
 8002a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	18d2      	adds	r2, r2, r3
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2100      	movs	r1, #0
 8002a46:	0018      	movs	r0, r3
 8002a48:	f007 f8ca 	bl	8009be0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <PCD_EP_ISR_Handler+0xb6>
 8002a56:	f000 fb95 	bl	8003184 <PCD_EP_ISR_Handler+0x7e0>
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <PCD_EP_ISR_Handler+0xc2>
 8002a62:	f000 fb8f 	bl	8003184 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7b1b      	ldrb	r3, [r3, #12]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	4252      	negs	r2, r2
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0011      	movs	r1, r2
 8002a7a:	224c      	movs	r2, #76	@ 0x4c
 8002a7c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	731a      	strb	r2, [r3, #12]
 8002a84:	f000 fb7e 	bl	8003184 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3351      	adds	r3, #81	@ 0x51
 8002a8c:	33ff      	adds	r3, #255	@ 0xff
 8002a8e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	214c      	movs	r1, #76	@ 0x4c
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	881a      	ldrh	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d037      	beq.n	8002b18 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2250      	movs	r2, #80	@ 0x50
 8002aae:	5a9b      	ldrh	r3, [r3, r2]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	18d2      	adds	r2, r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	18d3      	adds	r3, r2, r3
 8002ac2:	4a88      	ldr	r2, [pc, #544]	@ (8002ce4 <PCD_EP_ISR_Handler+0x340>)
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	4463      	add	r3, ip
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	059b      	lsls	r3, r3, #22
 8002acc:	0d9a      	lsrs	r2, r3, #22
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	22a6      	movs	r2, #166	@ 0xa6
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	1899      	adds	r1, r3, r2
 8002ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f005 fa0a 	bl	8007f00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	2010      	movs	r0, #16
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	497b      	ldr	r1, [pc, #492]	@ (8002ce8 <PCD_EP_ISR_Handler+0x344>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	183a      	adds	r2, r7, r0
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f007 f82f 	bl	8009b74 <HAL_PCD_SetupStageCallback>
 8002b16:	e335      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b18:	234c      	movs	r3, #76	@ 0x4c
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	5e9b      	ldrsh	r3, [r3, r2]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db00      	blt.n	8002b26 <PCD_EP_ISR_Handler+0x182>
 8002b24:	e32e      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	201e      	movs	r0, #30
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	496d      	ldr	r1, [pc, #436]	@ (8002ce8 <PCD_EP_ISR_Handler+0x344>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	183a      	adds	r2, r7, r0
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	430a      	orrs	r2, r1
 8002b44:	b292      	uxth	r2, r2
 8002b46:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2250      	movs	r2, #80	@ 0x50
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	001a      	movs	r2, r3
 8002b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	18d2      	adds	r2, r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	4a60      	ldr	r2, [pc, #384]	@ (8002ce4 <PCD_EP_ISR_Handler+0x340>)
 8002b64:	4694      	mov	ip, r2
 8002b66:	4463      	add	r3, ip
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	059b      	lsls	r3, r3, #22
 8002b6c:	0d9a      	lsrs	r2, r3, #22
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01a      	beq.n	8002bb0 <PCD_EP_ISR_Handler+0x20c>
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b88:	6959      	ldr	r1, [r3, #20]
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f005 f9b4 	bl	8007f00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	18d2      	adds	r2, r2, r3
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f006 fff7 	bl	8009b9e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	214c      	movs	r1, #76	@ 0x4c
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d000      	beq.n	8002bca <PCD_EP_ISR_Handler+0x226>
 8002bc8:	e2dc      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	881a      	ldrh	r2, [r3, #0]
 8002bce:	23c0      	movs	r3, #192	@ 0xc0
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	23c0      	movs	r3, #192	@ 0xc0
 8002bd6:	019b      	lsls	r3, r3, #6
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d100      	bne.n	8002bde <PCD_EP_ISR_Handler+0x23a>
 8002bdc:	e2d2      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2250      	movs	r2, #80	@ 0x50
 8002bea:	5a9b      	ldrh	r3, [r3, r2]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	001a      	movs	r2, r3
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce4 <PCD_EP_ISR_Handler+0x340>)
 8002bfa:	4694      	mov	ip, r2
 8002bfc:	4463      	add	r3, ip
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	059b      	lsls	r3, r3, #22
 8002c08:	0d9b      	lsrs	r3, r3, #22
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d108      	bne.n	8002c2a <PCD_EP_ISR_Handler+0x286>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002cdc <PCD_EP_ISR_Handler+0x338>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	e035      	b.n	8002c96 <PCD_EP_ISR_Handler+0x2f2>
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c30:	d817      	bhi.n	8002c62 <PCD_EP_ISR_Handler+0x2be>
 8002c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d002      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x2a6>
 8002c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c46:	3301      	adds	r3, #1
 8002c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	029b      	lsls	r3, r3, #10
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	801a      	strh	r2, [r3, #0]
 8002c60:	e019      	b.n	8002c96 <PCD_EP_ISR_Handler+0x2f2>
 8002c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	221f      	movs	r2, #31
 8002c70:	4013      	ands	r3, r2
 8002c72:	d102      	bne.n	8002c7a <PCD_EP_ISR_Handler+0x2d6>
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	3b01      	subs	r3, #1
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <PCD_EP_ISR_Handler+0x338>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	2012      	movs	r0, #18
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	4912      	ldr	r1, [pc, #72]	@ (8002cec <PCD_EP_ISR_Handler+0x348>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	183a      	adds	r2, r7, r0
 8002cac:	8812      	ldrh	r2, [r2, #0]
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	0149      	lsls	r1, r1, #5
 8002cb2:	404a      	eors	r2, r1
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	183a      	adds	r2, r7, r0
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	0189      	lsls	r1, r1, #6
 8002cc0:	404a      	eors	r2, r1
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	183a      	adds	r2, r7, r0
 8002cca:	8812      	ldrh	r2, [r2, #0]
 8002ccc:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <PCD_EP_ISR_Handler+0x34c>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e256      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	ffff8f0f 	.word	0xffff8f0f
 8002cdc:	ffff8000 	.word	0xffff8000
 8002ce0:	00000402 	.word	0x00000402
 8002ce4:	00000406 	.word	0x00000406
 8002ce8:	00000f8f 	.word	0x00000f8f
 8002cec:	ffffbf8f 	.word	0xffffbf8f
 8002cf0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	204f      	movs	r0, #79	@ 0x4f
 8002cfc:	183b      	adds	r3, r7, r0
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	18d2      	adds	r2, r2, r3
 8002d04:	214c      	movs	r1, #76	@ 0x4c
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	5e9b      	ldrsh	r3, [r3, r2]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db00      	blt.n	8002d18 <PCD_EP_ISR_Handler+0x374>
 8002d16:	e0fa      	b.n	8002f0e <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	183b      	adds	r3, r7, r0
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	244a      	movs	r4, #74	@ 0x4a
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	49d1      	ldr	r1, [pc, #836]	@ (8003074 <PCD_EP_ISR_Handler+0x6d0>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	193a      	adds	r2, r7, r4
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	2180      	movs	r1, #128	@ 0x80
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	0013      	movs	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	3351      	adds	r3, #81	@ 0x51
 8002d5c:	33ff      	adds	r3, #255	@ 0xff
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	18d3      	adds	r3, r2, r3
 8002d62:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d125      	bne.n	8002db8 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2250      	movs	r2, #80	@ 0x50
 8002d72:	5a9b      	ldrh	r3, [r3, r2]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	001a      	movs	r2, r3
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	18d2      	adds	r2, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	18d3      	adds	r3, r2, r3
 8002d86:	4abc      	ldr	r2, [pc, #752]	@ (8003078 <PCD_EP_ISR_Handler+0x6d4>)
 8002d88:	4694      	mov	ip, r2
 8002d8a:	4463      	add	r3, ip
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	2450      	movs	r4, #80	@ 0x50
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	0592      	lsls	r2, r2, #22
 8002d94:	0d92      	lsrs	r2, r2, #22
 8002d96:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002d98:	193b      	adds	r3, r7, r4
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d100      	bne.n	8002da2 <PCD_EP_ISR_Handler+0x3fe>
 8002da0:	e08d      	b.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	6959      	ldr	r1, [r3, #20]
 8002daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dac:	88da      	ldrh	r2, [r3, #6]
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	f005 f8a5 	bl	8007f00 <USB_ReadPMA>
 8002db6:	e082      	b.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dba:	78db      	ldrb	r3, [r3, #3]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d10c      	bne.n	8002dda <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dc0:	2350      	movs	r3, #80	@ 0x50
 8002dc2:	18fc      	adds	r4, r7, r3
 8002dc4:	234c      	movs	r3, #76	@ 0x4c
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f9ec 	bl	80031ac <HAL_PCD_EP_DB_Receive>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	8023      	strh	r3, [r4, #0]
 8002dd8:	e071      	b.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	001a      	movs	r2, r3
 8002de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	2052      	movs	r0, #82	@ 0x52
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	49a2      	ldr	r1, [pc, #648]	@ (800307c <PCD_EP_ISR_Handler+0x6d8>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	18d3      	adds	r3, r2, r3
 8002e04:	183a      	adds	r2, r7, r0
 8002e06:	8812      	ldrh	r2, [r2, #0]
 8002e08:	499d      	ldr	r1, [pc, #628]	@ (8003080 <PCD_EP_ISR_Handler+0x6dc>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	001a      	movs	r2, r3
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	001a      	movs	r2, r3
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	01db      	lsls	r3, r3, #7
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d024      	beq.n	8002e76 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2250      	movs	r2, #80	@ 0x50
 8002e32:	5a9b      	ldrh	r3, [r3, r2]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	001a      	movs	r2, r3
 8002e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	18d2      	adds	r2, r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	18d3      	adds	r3, r2, r3
 8002e46:	4a8f      	ldr	r2, [pc, #572]	@ (8003084 <PCD_EP_ISR_Handler+0x6e0>)
 8002e48:	4694      	mov	ip, r2
 8002e4a:	4463      	add	r3, ip
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	2450      	movs	r4, #80	@ 0x50
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	0592      	lsls	r2, r2, #22
 8002e54:	0d92      	lsrs	r2, r2, #22
 8002e56:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02e      	beq.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e66:	6959      	ldr	r1, [r3, #20]
 8002e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6a:	891a      	ldrh	r2, [r3, #8]
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f005 f846 	bl	8007f00 <USB_ReadPMA>
 8002e74:	e023      	b.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2250      	movs	r2, #80	@ 0x50
 8002e7c:	5a9b      	ldrh	r3, [r3, r2]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	001a      	movs	r2, r3
 8002e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	18d2      	adds	r2, r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	4a79      	ldr	r2, [pc, #484]	@ (8003078 <PCD_EP_ISR_Handler+0x6d4>)
 8002e92:	4694      	mov	ip, r2
 8002e94:	4463      	add	r3, ip
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	2450      	movs	r4, #80	@ 0x50
 8002e9a:	193b      	adds	r3, r7, r4
 8002e9c:	0592      	lsls	r2, r2, #22
 8002e9e:	0d92      	lsrs	r2, r2, #22
 8002ea0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	6959      	ldr	r1, [r3, #20]
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb4:	895a      	ldrh	r2, [r3, #10]
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f005 f821 	bl	8007f00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	2150      	movs	r1, #80	@ 0x50
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	18d2      	adds	r2, r2, r3
 8002eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ecc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	18d2      	adds	r2, r2, r3
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <PCD_EP_ISR_Handler+0x54c>
 8002ee4:	187b      	adds	r3, r7, r1
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f006 fe50 	bl	8009b9e <HAL_PCD_DataOutStageCallback>
 8002efe:	e006      	b.n	8002f0e <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f003 fd45 	bl	8006998 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f0e:	244c      	movs	r4, #76	@ 0x4c
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	2280      	movs	r2, #128	@ 0x80
 8002f16:	4013      	ands	r3, r2
 8002f18:	d100      	bne.n	8002f1c <PCD_EP_ISR_Handler+0x578>
 8002f1a:	e133      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f1c:	204f      	movs	r0, #79	@ 0x4f
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	0013      	movs	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	18d3      	adds	r3, r2, r3
 8002f30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	001a      	movs	r2, r3
 8002f38:	183b      	adds	r3, r7, r0
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	2542      	movs	r5, #66	@ 0x42
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	494f      	ldr	r1, [pc, #316]	@ (8003088 <PCD_EP_ISR_Handler+0x6e4>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	001a      	movs	r2, r3
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	18d3      	adds	r3, r2, r3
 8002f5c:	197a      	adds	r2, r7, r5
 8002f5e:	8812      	ldrh	r2, [r2, #0]
 8002f60:	494a      	ldr	r1, [pc, #296]	@ (800308c <PCD_EP_ISR_Handler+0x6e8>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6a:	78db      	ldrb	r3, [r3, #3]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d000      	beq.n	8002f72 <PCD_EP_ISR_Handler+0x5ce>
 8002f70:	e0af      	b.n	80030d2 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8002f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7a:	7b1b      	ldrb	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d100      	bne.n	8002f82 <PCD_EP_ISR_Handler+0x5de>
 8002f80:	e09f      	b.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2240      	movs	r2, #64	@ 0x40
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d046      	beq.n	800301a <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d125      	bne.n	8002fe0 <PCD_EP_ISR_Handler+0x63c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2250      	movs	r2, #80	@ 0x50
 8002fa0:	5a9b      	ldrh	r3, [r3, r2]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	00da      	lsls	r2, r3, #3
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	18d3      	adds	r3, r2, r3
 8002fb6:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <PCD_EP_ISR_Handler+0x6e0>)
 8002fb8:	4694      	mov	ip, r2
 8002fba:	4463      	add	r3, ip
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	059b      	lsls	r3, r3, #22
 8002fc6:	0d9b      	lsrs	r3, r3, #22
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800308c <PCD_EP_ISR_Handler+0x6e8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	e070      	b.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d16c      	bne.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2250      	movs	r2, #80	@ 0x50
 8002ff4:	5a9b      	ldrh	r3, [r3, r2]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	00da      	lsls	r2, r3, #3
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <PCD_EP_ISR_Handler+0x6e0>)
 800300c:	4694      	mov	ip, r2
 800300e:	4463      	add	r3, ip
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	2200      	movs	r2, #0
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	e053      	b.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d133      	bne.n	8003090 <PCD_EP_ISR_Handler+0x6ec>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2250      	movs	r2, #80	@ 0x50
 8003034:	5a9b      	ldrh	r3, [r3, r2]
 8003036:	b29b      	uxth	r3, r3
 8003038:	001a      	movs	r2, r3
 800303a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303c:	189b      	adds	r3, r3, r2
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	4a0b      	ldr	r2, [pc, #44]	@ (8003078 <PCD_EP_ISR_Handler+0x6d4>)
 800304c:	4694      	mov	ip, r2
 800304e:	4463      	add	r3, ip
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	059b      	lsls	r3, r3, #22
 800305a:	0d9b      	lsrs	r3, r3, #22
 800305c:	b29a      	uxth	r2, r3
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4a08      	ldr	r2, [pc, #32]	@ (800308c <PCD_EP_ISR_Handler+0x6e8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	b29a      	uxth	r2, r3
 800306e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	e026      	b.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
 8003074:	00000f8f 	.word	0x00000f8f
 8003078:	00000406 	.word	0x00000406
 800307c:	ffff8f8f 	.word	0xffff8f8f
 8003080:	ffff80c0 	.word	0xffff80c0
 8003084:	00000402 	.word	0x00000402
 8003088:	ffff8f0f 	.word	0xffff8f0f
 800308c:	ffff8000 	.word	0xffff8000
 8003090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d114      	bne.n	80030c2 <PCD_EP_ISR_Handler+0x71e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2250      	movs	r2, #80	@ 0x50
 800309e:	5a9b      	ldrh	r3, [r3, r2]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	001a      	movs	r2, r3
 80030a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b2:	18d3      	adds	r3, r2, r3
 80030b4:	4a3b      	ldr	r2, [pc, #236]	@ (80031a4 <PCD_EP_ISR_Handler+0x800>)
 80030b6:	4694      	mov	ip, r2
 80030b8:	4463      	add	r3, ip
 80030ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0011      	movs	r1, r2
 80030ca:	0018      	movs	r0, r3
 80030cc:	f006 fd88 	bl	8009be0 <HAL_PCD_DataInStageCallback>
 80030d0:	e058      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030d2:	234c      	movs	r3, #76	@ 0x4c
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d149      	bne.n	8003174 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2250      	movs	r2, #80	@ 0x50
 80030e6:	5a9b      	ldrh	r3, [r3, r2]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	001a      	movs	r2, r3
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	18d2      	adds	r2, r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	18d3      	adds	r3, r2, r3
 80030fa:	4a2b      	ldr	r2, [pc, #172]	@ (80031a8 <PCD_EP_ISR_Handler+0x804>)
 80030fc:	4694      	mov	ip, r2
 80030fe:	4463      	add	r3, ip
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	2140      	movs	r1, #64	@ 0x40
 8003104:	187b      	adds	r3, r7, r1
 8003106:	0592      	lsls	r2, r2, #22
 8003108:	0d92      	lsrs	r2, r2, #22
 800310a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800310c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d907      	bls.n	8003128 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8003118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	187b      	adds	r3, r7, r1
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003124:	619a      	str	r2, [r3, #24]
 8003126:	e002      	b.n	800312e <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0011      	movs	r1, r2
 800313e:	0018      	movs	r0, r3
 8003140:	f006 fd4e 	bl	8009be0 <HAL_PCD_DataInStageCallback>
 8003144:	e01e      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	187b      	adds	r3, r7, r1
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	18d2      	adds	r2, r2, r3
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	187b      	adds	r3, r7, r1
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	18d2      	adds	r2, r2, r3
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f003 fc13 	bl	8006998 <USB_EPStartXfer>
 8003172:	e007      	b.n	8003184 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003174:	234c      	movs	r3, #76	@ 0x4c
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 f930 	bl	80033e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2244      	movs	r2, #68	@ 0x44
 800318a:	5a9b      	ldrh	r3, [r3, r2]
 800318c:	b29b      	uxth	r3, r3
 800318e:	b21b      	sxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	da01      	bge.n	8003198 <PCD_EP_ISR_Handler+0x7f4>
 8003194:	f7ff fc0c 	bl	80029b0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b016      	add	sp, #88	@ 0x58
 80031a0:	bdb0      	pop	{r4, r5, r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	00000406 	.word	0x00000406
 80031a8:	00000402 	.word	0x00000402

080031ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ba:	1dbb      	adds	r3, r7, #6
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	01db      	lsls	r3, r3, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	d100      	bne.n	80031c8 <HAL_PCD_EP_DB_Receive+0x1c>
 80031c6:	e07d      	b.n	80032c4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2250      	movs	r2, #80	@ 0x50
 80031ce:	5a9b      	ldrh	r3, [r3, r2]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	001a      	movs	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	18d2      	adds	r2, r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	4a7a      	ldr	r2, [pc, #488]	@ (80033cc <HAL_PCD_EP_DB_Receive+0x220>)
 80031e4:	4694      	mov	ip, r2
 80031e6:	4463      	add	r3, ip
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	211a      	movs	r1, #26
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	0592      	lsls	r2, r2, #22
 80031f0:	0d92      	lsrs	r2, r2, #22
 80031f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d307      	bcc.n	8003210 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	187b      	adds	r3, r7, r1
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	1ad2      	subs	r2, r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	619a      	str	r2, [r3, #24]
 800320e:	e002      	b.n	8003216 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d121      	bne.n	8003262 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	001a      	movs	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	18d3      	adds	r3, r2, r3
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29a      	uxth	r2, r3
 8003230:	2018      	movs	r0, #24
 8003232:	183b      	adds	r3, r7, r0
 8003234:	4966      	ldr	r1, [pc, #408]	@ (80033d0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003236:	400a      	ands	r2, r1
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	183b      	adds	r3, r7, r0
 800323c:	183a      	adds	r2, r7, r0
 800323e:	8812      	ldrh	r2, [r2, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	0189      	lsls	r1, r1, #6
 8003244:	404a      	eors	r2, r1
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	001a      	movs	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	183a      	adds	r2, r7, r0
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	495e      	ldr	r1, [pc, #376]	@ (80033d4 <HAL_PCD_EP_DB_Receive+0x228>)
 800325c:	430a      	orrs	r2, r1
 800325e:	b292      	uxth	r2, r2
 8003260:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003262:	1dbb      	adds	r3, r7, #6
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	2240      	movs	r2, #64	@ 0x40
 8003268:	4013      	ands	r3, r2
 800326a:	d01a      	beq.n	80032a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	001a      	movs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
 800327e:	2016      	movs	r0, #22
 8003280:	183b      	adds	r3, r7, r0
 8003282:	4955      	ldr	r1, [pc, #340]	@ (80033d8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003284:	400a      	ands	r2, r1
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	001a      	movs	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	18d3      	adds	r3, r2, r3
 8003296:	183a      	adds	r2, r7, r0
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	4950      	ldr	r1, [pc, #320]	@ (80033dc <HAL_PCD_EP_DB_Receive+0x230>)
 800329c:	430a      	orrs	r2, r1
 800329e:	b292      	uxth	r2, r2
 80032a0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80032a2:	241a      	movs	r4, #26
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <HAL_PCD_EP_DB_Receive+0x102>
 80032ac:	e086      	b.n	80033bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	891a      	ldrh	r2, [r3, #8]
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f004 fe1f 	bl	8007f00 <USB_ReadPMA>
 80032c2:	e07b      	b.n	80033bc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2250      	movs	r2, #80	@ 0x50
 80032ca:	5a9b      	ldrh	r3, [r3, r2]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	001a      	movs	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	18d2      	adds	r2, r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	18d3      	adds	r3, r2, r3
 80032de:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <HAL_PCD_EP_DB_Receive+0x234>)
 80032e0:	4694      	mov	ip, r2
 80032e2:	4463      	add	r3, ip
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	211a      	movs	r1, #26
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	0592      	lsls	r2, r2, #22
 80032ec:	0d92      	lsrs	r2, r2, #22
 80032ee:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d307      	bcc.n	800330c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	187b      	adds	r3, r7, r1
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	619a      	str	r2, [r3, #24]
 800330a:	e002      	b.n	8003312 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d121      	bne.n	800335e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	001a      	movs	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	18d3      	adds	r3, r2, r3
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	201e      	movs	r0, #30
 800332e:	183b      	adds	r3, r7, r0
 8003330:	4927      	ldr	r1, [pc, #156]	@ (80033d0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003332:	400a      	ands	r2, r1
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	183b      	adds	r3, r7, r0
 8003338:	183a      	adds	r2, r7, r0
 800333a:	8812      	ldrh	r2, [r2, #0]
 800333c:	2180      	movs	r1, #128	@ 0x80
 800333e:	0189      	lsls	r1, r1, #6
 8003340:	404a      	eors	r2, r1
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	001a      	movs	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	183a      	adds	r2, r7, r0
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	491f      	ldr	r1, [pc, #124]	@ (80033d4 <HAL_PCD_EP_DB_Receive+0x228>)
 8003358:	430a      	orrs	r2, r1
 800335a:	b292      	uxth	r2, r2
 800335c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800335e:	1dbb      	adds	r3, r7, #6
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	2240      	movs	r2, #64	@ 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	d11a      	bne.n	800339e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	001a      	movs	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	201c      	movs	r0, #28
 800337c:	183b      	adds	r3, r7, r0
 800337e:	4916      	ldr	r1, [pc, #88]	@ (80033d8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003380:	400a      	ands	r2, r1
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	001a      	movs	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	18d3      	adds	r3, r2, r3
 8003392:	183a      	adds	r2, r7, r0
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	4911      	ldr	r1, [pc, #68]	@ (80033dc <HAL_PCD_EP_DB_Receive+0x230>)
 8003398:	430a      	orrs	r2, r1
 800339a:	b292      	uxth	r2, r2
 800339c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800339e:	241a      	movs	r4, #26
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6959      	ldr	r1, [r3, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	895a      	ldrh	r2, [r3, #10]
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	f004 fda2 	bl	8007f00 <USB_ReadPMA>
    }
  }

  return count;
 80033bc:	231a      	movs	r3, #26
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	881b      	ldrh	r3, [r3, #0]
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b009      	add	sp, #36	@ 0x24
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	00000402 	.word	0x00000402
 80033d0:	ffffbf8f 	.word	0xffffbf8f
 80033d4:	ffff8080 	.word	0xffff8080
 80033d8:	ffff8f8f 	.word	0xffff8f8f
 80033dc:	ffff80c0 	.word	0xffff80c0
 80033e0:	00000406 	.word	0x00000406

080033e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b0a4      	sub	sp, #144	@ 0x90
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	1dbb      	adds	r3, r7, #6
 80033f0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	2240      	movs	r2, #64	@ 0x40
 80033f8:	4013      	ands	r3, r2
 80033fa:	d100      	bne.n	80033fe <HAL_PCD_EP_DB_Transmit+0x1a>
 80033fc:	e1e4      	b.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2250      	movs	r2, #80	@ 0x50
 8003404:	5a9b      	ldrh	r3, [r3, r2]
 8003406:	b29b      	uxth	r3, r3
 8003408:	001a      	movs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	18d2      	adds	r2, r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	18d3      	adds	r3, r2, r3
 8003418:	4ad0      	ldr	r2, [pc, #832]	@ (800375c <HAL_PCD_EP_DB_Transmit+0x378>)
 800341a:	4694      	mov	ip, r2
 800341c:	4463      	add	r3, ip
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	2188      	movs	r1, #136	@ 0x88
 8003422:	187b      	adds	r3, r7, r1
 8003424:	0592      	lsls	r2, r2, #22
 8003426:	0d92      	lsrs	r2, r2, #22
 8003428:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	187b      	adds	r3, r7, r1
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d907      	bls.n	8003446 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	187b      	adds	r3, r7, r1
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	619a      	str	r2, [r3, #24]
 8003444:	e002      	b.n	800344c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d000      	beq.n	8003456 <HAL_PCD_EP_DB_Transmit+0x72>
 8003454:	e0b5      	b.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d125      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0xc6>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2250      	movs	r2, #80	@ 0x50
 800346a:	5a9b      	ldrh	r3, [r3, r2]
 800346c:	b29b      	uxth	r3, r3
 800346e:	001a      	movs	r2, r3
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	189b      	adds	r3, r3, r2
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00da      	lsls	r2, r3, #3
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	18d3      	adds	r3, r2, r3
 8003480:	4ab6      	ldr	r2, [pc, #728]	@ (800375c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003482:	4694      	mov	ip, r2
 8003484:	4463      	add	r3, ip
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	059b      	lsls	r3, r3, #22
 8003490:	0d9b      	lsrs	r3, r3, #22
 8003492:	b29a      	uxth	r2, r3
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	4ab0      	ldr	r2, [pc, #704]	@ (8003760 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	e01b      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d117      	bne.n	80034e2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2250      	movs	r2, #80	@ 0x50
 80034be:	5a9b      	ldrh	r3, [r3, r2]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	001a      	movs	r2, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	00da      	lsls	r2, r3, #3
 80034d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d2:	18d3      	adds	r3, r2, r3
 80034d4:	4aa1      	ldr	r2, [pc, #644]	@ (800375c <HAL_PCD_EP_DB_Transmit+0x378>)
 80034d6:	4694      	mov	ip, r2
 80034d8:	4463      	add	r3, ip
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	2200      	movs	r2, #0
 80034e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d125      	bne.n	800353c <HAL_PCD_EP_DB_Transmit+0x158>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2250      	movs	r2, #80	@ 0x50
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	001a      	movs	r2, r3
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	189b      	adds	r3, r3, r2
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00da      	lsls	r2, r3, #3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	18d3      	adds	r3, r2, r3
 8003512:	4a94      	ldr	r2, [pc, #592]	@ (8003764 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003514:	4694      	mov	ip, r2
 8003516:	4463      	add	r3, ip
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	0d9b      	lsrs	r3, r3, #22
 8003524:	b29a      	uxth	r2, r3
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	801a      	strh	r2, [r3, #0]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4a8b      	ldr	r2, [pc, #556]	@ (8003760 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	e018      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0x18a>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d114      	bne.n	800356e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2250      	movs	r2, #80	@ 0x50
 800354a:	5a9b      	ldrh	r3, [r3, r2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	001a      	movs	r2, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	189b      	adds	r3, r3, r2
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00da      	lsls	r2, r3, #3
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	18d3      	adds	r3, r2, r3
 8003560:	4a80      	ldr	r2, [pc, #512]	@ (8003764 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003562:	4694      	mov	ip, r2
 8003564:	4463      	add	r3, ip
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	2200      	movs	r2, #0
 800356c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f006 fb32 	bl	8009be0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	01db      	lsls	r3, r3, #7
 8003584:	4013      	ands	r3, r2
 8003586:	d100      	bne.n	800358a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003588:	e308      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	001a      	movs	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	18d3      	adds	r3, r2, r3
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29a      	uxth	r2, r3
 800359c:	2016      	movs	r0, #22
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	4971      	ldr	r1, [pc, #452]	@ (8003768 <HAL_PCD_EP_DB_Transmit+0x384>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	801a      	strh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	001a      	movs	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	18d3      	adds	r3, r2, r3
 80035b4:	183a      	adds	r2, r7, r0
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	496c      	ldr	r1, [pc, #432]	@ (800376c <HAL_PCD_EP_DB_Transmit+0x388>)
 80035ba:	430a      	orrs	r2, r1
 80035bc:	b292      	uxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	e2ec      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035c2:	1dbb      	adds	r3, r7, #6
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	4013      	ands	r3, r2
 80035cc:	d01a      	beq.n	8003604 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	001a      	movs	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	18d3      	adds	r3, r2, r3
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	208a      	movs	r0, #138	@ 0x8a
 80035e2:	183b      	adds	r3, r7, r0
 80035e4:	4960      	ldr	r1, [pc, #384]	@ (8003768 <HAL_PCD_EP_DB_Transmit+0x384>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	001a      	movs	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	183a      	adds	r2, r7, r0
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	495b      	ldr	r1, [pc, #364]	@ (800376c <HAL_PCD_EP_DB_Transmit+0x388>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	b292      	uxth	r2, r2
 8003602:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d000      	beq.n	8003610 <HAL_PCD_EP_DB_Transmit+0x22c>
 800360e:	e2c5      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	2188      	movs	r1, #136	@ 0x88
 8003616:	187b      	adds	r3, r7, r1
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	18d2      	adds	r2, r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	187b      	adds	r3, r7, r1
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	18d2      	adds	r2, r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d30c      	bcc.n	8003654 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	218c      	movs	r1, #140	@ 0x8c
 8003640:	187a      	adds	r2, r7, r1
 8003642:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	187b      	adds	r3, r7, r1
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1ad2      	subs	r2, r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	e01a      	b.n	800368a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800365c:	2388      	movs	r3, #136	@ 0x88
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	228c      	movs	r2, #140	@ 0x8c
 8003664:	18ba      	adds	r2, r7, r2
 8003666:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]
 8003670:	e00b      	b.n	800368a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2224      	movs	r2, #36	@ 0x24
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	228c      	movs	r2, #140	@ 0x8c
 8003680:	18ba      	adds	r2, r7, r2
 8003682:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d000      	beq.n	8003694 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003692:	e06d      	b.n	8003770 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2250      	movs	r2, #80	@ 0x50
 80036a0:	5a9b      	ldrh	r3, [r3, r2]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	001a      	movs	r2, r3
 80036a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	00da      	lsls	r2, r3, #3
 80036b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_PCD_EP_DB_Transmit+0x378>)
 80036b8:	4694      	mov	ip, r2
 80036ba:	4463      	add	r3, ip
 80036bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	059b      	lsls	r3, r3, #22
 80036c6:	0d9b      	lsrs	r3, r3, #22
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	238c      	movs	r3, #140	@ 0x8c
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x306>
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4a20      	ldr	r2, [pc, #128]	@ (8003760 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e061      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 80036ea:	228c      	movs	r2, #140	@ 0x8c
 80036ec:	18bb      	adds	r3, r7, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80036f2:	d817      	bhi.n	8003724 <HAL_PCD_EP_DB_Transmit+0x340>
 80036f4:	18bb      	adds	r3, r7, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036fc:	18bb      	adds	r3, r7, r2
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d002      	beq.n	800370c <HAL_PCD_EP_DB_Transmit+0x328>
 8003706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003708:	3301      	adds	r3, #1
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003714:	b29b      	uxth	r3, r3
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	b29b      	uxth	r3, r3
 800371a:	4313      	orrs	r3, r2
 800371c:	b29a      	uxth	r2, r3
 800371e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e044      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003724:	228c      	movs	r2, #140	@ 0x8c
 8003726:	18bb      	adds	r3, r7, r2
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372e:	18bb      	adds	r3, r7, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	221f      	movs	r2, #31
 8003734:	4013      	ands	r3, r2
 8003736:	d102      	bne.n	800373e <HAL_PCD_EP_DB_Transmit+0x35a>
 8003738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800373a:	3b01      	subs	r3, #1
 800373c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e028      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800375c:	00000402 	.word	0x00000402
 8003760:	ffff8000 	.word	0xffff8000
 8003764:	00000406 	.word	0x00000406
 8003768:	ffff8f8f 	.word	0xffff8f8f
 800376c:	ffffc080 	.word	0xffffc080
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d11a      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	647b      	str	r3, [r7, #68]	@ 0x44
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2250      	movs	r2, #80	@ 0x50
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	001a      	movs	r2, r3
 800378a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378c:	189b      	adds	r3, r3, r2
 800378e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	00da      	lsls	r2, r3, #3
 8003796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003798:	18d3      	adds	r3, r2, r3
 800379a:	4ad9      	ldr	r2, [pc, #868]	@ (8003b00 <HAL_PCD_EP_DB_Transmit+0x71c>)
 800379c:	4694      	mov	ip, r2
 800379e:	4463      	add	r3, ip
 80037a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037a2:	238c      	movs	r3, #140	@ 0x8c
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6959      	ldr	r1, [r3, #20]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	891a      	ldrh	r2, [r3, #8]
 80037ba:	238c      	movs	r3, #140	@ 0x8c
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f004 fb53 	bl	8007e6c <USB_WritePMA>
 80037c6:	e1e9      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2250      	movs	r2, #80	@ 0x50
 80037ce:	5a9b      	ldrh	r3, [r3, r2]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	001a      	movs	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	18d2      	adds	r2, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	4ac8      	ldr	r2, [pc, #800]	@ (8003b04 <HAL_PCD_EP_DB_Transmit+0x720>)
 80037e4:	4694      	mov	ip, r2
 80037e6:	4463      	add	r3, ip
 80037e8:	881a      	ldrh	r2, [r3, #0]
 80037ea:	2188      	movs	r1, #136	@ 0x88
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	0592      	lsls	r2, r2, #22
 80037f0:	0d92      	lsrs	r2, r2, #22
 80037f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d307      	bcc.n	8003810 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	187b      	adds	r3, r7, r1
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	619a      	str	r2, [r3, #24]
 800380e:	e002      	b.n	8003816 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d000      	beq.n	8003820 <HAL_PCD_EP_DB_Transmit+0x43c>
 800381e:	e0bb      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d125      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0x490>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2250      	movs	r2, #80	@ 0x50
 8003834:	5a9b      	ldrh	r3, [r3, r2]
 8003836:	b29b      	uxth	r3, r3
 8003838:	001a      	movs	r2, r3
 800383a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800383c:	189b      	adds	r3, r3, r2
 800383e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	00da      	lsls	r2, r3, #3
 8003846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003848:	18d3      	adds	r3, r2, r3
 800384a:	4aad      	ldr	r2, [pc, #692]	@ (8003b00 <HAL_PCD_EP_DB_Transmit+0x71c>)
 800384c:	4694      	mov	ip, r2
 800384e:	4463      	add	r3, ip
 8003850:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	059b      	lsls	r3, r3, #22
 800385a:	0d9b      	lsrs	r3, r3, #22
 800385c:	b29a      	uxth	r2, r3
 800385e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	4aa7      	ldr	r2, [pc, #668]	@ (8003b08 <HAL_PCD_EP_DB_Transmit+0x724>)
 800386a:	4313      	orrs	r3, r2
 800386c:	b29a      	uxth	r2, r3
 800386e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	e01b      	b.n	80038ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d117      	bne.n	80038ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	667b      	str	r3, [r7, #100]	@ 0x64
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2250      	movs	r2, #80	@ 0x50
 8003888:	5a9b      	ldrh	r3, [r3, r2]
 800388a:	b29b      	uxth	r3, r3
 800388c:	001a      	movs	r2, r3
 800388e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003890:	189b      	adds	r3, r3, r2
 8003892:	667b      	str	r3, [r7, #100]	@ 0x64
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	00da      	lsls	r2, r3, #3
 800389a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800389c:	18d3      	adds	r3, r2, r3
 800389e:	4a98      	ldr	r2, [pc, #608]	@ (8003b00 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80038a0:	4694      	mov	ip, r2
 80038a2:	4463      	add	r3, ip
 80038a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038a8:	2200      	movs	r2, #0
 80038aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12b      	bne.n	8003912 <HAL_PCD_EP_DB_Transmit+0x52e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2250      	movs	r2, #80	@ 0x50
 80038c6:	5a9b      	ldrh	r3, [r3, r2]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	001a      	movs	r2, r3
 80038cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	00da      	lsls	r2, r3, #3
 80038d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	4a89      	ldr	r2, [pc, #548]	@ (8003b04 <HAL_PCD_EP_DB_Transmit+0x720>)
 80038de:	4694      	mov	ip, r2
 80038e0:	4463      	add	r3, ip
 80038e2:	2184      	movs	r1, #132	@ 0x84
 80038e4:	187a      	adds	r2, r7, r1
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	059b      	lsls	r3, r3, #22
 80038f2:	0d9b      	lsrs	r3, r3, #22
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4a80      	ldr	r2, [pc, #512]	@ (8003b08 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003906:	4313      	orrs	r3, r2
 8003908:	b29a      	uxth	r2, r3
 800390a:	187b      	adds	r3, r7, r1
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	e018      	b.n	8003944 <HAL_PCD_EP_DB_Transmit+0x560>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d114      	bne.n	8003944 <HAL_PCD_EP_DB_Transmit+0x560>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2250      	movs	r2, #80	@ 0x50
 8003920:	5a9b      	ldrh	r3, [r3, r2]
 8003922:	b29b      	uxth	r3, r3
 8003924:	001a      	movs	r2, r3
 8003926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003928:	189b      	adds	r3, r3, r2
 800392a:	677b      	str	r3, [r7, #116]	@ 0x74
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00da      	lsls	r2, r3, #3
 8003932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003934:	18d3      	adds	r3, r2, r3
 8003936:	4a73      	ldr	r2, [pc, #460]	@ (8003b04 <HAL_PCD_EP_DB_Transmit+0x720>)
 8003938:	4694      	mov	ip, r2
 800393a:	4463      	add	r3, ip
 800393c:	673b      	str	r3, [r7, #112]	@ 0x70
 800393e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003940:	2200      	movs	r2, #0
 8003942:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f006 f947 	bl	8009be0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003952:	1dbb      	adds	r3, r7, #6
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	2380      	movs	r3, #128	@ 0x80
 8003958:	01db      	lsls	r3, r3, #7
 800395a:	4013      	ands	r3, r2
 800395c:	d000      	beq.n	8003960 <HAL_PCD_EP_DB_Transmit+0x57c>
 800395e:	e11d      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	001a      	movs	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29a      	uxth	r2, r3
 8003972:	2082      	movs	r0, #130	@ 0x82
 8003974:	183b      	adds	r3, r7, r0
 8003976:	4965      	ldr	r1, [pc, #404]	@ (8003b0c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003978:	400a      	ands	r2, r1
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	001a      	movs	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	183a      	adds	r2, r7, r0
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	4960      	ldr	r1, [pc, #384]	@ (8003b10 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003990:	430a      	orrs	r2, r1
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e101      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003998:	1dbb      	adds	r3, r7, #6
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	@ 0x80
 800399e:	01db      	lsls	r3, r3, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	d11a      	bne.n	80039da <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	001a      	movs	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	204e      	movs	r0, #78	@ 0x4e
 80039b8:	183b      	adds	r3, r7, r0
 80039ba:	4954      	ldr	r1, [pc, #336]	@ (8003b0c <HAL_PCD_EP_DB_Transmit+0x728>)
 80039bc:	400a      	ands	r2, r1
 80039be:	801a      	strh	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	001a      	movs	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	18d3      	adds	r3, r2, r3
 80039ce:	183a      	adds	r2, r7, r0
 80039d0:	8812      	ldrh	r2, [r2, #0]
 80039d2:	494f      	ldr	r1, [pc, #316]	@ (8003b10 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	b292      	uxth	r2, r2
 80039d8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2224      	movs	r2, #36	@ 0x24
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d000      	beq.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x602>
 80039e4:	e0da      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	2188      	movs	r1, #136	@ 0x88
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	18d2      	adds	r2, r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	18d2      	adds	r2, r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d30c      	bcc.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	218c      	movs	r1, #140	@ 0x8c
 8003a16:	187a      	adds	r2, r7, r1
 8003a18:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	621a      	str	r2, [r3, #32]
 8003a28:	e01a      	b.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003a32:	2388      	movs	r3, #136	@ 0x88
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	228c      	movs	r2, #140	@ 0x8c
 8003a3a:	18ba      	adds	r2, r7, r2
 8003a3c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2224      	movs	r2, #36	@ 0x24
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	e00b      	b.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	228c      	movs	r2, #140	@ 0x8c
 8003a4e:	18ba      	adds	r2, r7, r2
 8003a50:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2224      	movs	r2, #36	@ 0x24
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d000      	beq.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x68c>
 8003a6e:	e06d      	b.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x768>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2250      	movs	r2, #80	@ 0x50
 8003a7c:	5a9b      	ldrh	r3, [r3, r2]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	001a      	movs	r2, r3
 8003a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	00da      	lsls	r2, r3, #3
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a90:	18d3      	adds	r3, r2, r3
 8003a92:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_PCD_EP_DB_Transmit+0x720>)
 8003a94:	4694      	mov	ip, r2
 8003a96:	4463      	add	r3, ip
 8003a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	059b      	lsls	r3, r3, #22
 8003aa2:	0d9b      	lsrs	r3, r3, #22
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	238c      	movs	r3, #140	@ 0x8c
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8003ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4a13      	ldr	r2, [pc, #76]	@ (8003b08 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e05e      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003ac6:	228c      	movs	r2, #140	@ 0x8c
 8003ac8:	18bb      	adds	r3, r7, r2
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ace:	d821      	bhi.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x730>
 8003ad0:	18bb      	adds	r3, r7, r2
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ad8:	18bb      	adds	r3, r7, r2
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d002      	beq.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x704>
 8003ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	e041      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b00:	00000402 	.word	0x00000402
 8003b04:	00000406 	.word	0x00000406
 8003b08:	ffff8000 	.word	0xffff8000
 8003b0c:	ffff8f8f 	.word	0xffff8f8f
 8003b10:	ffffc080 	.word	0xffffc080
 8003b14:	228c      	movs	r2, #140	@ 0x8c
 8003b16:	18bb      	adds	r3, r7, r2
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b1e:	18bb      	adds	r3, r7, r2
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	221f      	movs	r2, #31
 8003b24:	4013      	ands	r3, r2
 8003b26:	d102      	bne.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x74a>
 8003b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf4 <HAL_PCD_EP_DB_Transmit+0x810>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e01b      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d117      	bne.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2250      	movs	r2, #80	@ 0x50
 8003b5a:	5a9b      	ldrh	r3, [r3, r2]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	00da      	lsls	r2, r3, #3
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003b72:	4694      	mov	ip, r2
 8003b74:	4463      	add	r3, ip
 8003b76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b78:	238c      	movs	r3, #140	@ 0x8c
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6959      	ldr	r1, [r3, #20]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	895a      	ldrh	r2, [r3, #10]
 8003b90:	238c      	movs	r3, #140	@ 0x8c
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f004 f968 	bl	8007e6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	2014      	movs	r0, #20
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	4912      	ldr	r1, [pc, #72]	@ (8003bfc <HAL_PCD_EP_DB_Transmit+0x818>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	183a      	adds	r2, r7, r0
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	2110      	movs	r1, #16
 8003bc0:	404a      	eors	r2, r1
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	183a      	adds	r2, r7, r0
 8003bc8:	8812      	ldrh	r2, [r2, #0]
 8003bca:	2120      	movs	r1, #32
 8003bcc:	404a      	eors	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	001a      	movs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	18d3      	adds	r3, r2, r3
 8003bde:	183a      	adds	r2, r7, r0
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	4907      	ldr	r1, [pc, #28]	@ (8003c00 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	b292      	uxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b024      	add	sp, #144	@ 0x90
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	ffff8000 	.word	0xffff8000
 8003bf8:	00000406 	.word	0x00000406
 8003bfc:	ffff8fbf 	.word	0xffff8fbf
 8003c00:	ffff8080 	.word	0xffff8080

08003c04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	0008      	movs	r0, r1
 8003c0e:	0011      	movs	r1, r2
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	240a      	movs	r4, #10
 8003c14:	193b      	adds	r3, r7, r4
 8003c16:	1c02      	adds	r2, r0, #0
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	1c0a      	adds	r2, r1, #0
 8003c20:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c22:	0021      	movs	r1, r4
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	2207      	movs	r2, #7
 8003c38:	401a      	ands	r2, r3
 8003c3a:	0013      	movs	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	3310      	adds	r3, #16
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e00b      	b.n	8003c64 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c4c:	230a      	movs	r3, #10
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	0013      	movs	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	3351      	adds	r3, #81	@ 0x51
 8003c5c:	33ff      	adds	r3, #255	@ 0xff
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c64:	2308      	movs	r3, #8
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2200      	movs	r2, #0
 8003c72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	80da      	strh	r2, [r3, #6]
 8003c7c:	e00b      	b.n	8003c96 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2201      	movs	r2, #1
 8003c82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b007      	add	sp, #28
 8003c9e:	bd90      	pop	{r4, r7, pc}

08003ca0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	23b4      	movs	r3, #180	@ 0xb4
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	23b2      	movs	r3, #178	@ 0xb2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2254      	movs	r2, #84	@ 0x54
 8003cc6:	5a9b      	ldrh	r3, [r3, r2]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2254      	movs	r2, #84	@ 0x54
 8003cd4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2254      	movs	r2, #84	@ 0x54
 8003cda:	5a9b      	ldrh	r3, [r3, r2]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b299      	uxth	r1, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2254      	movs	r2, #84	@ 0x54
 8003ce8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	000a      	movs	r2, r1
 8003cfe:	1cfb      	adds	r3, r7, #3
 8003d00:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f000 fb76 	bl	800440c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	d100      	bne.n	8003d2c <HAL_RCC_OscConfig+0x20>
 8003d2a:	e08e      	b.n	8003e4a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d2c:	4bc5      	ldr	r3, [pc, #788]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	220c      	movs	r2, #12
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00e      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d38:	4bc2      	ldr	r3, [pc, #776]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d117      	bne.n	8003d74 <HAL_RCC_OscConfig+0x68>
 8003d44:	4bbf      	ldr	r3, [pc, #764]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	23c0      	movs	r3, #192	@ 0xc0
 8003d4a:	025b      	lsls	r3, r3, #9
 8003d4c:	401a      	ands	r2, r3
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d10e      	bne.n	8003d74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d56:	4bbb      	ldr	r3, [pc, #748]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	2380      	movs	r3, #128	@ 0x80
 8003d5c:	029b      	lsls	r3, r3, #10
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d100      	bne.n	8003d64 <HAL_RCC_OscConfig+0x58>
 8003d62:	e071      	b.n	8003e48 <HAL_RCC_OscConfig+0x13c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d000      	beq.n	8003d6e <HAL_RCC_OscConfig+0x62>
 8003d6c:	e06c      	b.n	8003e48 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 fb4c 	bl	800440c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80>
 8003d7c:	4bb1      	ldr	r3, [pc, #708]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4bb0      	ldr	r3, [pc, #704]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	0249      	lsls	r1, r1, #9
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e02f      	b.n	8003dec <HAL_RCC_OscConfig+0xe0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10c      	bne.n	8003dae <HAL_RCC_OscConfig+0xa2>
 8003d94:	4bab      	ldr	r3, [pc, #684]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4baa      	ldr	r3, [pc, #680]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003d9a:	49ab      	ldr	r1, [pc, #684]	@ (8004048 <HAL_RCC_OscConfig+0x33c>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4ba8      	ldr	r3, [pc, #672]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4ba7      	ldr	r3, [pc, #668]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003da6:	49a9      	ldr	r1, [pc, #676]	@ (800404c <HAL_RCC_OscConfig+0x340>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e01e      	b.n	8003dec <HAL_RCC_OscConfig+0xe0>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10e      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xc8>
 8003db6:	4ba3      	ldr	r3, [pc, #652]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4ba2      	ldr	r3, [pc, #648]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003dbc:	2180      	movs	r1, #128	@ 0x80
 8003dbe:	02c9      	lsls	r1, r1, #11
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	4b9f      	ldr	r3, [pc, #636]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b9e      	ldr	r3, [pc, #632]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003dca:	2180      	movs	r1, #128	@ 0x80
 8003dcc:	0249      	lsls	r1, r1, #9
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xe0>
 8003dd4:	4b9b      	ldr	r3, [pc, #620]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b9a      	ldr	r3, [pc, #616]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003dda:	499b      	ldr	r1, [pc, #620]	@ (8004048 <HAL_RCC_OscConfig+0x33c>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	4b98      	ldr	r3, [pc, #608]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b97      	ldr	r3, [pc, #604]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003de6:	4999      	ldr	r1, [pc, #612]	@ (800404c <HAL_RCC_OscConfig+0x340>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d014      	beq.n	8003e1e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fd fce8 	bl	80017c8 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfe:	f7fd fce3 	bl	80017c8 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b64      	cmp	r3, #100	@ 0x64
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e2fd      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e10:	4b8c      	ldr	r3, [pc, #560]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0xf2>
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fcd3 	bl	80017c8 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fd fcce 	bl	80017c8 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e2e8      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	4b82      	ldr	r3, [pc, #520]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	4013      	ands	r3, r2
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x11c>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x14a>
 8003e54:	e06c      	b.n	8003f30 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e56:	4b7b      	ldr	r3, [pc, #492]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e60:	4b78      	ldr	r3, [pc, #480]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	220c      	movs	r2, #12
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d11f      	bne.n	8003eac <HAL_RCC_OscConfig+0x1a0>
 8003e6c:	4b75      	ldr	r3, [pc, #468]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	23c0      	movs	r3, #192	@ 0xc0
 8003e72:	025b      	lsls	r3, r3, #9
 8003e74:	401a      	ands	r2, r3
 8003e76:	2380      	movs	r3, #128	@ 0x80
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b71      	ldr	r3, [pc, #452]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_OscConfig+0x188>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e2bb      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4b6b      	ldr	r3, [pc, #428]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	22f8      	movs	r2, #248	@ 0xf8
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00da      	lsls	r2, r3, #3
 8003ea4:	4b67      	ldr	r3, [pc, #412]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e041      	b.n	8003f30 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d024      	beq.n	8003efe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b63      	ldr	r3, [pc, #396]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b62      	ldr	r3, [pc, #392]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fc82 	bl	80017c8 <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fd fc7d 	bl	80017c8 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e297      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	4b59      	ldr	r3, [pc, #356]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d0f1      	beq.n	8003eca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b57      	ldr	r3, [pc, #348]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	22f8      	movs	r2, #248	@ 0xf8
 8003eec:	4393      	bics	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	00da      	lsls	r2, r3, #3
 8003ef6:	4b53      	ldr	r3, [pc, #332]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e018      	b.n	8003f30 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efe:	4b51      	ldr	r3, [pc, #324]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b50      	ldr	r3, [pc, #320]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f04:	2101      	movs	r1, #1
 8003f06:	438a      	bics	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fd fc5d 	bl	80017c8 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd fc58 	bl	80017c8 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e272      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d1f1      	bne.n	8003f14 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2208      	movs	r2, #8
 8003f36:	4013      	ands	r3, r2
 8003f38:	d036      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b40      	ldr	r3, [pc, #256]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f46:	4b3f      	ldr	r3, [pc, #252]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fc3b 	bl	80017c8 <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd fc36 	bl	80017c8 <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e250      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d0f1      	beq.n	8003f58 <HAL_RCC_OscConfig+0x24c>
 8003f74:	e018      	b.n	8003fa8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b33      	ldr	r3, [pc, #204]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7a:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	438a      	bics	r2, r1
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f82:	f7fd fc21 	bl	80017c8 <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fc1c 	bl	80017c8 <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e236      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9e:	4b29      	ldr	r3, [pc, #164]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d1f1      	bne.n	8003f8c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2204      	movs	r2, #4
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x2a8>
 8003fb2:	e0b5      	b.n	8004120 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	201f      	movs	r0, #31
 8003fb6:	183b      	adds	r3, r7, r0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbc:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	2380      	movs	r3, #128	@ 0x80
 8003fc2:	055b      	lsls	r3, r3, #21
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d110      	bne.n	8003fea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	0549      	lsls	r1, r1, #21
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	61da      	str	r2, [r3, #28]
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	055b      	lsls	r3, r3, #21
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_OscConfig+0x344>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d11a      	bne.n	800402c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <HAL_RCC_OscConfig+0x344>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_RCC_OscConfig+0x344>)
 8003ffc:	2180      	movs	r1, #128	@ 0x80
 8003ffe:	0049      	lsls	r1, r1, #1
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004004:	f7fd fbe0 	bl	80017c8 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd fbdb 	bl	80017c8 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	@ 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1f5      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_RCC_OscConfig+0x344>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10f      	bne.n	8004054 <HAL_RCC_OscConfig+0x348>
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	4b02      	ldr	r3, [pc, #8]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
 800403a:	2101      	movs	r1, #1
 800403c:	430a      	orrs	r2, r1
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	e036      	b.n	80040b0 <HAL_RCC_OscConfig+0x3a4>
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	40021000 	.word	0x40021000
 8004048:	fffeffff 	.word	0xfffeffff
 800404c:	fffbffff 	.word	0xfffbffff
 8004050:	40007000 	.word	0x40007000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10c      	bne.n	8004076 <HAL_RCC_OscConfig+0x36a>
 800405c:	4bca      	ldr	r3, [pc, #808]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	4bc9      	ldr	r3, [pc, #804]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004062:	2101      	movs	r1, #1
 8004064:	438a      	bics	r2, r1
 8004066:	621a      	str	r2, [r3, #32]
 8004068:	4bc7      	ldr	r3, [pc, #796]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	4bc6      	ldr	r3, [pc, #792]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800406e:	2104      	movs	r1, #4
 8004070:	438a      	bics	r2, r1
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x3a4>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x38c>
 800407e:	4bc2      	ldr	r3, [pc, #776]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	4bc1      	ldr	r3, [pc, #772]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004084:	2104      	movs	r1, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	4bbf      	ldr	r3, [pc, #764]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	4bbe      	ldr	r3, [pc, #760]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	621a      	str	r2, [r3, #32]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x3a4>
 8004098:	4bbb      	ldr	r3, [pc, #748]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	4bba      	ldr	r3, [pc, #744]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800409e:	2101      	movs	r1, #1
 80040a0:	438a      	bics	r2, r1
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	4bb7      	ldr	r3, [pc, #732]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80040aa:	2104      	movs	r1, #4
 80040ac:	438a      	bics	r2, r1
 80040ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d014      	beq.n	80040e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b8:	f7fd fb86 	bl	80017c8 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e009      	b.n	80040d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd fb81 	bl	80017c8 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	4aaf      	ldr	r2, [pc, #700]	@ (800438c <HAL_RCC_OscConfig+0x680>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e19a      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	4bac      	ldr	r3, [pc, #688]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x3b6>
 80040e0:	e013      	b.n	800410a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fd fb71 	bl	80017c8 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ea:	e009      	b.n	8004100 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fd fb6c 	bl	80017c8 <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	4aa5      	ldr	r2, [pc, #660]	@ (800438c <HAL_RCC_OscConfig+0x680>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e185      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	4ba1      	ldr	r3, [pc, #644]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800410a:	231f      	movs	r3, #31
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b9c      	ldr	r3, [pc, #624]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	4b9b      	ldr	r3, [pc, #620]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800411a:	499d      	ldr	r1, [pc, #628]	@ (8004390 <HAL_RCC_OscConfig+0x684>)
 800411c:	400a      	ands	r2, r1
 800411e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d12a      	bne.n	8004188 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004132:	4b95      	ldr	r3, [pc, #596]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004136:	4b94      	ldr	r3, [pc, #592]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004138:	2104      	movs	r1, #4
 800413a:	430a      	orrs	r2, r1
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800413e:	4b92      	ldr	r3, [pc, #584]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004142:	4b91      	ldr	r3, [pc, #580]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004144:	2101      	movs	r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414a:	f7fd fb3d 	bl	80017c8 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004154:	f7fd fb38 	bl	80017c8 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e152      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004166:	4b88      	ldr	r3, [pc, #544]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	d0f1      	beq.n	8004154 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004170:	4b85      	ldr	r3, [pc, #532]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004174:	22f8      	movs	r2, #248	@ 0xf8
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	4b81      	ldr	r3, [pc, #516]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004182:	430a      	orrs	r2, r1
 8004184:	635a      	str	r2, [r3, #52]	@ 0x34
 8004186:	e034      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	3305      	adds	r3, #5
 800418e:	d111      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004190:	4b7d      	ldr	r3, [pc, #500]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004194:	4b7c      	ldr	r3, [pc, #496]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004196:	2104      	movs	r1, #4
 8004198:	438a      	bics	r2, r1
 800419a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800419c:	4b7a      	ldr	r3, [pc, #488]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	22f8      	movs	r2, #248	@ 0xf8
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	4b76      	ldr	r3, [pc, #472]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041ae:	430a      	orrs	r2, r1
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80041b2:	e01e      	b.n	80041f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041b4:	4b74      	ldr	r3, [pc, #464]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b8:	4b73      	ldr	r3, [pc, #460]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041ba:	2104      	movs	r1, #4
 80041bc:	430a      	orrs	r2, r1
 80041be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041c0:	4b71      	ldr	r3, [pc, #452]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041c4:	4b70      	ldr	r3, [pc, #448]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fd fafc 	bl	80017c8 <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041d6:	f7fd faf7 	bl	80017c8 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e111      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041e8:	4b67      	ldr	r3, [pc, #412]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d1f1      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2220      	movs	r2, #32
 80041f8:	4013      	ands	r3, r2
 80041fa:	d05c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041fc:	4b62      	ldr	r3, [pc, #392]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	220c      	movs	r2, #12
 8004202:	4013      	ands	r3, r2
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d00e      	beq.n	8004226 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004208:	4b5f      	ldr	r3, [pc, #380]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	220c      	movs	r2, #12
 800420e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004210:	2b08      	cmp	r3, #8
 8004212:	d114      	bne.n	800423e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004214:	4b5c      	ldr	r3, [pc, #368]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	23c0      	movs	r3, #192	@ 0xc0
 800421a:	025b      	lsls	r3, r3, #9
 800421c:	401a      	ands	r2, r3
 800421e:	23c0      	movs	r3, #192	@ 0xc0
 8004220:	025b      	lsls	r3, r3, #9
 8004222:	429a      	cmp	r2, r3
 8004224:	d10b      	bne.n	800423e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004226:	4b58      	ldr	r3, [pc, #352]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800422a:	2380      	movs	r3, #128	@ 0x80
 800422c:	029b      	lsls	r3, r3, #10
 800422e:	4013      	ands	r3, r2
 8004230:	d040      	beq.n	80042b4 <HAL_RCC_OscConfig+0x5a8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d03c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0e6      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01b      	beq.n	800427e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004246:	4b50      	ldr	r3, [pc, #320]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800424a:	4b4f      	ldr	r3, [pc, #316]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800424c:	2180      	movs	r1, #128	@ 0x80
 800424e:	0249      	lsls	r1, r1, #9
 8004250:	430a      	orrs	r2, r1
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fab8 	bl	80017c8 <HAL_GetTick>
 8004258:	0003      	movs	r3, r0
 800425a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425e:	f7fd fab3 	bl	80017c8 <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0cd      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004270:	4b45      	ldr	r3, [pc, #276]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	4013      	ands	r3, r2
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x552>
 800427c:	e01b      	b.n	80042b6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800427e:	4b42      	ldr	r3, [pc, #264]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004282:	4b41      	ldr	r3, [pc, #260]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004284:	4943      	ldr	r1, [pc, #268]	@ (8004394 <HAL_RCC_OscConfig+0x688>)
 8004286:	400a      	ands	r2, r1
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fd fa9d 	bl	80017c8 <HAL_GetTick>
 800428e:	0003      	movs	r3, r0
 8004290:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004294:	f7fd fa98 	bl	80017c8 <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0b2      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80042a6:	4b38      	ldr	r3, [pc, #224]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80042a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042aa:	2380      	movs	r3, #128	@ 0x80
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	4013      	ands	r3, r2
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x588>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042b4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d100      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5b4>
 80042be:	e0a4      	b.n	800440a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c0:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	220c      	movs	r2, #12
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d100      	bne.n	80042ce <HAL_RCC_OscConfig+0x5c2>
 80042cc:	e078      	b.n	80043c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d14c      	bne.n	8004370 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 80042dc:	492e      	ldr	r1, [pc, #184]	@ (8004398 <HAL_RCC_OscConfig+0x68c>)
 80042de:	400a      	ands	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fd fa71 	bl	80017c8 <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fa6c 	bl	80017c8 <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e086      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	@ 0x80
 8004304:	049b      	lsls	r3, r3, #18
 8004306:	4013      	ands	r3, r2
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430a:	4b1f      	ldr	r3, [pc, #124]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	220f      	movs	r2, #15
 8004310:	4393      	bics	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004318:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800431a:	430a      	orrs	r2, r1
 800431c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800431e:	4b1a      	ldr	r3, [pc, #104]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_RCC_OscConfig+0x690>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	431a      	orrs	r2, r3
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004338:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 800433e:	2180      	movs	r1, #128	@ 0x80
 8004340:	0449      	lsls	r1, r1, #17
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fd fa3f 	bl	80017c8 <HAL_GetTick>
 800434a:	0003      	movs	r3, r0
 800434c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fd fa3a 	bl	80017c8 <HAL_GetTick>
 8004354:	0002      	movs	r2, r0
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e054      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	049b      	lsls	r3, r3, #18
 800436a:	4013      	ands	r3, r2
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x644>
 800436e:	e04c      	b.n	800440a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <HAL_RCC_OscConfig+0x67c>)
 8004376:	4908      	ldr	r1, [pc, #32]	@ (8004398 <HAL_RCC_OscConfig+0x68c>)
 8004378:	400a      	ands	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fa24 	bl	80017c8 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x6a6>
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	40021000 	.word	0x40021000
 800438c:	00001388 	.word	0x00001388
 8004390:	efffffff 	.word	0xefffffff
 8004394:	fffeffff 	.word	0xfffeffff
 8004398:	feffffff 	.word	0xfeffffff
 800439c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fa12 	bl	80017c8 <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e02c      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <HAL_RCC_OscConfig+0x708>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	049b      	lsls	r3, r3, #18
 80043ba:	4013      	ands	r3, r2
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x694>
 80043be:	e024      	b.n	800440a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01f      	b.n	800440c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043cc:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <HAL_RCC_OscConfig+0x708>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <HAL_RCC_OscConfig+0x708>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	23c0      	movs	r3, #192	@ 0xc0
 80043dc:	025b      	lsls	r3, r3, #9
 80043de:	401a      	ands	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d10e      	bne.n	8004406 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	220f      	movs	r2, #15
 80043ec:	401a      	ands	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	23f0      	movs	r3, #240	@ 0xf0
 80043fa:	039b      	lsls	r3, r3, #14
 80043fc:	401a      	ands	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b008      	add	sp, #32
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000

08004418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0bf      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b61      	ldr	r3, [pc, #388]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2201      	movs	r2, #1
 8004432:	4013      	ands	r3, r2
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d911      	bls.n	800445e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b5e      	ldr	r3, [pc, #376]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	4393      	bics	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	4b5b      	ldr	r3, [pc, #364]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444c:	4b59      	ldr	r3, [pc, #356]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	4013      	ands	r3, r2
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0a6      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	d015      	beq.n	8004494 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2204      	movs	r2, #4
 800446e:	4013      	ands	r3, r2
 8004470:	d006      	beq.n	8004480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004472:	4b51      	ldr	r3, [pc, #324]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4b50      	ldr	r3, [pc, #320]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004478:	21e0      	movs	r1, #224	@ 0xe0
 800447a:	00c9      	lsls	r1, r1, #3
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b4d      	ldr	r3, [pc, #308]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	22f0      	movs	r2, #240	@ 0xf0
 8004486:	4393      	bics	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4b4a      	ldr	r3, [pc, #296]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	4013      	ands	r3, r2
 800449c:	d04c      	beq.n	8004538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	4013      	ands	r3, r2
 80044b0:	d120      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07a      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b3e      	ldr	r3, [pc, #248]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	049b      	lsls	r3, r3, #18
 80044c6:	4013      	ands	r3, r2
 80044c8:	d114      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e06e      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044d6:	4b38      	ldr	r3, [pc, #224]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 80044d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	4013      	ands	r3, r2
 80044e0:	d108      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e062      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b34      	ldr	r3, [pc, #208]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2202      	movs	r2, #2
 80044ec:	4013      	ands	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e05b      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f4:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	4393      	bics	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4b2d      	ldr	r3, [pc, #180]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fd f95e 	bl	80017c8 <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004510:	e009      	b.n	8004526 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004512:	f7fd f959 	bl	80017c8 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	4a27      	ldr	r2, [pc, #156]	@ (80045bc <HAL_RCC_ClockConfig+0x1a4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e042      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	220c      	movs	r2, #12
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1ec      	bne.n	8004512 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b1e      	ldr	r3, [pc, #120]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	4013      	ands	r3, r2
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d211      	bcs.n	800456a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	4393      	bics	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	4b18      	ldr	r3, [pc, #96]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004558:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <HAL_RCC_ClockConfig+0x19c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2201      	movs	r2, #1
 800455e:	4013      	ands	r3, r2
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e020      	b.n	80045ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2204      	movs	r2, #4
 8004570:	4013      	ands	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <HAL_RCC_ClockConfig+0x1a8>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004588:	f000 f820 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 800458c:	0001      	movs	r1, r0
 800458e:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <HAL_RCC_ClockConfig+0x1a0>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	220f      	movs	r2, #15
 8004596:	4013      	ands	r3, r2
 8004598:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_RCC_ClockConfig+0x1ac>)
 800459a:	5cd3      	ldrb	r3, [r2, r3]
 800459c:	000a      	movs	r2, r1
 800459e:	40da      	lsrs	r2, r3
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_ClockConfig+0x1b0>)
 80045a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045a4:	2003      	movs	r0, #3
 80045a6:	f7fd f8c9 	bl	800173c <HAL_InitTick>
  
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40021000 	.word	0x40021000
 80045bc:	00001388 	.word	0x00001388
 80045c0:	fffff8ff 	.word	0xfffff8ff
 80045c4:	0800a2ac 	.word	0x0800a2ac
 80045c8:	2000002c 	.word	0x2000002c

080045cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045e6:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	220c      	movs	r2, #12
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d046      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0xb8>
 80045f6:	d848      	bhi.n	800468a <HAL_RCC_GetSysClockFreq+0xbe>
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d002      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x36>
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x3c>
 8004600:	e043      	b.n	800468a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004602:	4b27      	ldr	r3, [pc, #156]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004604:	613b      	str	r3, [r7, #16]
      break;
 8004606:	e043      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	220f      	movs	r2, #15
 800460e:	4013      	ands	r3, r2
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004616:	4b21      	ldr	r3, [pc, #132]	@ (800469c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	220f      	movs	r2, #15
 800461c:	4013      	ands	r3, r2
 800461e:	4a22      	ldr	r2, [pc, #136]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	23c0      	movs	r3, #192	@ 0xc0
 8004628:	025b      	lsls	r3, r3, #9
 800462a:	401a      	ands	r2, r3
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	025b      	lsls	r3, r3, #9
 8004630:	429a      	cmp	r2, r3
 8004632:	d109      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	481a      	ldr	r0, [pc, #104]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004638:	f7fb fd66 	bl	8000108 <__udivsi3>
 800463c:	0003      	movs	r3, r0
 800463e:	001a      	movs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4353      	muls	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e01a      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	23c0      	movs	r3, #192	@ 0xc0
 800464c:	025b      	lsls	r3, r3, #9
 800464e:	401a      	ands	r2, r3
 8004650:	23c0      	movs	r3, #192	@ 0xc0
 8004652:	025b      	lsls	r3, r3, #9
 8004654:	429a      	cmp	r2, r3
 8004656:	d109      	bne.n	800466c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	4814      	ldr	r0, [pc, #80]	@ (80046ac <HAL_RCC_GetSysClockFreq+0xe0>)
 800465c:	f7fb fd54 	bl	8000108 <__udivsi3>
 8004660:	0003      	movs	r3, r0
 8004662:	001a      	movs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4353      	muls	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e008      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	480c      	ldr	r0, [pc, #48]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004670:	f7fb fd4a 	bl	8000108 <__udivsi3>
 8004674:	0003      	movs	r3, r0
 8004676:	001a      	movs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4353      	muls	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	613b      	str	r3, [r7, #16]
      break;
 8004682:	e005      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004684:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_GetSysClockFreq+0xe0>)
 8004686:	613b      	str	r3, [r7, #16]
      break;
 8004688:	e002      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800468a:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800468c:	613b      	str	r3, [r7, #16]
      break;
 800468e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004690:	693b      	ldr	r3, [r7, #16]
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b006      	add	sp, #24
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	40021000 	.word	0x40021000
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	0800a2bc 	.word	0x0800a2bc
 80046a8:	0800a2cc 	.word	0x0800a2cc
 80046ac:	02dc6c00 	.word	0x02dc6c00

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	2380      	movs	r3, #128	@ 0x80
 80046c6:	025b      	lsls	r3, r3, #9
 80046c8:	4013      	ands	r3, r2
 80046ca:	d100      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046cc:	e08e      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2017      	movs	r0, #23
 80046d0:	183b      	adds	r3, r7, r0
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	055b      	lsls	r3, r3, #21
 80046de:	4013      	ands	r3, r2
 80046e0:	d110      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046e8:	2180      	movs	r1, #128	@ 0x80
 80046ea:	0549      	lsls	r1, r1, #21
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
 80046f0:	4b67      	ldr	r3, [pc, #412]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	055b      	lsls	r3, r3, #21
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b63      	ldr	r3, [pc, #396]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4013      	ands	r3, r2
 800470e:	d11a      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004710:	4b60      	ldr	r3, [pc, #384]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b5f      	ldr	r3, [pc, #380]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004716:	2180      	movs	r1, #128	@ 0x80
 8004718:	0049      	lsls	r1, r1, #1
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fd f853 	bl	80017c8 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	e008      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004728:	f7fd f84e 	bl	80017c8 <HAL_GetTick>
 800472c:	0002      	movs	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0a6      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b56      	ldr	r3, [pc, #344]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d0f0      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004746:	4b52      	ldr	r3, [pc, #328]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004748:	6a1a      	ldr	r2, [r3, #32]
 800474a:	23c0      	movs	r3, #192	@ 0xc0
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d034      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	23c0      	movs	r3, #192	@ 0xc0
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4013      	ands	r3, r2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d02c      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b49      	ldr	r3, [pc, #292]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4a4a      	ldr	r2, [pc, #296]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800476e:	4013      	ands	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	4b46      	ldr	r3, [pc, #280]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004778:	2180      	movs	r1, #128	@ 0x80
 800477a:	0249      	lsls	r1, r1, #9
 800477c:	430a      	orrs	r2, r1
 800477e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004780:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004786:	4945      	ldr	r1, [pc, #276]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004788:	400a      	ands	r2, r1
 800478a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800478c:	4b40      	ldr	r3, [pc, #256]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479a:	f7fd f815 	bl	80017c8 <HAL_GetTick>
 800479e:	0003      	movs	r3, r0
 80047a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	e009      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd f810 	bl	80017c8 <HAL_GetTick>
 80047a8:	0002      	movs	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4a3c      	ldr	r2, [pc, #240]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e067      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b8:	4b35      	ldr	r3, [pc, #212]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	2202      	movs	r2, #2
 80047be:	4013      	ands	r3, r2
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c2:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a34      	ldr	r2, [pc, #208]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047d2:	430a      	orrs	r2, r1
 80047d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047d6:	2317      	movs	r3, #23
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e6:	492f      	ldr	r1, [pc, #188]	@ (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f6:	4b26      	ldr	r3, [pc, #152]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	2203      	movs	r2, #3
 80047fc:	4393      	bics	r3, r2
 80047fe:	0019      	movs	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004806:	430a      	orrs	r2, r1
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2202      	movs	r2, #2
 8004810:	4013      	ands	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004814:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	4a23      	ldr	r2, [pc, #140]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004824:	430a      	orrs	r2, r1
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2220      	movs	r2, #32
 800482e:	4013      	ands	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	2210      	movs	r2, #16
 8004838:	4393      	bics	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004842:	430a      	orrs	r2, r1
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	029b      	lsls	r3, r3, #10
 800484e:	4013      	ands	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004852:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	4393      	bics	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004862:	430a      	orrs	r2, r1
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4013      	ands	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004872:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	2240      	movs	r2, #64	@ 0x40
 8004878:	4393      	bics	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004882:	430a      	orrs	r2, r1
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b006      	add	sp, #24
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
 8004898:	fffffcff 	.word	0xfffffcff
 800489c:	fffeffff 	.word	0xfffeffff
 80048a0:	00001388 	.word	0x00001388
 80048a4:	efffffff 	.word	0xefffffff
 80048a8:	fffcffff 	.word	0xfffcffff

080048ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e042      	b.n	8004944 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223d      	movs	r2, #61	@ 0x3d
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	223c      	movs	r2, #60	@ 0x3c
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fc fd93 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	223d      	movs	r2, #61	@ 0x3d
 80048de:	2102      	movs	r1, #2
 80048e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	0019      	movs	r1, r3
 80048ec:	0010      	movs	r0, r2
 80048ee:	f000 fee9 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2246      	movs	r2, #70	@ 0x46
 80048f6:	2101      	movs	r1, #1
 80048f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	223e      	movs	r2, #62	@ 0x3e
 80048fe:	2101      	movs	r1, #1
 8004900:	5499      	strb	r1, [r3, r2]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	223f      	movs	r2, #63	@ 0x3f
 8004906:	2101      	movs	r1, #1
 8004908:	5499      	strb	r1, [r3, r2]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2240      	movs	r2, #64	@ 0x40
 800490e:	2101      	movs	r1, #1
 8004910:	5499      	strb	r1, [r3, r2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2241      	movs	r2, #65	@ 0x41
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2242      	movs	r2, #66	@ 0x42
 800491e:	2101      	movs	r1, #1
 8004920:	5499      	strb	r1, [r3, r2]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2243      	movs	r2, #67	@ 0x43
 8004926:	2101      	movs	r1, #1
 8004928:	5499      	strb	r1, [r3, r2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2244      	movs	r2, #68	@ 0x44
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2245      	movs	r2, #69	@ 0x45
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	223d      	movs	r2, #61	@ 0x3d
 800493e:	2101      	movs	r1, #1
 8004940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b002      	add	sp, #8
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	223d      	movs	r2, #61	@ 0x3d
 8004958:	5c9b      	ldrb	r3, [r3, r2]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e03b      	b.n	80049dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223d      	movs	r2, #61	@ 0x3d
 8004968:	2102      	movs	r1, #2
 800496a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <HAL_TIM_Base_Start_IT+0x98>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x5a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	05db      	lsls	r3, r3, #23
 800498e:	429a      	cmp	r2, r3
 8004990:	d009      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x5a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x5a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a12      	ldr	r2, [pc, #72]	@ (80049ec <HAL_TIM_Base_Start_IT+0xa0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d111      	bne.n	80049ca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2207      	movs	r2, #7
 80049ae:	4013      	ands	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d010      	beq.n	80049da <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	e007      	b.n	80049da <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	0018      	movs	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	b004      	add	sp, #16
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e042      	b.n	8004a88 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223d      	movs	r2, #61	@ 0x3d
 8004a06:	5c9b      	ldrb	r3, [r3, r2]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	223c      	movs	r2, #60	@ 0x3c
 8004a12:	2100      	movs	r1, #0
 8004a14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f839 	bl	8004a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	223d      	movs	r2, #61	@ 0x3d
 8004a22:	2102      	movs	r1, #2
 8004a24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	0019      	movs	r1, r3
 8004a30:	0010      	movs	r0, r2
 8004a32:	f000 fe47 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2246      	movs	r2, #70	@ 0x46
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	223e      	movs	r2, #62	@ 0x3e
 8004a42:	2101      	movs	r1, #1
 8004a44:	5499      	strb	r1, [r3, r2]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223f      	movs	r2, #63	@ 0x3f
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	5499      	strb	r1, [r3, r2]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2240      	movs	r2, #64	@ 0x40
 8004a52:	2101      	movs	r1, #1
 8004a54:	5499      	strb	r1, [r3, r2]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2241      	movs	r2, #65	@ 0x41
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2242      	movs	r2, #66	@ 0x42
 8004a62:	2101      	movs	r1, #1
 8004a64:	5499      	strb	r1, [r3, r2]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2243      	movs	r2, #67	@ 0x43
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	5499      	strb	r1, [r3, r2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2244      	movs	r2, #68	@ 0x44
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2245      	movs	r2, #69	@ 0x45
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223d      	movs	r2, #61	@ 0x3d
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a98:	46c0      	nop			@ (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b002      	add	sp, #8
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	001a      	movs	r2, r3
 8004aae:	1cbb      	adds	r3, r7, #2
 8004ab0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2317      	movs	r3, #23
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0x32>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	223e      	movs	r2, #62	@ 0x3e
 8004ac4:	5c9b      	ldrb	r3, [r3, r2]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	3b02      	subs	r3, #2
 8004aca:	425a      	negs	r2, r3
 8004acc:	4153      	adcs	r3, r2
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	e01f      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d108      	bne.n	8004aea <HAL_TIM_PWM_Start_DMA+0x4a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	223f      	movs	r2, #63	@ 0x3f
 8004adc:	5c9b      	ldrb	r3, [r3, r2]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b02      	subs	r3, #2
 8004ae2:	425a      	negs	r2, r3
 8004ae4:	4153      	adcs	r3, r2
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d108      	bne.n	8004b02 <HAL_TIM_PWM_Start_DMA+0x62>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2240      	movs	r2, #64	@ 0x40
 8004af4:	5c9b      	ldrb	r3, [r3, r2]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3b02      	subs	r3, #2
 8004afa:	425a      	negs	r2, r3
 8004afc:	4153      	adcs	r3, r2
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e007      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x72>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2241      	movs	r2, #65	@ 0x41
 8004b06:	5c9b      	ldrb	r3, [r3, r2]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3b02      	subs	r3, #2
 8004b0c:	425a      	negs	r2, r3
 8004b0e:	4153      	adcs	r3, r2
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
 8004b18:	e164      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d108      	bne.n	8004b32 <HAL_TIM_PWM_Start_DMA+0x92>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	223e      	movs	r2, #62	@ 0x3e
 8004b24:	5c9b      	ldrb	r3, [r3, r2]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	425a      	negs	r2, r3
 8004b2c:	4153      	adcs	r3, r2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	e01f      	b.n	8004b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d108      	bne.n	8004b4a <HAL_TIM_PWM_Start_DMA+0xaa>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	223f      	movs	r2, #63	@ 0x3f
 8004b3c:	5c9b      	ldrb	r3, [r3, r2]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	425a      	negs	r2, r3
 8004b44:	4153      	adcs	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e013      	b.n	8004b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d108      	bne.n	8004b62 <HAL_TIM_PWM_Start_DMA+0xc2>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	5c9b      	ldrb	r3, [r3, r2]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	425a      	negs	r2, r3
 8004b5c:	4153      	adcs	r3, r2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e007      	b.n	8004b72 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2241      	movs	r2, #65	@ 0x41
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	425a      	negs	r2, r3
 8004b6e:	4153      	adcs	r3, r2
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d025      	beq.n	8004bc2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_PWM_Start_DMA+0xe4>
 8004b7c:	1cbb      	adds	r3, r7, #2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e12d      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	223e      	movs	r2, #62	@ 0x3e
 8004b92:	2102      	movs	r1, #2
 8004b94:	5499      	strb	r1, [r3, r2]
 8004b96:	e016      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d104      	bne.n	8004ba8 <HAL_TIM_PWM_Start_DMA+0x108>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	223f      	movs	r2, #63	@ 0x3f
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	e00e      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d104      	bne.n	8004bb8 <HAL_TIM_PWM_Start_DMA+0x118>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2240      	movs	r2, #64	@ 0x40
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	5499      	strb	r1, [r3, r2]
 8004bb6:	e006      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x126>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2241      	movs	r2, #65	@ 0x41
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	5499      	strb	r1, [r3, r2]
 8004bc0:	e001      	b.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e10e      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d100      	bne.n	8004bce <HAL_TIM_PWM_Start_DMA+0x12e>
 8004bcc:	e080      	b.n	8004cd0 <HAL_TIM_PWM_Start_DMA+0x230>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d900      	bls.n	8004bd6 <HAL_TIM_PWM_Start_DMA+0x136>
 8004bd4:	e0a1      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0x27a>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d054      	beq.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d900      	bls.n	8004be4 <HAL_TIM_PWM_Start_DMA+0x144>
 8004be2:	e09a      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0x27a>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_PWM_Start_DMA+0x152>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d025      	beq.n	8004c3c <HAL_TIM_PWM_Start_DMA+0x19c>
 8004bf0:	e093      	b.n	8004d1a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8004dec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004bf8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8004df0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	4a7b      	ldr	r2, [pc, #492]	@ (8004df4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3334      	adds	r3, #52	@ 0x34
 8004c16:	001a      	movs	r2, r3
 8004c18:	1cbb      	adds	r3, r7, #2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	f7fc ff04 	bl	8001a28 <HAL_DMA_Start_IT>
 8004c20:	1e03      	subs	r3, r0, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0dd      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	0089      	lsls	r1, r1, #2
 8004c36:	430a      	orrs	r2, r1
 8004c38:	60da      	str	r2, [r3, #12]
      break;
 8004c3a:	e073      	b.n	8004d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	4a6a      	ldr	r2, [pc, #424]	@ (8004dec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	4a69      	ldr	r2, [pc, #420]	@ (8004df0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	4a68      	ldr	r2, [pc, #416]	@ (8004df4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3338      	adds	r3, #56	@ 0x38
 8004c60:	001a      	movs	r2, r3
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	f7fc fedf 	bl	8001a28 <HAL_DMA_Start_IT>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0b8      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2180      	movs	r1, #128	@ 0x80
 8004c7e:	00c9      	lsls	r1, r1, #3
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]
      break;
 8004c84:	e04e      	b.n	8004d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	4a58      	ldr	r2, [pc, #352]	@ (8004dec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004c8c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	4a57      	ldr	r2, [pc, #348]	@ (8004df0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	4a56      	ldr	r2, [pc, #344]	@ (8004df4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	333c      	adds	r3, #60	@ 0x3c
 8004caa:	001a      	movs	r2, r3
 8004cac:	1cbb      	adds	r3, r7, #2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	f7fc feba 	bl	8001a28 <HAL_DMA_Start_IT>
 8004cb4:	1e03      	subs	r3, r0, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e093      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2180      	movs	r1, #128	@ 0x80
 8004cc8:	0109      	lsls	r1, r1, #4
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	60da      	str	r2, [r3, #12]
      break;
 8004cce:	e029      	b.n	8004d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	4a45      	ldr	r2, [pc, #276]	@ (8004dec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	4a44      	ldr	r2, [pc, #272]	@ (8004df0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004cde:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	4a43      	ldr	r2, [pc, #268]	@ (8004df4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3340      	adds	r3, #64	@ 0x40
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	1cbb      	adds	r3, r7, #2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	f7fc fe95 	bl	8001a28 <HAL_DMA_Start_IT>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e06e      	b.n	8004de4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2180      	movs	r1, #128	@ 0x80
 8004d12:	0149      	lsls	r1, r1, #5
 8004d14:	430a      	orrs	r2, r1
 8004d16:	60da      	str	r2, [r3, #12]
      break;
 8004d18:	e004      	b.n	8004d24 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8004d1a:	2317      	movs	r3, #23
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
      break;
 8004d22:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004d24:	2317      	movs	r3, #23
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d157      	bne.n	8004dde <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	2201      	movs	r2, #1
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 ffe8 	bl	8005d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2d      	ldr	r2, [pc, #180]	@ (8004df8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	@ (8004e00 <HAL_TIM_PWM_Start_DMA+0x360>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <HAL_TIM_PWM_Start_DMA+0x364>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_Start_DMA+0x2ca>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2180      	movs	r1, #128	@ 0x80
 8004d7a:	0209      	lsls	r1, r1, #8
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1c      	ldr	r2, [pc, #112]	@ (8004df8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00f      	beq.n	8004daa <HAL_TIM_PWM_Start_DMA+0x30a>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d009      	beq.n	8004daa <HAL_TIM_PWM_Start_DMA+0x30a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIM_PWM_Start_DMA+0x30a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d111      	bne.n	8004dce <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2207      	movs	r2, #7
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d010      	beq.n	8004dde <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	e007      	b.n	8004dde <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004dde:	2317      	movs	r3, #23
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	781b      	ldrb	r3, [r3, #0]
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b006      	add	sp, #24
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	080055b1 	.word	0x080055b1
 8004df0:	0800565b 	.word	0x0800565b
 8004df4:	0800551d 	.word	0x0800551d
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800
 8004e08:	40000400 	.word	0x40000400

08004e0c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	230f      	movs	r3, #15
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d039      	beq.n	8004e98 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d844      	bhi.n	8004eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d025      	beq.n	8004e7c <HAL_TIM_PWM_Stop_DMA+0x70>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d83e      	bhi.n	8004eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_TIM_PWM_Stop_DMA+0x38>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIM_PWM_Stop_DMA+0x54>
 8004e42:	e037      	b.n	8004eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4954      	ldr	r1, [pc, #336]	@ (8004fa0 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fc fe4b 	bl	8001af4 <HAL_DMA_Abort_IT>
      break;
 8004e5e:	e02e      	b.n	8004ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	494e      	ldr	r1, [pc, #312]	@ (8004fa4 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7fc fe3d 	bl	8001af4 <HAL_DMA_Abort_IT>
      break;
 8004e7a:	e020      	b.n	8004ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4948      	ldr	r1, [pc, #288]	@ (8004fa8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fc fe2f 	bl	8001af4 <HAL_DMA_Abort_IT>
      break;
 8004e96:	e012      	b.n	8004ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4942      	ldr	r1, [pc, #264]	@ (8004fac <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7fc fe21 	bl	8001af4 <HAL_DMA_Abort_IT>
      break;
 8004eb2:	e004      	b.n	8004ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8004eb4:	230f      	movs	r3, #15
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
      break;
 8004ebc:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004ebe:	230f      	movs	r3, #15
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d000      	beq.n	8004eca <HAL_TIM_PWM_Stop_DMA+0xbe>
 8004ec8:	e063      	b.n	8004f92 <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 ff1a 	bl	8005d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a34      	ldr	r2, [pc, #208]	@ (8004fb0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a33      	ldr	r2, [pc, #204]	@ (8004fb4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a31      	ldr	r2, [pc, #196]	@ (8004fb8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a30      	ldr	r2, [pc, #192]	@ (8004fbc <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d013      	beq.n	8004f32 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	d10d      	bne.n	8004f32 <HAL_TIM_PWM_Stop_DMA+0x126>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	@ (8004fc4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_PWM_Stop_DMA+0x126>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4926      	ldr	r1, [pc, #152]	@ (8004fc8 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8004f2e:	400a      	ands	r2, r1
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d10d      	bne.n	8004f5a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	d107      	bne.n	8004f5a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	438a      	bics	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Stop_DMA+0x15e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	223e      	movs	r2, #62	@ 0x3e
 8004f64:	2101      	movs	r1, #1
 8004f66:	5499      	strb	r1, [r3, r2]
 8004f68:	e013      	b.n	8004f92 <HAL_TIM_PWM_Stop_DMA+0x186>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223f      	movs	r2, #63	@ 0x3f
 8004f74:	2101      	movs	r1, #1
 8004f76:	5499      	strb	r1, [r3, r2]
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_PWM_Stop_DMA+0x186>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Stop_DMA+0x17e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2240      	movs	r2, #64	@ 0x40
 8004f84:	2101      	movs	r1, #1
 8004f86:	5499      	strb	r1, [r3, r2]
 8004f88:	e003      	b.n	8004f92 <HAL_TIM_PWM_Stop_DMA+0x186>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2241      	movs	r2, #65	@ 0x41
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8004f92:	230f      	movs	r3, #15
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	781b      	ldrb	r3, [r3, #0]
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fffffdff 	.word	0xfffffdff
 8004fa4:	fffffbff 	.word	0xfffffbff
 8004fa8:	fffff7ff 	.word	0xfffff7ff
 8004fac:	ffffefff 	.word	0xffffefff
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800
 8004fc0:	00001111 	.word	0x00001111
 8004fc4:	00000444 	.word	0x00000444
 8004fc8:	ffff7fff 	.word	0xffff7fff

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d021      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4252      	negs	r2, r2
 8004ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2203      	movs	r2, #3
 800500c:	4013      	ands	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 fa6a 	bl	80054ec <HAL_TIM_IC_CaptureCallback>
 8005018:	e007      	b.n	800502a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fa5d 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	0018      	movs	r0, r3
 8005026:	f7fc f90d 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2204      	movs	r2, #4
 8005034:	4013      	ands	r3, r2
 8005036:	d022      	beq.n	800507e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2204      	movs	r2, #4
 800503c:	4013      	ands	r3, r2
 800503e:	d01e      	beq.n	800507e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2205      	movs	r2, #5
 8005046:	4252      	negs	r2, r2
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	23c0      	movs	r3, #192	@ 0xc0
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4013      	ands	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 fa43 	bl	80054ec <HAL_TIM_IC_CaptureCallback>
 8005066:	e007      	b.n	8005078 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fa36 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	0018      	movs	r0, r3
 8005074:	f7fc f8e6 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2208      	movs	r2, #8
 8005082:	4013      	ands	r3, r2
 8005084:	d021      	beq.n	80050ca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2208      	movs	r2, #8
 800508a:	4013      	ands	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2209      	movs	r2, #9
 8005094:	4252      	negs	r2, r2
 8005096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2203      	movs	r2, #3
 80050a6:	4013      	ands	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 fa1d 	bl	80054ec <HAL_TIM_IC_CaptureCallback>
 80050b2:	e007      	b.n	80050c4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0018      	movs	r0, r3
 80050b8:	f000 fa10 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	0018      	movs	r0, r3
 80050c0:	f7fc f8c0 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2210      	movs	r2, #16
 80050ce:	4013      	ands	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2210      	movs	r2, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d01e      	beq.n	8005118 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2211      	movs	r2, #17
 80050e0:	4252      	negs	r2, r2
 80050e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2208      	movs	r2, #8
 80050e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	23c0      	movs	r3, #192	@ 0xc0
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 f9f6 	bl	80054ec <HAL_TIM_IC_CaptureCallback>
 8005100:	e007      	b.n	8005112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0018      	movs	r0, r3
 8005106:	f000 f9e9 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f7fc f899 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2201      	movs	r2, #1
 800511c:	4013      	ands	r3, r2
 800511e:	d00c      	beq.n	800513a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	4013      	ands	r3, r2
 8005126:	d008      	beq.n	800513a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2202      	movs	r2, #2
 800512e:	4252      	negs	r2, r2
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f7fc f913 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2280      	movs	r2, #128	@ 0x80
 800513e:	4013      	ands	r3, r2
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2280      	movs	r2, #128	@ 0x80
 8005146:	4013      	ands	r3, r2
 8005148:	d008      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2281      	movs	r2, #129	@ 0x81
 8005150:	4252      	negs	r2, r2
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 fe62 	bl	8005e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2240      	movs	r2, #64	@ 0x40
 8005160:	4013      	ands	r3, r2
 8005162:	d00c      	beq.n	800517e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2240      	movs	r2, #64	@ 0x40
 8005168:	4013      	ands	r3, r2
 800516a:	d008      	beq.n	800517e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2241      	movs	r2, #65	@ 0x41
 8005172:	4252      	negs	r2, r2
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f000 f9bf 	bl	80054fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2220      	movs	r2, #32
 8005182:	4013      	ands	r3, r2
 8005184:	d00c      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	4013      	ands	r3, r2
 800518c:	d008      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2221      	movs	r2, #33	@ 0x21
 8005194:	4252      	negs	r2, r2
 8005196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fe38 	bl	8005e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2317      	movs	r3, #23
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	223c      	movs	r2, #60	@ 0x3c
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0ad      	b.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	223c      	movs	r2, #60	@ 0x3c
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d100      	bne.n	80051da <HAL_TIM_PWM_ConfigChannel+0x32>
 80051d8:	e076      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d900      	bls.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80051e0:	e095      	b.n	800530e <HAL_TIM_PWM_ConfigChannel+0x166>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d04e      	beq.n	8005286 <HAL_TIM_PWM_ConfigChannel+0xde>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d900      	bls.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80051ee:	e08e      	b.n	800530e <HAL_TIM_PWM_ConfigChannel+0x166>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x56>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d021      	beq.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x98>
 80051fc:	e087      	b.n	800530e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0011      	movs	r1, r2
 8005206:	0018      	movs	r0, r3
 8005208:	f000 faea 	bl	80057e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2108      	movs	r1, #8
 8005218:	430a      	orrs	r2, r1
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2104      	movs	r1, #4
 8005228:	438a      	bics	r2, r1
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	619a      	str	r2, [r3, #24]
      break;
 800523e:	e06b      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	0011      	movs	r1, r2
 8005248:	0018      	movs	r0, r3
 800524a:	f000 fb51 	bl	80058f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2180      	movs	r1, #128	@ 0x80
 800525a:	0109      	lsls	r1, r1, #4
 800525c:	430a      	orrs	r2, r1
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4931      	ldr	r1, [pc, #196]	@ (8005330 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800526c:	400a      	ands	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	619a      	str	r2, [r3, #24]
      break;
 8005284:	e048      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0011      	movs	r1, r2
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fbb2 	bl	80059f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2108      	movs	r1, #8
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2104      	movs	r1, #4
 80052b0:	438a      	bics	r2, r1
 80052b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69d9      	ldr	r1, [r3, #28]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	61da      	str	r2, [r3, #28]
      break;
 80052c6:	e027      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	0011      	movs	r1, r2
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fc17 	bl	8005b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	0109      	lsls	r1, r1, #4
 80052e4:	430a      	orrs	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	490f      	ldr	r1, [pc, #60]	@ (8005330 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69d9      	ldr	r1, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
      break;
 800530c:	e004      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800530e:	2317      	movs	r3, #23
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
      break;
 8005316:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	223c      	movs	r2, #60	@ 0x3c
 800531c:	2100      	movs	r1, #0
 800531e:	5499      	strb	r1, [r3, r2]

  return status;
 8005320:	2317      	movs	r3, #23
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	781b      	ldrb	r3, [r3, #0]
}
 8005326:	0018      	movs	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	b006      	add	sp, #24
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	fffffbff 	.word	0xfffffbff

08005334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	230f      	movs	r3, #15
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	223c      	movs	r2, #60	@ 0x3c
 800534a:	5c9b      	ldrb	r3, [r3, r2]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIM_ConfigClockSource+0x20>
 8005350:	2302      	movs	r3, #2
 8005352:	e0bc      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x19a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	223c      	movs	r2, #60	@ 0x3c
 8005358:	2101      	movs	r1, #1
 800535a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	223d      	movs	r2, #61	@ 0x3d
 8005360:	2102      	movs	r1, #2
 8005362:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2277      	movs	r2, #119	@ 0x77
 8005370:	4393      	bics	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a58      	ldr	r2, [pc, #352]	@ (80054d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005378:	4013      	ands	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2280      	movs	r2, #128	@ 0x80
 800538a:	0192      	lsls	r2, r2, #6
 800538c:	4293      	cmp	r3, r2
 800538e:	d040      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xde>
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	0192      	lsls	r2, r2, #6
 8005394:	4293      	cmp	r3, r2
 8005396:	d900      	bls.n	800539a <HAL_TIM_ConfigClockSource+0x66>
 8005398:	e088      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 800539a:	2280      	movs	r2, #128	@ 0x80
 800539c:	0152      	lsls	r2, r2, #5
 800539e:	4293      	cmp	r3, r2
 80053a0:	d100      	bne.n	80053a4 <HAL_TIM_ConfigClockSource+0x70>
 80053a2:	e088      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x182>
 80053a4:	2280      	movs	r2, #128	@ 0x80
 80053a6:	0152      	lsls	r2, r2, #5
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d900      	bls.n	80053ae <HAL_TIM_ConfigClockSource+0x7a>
 80053ac:	e07e      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053ae:	2b70      	cmp	r3, #112	@ 0x70
 80053b0:	d018      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0xb0>
 80053b2:	d900      	bls.n	80053b6 <HAL_TIM_ConfigClockSource+0x82>
 80053b4:	e07a      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053b6:	2b60      	cmp	r3, #96	@ 0x60
 80053b8:	d04f      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x126>
 80053ba:	d900      	bls.n	80053be <HAL_TIM_ConfigClockSource+0x8a>
 80053bc:	e076      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053be:	2b50      	cmp	r3, #80	@ 0x50
 80053c0:	d03b      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x106>
 80053c2:	d900      	bls.n	80053c6 <HAL_TIM_ConfigClockSource+0x92>
 80053c4:	e072      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053c6:	2b40      	cmp	r3, #64	@ 0x40
 80053c8:	d057      	beq.n	800547a <HAL_TIM_ConfigClockSource+0x146>
 80053ca:	d900      	bls.n	80053ce <HAL_TIM_ConfigClockSource+0x9a>
 80053cc:	e06e      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053ce:	2b30      	cmp	r3, #48	@ 0x30
 80053d0:	d063      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x166>
 80053d2:	d86b      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d060      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x166>
 80053d8:	d868      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d05d      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x166>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d05b      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x166>
 80053e2:	e063      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f4:	f000 fc6a 	bl	8005ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2277      	movs	r2, #119	@ 0x77
 8005404:	4313      	orrs	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	609a      	str	r2, [r3, #8]
      break;
 8005410:	e052      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	f000 fc53 	bl	8005ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2180      	movs	r1, #128	@ 0x80
 8005432:	01c9      	lsls	r1, r1, #7
 8005434:	430a      	orrs	r2, r1
 8005436:	609a      	str	r2, [r3, #8]
      break;
 8005438:	e03e      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	001a      	movs	r2, r3
 8005448:	f000 fbc6 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2150      	movs	r1, #80	@ 0x50
 8005452:	0018      	movs	r0, r3
 8005454:	f000 fc20 	bl	8005c98 <TIM_ITRx_SetConfig>
      break;
 8005458:	e02e      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005466:	001a      	movs	r2, r3
 8005468:	f000 fbe4 	bl	8005c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2160      	movs	r1, #96	@ 0x60
 8005472:	0018      	movs	r0, r3
 8005474:	f000 fc10 	bl	8005c98 <TIM_ITRx_SetConfig>
      break;
 8005478:	e01e      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	001a      	movs	r2, r3
 8005488:	f000 fba6 	bl	8005bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2140      	movs	r1, #64	@ 0x40
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fc00 	bl	8005c98 <TIM_ITRx_SetConfig>
      break;
 8005498:	e00e      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	0019      	movs	r1, r3
 80054a4:	0010      	movs	r0, r2
 80054a6:	f000 fbf7 	bl	8005c98 <TIM_ITRx_SetConfig>
      break;
 80054aa:	e005      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80054ac:	230f      	movs	r3, #15
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
      break;
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80054b6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223d      	movs	r2, #61	@ 0x3d
 80054bc:	2101      	movs	r1, #1
 80054be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	223c      	movs	r2, #60	@ 0x3c
 80054c4:	2100      	movs	r1, #0
 80054c6:	5499      	strb	r1, [r3, r2]

  return status;
 80054c8:	230f      	movs	r3, #15
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			@ (mov r8, r8)
 80054d8:	ffff00ff 	.word	0xffff00ff

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d107      	bne.n	8005544 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	223e      	movs	r2, #62	@ 0x3e
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]
 8005542:	e02a      	b.n	800559a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d107      	bne.n	800555e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2202      	movs	r2, #2
 8005552:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	223f      	movs	r2, #63	@ 0x3f
 8005558:	2101      	movs	r1, #1
 800555a:	5499      	strb	r1, [r3, r2]
 800555c:	e01d      	b.n	800559a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d107      	bne.n	8005578 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2204      	movs	r2, #4
 800556c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2240      	movs	r2, #64	@ 0x40
 8005572:	2101      	movs	r1, #1
 8005574:	5499      	strb	r1, [r3, r2]
 8005576:	e010      	b.n	800559a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d107      	bne.n	8005592 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2208      	movs	r2, #8
 8005586:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2241      	movs	r2, #65	@ 0x41
 800558c:	2101      	movs	r1, #1
 800558e:	5499      	strb	r1, [r3, r2]
 8005590:	e003      	b.n	800559a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	223d      	movs	r2, #61	@ 0x3d
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff ffb5 	bl	800550c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
}
 80055a8:	46c0      	nop			@ (mov r8, r8)
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b004      	add	sp, #16
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d10b      	bne.n	80055e0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d136      	bne.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	223e      	movs	r2, #62	@ 0x3e
 80055da:	2101      	movs	r1, #1
 80055dc:	5499      	strb	r1, [r3, r2]
 80055de:	e031      	b.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d10b      	bne.n	8005602 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d125      	bne.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	223f      	movs	r2, #63	@ 0x3f
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]
 8005600:	e020      	b.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d10b      	bne.n	8005624 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2204      	movs	r2, #4
 8005610:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d114      	bne.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2240      	movs	r2, #64	@ 0x40
 800561e:	2101      	movs	r1, #1
 8005620:	5499      	strb	r1, [r3, r2]
 8005622:	e00f      	b.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d10a      	bne.n	8005644 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2208      	movs	r2, #8
 8005632:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2241      	movs	r2, #65	@ 0x41
 8005640:	2101      	movs	r1, #1
 8005642:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	0018      	movs	r0, r3
 8005648:	f7fb fdfc 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b004      	add	sp, #16
 8005658:	bd80      	pop	{r7, pc}

0800565a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d103      	bne.n	800567a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]
 8005678:	e019      	b.n	80056ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d103      	bne.n	800568c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2202      	movs	r2, #2
 8005688:	771a      	strb	r2, [r3, #28]
 800568a:	e010      	b.n	80056ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d103      	bne.n	800569e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2204      	movs	r2, #4
 800569a:	771a      	strb	r2, [r3, #28]
 800569c:	e007      	b.n	80056ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d102      	bne.n	80056ae <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2208      	movs	r2, #8
 80056ac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fb fd43 	bl	800113c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b004      	add	sp, #16
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a3b      	ldr	r2, [pc, #236]	@ (80057c4 <TIM_Base_SetConfig+0x100>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d008      	beq.n	80056ee <TIM_Base_SetConfig+0x2a>
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	05db      	lsls	r3, r3, #23
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0x2a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a37      	ldr	r2, [pc, #220]	@ (80057c8 <TIM_Base_SetConfig+0x104>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2270      	movs	r2, #112	@ 0x70
 80056f2:	4393      	bics	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a30      	ldr	r2, [pc, #192]	@ (80057c4 <TIM_Base_SetConfig+0x100>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d018      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	05db      	lsls	r3, r3, #23
 800570e:	429a      	cmp	r2, r3
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2c      	ldr	r2, [pc, #176]	@ (80057c8 <TIM_Base_SetConfig+0x104>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2b      	ldr	r2, [pc, #172]	@ (80057cc <TIM_Base_SetConfig+0x108>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <TIM_Base_SetConfig+0x10c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a29      	ldr	r2, [pc, #164]	@ (80057d4 <TIM_Base_SetConfig+0x110>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x76>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	@ (80057d8 <TIM_Base_SetConfig+0x114>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a27      	ldr	r2, [pc, #156]	@ (80057dc <TIM_Base_SetConfig+0x118>)
 800573e:	4013      	ands	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2280      	movs	r2, #128	@ 0x80
 8005750:	4393      	bics	r3, r2
 8005752:	001a      	movs	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <TIM_Base_SetConfig+0x100>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0xce>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a14      	ldr	r2, [pc, #80]	@ (80057d0 <TIM_Base_SetConfig+0x10c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0xce>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a13      	ldr	r2, [pc, #76]	@ (80057d4 <TIM_Base_SetConfig+0x110>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0xce>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <TIM_Base_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d103      	bne.n	800579a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2201      	movs	r2, #1
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4393      	bics	r3, r2
 80057b4:	001a      	movs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	611a      	str	r2, [r3, #16]
  }
}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	46bd      	mov	sp, r7
 80057be:	b004      	add	sp, #16
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40002000 	.word	0x40002000
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	fffffcff 	.word	0xfffffcff

080057e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	2201      	movs	r2, #1
 80057f6:	4393      	bics	r3, r2
 80057f8:	001a      	movs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2270      	movs	r2, #112	@ 0x70
 800580e:	4393      	bics	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2203      	movs	r2, #3
 8005816:	4393      	bics	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2202      	movs	r2, #2
 8005828:	4393      	bics	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a27      	ldr	r2, [pc, #156]	@ (80058d8 <TIM_OC1_SetConfig+0xf8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC1_SetConfig+0x76>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a26      	ldr	r2, [pc, #152]	@ (80058dc <TIM_OC1_SetConfig+0xfc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC1_SetConfig+0x76>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a25      	ldr	r2, [pc, #148]	@ (80058e0 <TIM_OC1_SetConfig+0x100>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC1_SetConfig+0x76>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a24      	ldr	r2, [pc, #144]	@ (80058e4 <TIM_OC1_SetConfig+0x104>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10c      	bne.n	8005870 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2208      	movs	r2, #8
 800585a:	4393      	bics	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2204      	movs	r2, #4
 800586c:	4393      	bics	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <TIM_OC1_SetConfig+0xf8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_OC1_SetConfig+0xb0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <TIM_OC1_SetConfig+0xfc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_OC1_SetConfig+0xb0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a17      	ldr	r2, [pc, #92]	@ (80058e0 <TIM_OC1_SetConfig+0x100>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC1_SetConfig+0xb0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a16      	ldr	r2, [pc, #88]	@ (80058e4 <TIM_OC1_SetConfig+0x104>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d111      	bne.n	80058b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <TIM_OC1_SetConfig+0x108>)
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <TIM_OC1_SetConfig+0x10c>)
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b006      	add	sp, #24
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800
 80058e8:	fffffeff 	.word	0xfffffeff
 80058ec:	fffffdff 	.word	0xfffffdff

080058f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	2210      	movs	r2, #16
 8005906:	4393      	bics	r3, r2
 8005908:	001a      	movs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a2e      	ldr	r2, [pc, #184]	@ (80059d8 <TIM_OC2_SetConfig+0xe8>)
 800591e:	4013      	ands	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a2d      	ldr	r2, [pc, #180]	@ (80059dc <TIM_OC2_SetConfig+0xec>)
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2220      	movs	r2, #32
 800593a:	4393      	bics	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a24      	ldr	r2, [pc, #144]	@ (80059e0 <TIM_OC2_SetConfig+0xf0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	4393      	bics	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2240      	movs	r2, #64	@ 0x40
 800596a:	4393      	bics	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a1b      	ldr	r2, [pc, #108]	@ (80059e0 <TIM_OC2_SetConfig+0xf0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00b      	beq.n	800598e <TIM_OC2_SetConfig+0x9e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1a      	ldr	r2, [pc, #104]	@ (80059e4 <TIM_OC2_SetConfig+0xf4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_OC2_SetConfig+0x9e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a19      	ldr	r2, [pc, #100]	@ (80059e8 <TIM_OC2_SetConfig+0xf8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC2_SetConfig+0x9e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a18      	ldr	r2, [pc, #96]	@ (80059ec <TIM_OC2_SetConfig+0xfc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4a17      	ldr	r2, [pc, #92]	@ (80059f0 <TIM_OC2_SetConfig+0x100>)
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <TIM_OC2_SetConfig+0x104>)
 800599a:	4013      	ands	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b006      	add	sp, #24
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	ffff8fff 	.word	0xffff8fff
 80059dc:	fffffcff 	.word	0xfffffcff
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	fffffbff 	.word	0xfffffbff
 80059f4:	fffff7ff 	.word	0xfffff7ff

080059f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4a33      	ldr	r2, [pc, #204]	@ (8005adc <TIM_OC3_SetConfig+0xe4>)
 8005a0e:	401a      	ands	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2270      	movs	r2, #112	@ 0x70
 8005a24:	4393      	bics	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ae0 <TIM_OC3_SetConfig+0xe8>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a24      	ldr	r2, [pc, #144]	@ (8005ae4 <TIM_OC3_SetConfig+0xec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10d      	bne.n	8005a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4a23      	ldr	r2, [pc, #140]	@ (8005ae8 <TIM_OC3_SetConfig+0xf0>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005aec <TIM_OC3_SetConfig+0xf4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae4 <TIM_OC3_SetConfig+0xec>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005af0 <TIM_OC3_SetConfig+0xf8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <TIM_OC3_SetConfig+0xfc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC3_SetConfig+0x9a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <TIM_OC3_SetConfig+0x100>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d113      	bne.n	8005aba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4a19      	ldr	r2, [pc, #100]	@ (8005afc <TIM_OC3_SetConfig+0x104>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <TIM_OC3_SetConfig+0x108>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b006      	add	sp, #24
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	fffffeff 	.word	0xfffffeff
 8005ae0:	fffffdff 	.word	0xfffffdff
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	fffff7ff 	.word	0xfffff7ff
 8005aec:	fffffbff 	.word	0xfffffbff
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800
 8005afc:	ffffefff 	.word	0xffffefff
 8005b00:	ffffdfff 	.word	0xffffdfff

08005b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	4a26      	ldr	r2, [pc, #152]	@ (8005bb4 <TIM_OC4_SetConfig+0xb0>)
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a22      	ldr	r2, [pc, #136]	@ (8005bb8 <TIM_OC4_SetConfig+0xb4>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a21      	ldr	r2, [pc, #132]	@ (8005bbc <TIM_OC4_SetConfig+0xb8>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <TIM_OC4_SetConfig+0xbc>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	@ (8005bc4 <TIM_OC4_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC4_SetConfig+0x78>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <TIM_OC4_SetConfig+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC4_SetConfig+0x78>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC4_SetConfig+0xc8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC4_SetConfig+0x78>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <TIM_OC4_SetConfig+0xcc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <TIM_OC4_SetConfig+0xd0>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	019b      	lsls	r3, r3, #6
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b006      	add	sp, #24
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	ffffefff 	.word	0xffffefff
 8005bb8:	ffff8fff 	.word	0xffff8fff
 8005bbc:	fffffcff 	.word	0xfffffcff
 8005bc0:	ffffdfff 	.word	0xffffdfff
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800
 8005bd4:	ffffbfff 	.word	0xffffbfff

08005bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4393      	bics	r3, r2
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	22f0      	movs	r2, #240	@ 0xf0
 8005c02:	4393      	bics	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	220a      	movs	r2, #10
 8005c14:	4393      	bics	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	621a      	str	r2, [r3, #32]
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b006      	add	sp, #24
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	4393      	bics	r3, r2
 8005c4e:	001a      	movs	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c94 <TIM_TI2_ConfigInputStage+0x60>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	22a0      	movs	r2, #160	@ 0xa0
 8005c70:	4393      	bics	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b006      	add	sp, #24
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	ffff0fff 	.word	0xffff0fff

08005c98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2270      	movs	r2, #112	@ 0x70
 8005cac:	4393      	bics	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	609a      	str	r2, [r3, #8]
}
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b004      	add	sp, #16
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <TIM_ETR_SetConfig+0x3c>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b006      	add	sp, #24
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	ffff00ff 	.word	0xffff00ff

08005d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	221f      	movs	r2, #31
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2201      	movs	r2, #1
 8005d20:	409a      	lsls	r2, r3
 8005d22:	0013      	movs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	43d2      	mvns	r2, r2
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	211f      	movs	r1, #31
 8005d3c:	400b      	ands	r3, r1
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4099      	lsls	r1, r3
 8005d42:	000b      	movs	r3, r1
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b006      	add	sp, #24
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	223c      	movs	r2, #60	@ 0x3c
 8005d62:	5c9b      	ldrb	r3, [r3, r2]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e047      	b.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	223c      	movs	r2, #60	@ 0x3c
 8005d70:	2101      	movs	r1, #1
 8005d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	223d      	movs	r2, #61	@ 0x3d
 8005d78:	2102      	movs	r1, #2
 8005d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2270      	movs	r2, #112	@ 0x70
 8005d90:	4393      	bics	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00f      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	05db      	lsls	r3, r3, #23
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d009      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a11      	ldr	r2, [pc, #68]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a10      	ldr	r2, [pc, #64]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10c      	bne.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2280      	movs	r2, #128	@ 0x80
 8005dd4:	4393      	bics	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	223d      	movs	r2, #61	@ 0x3d
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	223c      	movs	r2, #60	@ 0x3c
 8005df6:	2100      	movs	r1, #0
 8005df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40014000 	.word	0x40014000

08005e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e18:	46c0      	nop			@ (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2244      	movs	r2, #68	@ 0x44
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e40:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <USB_EnableGlobalInt+0x28>)
 8005e42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	b299      	uxth	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2240      	movs	r2, #64	@ 0x40
 8005e4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	0000bf80 	.word	0x0000bf80

08005e5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e64:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <USB_DisableGlobalInt+0x30>)
 8005e66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2240      	movs	r2, #64	@ 0x40
 8005e6c:	5a9b      	ldrh	r3, [r3, r2]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	b292      	uxth	r2, r2
 8005e74:	43d2      	mvns	r2, r2
 8005e76:	b292      	uxth	r2, r2
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b299      	uxth	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2240      	movs	r2, #64	@ 0x40
 8005e80:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	0000bf80 	.word	0x0000bf80

08005e90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	6019      	str	r1, [r3, #0]
 8005e9c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2240      	movs	r2, #64	@ 0x40
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2240      	movs	r2, #64	@ 0x40
 8005eaa:	2100      	movs	r1, #0
 8005eac:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2244      	movs	r2, #68	@ 0x44
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2250      	movs	r2, #80	@ 0x50
 8005eba:	2100      	movs	r1, #0
 8005ebc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b09c      	sub	sp, #112	@ 0x70
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed2:	236f      	movs	r3, #111	@ 0x6f
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	18d3      	adds	r3, r2, r3
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	236c      	movs	r3, #108	@ 0x6c
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	49a1      	ldr	r1, [pc, #644]	@ (8006174 <USB_ActivateEndpoint+0x2ac>)
 8005eee:	400a      	ands	r2, r1
 8005ef0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d017      	beq.n	8005f2a <USB_ActivateEndpoint+0x62>
 8005efa:	dc28      	bgt.n	8005f4e <USB_ActivateEndpoint+0x86>
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d00e      	beq.n	8005f1e <USB_ActivateEndpoint+0x56>
 8005f00:	dc25      	bgt.n	8005f4e <USB_ActivateEndpoint+0x86>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <USB_ActivateEndpoint+0x44>
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d018      	beq.n	8005f3c <USB_ActivateEndpoint+0x74>
 8005f0a:	e020      	b.n	8005f4e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f0c:	226c      	movs	r2, #108	@ 0x6c
 8005f0e:	18bb      	adds	r3, r7, r2
 8005f10:	18ba      	adds	r2, r7, r2
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	2180      	movs	r1, #128	@ 0x80
 8005f16:	0089      	lsls	r1, r1, #2
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	801a      	strh	r2, [r3, #0]
      break;
 8005f1c:	e01c      	b.n	8005f58 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005f1e:	226c      	movs	r2, #108	@ 0x6c
 8005f20:	18bb      	adds	r3, r7, r2
 8005f22:	18ba      	adds	r2, r7, r2
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	801a      	strh	r2, [r3, #0]
      break;
 8005f28:	e016      	b.n	8005f58 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f2a:	226c      	movs	r2, #108	@ 0x6c
 8005f2c:	18bb      	adds	r3, r7, r2
 8005f2e:	18ba      	adds	r2, r7, r2
 8005f30:	8812      	ldrh	r2, [r2, #0]
 8005f32:	21c0      	movs	r1, #192	@ 0xc0
 8005f34:	00c9      	lsls	r1, r1, #3
 8005f36:	430a      	orrs	r2, r1
 8005f38:	801a      	strh	r2, [r3, #0]
      break;
 8005f3a:	e00d      	b.n	8005f58 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f3c:	226c      	movs	r2, #108	@ 0x6c
 8005f3e:	18bb      	adds	r3, r7, r2
 8005f40:	18ba      	adds	r2, r7, r2
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	2180      	movs	r1, #128	@ 0x80
 8005f46:	00c9      	lsls	r1, r1, #3
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	801a      	strh	r2, [r3, #0]
      break;
 8005f4c:	e004      	b.n	8005f58 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005f4e:	236f      	movs	r3, #111	@ 0x6f
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
      break;
 8005f56:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	18d3      	adds	r3, r2, r3
 8005f62:	226c      	movs	r2, #108	@ 0x6c
 8005f64:	18ba      	adds	r2, r7, r2
 8005f66:	8812      	ldrh	r2, [r2, #0]
 8005f68:	4983      	ldr	r1, [pc, #524]	@ (8006178 <USB_ActivateEndpoint+0x2b0>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	18d3      	adds	r3, r2, r3
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	4a7e      	ldr	r2, [pc, #504]	@ (800617c <USB_ActivateEndpoint+0x2b4>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	b21a      	sxth	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b21a      	sxth	r2, r3
 8005f90:	2166      	movs	r1, #102	@ 0x66
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	18d3      	adds	r3, r2, r3
 8005fa0:	187a      	adds	r2, r7, r1
 8005fa2:	8812      	ldrh	r2, [r2, #0]
 8005fa4:	4974      	ldr	r1, [pc, #464]	@ (8006178 <USB_ActivateEndpoint+0x2b0>)
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	b292      	uxth	r2, r2
 8005faa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d000      	beq.n	8005fb6 <USB_ActivateEndpoint+0xee>
 8005fb4:	e177      	b.n	80062a6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d100      	bne.n	8005fc0 <USB_ActivateEndpoint+0xf8>
 8005fbe:	e07a      	b.n	80060b6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2250      	movs	r2, #80	@ 0x50
 8005fc8:	5a9b      	ldrh	r3, [r3, r2]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	001a      	movs	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	189b      	adds	r3, r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	00da      	lsls	r2, r3, #3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	2280      	movs	r2, #128	@ 0x80
 8005fe0:	00d2      	lsls	r2, r2, #3
 8005fe2:	4694      	mov	ip, r2
 8005fe4:	4463      	add	r3, ip
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	88db      	ldrh	r3, [r3, #6]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	18db      	adds	r3, r3, r3
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	18d2      	adds	r2, r2, r3
 8006002:	2112      	movs	r1, #18
 8006004:	187b      	adds	r3, r7, r1
 8006006:	8812      	ldrh	r2, [r2, #0]
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	187b      	adds	r3, r7, r1
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	2240      	movs	r2, #64	@ 0x40
 8006010:	4013      	ands	r3, r2
 8006012:	d016      	beq.n	8006042 <USB_ActivateEndpoint+0x17a>
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	18d3      	adds	r3, r2, r3
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29a      	uxth	r2, r3
 8006022:	2010      	movs	r0, #16
 8006024:	183b      	adds	r3, r7, r0
 8006026:	4955      	ldr	r1, [pc, #340]	@ (800617c <USB_ActivateEndpoint+0x2b4>)
 8006028:	400a      	ands	r2, r1
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	18d3      	adds	r3, r2, r3
 8006036:	183a      	adds	r2, r7, r0
 8006038:	8812      	ldrh	r2, [r2, #0]
 800603a:	4951      	ldr	r1, [pc, #324]	@ (8006180 <USB_ActivateEndpoint+0x2b8>)
 800603c:	430a      	orrs	r2, r1
 800603e:	b292      	uxth	r2, r2
 8006040:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d01d      	beq.n	8006086 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29a      	uxth	r2, r3
 8006058:	200c      	movs	r0, #12
 800605a:	183b      	adds	r3, r7, r0
 800605c:	4949      	ldr	r1, [pc, #292]	@ (8006184 <USB_ActivateEndpoint+0x2bc>)
 800605e:	400a      	ands	r2, r1
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	183b      	adds	r3, r7, r0
 8006064:	183a      	adds	r2, r7, r0
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	2120      	movs	r1, #32
 800606a:	404a      	eors	r2, r1
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	18d3      	adds	r3, r2, r3
 8006078:	183a      	adds	r2, r7, r0
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	493e      	ldr	r1, [pc, #248]	@ (8006178 <USB_ActivateEndpoint+0x2b0>)
 800607e:	430a      	orrs	r2, r1
 8006080:	b292      	uxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	e2b5      	b.n	80065f2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29a      	uxth	r2, r3
 8006094:	200e      	movs	r0, #14
 8006096:	183b      	adds	r3, r7, r0
 8006098:	493a      	ldr	r1, [pc, #232]	@ (8006184 <USB_ActivateEndpoint+0x2bc>)
 800609a:	400a      	ands	r2, r1
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	18d3      	adds	r3, r2, r3
 80060a8:	183a      	adds	r2, r7, r0
 80060aa:	8812      	ldrh	r2, [r2, #0]
 80060ac:	4932      	ldr	r1, [pc, #200]	@ (8006178 <USB_ActivateEndpoint+0x2b0>)
 80060ae:	430a      	orrs	r2, r1
 80060b0:	b292      	uxth	r2, r2
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e29d      	b.n	80065f2 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2250      	movs	r2, #80	@ 0x50
 80060be:	5a9b      	ldrh	r3, [r3, r2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	001a      	movs	r2, r3
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	00da      	lsls	r2, r3, #3
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006188 <USB_ActivateEndpoint+0x2c0>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	88db      	ldrh	r3, [r3, #6]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	18db      	adds	r3, r3, r3
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2250      	movs	r2, #80	@ 0x50
 80060f4:	5a9b      	ldrh	r3, [r3, r2]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	001a      	movs	r2, r3
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	00da      	lsls	r2, r3, #3
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	18d3      	adds	r3, r2, r3
 800610a:	4a20      	ldr	r2, [pc, #128]	@ (800618c <USB_ActivateEndpoint+0x2c4>)
 800610c:	4694      	mov	ip, r2
 800610e:	4463      	add	r3, ip
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	059b      	lsls	r3, r3, #22
 800611a:	0d9b      	lsrs	r3, r3, #22
 800611c:	b29a      	uxth	r2, r3
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <USB_ActivateEndpoint+0x274>
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <USB_ActivateEndpoint+0x2c8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	b29a      	uxth	r2, r3
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e045      	b.n	80061c8 <USB_ActivateEndpoint+0x300>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b3e      	cmp	r3, #62	@ 0x3e
 8006142:	d827      	bhi.n	8006194 <USB_ActivateEndpoint+0x2cc>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	d002      	beq.n	800615c <USB_ActivateEndpoint+0x294>
 8006156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006158:	3301      	adds	r3, #1
 800615a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29a      	uxth	r2, r3
 8006162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006164:	b29b      	uxth	r3, r3
 8006166:	029b      	lsls	r3, r3, #10
 8006168:	b29b      	uxth	r3, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	e029      	b.n	80061c8 <USB_ActivateEndpoint+0x300>
 8006174:	ffff898f 	.word	0xffff898f
 8006178:	ffff8080 	.word	0xffff8080
 800617c:	ffff8f8f 	.word	0xffff8f8f
 8006180:	ffff80c0 	.word	0xffff80c0
 8006184:	ffff8fbf 	.word	0xffff8fbf
 8006188:	00000404 	.word	0x00000404
 800618c:	00000406 	.word	0x00000406
 8006190:	ffff8000 	.word	0xffff8000
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	221f      	movs	r2, #31
 80061a2:	4013      	ands	r3, r2
 80061a4:	d102      	bne.n	80061ac <USB_ActivateEndpoint+0x2e4>
 80061a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a8:	3b01      	subs	r3, #1
 80061aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4ab5      	ldr	r2, [pc, #724]	@ (8006494 <USB_ActivateEndpoint+0x5cc>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	18d2      	adds	r2, r2, r3
 80061d2:	2122      	movs	r1, #34	@ 0x22
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	2380      	movs	r3, #128	@ 0x80
 80061e0:	01db      	lsls	r3, r3, #7
 80061e2:	4013      	ands	r3, r2
 80061e4:	d016      	beq.n	8006214 <USB_ActivateEndpoint+0x34c>
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	18d3      	adds	r3, r2, r3
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	2020      	movs	r0, #32
 80061f6:	183b      	adds	r3, r7, r0
 80061f8:	49a7      	ldr	r1, [pc, #668]	@ (8006498 <USB_ActivateEndpoint+0x5d0>)
 80061fa:	400a      	ands	r2, r1
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	18d3      	adds	r3, r2, r3
 8006208:	183a      	adds	r2, r7, r0
 800620a:	8812      	ldrh	r2, [r2, #0]
 800620c:	49a3      	ldr	r1, [pc, #652]	@ (800649c <USB_ActivateEndpoint+0x5d4>)
 800620e:	430a      	orrs	r2, r1
 8006210:	b292      	uxth	r2, r2
 8006212:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d125      	bne.n	8006268 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29a      	uxth	r2, r3
 800622a:	201c      	movs	r0, #28
 800622c:	183b      	adds	r3, r7, r0
 800622e:	499c      	ldr	r1, [pc, #624]	@ (80064a0 <USB_ActivateEndpoint+0x5d8>)
 8006230:	400a      	ands	r2, r1
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	183b      	adds	r3, r7, r0
 8006236:	183a      	adds	r2, r7, r0
 8006238:	8812      	ldrh	r2, [r2, #0]
 800623a:	2180      	movs	r1, #128	@ 0x80
 800623c:	0149      	lsls	r1, r1, #5
 800623e:	404a      	eors	r2, r1
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	183b      	adds	r3, r7, r0
 8006244:	183a      	adds	r2, r7, r0
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	2180      	movs	r1, #128	@ 0x80
 800624a:	0189      	lsls	r1, r1, #6
 800624c:	404a      	eors	r2, r1
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	183a      	adds	r2, r7, r0
 800625c:	8812      	ldrh	r2, [r2, #0]
 800625e:	4991      	ldr	r1, [pc, #580]	@ (80064a4 <USB_ActivateEndpoint+0x5dc>)
 8006260:	430a      	orrs	r2, r1
 8006262:	b292      	uxth	r2, r2
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	e1c4      	b.n	80065f2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
 8006276:	201e      	movs	r0, #30
 8006278:	183b      	adds	r3, r7, r0
 800627a:	4989      	ldr	r1, [pc, #548]	@ (80064a0 <USB_ActivateEndpoint+0x5d8>)
 800627c:	400a      	ands	r2, r1
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	183b      	adds	r3, r7, r0
 8006282:	183a      	adds	r2, r7, r0
 8006284:	8812      	ldrh	r2, [r2, #0]
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	0189      	lsls	r1, r1, #6
 800628a:	404a      	eors	r2, r1
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	18d3      	adds	r3, r2, r3
 8006298:	183a      	adds	r2, r7, r0
 800629a:	8812      	ldrh	r2, [r2, #0]
 800629c:	4981      	ldr	r1, [pc, #516]	@ (80064a4 <USB_ActivateEndpoint+0x5dc>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	b292      	uxth	r2, r2
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e1a5      	b.n	80065f2 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d117      	bne.n	80062de <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	18d3      	adds	r3, r2, r3
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	2062      	movs	r0, #98	@ 0x62
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	4975      	ldr	r1, [pc, #468]	@ (8006498 <USB_ActivateEndpoint+0x5d0>)
 80062c2:	400a      	ands	r2, r1
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	18d3      	adds	r3, r2, r3
 80062d0:	183a      	adds	r2, r7, r0
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	4974      	ldr	r1, [pc, #464]	@ (80064a8 <USB_ActivateEndpoint+0x5e0>)
 80062d6:	430a      	orrs	r2, r1
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e016      	b.n	800630c <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	18d3      	adds	r3, r2, r3
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	2064      	movs	r0, #100	@ 0x64
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	496e      	ldr	r1, [pc, #440]	@ (80064ac <USB_ActivateEndpoint+0x5e4>)
 80062f2:	400a      	ands	r2, r1
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	18d3      	adds	r3, r2, r3
 8006300:	183a      	adds	r2, r7, r0
 8006302:	8812      	ldrh	r2, [r2, #0]
 8006304:	4967      	ldr	r1, [pc, #412]	@ (80064a4 <USB_ActivateEndpoint+0x5dc>)
 8006306:	430a      	orrs	r2, r1
 8006308:	b292      	uxth	r2, r2
 800630a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2250      	movs	r2, #80	@ 0x50
 8006314:	5a9b      	ldrh	r3, [r3, r2]
 8006316:	b29b      	uxth	r3, r3
 8006318:	001a      	movs	r2, r3
 800631a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800631c:	189b      	adds	r3, r3, r2
 800631e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	00da      	lsls	r2, r3, #3
 8006326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006328:	18d3      	adds	r3, r2, r3
 800632a:	2280      	movs	r2, #128	@ 0x80
 800632c:	00d2      	lsls	r2, r2, #3
 800632e:	4694      	mov	ip, r2
 8006330:	4463      	add	r3, ip
 8006332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	18db      	adds	r3, r3, r3
 800633e:	b29a      	uxth	r2, r3
 8006340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	657b      	str	r3, [r7, #84]	@ 0x54
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2250      	movs	r2, #80	@ 0x50
 800634c:	5a9b      	ldrh	r3, [r3, r2]
 800634e:	b29b      	uxth	r3, r3
 8006350:	001a      	movs	r2, r3
 8006352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006354:	189b      	adds	r3, r3, r2
 8006356:	657b      	str	r3, [r7, #84]	@ 0x54
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	18d3      	adds	r3, r2, r3
 8006362:	4a53      	ldr	r2, [pc, #332]	@ (80064b0 <USB_ActivateEndpoint+0x5e8>)
 8006364:	4694      	mov	ip, r2
 8006366:	4463      	add	r3, ip
 8006368:	653b      	str	r3, [r7, #80]	@ 0x50
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	895b      	ldrh	r3, [r3, #10]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	18db      	adds	r3, r3, r3
 8006374:	b29a      	uxth	r2, r3
 8006376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006378:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d000      	beq.n	8006384 <USB_ActivateEndpoint+0x4bc>
 8006382:	e09b      	b.n	80064bc <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	18d2      	adds	r2, r2, r3
 800638e:	2140      	movs	r1, #64	@ 0x40
 8006390:	187b      	adds	r3, r7, r1
 8006392:	8812      	ldrh	r2, [r2, #0]
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	187b      	adds	r3, r7, r1
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	2380      	movs	r3, #128	@ 0x80
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4013      	ands	r3, r2
 80063a0:	d016      	beq.n	80063d0 <USB_ActivateEndpoint+0x508>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	203e      	movs	r0, #62	@ 0x3e
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	4938      	ldr	r1, [pc, #224]	@ (8006498 <USB_ActivateEndpoint+0x5d0>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	18d3      	adds	r3, r2, r3
 80063c4:	183a      	adds	r2, r7, r0
 80063c6:	8812      	ldrh	r2, [r2, #0]
 80063c8:	4934      	ldr	r1, [pc, #208]	@ (800649c <USB_ActivateEndpoint+0x5d4>)
 80063ca:	430a      	orrs	r2, r1
 80063cc:	b292      	uxth	r2, r2
 80063ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	18d2      	adds	r2, r2, r3
 80063da:	213c      	movs	r1, #60	@ 0x3c
 80063dc:	187b      	adds	r3, r7, r1
 80063de:	8812      	ldrh	r2, [r2, #0]
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	2240      	movs	r2, #64	@ 0x40
 80063e8:	4013      	ands	r3, r2
 80063ea:	d016      	beq.n	800641a <USB_ActivateEndpoint+0x552>
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	18d3      	adds	r3, r2, r3
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	203a      	movs	r0, #58	@ 0x3a
 80063fc:	183b      	adds	r3, r7, r0
 80063fe:	4926      	ldr	r1, [pc, #152]	@ (8006498 <USB_ActivateEndpoint+0x5d0>)
 8006400:	400a      	ands	r2, r1
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	18d3      	adds	r3, r2, r3
 800640e:	183a      	adds	r2, r7, r0
 8006410:	8812      	ldrh	r2, [r2, #0]
 8006412:	4928      	ldr	r1, [pc, #160]	@ (80064b4 <USB_ActivateEndpoint+0x5ec>)
 8006414:	430a      	orrs	r2, r1
 8006416:	b292      	uxth	r2, r2
 8006418:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	18d3      	adds	r3, r2, r3
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29a      	uxth	r2, r3
 8006428:	2038      	movs	r0, #56	@ 0x38
 800642a:	183b      	adds	r3, r7, r0
 800642c:	491c      	ldr	r1, [pc, #112]	@ (80064a0 <USB_ActivateEndpoint+0x5d8>)
 800642e:	400a      	ands	r2, r1
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	183b      	adds	r3, r7, r0
 8006434:	183a      	adds	r2, r7, r0
 8006436:	8812      	ldrh	r2, [r2, #0]
 8006438:	2180      	movs	r1, #128	@ 0x80
 800643a:	0149      	lsls	r1, r1, #5
 800643c:	404a      	eors	r2, r1
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	183b      	adds	r3, r7, r0
 8006442:	183a      	adds	r2, r7, r0
 8006444:	8812      	ldrh	r2, [r2, #0]
 8006446:	2180      	movs	r1, #128	@ 0x80
 8006448:	0189      	lsls	r1, r1, #6
 800644a:	404a      	eors	r2, r1
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	183a      	adds	r2, r7, r0
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	4911      	ldr	r1, [pc, #68]	@ (80064a4 <USB_ActivateEndpoint+0x5dc>)
 800645e:	430a      	orrs	r2, r1
 8006460:	b292      	uxth	r2, r2
 8006462:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	18d3      	adds	r3, r2, r3
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29a      	uxth	r2, r3
 8006472:	2036      	movs	r0, #54	@ 0x36
 8006474:	183b      	adds	r3, r7, r0
 8006476:	4910      	ldr	r1, [pc, #64]	@ (80064b8 <USB_ActivateEndpoint+0x5f0>)
 8006478:	400a      	ands	r2, r1
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	18d3      	adds	r3, r2, r3
 8006486:	183a      	adds	r2, r7, r0
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	4906      	ldr	r1, [pc, #24]	@ (80064a4 <USB_ActivateEndpoint+0x5dc>)
 800648c:	430a      	orrs	r2, r1
 800648e:	b292      	uxth	r2, r2
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e0ae      	b.n	80065f2 <USB_ActivateEndpoint+0x72a>
 8006494:	ffff8000 	.word	0xffff8000
 8006498:	ffff8f8f 	.word	0xffff8f8f
 800649c:	ffffc080 	.word	0xffffc080
 80064a0:	ffffbf8f 	.word	0xffffbf8f
 80064a4:	ffff8080 	.word	0xffff8080
 80064a8:	ffff8180 	.word	0xffff8180
 80064ac:	ffff8e8f 	.word	0xffff8e8f
 80064b0:	00000404 	.word	0x00000404
 80064b4:	ffff80c0 	.word	0xffff80c0
 80064b8:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	18d2      	adds	r2, r2, r3
 80064c6:	214e      	movs	r1, #78	@ 0x4e
 80064c8:	187b      	adds	r3, r7, r1
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	187b      	adds	r3, r7, r1
 80064d0:	881a      	ldrh	r2, [r3, #0]
 80064d2:	2380      	movs	r3, #128	@ 0x80
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4013      	ands	r3, r2
 80064d8:	d016      	beq.n	8006508 <USB_ActivateEndpoint+0x640>
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	18d3      	adds	r3, r2, r3
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	204c      	movs	r0, #76	@ 0x4c
 80064ea:	183b      	adds	r3, r7, r0
 80064ec:	4944      	ldr	r1, [pc, #272]	@ (8006600 <USB_ActivateEndpoint+0x738>)
 80064ee:	400a      	ands	r2, r1
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	18d3      	adds	r3, r2, r3
 80064fc:	183a      	adds	r2, r7, r0
 80064fe:	8812      	ldrh	r2, [r2, #0]
 8006500:	4940      	ldr	r1, [pc, #256]	@ (8006604 <USB_ActivateEndpoint+0x73c>)
 8006502:	430a      	orrs	r2, r1
 8006504:	b292      	uxth	r2, r2
 8006506:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	18d2      	adds	r2, r2, r3
 8006512:	214a      	movs	r1, #74	@ 0x4a
 8006514:	187b      	adds	r3, r7, r1
 8006516:	8812      	ldrh	r2, [r2, #0]
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	187b      	adds	r3, r7, r1
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	2240      	movs	r2, #64	@ 0x40
 8006520:	4013      	ands	r3, r2
 8006522:	d016      	beq.n	8006552 <USB_ActivateEndpoint+0x68a>
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	18d3      	adds	r3, r2, r3
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	2048      	movs	r0, #72	@ 0x48
 8006534:	183b      	adds	r3, r7, r0
 8006536:	4932      	ldr	r1, [pc, #200]	@ (8006600 <USB_ActivateEndpoint+0x738>)
 8006538:	400a      	ands	r2, r1
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	18d3      	adds	r3, r2, r3
 8006546:	183a      	adds	r2, r7, r0
 8006548:	8812      	ldrh	r2, [r2, #0]
 800654a:	492f      	ldr	r1, [pc, #188]	@ (8006608 <USB_ActivateEndpoint+0x740>)
 800654c:	430a      	orrs	r2, r1
 800654e:	b292      	uxth	r2, r2
 8006550:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d01d      	beq.n	8006596 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	18d3      	adds	r3, r2, r3
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29a      	uxth	r2, r3
 8006568:	2044      	movs	r0, #68	@ 0x44
 800656a:	183b      	adds	r3, r7, r0
 800656c:	4927      	ldr	r1, [pc, #156]	@ (800660c <USB_ActivateEndpoint+0x744>)
 800656e:	400a      	ands	r2, r1
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	183b      	adds	r3, r7, r0
 8006574:	183a      	adds	r2, r7, r0
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	2120      	movs	r1, #32
 800657a:	404a      	eors	r2, r1
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	18d3      	adds	r3, r2, r3
 8006588:	183a      	adds	r2, r7, r0
 800658a:	8812      	ldrh	r2, [r2, #0]
 800658c:	4920      	ldr	r1, [pc, #128]	@ (8006610 <USB_ActivateEndpoint+0x748>)
 800658e:	430a      	orrs	r2, r1
 8006590:	b292      	uxth	r2, r2
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e016      	b.n	80065c4 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	18d3      	adds	r3, r2, r3
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	2046      	movs	r0, #70	@ 0x46
 80065a6:	183b      	adds	r3, r7, r0
 80065a8:	4918      	ldr	r1, [pc, #96]	@ (800660c <USB_ActivateEndpoint+0x744>)
 80065aa:	400a      	ands	r2, r1
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	183a      	adds	r2, r7, r0
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	4914      	ldr	r1, [pc, #80]	@ (8006610 <USB_ActivateEndpoint+0x748>)
 80065be:	430a      	orrs	r2, r1
 80065c0:	b292      	uxth	r2, r2
 80065c2:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	18d3      	adds	r3, r2, r3
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	2042      	movs	r0, #66	@ 0x42
 80065d4:	183b      	adds	r3, r7, r0
 80065d6:	490f      	ldr	r1, [pc, #60]	@ (8006614 <USB_ActivateEndpoint+0x74c>)
 80065d8:	400a      	ands	r2, r1
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	18d3      	adds	r3, r2, r3
 80065e6:	183a      	adds	r2, r7, r0
 80065e8:	8812      	ldrh	r2, [r2, #0]
 80065ea:	4909      	ldr	r1, [pc, #36]	@ (8006610 <USB_ActivateEndpoint+0x748>)
 80065ec:	430a      	orrs	r2, r1
 80065ee:	b292      	uxth	r2, r2
 80065f0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80065f2:	236f      	movs	r3, #111	@ 0x6f
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	781b      	ldrb	r3, [r3, #0]
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b01c      	add	sp, #112	@ 0x70
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	ffff8f8f 	.word	0xffff8f8f
 8006604:	ffffc080 	.word	0xffffc080
 8006608:	ffff80c0 	.word	0xffff80c0
 800660c:	ffff8fbf 	.word	0xffff8fbf
 8006610:	ffff8080 	.word	0xffff8080
 8006614:	ffffbf8f 	.word	0xffffbf8f

08006618 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	7b1b      	ldrb	r3, [r3, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d000      	beq.n	800662c <USB_DeactivateEndpoint+0x14>
 800662a:	e07e      	b.n	800672a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03c      	beq.n	80066ae <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	18d2      	adds	r2, r2, r3
 800663e:	210c      	movs	r1, #12
 8006640:	187b      	adds	r3, r7, r1
 8006642:	8812      	ldrh	r2, [r2, #0]
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	187b      	adds	r3, r7, r1
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2240      	movs	r2, #64	@ 0x40
 800664c:	4013      	ands	r3, r2
 800664e:	d016      	beq.n	800667e <USB_DeactivateEndpoint+0x66>
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	18d3      	adds	r3, r2, r3
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	200a      	movs	r0, #10
 8006660:	183b      	adds	r3, r7, r0
 8006662:	49c7      	ldr	r1, [pc, #796]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 8006664:	400a      	ands	r2, r1
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	18d3      	adds	r3, r2, r3
 8006672:	183a      	adds	r2, r7, r0
 8006674:	8812      	ldrh	r2, [r2, #0]
 8006676:	49c3      	ldr	r1, [pc, #780]	@ (8006984 <USB_DeactivateEndpoint+0x36c>)
 8006678:	430a      	orrs	r2, r1
 800667a:	b292      	uxth	r2, r2
 800667c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29a      	uxth	r2, r3
 800668c:	2008      	movs	r0, #8
 800668e:	183b      	adds	r3, r7, r0
 8006690:	49bd      	ldr	r1, [pc, #756]	@ (8006988 <USB_DeactivateEndpoint+0x370>)
 8006692:	400a      	ands	r2, r1
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	18d3      	adds	r3, r2, r3
 80066a0:	183a      	adds	r2, r7, r0
 80066a2:	8812      	ldrh	r2, [r2, #0]
 80066a4:	49b9      	ldr	r1, [pc, #740]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 80066a6:	430a      	orrs	r2, r1
 80066a8:	b292      	uxth	r2, r2
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e163      	b.n	8006976 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	18d2      	adds	r2, r2, r3
 80066b8:	2112      	movs	r1, #18
 80066ba:	187b      	adds	r3, r7, r1
 80066bc:	8812      	ldrh	r2, [r2, #0]
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	881a      	ldrh	r2, [r3, #0]
 80066c4:	2380      	movs	r3, #128	@ 0x80
 80066c6:	01db      	lsls	r3, r3, #7
 80066c8:	4013      	ands	r3, r2
 80066ca:	d016      	beq.n	80066fa <USB_DeactivateEndpoint+0xe2>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	2010      	movs	r0, #16
 80066dc:	183b      	adds	r3, r7, r0
 80066de:	49a8      	ldr	r1, [pc, #672]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 80066e0:	400a      	ands	r2, r1
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	18d3      	adds	r3, r2, r3
 80066ee:	183a      	adds	r2, r7, r0
 80066f0:	8812      	ldrh	r2, [r2, #0]
 80066f2:	49a7      	ldr	r1, [pc, #668]	@ (8006990 <USB_DeactivateEndpoint+0x378>)
 80066f4:	430a      	orrs	r2, r1
 80066f6:	b292      	uxth	r2, r2
 80066f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	18d3      	adds	r3, r2, r3
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29a      	uxth	r2, r3
 8006708:	200e      	movs	r0, #14
 800670a:	183b      	adds	r3, r7, r0
 800670c:	49a1      	ldr	r1, [pc, #644]	@ (8006994 <USB_DeactivateEndpoint+0x37c>)
 800670e:	400a      	ands	r2, r1
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	18d3      	adds	r3, r2, r3
 800671c:	183a      	adds	r2, r7, r0
 800671e:	8812      	ldrh	r2, [r2, #0]
 8006720:	499a      	ldr	r1, [pc, #616]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 8006722:	430a      	orrs	r2, r1
 8006724:	b292      	uxth	r2, r2
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e125      	b.n	8006976 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d000      	beq.n	8006734 <USB_DeactivateEndpoint+0x11c>
 8006732:	e090      	b.n	8006856 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	18d2      	adds	r2, r2, r3
 800673e:	2120      	movs	r1, #32
 8006740:	187b      	adds	r3, r7, r1
 8006742:	8812      	ldrh	r2, [r2, #0]
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	187b      	adds	r3, r7, r1
 8006748:	881a      	ldrh	r2, [r3, #0]
 800674a:	2380      	movs	r3, #128	@ 0x80
 800674c:	01db      	lsls	r3, r3, #7
 800674e:	4013      	ands	r3, r2
 8006750:	d016      	beq.n	8006780 <USB_DeactivateEndpoint+0x168>
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	18d3      	adds	r3, r2, r3
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29a      	uxth	r2, r3
 8006760:	201e      	movs	r0, #30
 8006762:	183b      	adds	r3, r7, r0
 8006764:	4986      	ldr	r1, [pc, #536]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 8006766:	400a      	ands	r2, r1
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	18d3      	adds	r3, r2, r3
 8006774:	183a      	adds	r2, r7, r0
 8006776:	8812      	ldrh	r2, [r2, #0]
 8006778:	4985      	ldr	r1, [pc, #532]	@ (8006990 <USB_DeactivateEndpoint+0x378>)
 800677a:	430a      	orrs	r2, r1
 800677c:	b292      	uxth	r2, r2
 800677e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	18d2      	adds	r2, r2, r3
 800678a:	211c      	movs	r1, #28
 800678c:	187b      	adds	r3, r7, r1
 800678e:	8812      	ldrh	r2, [r2, #0]
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	187b      	adds	r3, r7, r1
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	2240      	movs	r2, #64	@ 0x40
 8006798:	4013      	ands	r3, r2
 800679a:	d016      	beq.n	80067ca <USB_DeactivateEndpoint+0x1b2>
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	18d3      	adds	r3, r2, r3
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	201a      	movs	r0, #26
 80067ac:	183b      	adds	r3, r7, r0
 80067ae:	4974      	ldr	r1, [pc, #464]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	183a      	adds	r2, r7, r0
 80067c0:	8812      	ldrh	r2, [r2, #0]
 80067c2:	4970      	ldr	r1, [pc, #448]	@ (8006984 <USB_DeactivateEndpoint+0x36c>)
 80067c4:	430a      	orrs	r2, r1
 80067c6:	b292      	uxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	18d3      	adds	r3, r2, r3
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	2018      	movs	r0, #24
 80067da:	183b      	adds	r3, r7, r0
 80067dc:	4968      	ldr	r1, [pc, #416]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 80067de:	400a      	ands	r2, r1
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	183a      	adds	r2, r7, r0
 80067ee:	8812      	ldrh	r2, [r2, #0]
 80067f0:	4964      	ldr	r1, [pc, #400]	@ (8006984 <USB_DeactivateEndpoint+0x36c>)
 80067f2:	430a      	orrs	r2, r1
 80067f4:	b292      	uxth	r2, r2
 80067f6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	18d3      	adds	r3, r2, r3
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29a      	uxth	r2, r3
 8006806:	2016      	movs	r0, #22
 8006808:	183b      	adds	r3, r7, r0
 800680a:	4962      	ldr	r1, [pc, #392]	@ (8006994 <USB_DeactivateEndpoint+0x37c>)
 800680c:	400a      	ands	r2, r1
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	18d3      	adds	r3, r2, r3
 800681a:	183a      	adds	r2, r7, r0
 800681c:	8812      	ldrh	r2, [r2, #0]
 800681e:	495b      	ldr	r1, [pc, #364]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 8006820:	430a      	orrs	r2, r1
 8006822:	b292      	uxth	r2, r2
 8006824:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	18d3      	adds	r3, r2, r3
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	2014      	movs	r0, #20
 8006836:	183b      	adds	r3, r7, r0
 8006838:	4953      	ldr	r1, [pc, #332]	@ (8006988 <USB_DeactivateEndpoint+0x370>)
 800683a:	400a      	ands	r2, r1
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	18d3      	adds	r3, r2, r3
 8006848:	183a      	adds	r2, r7, r0
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	494f      	ldr	r1, [pc, #316]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 800684e:	430a      	orrs	r2, r1
 8006850:	b292      	uxth	r2, r2
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	e08f      	b.n	8006976 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	18d2      	adds	r2, r2, r3
 8006860:	212e      	movs	r1, #46	@ 0x2e
 8006862:	187b      	adds	r3, r7, r1
 8006864:	8812      	ldrh	r2, [r2, #0]
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	187b      	adds	r3, r7, r1
 800686a:	881a      	ldrh	r2, [r3, #0]
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	01db      	lsls	r3, r3, #7
 8006870:	4013      	ands	r3, r2
 8006872:	d016      	beq.n	80068a2 <USB_DeactivateEndpoint+0x28a>
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	18d3      	adds	r3, r2, r3
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	202c      	movs	r0, #44	@ 0x2c
 8006884:	183b      	adds	r3, r7, r0
 8006886:	493e      	ldr	r1, [pc, #248]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 8006888:	400a      	ands	r2, r1
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	18d3      	adds	r3, r2, r3
 8006896:	183a      	adds	r2, r7, r0
 8006898:	8812      	ldrh	r2, [r2, #0]
 800689a:	493d      	ldr	r1, [pc, #244]	@ (8006990 <USB_DeactivateEndpoint+0x378>)
 800689c:	430a      	orrs	r2, r1
 800689e:	b292      	uxth	r2, r2
 80068a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	18d2      	adds	r2, r2, r3
 80068ac:	212a      	movs	r1, #42	@ 0x2a
 80068ae:	187b      	adds	r3, r7, r1
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	2240      	movs	r2, #64	@ 0x40
 80068ba:	4013      	ands	r3, r2
 80068bc:	d016      	beq.n	80068ec <USB_DeactivateEndpoint+0x2d4>
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	2028      	movs	r0, #40	@ 0x28
 80068ce:	183b      	adds	r3, r7, r0
 80068d0:	492b      	ldr	r1, [pc, #172]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 80068d2:	400a      	ands	r2, r1
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	18d3      	adds	r3, r2, r3
 80068e0:	183a      	adds	r2, r7, r0
 80068e2:	8812      	ldrh	r2, [r2, #0]
 80068e4:	4927      	ldr	r1, [pc, #156]	@ (8006984 <USB_DeactivateEndpoint+0x36c>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	b292      	uxth	r2, r2
 80068ea:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	18d3      	adds	r3, r2, r3
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	2026      	movs	r0, #38	@ 0x26
 80068fc:	183b      	adds	r3, r7, r0
 80068fe:	4920      	ldr	r1, [pc, #128]	@ (8006980 <USB_DeactivateEndpoint+0x368>)
 8006900:	400a      	ands	r2, r1
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	18d3      	adds	r3, r2, r3
 800690e:	183a      	adds	r2, r7, r0
 8006910:	8812      	ldrh	r2, [r2, #0]
 8006912:	491f      	ldr	r1, [pc, #124]	@ (8006990 <USB_DeactivateEndpoint+0x378>)
 8006914:	430a      	orrs	r2, r1
 8006916:	b292      	uxth	r2, r2
 8006918:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	18d3      	adds	r3, r2, r3
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29a      	uxth	r2, r3
 8006928:	2024      	movs	r0, #36	@ 0x24
 800692a:	183b      	adds	r3, r7, r0
 800692c:	4916      	ldr	r1, [pc, #88]	@ (8006988 <USB_DeactivateEndpoint+0x370>)
 800692e:	400a      	ands	r2, r1
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	18d3      	adds	r3, r2, r3
 800693c:	183a      	adds	r2, r7, r0
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	4912      	ldr	r1, [pc, #72]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 8006942:	430a      	orrs	r2, r1
 8006944:	b292      	uxth	r2, r2
 8006946:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	18d3      	adds	r3, r2, r3
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29a      	uxth	r2, r3
 8006956:	2022      	movs	r0, #34	@ 0x22
 8006958:	183b      	adds	r3, r7, r0
 800695a:	490e      	ldr	r1, [pc, #56]	@ (8006994 <USB_DeactivateEndpoint+0x37c>)
 800695c:	400a      	ands	r2, r1
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	183a      	adds	r2, r7, r0
 800696c:	8812      	ldrh	r2, [r2, #0]
 800696e:	4907      	ldr	r1, [pc, #28]	@ (800698c <USB_DeactivateEndpoint+0x374>)
 8006970:	430a      	orrs	r2, r1
 8006972:	b292      	uxth	r2, r2
 8006974:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	b00c      	add	sp, #48	@ 0x30
 800697e:	bd80      	pop	{r7, pc}
 8006980:	ffff8f8f 	.word	0xffff8f8f
 8006984:	ffff80c0 	.word	0xffff80c0
 8006988:	ffff8fbf 	.word	0xffff8fbf
 800698c:	ffff8080 	.word	0xffff8080
 8006990:	ffffc080 	.word	0xffffc080
 8006994:	ffffbf8f 	.word	0xffffbf8f

08006998 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b0c3      	sub	sp, #268	@ 0x10c
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d001      	beq.n	80069ae <USB_EPStartXfer+0x16>
 80069aa:	f000 fd2d 	bl	8007408 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d905      	bls.n	80069c6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	1d7a      	adds	r2, r7, #5
 80069c0:	32ff      	adds	r2, #255	@ 0xff
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e004      	b.n	80069d0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	1d7a      	adds	r2, r7, #5
 80069cc:	32ff      	adds	r2, #255	@ 0xff
 80069ce:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d125      	bne.n	8006a24 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6959      	ldr	r1, [r3, #20]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	88da      	ldrh	r2, [r3, #6]
 80069e0:	1d7b      	adds	r3, r7, #5
 80069e2:	33ff      	adds	r3, #255	@ 0xff
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fa3f 	bl	8007e6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2250      	movs	r2, #80	@ 0x50
 80069f6:	5a9b      	ldrh	r3, [r3, r2]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	001a      	movs	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	00da      	lsls	r2, r3, #3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	4ad7      	ldr	r2, [pc, #860]	@ (8006d6c <USB_EPStartXfer+0x3d4>)
 8006a0e:	4694      	mov	ip, r2
 8006a10:	4463      	add	r3, ip
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	1d7b      	adds	r3, r7, #5
 8006a16:	33ff      	adds	r3, #255	@ 0xff
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	f000 fccd 	bl	80073be <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d000      	beq.n	8006a2e <USB_EPStartXfer+0x96>
 8006a2c:	e362      	b.n	80070f4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6a1a      	ldr	r2, [r3, #32]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d800      	bhi.n	8006a3c <USB_EPStartXfer+0xa4>
 8006a3a:	e309      	b.n	8007050 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	2056      	movs	r0, #86	@ 0x56
 8006a4c:	183b      	adds	r3, r7, r0
 8006a4e:	49c8      	ldr	r1, [pc, #800]	@ (8006d70 <USB_EPStartXfer+0x3d8>)
 8006a50:	400a      	ands	r2, r1
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	18d3      	adds	r3, r2, r3
 8006a5e:	183a      	adds	r2, r7, r0
 8006a60:	8812      	ldrh	r2, [r2, #0]
 8006a62:	49c4      	ldr	r1, [pc, #784]	@ (8006d74 <USB_EPStartXfer+0x3dc>)
 8006a64:	430a      	orrs	r2, r1
 8006a66:	b292      	uxth	r2, r2
 8006a68:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	1d7b      	adds	r3, r7, #5
 8006a70:	33ff      	adds	r3, #255	@ 0xff
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	18d3      	adds	r3, r2, r3
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	001a      	movs	r2, r3
 8006a8a:	2340      	movs	r3, #64	@ 0x40
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <USB_EPStartXfer+0xfa>
 8006a90:	e176      	b.n	8006d80 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d000      	beq.n	8006aa0 <USB_EPStartXfer+0x108>
 8006a9e:	e074      	b.n	8006b8a <USB_EPStartXfer+0x1f2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2250      	movs	r2, #80	@ 0x50
 8006aa8:	5a9b      	ldrh	r3, [r3, r2]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	001a      	movs	r2, r3
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	18d3      	adds	r3, r2, r3
 8006abe:	4aae      	ldr	r2, [pc, #696]	@ (8006d78 <USB_EPStartXfer+0x3e0>)
 8006ac0:	4694      	mov	ip, r2
 8006ac2:	4463      	add	r3, ip
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	059b      	lsls	r3, r3, #22
 8006ace:	0d9b      	lsrs	r3, r3, #22
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	1d7b      	adds	r3, r7, #5
 8006ad8:	33ff      	adds	r3, #255	@ 0xff
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d108      	bne.n	8006af2 <USB_EPStartXfer+0x15a>
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4aa5      	ldr	r2, [pc, #660]	@ (8006d7c <USB_EPStartXfer+0x3e4>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e066      	b.n	8006bc0 <USB_EPStartXfer+0x228>
 8006af2:	1d7b      	adds	r3, r7, #5
 8006af4:	33ff      	adds	r3, #255	@ 0xff
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006afa:	d821      	bhi.n	8006b40 <USB_EPStartXfer+0x1a8>
 8006afc:	1d7b      	adds	r3, r7, #5
 8006afe:	33ff      	adds	r3, #255	@ 0xff
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	1c7a      	adds	r2, r7, #1
 8006b06:	32ff      	adds	r2, #255	@ 0xff
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	1d7b      	adds	r3, r7, #5
 8006b0c:	33ff      	adds	r3, #255	@ 0xff
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4013      	ands	r3, r2
 8006b14:	d006      	beq.n	8006b24 <USB_EPStartXfer+0x18c>
 8006b16:	1c7b      	adds	r3, r7, #1
 8006b18:	33ff      	adds	r3, #255	@ 0xff
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	1c7a      	adds	r2, r7, #1
 8006b20:	32ff      	adds	r2, #255	@ 0xff
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	1c7b      	adds	r3, r7, #1
 8006b2c:	33ff      	adds	r3, #255	@ 0xff
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e03f      	b.n	8006bc0 <USB_EPStartXfer+0x228>
 8006b40:	1d7b      	adds	r3, r7, #5
 8006b42:	33ff      	adds	r3, #255	@ 0xff
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	1c7a      	adds	r2, r7, #1
 8006b4a:	32ff      	adds	r2, #255	@ 0xff
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	1d7b      	adds	r3, r7, #5
 8006b50:	33ff      	adds	r3, #255	@ 0xff
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	221f      	movs	r2, #31
 8006b56:	4013      	ands	r3, r2
 8006b58:	d106      	bne.n	8006b68 <USB_EPStartXfer+0x1d0>
 8006b5a:	1c7b      	adds	r3, r7, #1
 8006b5c:	33ff      	adds	r3, #255	@ 0xff
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	1c7a      	adds	r2, r7, #1
 8006b64:	32ff      	adds	r2, #255	@ 0xff
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	1c7b      	adds	r3, r7, #1
 8006b70:	33ff      	adds	r3, #255	@ 0xff
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8006d7c <USB_EPStartXfer+0x3e4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	e01a      	b.n	8006bc0 <USB_EPStartXfer+0x228>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d116      	bne.n	8006bc0 <USB_EPStartXfer+0x228>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2250      	movs	r2, #80	@ 0x50
 8006b96:	5a9b      	ldrh	r3, [r3, r2]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	00da      	lsls	r2, r3, #3
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	18d3      	adds	r3, r2, r3
 8006bac:	4a72      	ldr	r2, [pc, #456]	@ (8006d78 <USB_EPStartXfer+0x3e0>)
 8006bae:	4694      	mov	ip, r2
 8006bb0:	4463      	add	r3, ip
 8006bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bb4:	1d7b      	adds	r3, r7, #5
 8006bb6:	33ff      	adds	r3, #255	@ 0xff
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bc0:	2076      	movs	r0, #118	@ 0x76
 8006bc2:	183b      	adds	r3, r7, r0
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	8952      	ldrh	r2, [r2, #10]
 8006bc8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6959      	ldr	r1, [r3, #20]
 8006bce:	1d7b      	adds	r3, r7, #5
 8006bd0:	33ff      	adds	r3, #255	@ 0xff
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	b29c      	uxth	r4, r3
 8006bd6:	183b      	adds	r3, r7, r0
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	0023      	movs	r3, r4
 8006bde:	f001 f945 	bl	8007e6c <USB_WritePMA>
            ep->xfer_buff += len;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	1d7b      	adds	r3, r7, #5
 8006be8:	33ff      	adds	r3, #255	@ 0xff
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	18d2      	adds	r2, r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d908      	bls.n	8006c10 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	1d7b      	adds	r3, r7, #5
 8006c04:	33ff      	adds	r3, #255	@ 0xff
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	1ad2      	subs	r2, r2, r3
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	621a      	str	r2, [r3, #32]
 8006c0e:	e007      	b.n	8006c20 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	1d7a      	adds	r2, r7, #5
 8006c16:	32ff      	adds	r2, #255	@ 0xff
 8006c18:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d000      	beq.n	8006c2a <USB_EPStartXfer+0x292>
 8006c28:	e070      	b.n	8006d0c <USB_EPStartXfer+0x374>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2250      	movs	r2, #80	@ 0x50
 8006c32:	5a9b      	ldrh	r3, [r3, r2]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	001a      	movs	r2, r3
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	189b      	adds	r3, r3, r2
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	00da      	lsls	r2, r3, #3
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	18d3      	adds	r3, r2, r3
 8006c48:	4a48      	ldr	r2, [pc, #288]	@ (8006d6c <USB_EPStartXfer+0x3d4>)
 8006c4a:	4694      	mov	ip, r2
 8006c4c:	4463      	add	r3, ip
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	059b      	lsls	r3, r3, #22
 8006c58:	0d9b      	lsrs	r3, r3, #22
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	1d7b      	adds	r3, r7, #5
 8006c62:	33ff      	adds	r3, #255	@ 0xff
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <USB_EPStartXfer+0x2e4>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4a42      	ldr	r2, [pc, #264]	@ (8006d7c <USB_EPStartXfer+0x3e4>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	e064      	b.n	8006d46 <USB_EPStartXfer+0x3ae>
 8006c7c:	1d7b      	adds	r3, r7, #5
 8006c7e:	33ff      	adds	r3, #255	@ 0xff
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c84:	d81f      	bhi.n	8006cc6 <USB_EPStartXfer+0x32e>
 8006c86:	1d7b      	adds	r3, r7, #5
 8006c88:	33ff      	adds	r3, #255	@ 0xff
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	21fc      	movs	r1, #252	@ 0xfc
 8006c90:	187a      	adds	r2, r7, r1
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	1d7b      	adds	r3, r7, #5
 8006c96:	33ff      	adds	r3, #255	@ 0xff
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d004      	beq.n	8006caa <USB_EPStartXfer+0x312>
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	187a      	adds	r2, r7, r1
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	23fc      	movs	r3, #252	@ 0xfc
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	029b      	lsls	r3, r3, #10
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e03f      	b.n	8006d46 <USB_EPStartXfer+0x3ae>
 8006cc6:	1d7b      	adds	r3, r7, #5
 8006cc8:	33ff      	adds	r3, #255	@ 0xff
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	21fc      	movs	r1, #252	@ 0xfc
 8006cd0:	187a      	adds	r2, r7, r1
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	1d7b      	adds	r3, r7, #5
 8006cd6:	33ff      	adds	r3, #255	@ 0xff
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	221f      	movs	r2, #31
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d104      	bne.n	8006cea <USB_EPStartXfer+0x352>
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	187a      	adds	r2, r7, r1
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	23fc      	movs	r3, #252	@ 0xfc
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	029b      	lsls	r3, r3, #10
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4a1e      	ldr	r2, [pc, #120]	@ (8006d7c <USB_EPStartXfer+0x3e4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e01c      	b.n	8006d46 <USB_EPStartXfer+0x3ae>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d118      	bne.n	8006d46 <USB_EPStartXfer+0x3ae>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2250      	movs	r2, #80	@ 0x50
 8006d1c:	5a9b      	ldrh	r3, [r3, r2]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	001a      	movs	r2, r3
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	623b      	str	r3, [r7, #32]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	4a0e      	ldr	r2, [pc, #56]	@ (8006d6c <USB_EPStartXfer+0x3d4>)
 8006d34:	4694      	mov	ip, r2
 8006d36:	4463      	add	r3, ip
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	1d7b      	adds	r3, r7, #5
 8006d3c:	33ff      	adds	r3, #255	@ 0xff
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d46:	2076      	movs	r0, #118	@ 0x76
 8006d48:	183b      	adds	r3, r7, r0
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	8912      	ldrh	r2, [r2, #8]
 8006d4e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6959      	ldr	r1, [r3, #20]
 8006d54:	1d7b      	adds	r3, r7, #5
 8006d56:	33ff      	adds	r3, #255	@ 0xff
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	b29c      	uxth	r4, r3
 8006d5c:	183b      	adds	r3, r7, r0
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	0023      	movs	r3, r4
 8006d64:	f001 f882 	bl	8007e6c <USB_WritePMA>
 8006d68:	e329      	b.n	80073be <USB_EPStartXfer+0xa26>
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	00000402 	.word	0x00000402
 8006d70:	ffff8f8f 	.word	0xffff8f8f
 8006d74:	ffff8180 	.word	0xffff8180
 8006d78:	00000406 	.word	0x00000406
 8006d7c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d000      	beq.n	8006d8a <USB_EPStartXfer+0x3f2>
 8006d88:	e070      	b.n	8006e6c <USB_EPStartXfer+0x4d4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2250      	movs	r2, #80	@ 0x50
 8006d92:	5a9b      	ldrh	r3, [r3, r2]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	001a      	movs	r2, r3
 8006d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	00da      	lsls	r2, r3, #3
 8006da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da6:	18d3      	adds	r3, r2, r3
 8006da8:	4acd      	ldr	r2, [pc, #820]	@ (80070e0 <USB_EPStartXfer+0x748>)
 8006daa:	4694      	mov	ip, r2
 8006dac:	4463      	add	r3, ip
 8006dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	059b      	lsls	r3, r3, #22
 8006db8:	0d9b      	lsrs	r3, r3, #22
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	1d7b      	adds	r3, r7, #5
 8006dc2:	33ff      	adds	r3, #255	@ 0xff
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d108      	bne.n	8006ddc <USB_EPStartXfer+0x444>
 8006dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4ac4      	ldr	r2, [pc, #784]	@ (80070e4 <USB_EPStartXfer+0x74c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e064      	b.n	8006ea6 <USB_EPStartXfer+0x50e>
 8006ddc:	1d7b      	adds	r3, r7, #5
 8006dde:	33ff      	adds	r3, #255	@ 0xff
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006de4:	d81f      	bhi.n	8006e26 <USB_EPStartXfer+0x48e>
 8006de6:	1d7b      	adds	r3, r7, #5
 8006de8:	33ff      	adds	r3, #255	@ 0xff
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	21f8      	movs	r1, #248	@ 0xf8
 8006df0:	187a      	adds	r2, r7, r1
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	1d7b      	adds	r3, r7, #5
 8006df6:	33ff      	adds	r3, #255	@ 0xff
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <USB_EPStartXfer+0x472>
 8006e00:	187b      	adds	r3, r7, r1
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	187a      	adds	r2, r7, r1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	23f8      	movs	r3, #248	@ 0xf8
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e03f      	b.n	8006ea6 <USB_EPStartXfer+0x50e>
 8006e26:	1d7b      	adds	r3, r7, #5
 8006e28:	33ff      	adds	r3, #255	@ 0xff
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	21f8      	movs	r1, #248	@ 0xf8
 8006e30:	187a      	adds	r2, r7, r1
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	1d7b      	adds	r3, r7, #5
 8006e36:	33ff      	adds	r3, #255	@ 0xff
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	221f      	movs	r2, #31
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	d104      	bne.n	8006e4a <USB_EPStartXfer+0x4b2>
 8006e40:	187b      	adds	r3, r7, r1
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	187a      	adds	r2, r7, r1
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	23f8      	movs	r3, #248	@ 0xf8
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4aa0      	ldr	r2, [pc, #640]	@ (80070e4 <USB_EPStartXfer+0x74c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e01c      	b.n	8006ea6 <USB_EPStartXfer+0x50e>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d118      	bne.n	8006ea6 <USB_EPStartXfer+0x50e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2250      	movs	r2, #80	@ 0x50
 8006e7c:	5a9b      	ldrh	r3, [r3, r2]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	001a      	movs	r2, r3
 8006e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e84:	189b      	adds	r3, r3, r2
 8006e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	00da      	lsls	r2, r3, #3
 8006e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e90:	18d3      	adds	r3, r2, r3
 8006e92:	4a93      	ldr	r2, [pc, #588]	@ (80070e0 <USB_EPStartXfer+0x748>)
 8006e94:	4694      	mov	ip, r2
 8006e96:	4463      	add	r3, ip
 8006e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e9a:	1d7b      	adds	r3, r7, #5
 8006e9c:	33ff      	adds	r3, #255	@ 0xff
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ea6:	2076      	movs	r0, #118	@ 0x76
 8006ea8:	183b      	adds	r3, r7, r0
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	8912      	ldrh	r2, [r2, #8]
 8006eae:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6959      	ldr	r1, [r3, #20]
 8006eb4:	1d7b      	adds	r3, r7, #5
 8006eb6:	33ff      	adds	r3, #255	@ 0xff
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	b29c      	uxth	r4, r3
 8006ebc:	183b      	adds	r3, r7, r0
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	0023      	movs	r3, r4
 8006ec4:	f000 ffd2 	bl	8007e6c <USB_WritePMA>
            ep->xfer_buff += len;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	1d7b      	adds	r3, r7, #5
 8006ece:	33ff      	adds	r3, #255	@ 0xff
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	18d2      	adds	r2, r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d908      	bls.n	8006ef6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	1d7b      	adds	r3, r7, #5
 8006eea:	33ff      	adds	r3, #255	@ 0xff
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	621a      	str	r2, [r3, #32]
 8006ef4:	e007      	b.n	8006f06 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	1d7a      	adds	r2, r7, #5
 8006efc:	32ff      	adds	r2, #255	@ 0xff
 8006efe:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d000      	beq.n	8006f14 <USB_EPStartXfer+0x57c>
 8006f12:	e070      	b.n	8006ff6 <USB_EPStartXfer+0x65e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2250      	movs	r2, #80	@ 0x50
 8006f1c:	5a9b      	ldrh	r3, [r3, r2]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	189b      	adds	r3, r3, r2
 8006f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	00da      	lsls	r2, r3, #3
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	4a6d      	ldr	r2, [pc, #436]	@ (80070e8 <USB_EPStartXfer+0x750>)
 8006f34:	4694      	mov	ip, r2
 8006f36:	4463      	add	r3, ip
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	059b      	lsls	r3, r3, #22
 8006f42:	0d9b      	lsrs	r3, r3, #22
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	1d7b      	adds	r3, r7, #5
 8006f4c:	33ff      	adds	r3, #255	@ 0xff
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d108      	bne.n	8006f66 <USB_EPStartXfer+0x5ce>
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4a62      	ldr	r2, [pc, #392]	@ (80070e4 <USB_EPStartXfer+0x74c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e062      	b.n	800702c <USB_EPStartXfer+0x694>
 8006f66:	1d7b      	adds	r3, r7, #5
 8006f68:	33ff      	adds	r3, #255	@ 0xff
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f6e:	d81f      	bhi.n	8006fb0 <USB_EPStartXfer+0x618>
 8006f70:	1d7b      	adds	r3, r7, #5
 8006f72:	33ff      	adds	r3, #255	@ 0xff
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	21f4      	movs	r1, #244	@ 0xf4
 8006f7a:	187a      	adds	r2, r7, r1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	1d7b      	adds	r3, r7, #5
 8006f80:	33ff      	adds	r3, #255	@ 0xff
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	4013      	ands	r3, r2
 8006f88:	d004      	beq.n	8006f94 <USB_EPStartXfer+0x5fc>
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	187a      	adds	r2, r7, r1
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	23f4      	movs	r3, #244	@ 0xf4
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e03d      	b.n	800702c <USB_EPStartXfer+0x694>
 8006fb0:	1d7b      	adds	r3, r7, #5
 8006fb2:	33ff      	adds	r3, #255	@ 0xff
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	21f4      	movs	r1, #244	@ 0xf4
 8006fba:	187a      	adds	r2, r7, r1
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	1d7b      	adds	r3, r7, #5
 8006fc0:	33ff      	adds	r3, #255	@ 0xff
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	221f      	movs	r2, #31
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d104      	bne.n	8006fd4 <USB_EPStartXfer+0x63c>
 8006fca:	187b      	adds	r3, r7, r1
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	187a      	adds	r2, r7, r1
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	23f4      	movs	r3, #244	@ 0xf4
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4a3e      	ldr	r2, [pc, #248]	@ (80070e4 <USB_EPStartXfer+0x74c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e01a      	b.n	800702c <USB_EPStartXfer+0x694>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d116      	bne.n	800702c <USB_EPStartXfer+0x694>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2250      	movs	r2, #80	@ 0x50
 8007002:	5a9b      	ldrh	r3, [r3, r2]
 8007004:	b29b      	uxth	r3, r3
 8007006:	001a      	movs	r2, r3
 8007008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800700a:	189b      	adds	r3, r3, r2
 800700c:	643b      	str	r3, [r7, #64]	@ 0x40
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00da      	lsls	r2, r3, #3
 8007014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007016:	18d3      	adds	r3, r2, r3
 8007018:	4a33      	ldr	r2, [pc, #204]	@ (80070e8 <USB_EPStartXfer+0x750>)
 800701a:	4694      	mov	ip, r2
 800701c:	4463      	add	r3, ip
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007020:	1d7b      	adds	r3, r7, #5
 8007022:	33ff      	adds	r3, #255	@ 0xff
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	b29a      	uxth	r2, r3
 8007028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800702c:	2076      	movs	r0, #118	@ 0x76
 800702e:	183b      	adds	r3, r7, r0
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	8952      	ldrh	r2, [r2, #10]
 8007034:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6959      	ldr	r1, [r3, #20]
 800703a:	1d7b      	adds	r3, r7, #5
 800703c:	33ff      	adds	r3, #255	@ 0xff
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	b29c      	uxth	r4, r3
 8007042:	183b      	adds	r3, r7, r0
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	0023      	movs	r3, r4
 800704a:	f000 ff0f 	bl	8007e6c <USB_WritePMA>
 800704e:	e1b6      	b.n	80073be <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	1d7a      	adds	r2, r7, #5
 8007056:	32ff      	adds	r2, #255	@ 0xff
 8007058:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	18d3      	adds	r3, r2, r3
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29a      	uxth	r2, r3
 8007068:	2062      	movs	r0, #98	@ 0x62
 800706a:	183b      	adds	r3, r7, r0
 800706c:	491f      	ldr	r1, [pc, #124]	@ (80070ec <USB_EPStartXfer+0x754>)
 800706e:	400a      	ands	r2, r1
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	18d3      	adds	r3, r2, r3
 800707c:	183a      	adds	r2, r7, r0
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	491b      	ldr	r1, [pc, #108]	@ (80070f0 <USB_EPStartXfer+0x758>)
 8007082:	430a      	orrs	r2, r1
 8007084:	b292      	uxth	r2, r2
 8007086:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2250      	movs	r2, #80	@ 0x50
 8007090:	5a9b      	ldrh	r3, [r3, r2]
 8007092:	b29b      	uxth	r3, r3
 8007094:	001a      	movs	r2, r3
 8007096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007098:	189b      	adds	r3, r3, r2
 800709a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00da      	lsls	r2, r3, #3
 80070a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a4:	18d3      	adds	r3, r2, r3
 80070a6:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <USB_EPStartXfer+0x748>)
 80070a8:	4694      	mov	ip, r2
 80070aa:	4463      	add	r3, ip
 80070ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ae:	1d7b      	adds	r3, r7, #5
 80070b0:	33ff      	adds	r3, #255	@ 0xff
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070ba:	2076      	movs	r0, #118	@ 0x76
 80070bc:	183b      	adds	r3, r7, r0
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	8912      	ldrh	r2, [r2, #8]
 80070c2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6959      	ldr	r1, [r3, #20]
 80070c8:	1d7b      	adds	r3, r7, #5
 80070ca:	33ff      	adds	r3, #255	@ 0xff
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b29c      	uxth	r4, r3
 80070d0:	183b      	adds	r3, r7, r0
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	0023      	movs	r3, r4
 80070d8:	f000 fec8 	bl	8007e6c <USB_WritePMA>
 80070dc:	e16f      	b.n	80073be <USB_EPStartXfer+0xa26>
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	00000402 	.word	0x00000402
 80070e4:	ffff8000 	.word	0xffff8000
 80070e8:	00000406 	.word	0x00000406
 80070ec:	ffff8e8f 	.word	0xffff8e8f
 80070f0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	1d7b      	adds	r3, r7, #5
 80070fa:	33ff      	adds	r3, #255	@ 0xff
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	18d3      	adds	r3, r2, r3
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	001a      	movs	r2, r3
 8007114:	2340      	movs	r3, #64	@ 0x40
 8007116:	4013      	ands	r3, r2
 8007118:	d100      	bne.n	800711c <USB_EPStartXfer+0x784>
 800711a:	e0a4      	b.n	8007266 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d000      	beq.n	800712a <USB_EPStartXfer+0x792>
 8007128:	e070      	b.n	800720c <USB_EPStartXfer+0x874>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2250      	movs	r2, #80	@ 0x50
 8007132:	5a9b      	ldrh	r3, [r3, r2]
 8007134:	b29b      	uxth	r3, r3
 8007136:	001a      	movs	r2, r3
 8007138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800713a:	189b      	adds	r3, r3, r2
 800713c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	00da      	lsls	r2, r3, #3
 8007144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007146:	18d3      	adds	r3, r2, r3
 8007148:	4ada      	ldr	r2, [pc, #872]	@ (80074b4 <USB_EPStartXfer+0xb1c>)
 800714a:	4694      	mov	ip, r2
 800714c:	4463      	add	r3, ip
 800714e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	059b      	lsls	r3, r3, #22
 8007158:	0d9b      	lsrs	r3, r3, #22
 800715a:	b29a      	uxth	r2, r3
 800715c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	1d7b      	adds	r3, r7, #5
 8007162:	33ff      	adds	r3, #255	@ 0xff
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d108      	bne.n	800717c <USB_EPStartXfer+0x7e4>
 800716a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	4ad1      	ldr	r2, [pc, #836]	@ (80074b8 <USB_EPStartXfer+0xb20>)
 8007172:	4313      	orrs	r3, r2
 8007174:	b29a      	uxth	r2, r3
 8007176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e062      	b.n	8007242 <USB_EPStartXfer+0x8aa>
 800717c:	1d7b      	adds	r3, r7, #5
 800717e:	33ff      	adds	r3, #255	@ 0xff
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b3e      	cmp	r3, #62	@ 0x3e
 8007184:	d81f      	bhi.n	80071c6 <USB_EPStartXfer+0x82e>
 8007186:	1d7b      	adds	r3, r7, #5
 8007188:	33ff      	adds	r3, #255	@ 0xff
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	21f0      	movs	r1, #240	@ 0xf0
 8007190:	187a      	adds	r2, r7, r1
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	1d7b      	adds	r3, r7, #5
 8007196:	33ff      	adds	r3, #255	@ 0xff
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2201      	movs	r2, #1
 800719c:	4013      	ands	r3, r2
 800719e:	d004      	beq.n	80071aa <USB_EPStartXfer+0x812>
 80071a0:	187b      	adds	r3, r7, r1
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	187a      	adds	r2, r7, r1
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	23f0      	movs	r3, #240	@ 0xf0
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e03d      	b.n	8007242 <USB_EPStartXfer+0x8aa>
 80071c6:	1d7b      	adds	r3, r7, #5
 80071c8:	33ff      	adds	r3, #255	@ 0xff
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	21f0      	movs	r1, #240	@ 0xf0
 80071d0:	187a      	adds	r2, r7, r1
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	1d7b      	adds	r3, r7, #5
 80071d6:	33ff      	adds	r3, #255	@ 0xff
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	221f      	movs	r2, #31
 80071dc:	4013      	ands	r3, r2
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0x852>
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	187a      	adds	r2, r7, r1
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	23f0      	movs	r3, #240	@ 0xf0
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4aad      	ldr	r2, [pc, #692]	@ (80074b8 <USB_EPStartXfer+0xb20>)
 8007202:	4313      	orrs	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e01a      	b.n	8007242 <USB_EPStartXfer+0x8aa>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d116      	bne.n	8007242 <USB_EPStartXfer+0x8aa>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2250      	movs	r2, #80	@ 0x50
 8007218:	5a9b      	ldrh	r3, [r3, r2]
 800721a:	b29b      	uxth	r3, r3
 800721c:	001a      	movs	r2, r3
 800721e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007220:	189b      	adds	r3, r3, r2
 8007222:	673b      	str	r3, [r7, #112]	@ 0x70
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	00da      	lsls	r2, r3, #3
 800722a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800722c:	18d3      	adds	r3, r2, r3
 800722e:	4aa1      	ldr	r2, [pc, #644]	@ (80074b4 <USB_EPStartXfer+0xb1c>)
 8007230:	4694      	mov	ip, r2
 8007232:	4463      	add	r3, ip
 8007234:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007236:	1d7b      	adds	r3, r7, #5
 8007238:	33ff      	adds	r3, #255	@ 0xff
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007240:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007242:	2076      	movs	r0, #118	@ 0x76
 8007244:	183b      	adds	r3, r7, r0
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	8952      	ldrh	r2, [r2, #10]
 800724a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6959      	ldr	r1, [r3, #20]
 8007250:	1d7b      	adds	r3, r7, #5
 8007252:	33ff      	adds	r3, #255	@ 0xff
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	b29c      	uxth	r4, r3
 8007258:	183b      	adds	r3, r7, r0
 800725a:	881a      	ldrh	r2, [r3, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	0023      	movs	r3, r4
 8007260:	f000 fe04 	bl	8007e6c <USB_WritePMA>
 8007264:	e0ab      	b.n	80073be <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d000      	beq.n	8007270 <USB_EPStartXfer+0x8d8>
 800726e:	e070      	b.n	8007352 <USB_EPStartXfer+0x9ba>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2250      	movs	r2, #80	@ 0x50
 8007278:	5a9b      	ldrh	r3, [r3, r2]
 800727a:	b29b      	uxth	r3, r3
 800727c:	001a      	movs	r2, r3
 800727e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007280:	189b      	adds	r3, r3, r2
 8007282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00da      	lsls	r2, r3, #3
 800728a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800728c:	18d3      	adds	r3, r2, r3
 800728e:	4a8b      	ldr	r2, [pc, #556]	@ (80074bc <USB_EPStartXfer+0xb24>)
 8007290:	4694      	mov	ip, r2
 8007292:	4463      	add	r3, ip
 8007294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	059b      	lsls	r3, r3, #22
 800729e:	0d9b      	lsrs	r3, r3, #22
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	1d7b      	adds	r3, r7, #5
 80072a8:	33ff      	adds	r3, #255	@ 0xff
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d108      	bne.n	80072c2 <USB_EPStartXfer+0x92a>
 80072b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4a80      	ldr	r2, [pc, #512]	@ (80074b8 <USB_EPStartXfer+0xb20>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e06c      	b.n	800739c <USB_EPStartXfer+0xa04>
 80072c2:	1d7b      	adds	r3, r7, #5
 80072c4:	33ff      	adds	r3, #255	@ 0xff
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ca:	d81f      	bhi.n	800730c <USB_EPStartXfer+0x974>
 80072cc:	1d7b      	adds	r3, r7, #5
 80072ce:	33ff      	adds	r3, #255	@ 0xff
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	21ec      	movs	r1, #236	@ 0xec
 80072d6:	187a      	adds	r2, r7, r1
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	1d7b      	adds	r3, r7, #5
 80072dc:	33ff      	adds	r3, #255	@ 0xff
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	4013      	ands	r3, r2
 80072e4:	d004      	beq.n	80072f0 <USB_EPStartXfer+0x958>
 80072e6:	187b      	adds	r3, r7, r1
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	187a      	adds	r2, r7, r1
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	23ec      	movs	r3, #236	@ 0xec
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	e047      	b.n	800739c <USB_EPStartXfer+0xa04>
 800730c:	1d7b      	adds	r3, r7, #5
 800730e:	33ff      	adds	r3, #255	@ 0xff
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	21ec      	movs	r1, #236	@ 0xec
 8007316:	187a      	adds	r2, r7, r1
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	1d7b      	adds	r3, r7, #5
 800731c:	33ff      	adds	r3, #255	@ 0xff
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	221f      	movs	r2, #31
 8007322:	4013      	ands	r3, r2
 8007324:	d104      	bne.n	8007330 <USB_EPStartXfer+0x998>
 8007326:	187b      	adds	r3, r7, r1
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3b01      	subs	r3, #1
 800732c:	187a      	adds	r2, r7, r1
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29a      	uxth	r2, r3
 8007336:	23ec      	movs	r3, #236	@ 0xec
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	029b      	lsls	r3, r3, #10
 8007340:	b29b      	uxth	r3, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	b29b      	uxth	r3, r3
 8007346:	4a5c      	ldr	r2, [pc, #368]	@ (80074b8 <USB_EPStartXfer+0xb20>)
 8007348:	4313      	orrs	r3, r2
 800734a:	b29a      	uxth	r2, r3
 800734c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e024      	b.n	800739c <USB_EPStartXfer+0xa04>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d120      	bne.n	800739c <USB_EPStartXfer+0xa04>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2184      	movs	r1, #132	@ 0x84
 800735e:	187a      	adds	r2, r7, r1
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2250      	movs	r2, #80	@ 0x50
 8007366:	5a9b      	ldrh	r3, [r3, r2]
 8007368:	b29b      	uxth	r3, r3
 800736a:	001a      	movs	r2, r3
 800736c:	187b      	adds	r3, r7, r1
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	189b      	adds	r3, r3, r2
 8007372:	187a      	adds	r2, r7, r1
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	00da      	lsls	r2, r3, #3
 800737c:	187b      	adds	r3, r7, r1
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	18d3      	adds	r3, r2, r3
 8007382:	4a4e      	ldr	r2, [pc, #312]	@ (80074bc <USB_EPStartXfer+0xb24>)
 8007384:	4694      	mov	ip, r2
 8007386:	4463      	add	r3, ip
 8007388:	2180      	movs	r1, #128	@ 0x80
 800738a:	187a      	adds	r2, r7, r1
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	1d7b      	adds	r3, r7, #5
 8007390:	33ff      	adds	r3, #255	@ 0xff
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	b29a      	uxth	r2, r3
 8007396:	187b      	adds	r3, r7, r1
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800739c:	2076      	movs	r0, #118	@ 0x76
 800739e:	183b      	adds	r3, r7, r0
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	8912      	ldrh	r2, [r2, #8]
 80073a4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6959      	ldr	r1, [r3, #20]
 80073aa:	1d7b      	adds	r3, r7, #5
 80073ac:	33ff      	adds	r3, #255	@ 0xff
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b29c      	uxth	r4, r3
 80073b2:	183b      	adds	r3, r7, r0
 80073b4:	881a      	ldrh	r2, [r3, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	0023      	movs	r3, r4
 80073ba:	f000 fd57 	bl	8007e6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	18d3      	adds	r3, r2, r3
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	200a      	movs	r0, #10
 80073ce:	183b      	adds	r3, r7, r0
 80073d0:	493b      	ldr	r1, [pc, #236]	@ (80074c0 <USB_EPStartXfer+0xb28>)
 80073d2:	400a      	ands	r2, r1
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	183b      	adds	r3, r7, r0
 80073d8:	183a      	adds	r2, r7, r0
 80073da:	8812      	ldrh	r2, [r2, #0]
 80073dc:	2110      	movs	r1, #16
 80073de:	404a      	eors	r2, r1
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	183b      	adds	r3, r7, r0
 80073e4:	183a      	adds	r2, r7, r0
 80073e6:	8812      	ldrh	r2, [r2, #0]
 80073e8:	2120      	movs	r1, #32
 80073ea:	404a      	eors	r2, r1
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	183a      	adds	r2, r7, r0
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	4931      	ldr	r1, [pc, #196]	@ (80074c4 <USB_EPStartXfer+0xb2c>)
 80073fe:	430a      	orrs	r2, r1
 8007400:	b292      	uxth	r2, r2
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	f000 fbe9 	bl	8007bda <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	7b1b      	ldrb	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d000      	beq.n	8007412 <USB_EPStartXfer+0xa7a>
 8007410:	e0a8      	b.n	8007564 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d90d      	bls.n	800743a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	1d7a      	adds	r2, r7, #5
 8007424:	32ff      	adds	r2, #255	@ 0xff
 8007426:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699a      	ldr	r2, [r3, #24]
 800742c:	1d7b      	adds	r3, r7, #5
 800742e:	33ff      	adds	r3, #255	@ 0xff
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	619a      	str	r2, [r3, #24]
 8007438:	e007      	b.n	800744a <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	1d7a      	adds	r2, r7, #5
 8007440:	32ff      	adds	r2, #255	@ 0xff
 8007442:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2200      	movs	r2, #0
 8007448:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2190      	movs	r1, #144	@ 0x90
 800744e:	187a      	adds	r2, r7, r1
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2250      	movs	r2, #80	@ 0x50
 8007456:	5a9b      	ldrh	r3, [r3, r2]
 8007458:	b29b      	uxth	r3, r3
 800745a:	001a      	movs	r2, r3
 800745c:	187b      	adds	r3, r7, r1
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	189b      	adds	r3, r3, r2
 8007462:	187a      	adds	r2, r7, r1
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	00da      	lsls	r2, r3, #3
 800746c:	187b      	adds	r3, r7, r1
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	18d3      	adds	r3, r2, r3
 8007472:	4a10      	ldr	r2, [pc, #64]	@ (80074b4 <USB_EPStartXfer+0xb1c>)
 8007474:	4694      	mov	ip, r2
 8007476:	4463      	add	r3, ip
 8007478:	218c      	movs	r1, #140	@ 0x8c
 800747a:	187a      	adds	r2, r7, r1
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	187b      	adds	r3, r7, r1
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	059b      	lsls	r3, r3, #22
 8007488:	0d9b      	lsrs	r3, r3, #22
 800748a:	b29a      	uxth	r2, r3
 800748c:	187b      	adds	r3, r7, r1
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	1d7b      	adds	r3, r7, #5
 8007494:	33ff      	adds	r3, #255	@ 0xff
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d115      	bne.n	80074c8 <USB_EPStartXfer+0xb30>
 800749c:	187b      	adds	r3, r7, r1
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4a04      	ldr	r2, [pc, #16]	@ (80074b8 <USB_EPStartXfer+0xb20>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e36e      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
 80074b2:	46c0      	nop			@ (mov r8, r8)
 80074b4:	00000406 	.word	0x00000406
 80074b8:	ffff8000 	.word	0xffff8000
 80074bc:	00000402 	.word	0x00000402
 80074c0:	ffff8fbf 	.word	0xffff8fbf
 80074c4:	ffff8080 	.word	0xffff8080
 80074c8:	1d7b      	adds	r3, r7, #5
 80074ca:	33ff      	adds	r3, #255	@ 0xff
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80074d0:	d822      	bhi.n	8007518 <USB_EPStartXfer+0xb80>
 80074d2:	1d7b      	adds	r3, r7, #5
 80074d4:	33ff      	adds	r3, #255	@ 0xff
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	21e8      	movs	r1, #232	@ 0xe8
 80074dc:	187a      	adds	r2, r7, r1
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	1d7b      	adds	r3, r7, #5
 80074e2:	33ff      	adds	r3, #255	@ 0xff
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2201      	movs	r2, #1
 80074e8:	4013      	ands	r3, r2
 80074ea:	d004      	beq.n	80074f6 <USB_EPStartXfer+0xb5e>
 80074ec:	187b      	adds	r3, r7, r1
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	187a      	adds	r2, r7, r1
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	218c      	movs	r1, #140	@ 0x8c
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	23e8      	movs	r3, #232	@ 0xe8
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	b29b      	uxth	r3, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	b29a      	uxth	r2, r3
 8007510:	187b      	adds	r3, r7, r1
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e33b      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
 8007518:	1d7b      	adds	r3, r7, #5
 800751a:	33ff      	adds	r3, #255	@ 0xff
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	21e8      	movs	r1, #232	@ 0xe8
 8007522:	187a      	adds	r2, r7, r1
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	1d7b      	adds	r3, r7, #5
 8007528:	33ff      	adds	r3, #255	@ 0xff
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	221f      	movs	r2, #31
 800752e:	4013      	ands	r3, r2
 8007530:	d104      	bne.n	800753c <USB_EPStartXfer+0xba4>
 8007532:	187b      	adds	r3, r7, r1
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	187a      	adds	r2, r7, r1
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	218c      	movs	r1, #140	@ 0x8c
 800753e:	187b      	adds	r3, r7, r1
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	23e8      	movs	r3, #232	@ 0xe8
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	029b      	lsls	r3, r3, #10
 8007550:	b29b      	uxth	r3, r3
 8007552:	4313      	orrs	r3, r2
 8007554:	b29b      	uxth	r3, r3
 8007556:	4ad7      	ldr	r2, [pc, #860]	@ (80078b4 <USB_EPStartXfer+0xf1c>)
 8007558:	4313      	orrs	r3, r2
 800755a:	b29a      	uxth	r2, r3
 800755c:	187b      	adds	r3, r7, r1
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e315      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	78db      	ldrb	r3, [r3, #3]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d000      	beq.n	800756e <USB_EPStartXfer+0xbd6>
 800756c:	e189      	b.n	8007882 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d000      	beq.n	8007578 <USB_EPStartXfer+0xbe0>
 8007576:	e07b      	b.n	8007670 <USB_EPStartXfer+0xcd8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	21ac      	movs	r1, #172	@ 0xac
 800757c:	187a      	adds	r2, r7, r1
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2250      	movs	r2, #80	@ 0x50
 8007584:	5a9b      	ldrh	r3, [r3, r2]
 8007586:	b29b      	uxth	r3, r3
 8007588:	001a      	movs	r2, r3
 800758a:	187b      	adds	r3, r7, r1
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	189b      	adds	r3, r3, r2
 8007590:	187a      	adds	r2, r7, r1
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	00da      	lsls	r2, r3, #3
 800759a:	187b      	adds	r3, r7, r1
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	18d3      	adds	r3, r2, r3
 80075a0:	4ac5      	ldr	r2, [pc, #788]	@ (80078b8 <USB_EPStartXfer+0xf20>)
 80075a2:	4694      	mov	ip, r2
 80075a4:	4463      	add	r3, ip
 80075a6:	21a8      	movs	r1, #168	@ 0xa8
 80075a8:	187a      	adds	r2, r7, r1
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	187b      	adds	r3, r7, r1
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	0d9b      	lsrs	r3, r3, #22
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <USB_EPStartXfer+0xc46>
 80075c8:	187b      	adds	r3, r7, r1
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4ab8      	ldr	r2, [pc, #736]	@ (80078b4 <USB_EPStartXfer+0xf1c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	187b      	adds	r3, r7, r1
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e06c      	b.n	80076b8 <USB_EPStartXfer+0xd20>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075e4:	d820      	bhi.n	8007628 <USB_EPStartXfer+0xc90>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	21e4      	movs	r1, #228	@ 0xe4
 80075ee:	187a      	adds	r2, r7, r1
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2201      	movs	r2, #1
 80075f8:	4013      	ands	r3, r2
 80075fa:	d004      	beq.n	8007606 <USB_EPStartXfer+0xc6e>
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	187a      	adds	r2, r7, r1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	21a8      	movs	r1, #168	@ 0xa8
 8007608:	187b      	adds	r3, r7, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29a      	uxth	r2, r3
 8007610:	23e4      	movs	r3, #228	@ 0xe4
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	029b      	lsls	r3, r3, #10
 800761a:	b29b      	uxth	r3, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	187b      	adds	r3, r7, r1
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e047      	b.n	80076b8 <USB_EPStartXfer+0xd20>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	21e4      	movs	r1, #228	@ 0xe4
 8007630:	187a      	adds	r2, r7, r1
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	221f      	movs	r2, #31
 800763a:	4013      	ands	r3, r2
 800763c:	d104      	bne.n	8007648 <USB_EPStartXfer+0xcb0>
 800763e:	187b      	adds	r3, r7, r1
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3b01      	subs	r3, #1
 8007644:	187a      	adds	r2, r7, r1
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	21a8      	movs	r1, #168	@ 0xa8
 800764a:	187b      	adds	r3, r7, r1
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29a      	uxth	r2, r3
 8007652:	23e4      	movs	r3, #228	@ 0xe4
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	029b      	lsls	r3, r3, #10
 800765c:	b29b      	uxth	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b29b      	uxth	r3, r3
 8007662:	4a94      	ldr	r2, [pc, #592]	@ (80078b4 <USB_EPStartXfer+0xf1c>)
 8007664:	4313      	orrs	r3, r2
 8007666:	b29a      	uxth	r2, r3
 8007668:	187b      	adds	r3, r7, r1
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e023      	b.n	80076b8 <USB_EPStartXfer+0xd20>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d11f      	bne.n	80076b8 <USB_EPStartXfer+0xd20>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	21b4      	movs	r1, #180	@ 0xb4
 800767c:	187a      	adds	r2, r7, r1
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2250      	movs	r2, #80	@ 0x50
 8007684:	5a9b      	ldrh	r3, [r3, r2]
 8007686:	b29b      	uxth	r3, r3
 8007688:	001a      	movs	r2, r3
 800768a:	187b      	adds	r3, r7, r1
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	189b      	adds	r3, r3, r2
 8007690:	187a      	adds	r2, r7, r1
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	00da      	lsls	r2, r3, #3
 800769a:	187b      	adds	r3, r7, r1
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	18d3      	adds	r3, r2, r3
 80076a0:	4a85      	ldr	r2, [pc, #532]	@ (80078b8 <USB_EPStartXfer+0xf20>)
 80076a2:	4694      	mov	ip, r2
 80076a4:	4463      	add	r3, ip
 80076a6:	21b0      	movs	r1, #176	@ 0xb0
 80076a8:	187a      	adds	r2, r7, r1
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	187b      	adds	r3, r7, r1
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	22a4      	movs	r2, #164	@ 0xa4
 80076bc:	18ba      	adds	r2, r7, r2
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d000      	beq.n	80076ca <USB_EPStartXfer+0xd32>
 80076c8:	e07b      	b.n	80077c2 <USB_EPStartXfer+0xe2a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	219c      	movs	r1, #156	@ 0x9c
 80076ce:	187a      	adds	r2, r7, r1
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2250      	movs	r2, #80	@ 0x50
 80076d6:	5a9b      	ldrh	r3, [r3, r2]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	001a      	movs	r2, r3
 80076dc:	187b      	adds	r3, r7, r1
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	189b      	adds	r3, r3, r2
 80076e2:	187a      	adds	r2, r7, r1
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	00da      	lsls	r2, r3, #3
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	18d3      	adds	r3, r2, r3
 80076f2:	4a72      	ldr	r2, [pc, #456]	@ (80078bc <USB_EPStartXfer+0xf24>)
 80076f4:	4694      	mov	ip, r2
 80076f6:	4463      	add	r3, ip
 80076f8:	2198      	movs	r1, #152	@ 0x98
 80076fa:	187a      	adds	r2, r7, r1
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	187b      	adds	r3, r7, r1
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	059b      	lsls	r3, r3, #22
 8007708:	0d9b      	lsrs	r3, r3, #22
 800770a:	b29a      	uxth	r2, r3
 800770c:	187b      	adds	r3, r7, r1
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <USB_EPStartXfer+0xd98>
 800771a:	187b      	adds	r3, r7, r1
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	4a64      	ldr	r2, [pc, #400]	@ (80078b4 <USB_EPStartXfer+0xf1c>)
 8007724:	4313      	orrs	r3, r2
 8007726:	b29a      	uxth	r2, r3
 8007728:	187b      	adds	r3, r7, r1
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e069      	b.n	8007804 <USB_EPStartXfer+0xe6c>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b3e      	cmp	r3, #62	@ 0x3e
 8007736:	d820      	bhi.n	800777a <USB_EPStartXfer+0xde2>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	085b      	lsrs	r3, r3, #1
 800773e:	21e0      	movs	r1, #224	@ 0xe0
 8007740:	187a      	adds	r2, r7, r1
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2201      	movs	r2, #1
 800774a:	4013      	ands	r3, r2
 800774c:	d004      	beq.n	8007758 <USB_EPStartXfer+0xdc0>
 800774e:	187b      	adds	r3, r7, r1
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	187a      	adds	r2, r7, r1
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	2198      	movs	r1, #152	@ 0x98
 800775a:	187b      	adds	r3, r7, r1
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	23e0      	movs	r3, #224	@ 0xe0
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	029b      	lsls	r3, r3, #10
 800776c:	b29b      	uxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	187b      	adds	r3, r7, r1
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e044      	b.n	8007804 <USB_EPStartXfer+0xe6c>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	21e0      	movs	r1, #224	@ 0xe0
 8007782:	187a      	adds	r2, r7, r1
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	221f      	movs	r2, #31
 800778c:	4013      	ands	r3, r2
 800778e:	d104      	bne.n	800779a <USB_EPStartXfer+0xe02>
 8007790:	187b      	adds	r3, r7, r1
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3b01      	subs	r3, #1
 8007796:	187a      	adds	r2, r7, r1
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	2198      	movs	r1, #152	@ 0x98
 800779c:	187b      	adds	r3, r7, r1
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	23e0      	movs	r3, #224	@ 0xe0
 80077a6:	18fb      	adds	r3, r7, r3
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4a3f      	ldr	r2, [pc, #252]	@ (80078b4 <USB_EPStartXfer+0xf1c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	187b      	adds	r3, r7, r1
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e020      	b.n	8007804 <USB_EPStartXfer+0xe6c>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d11c      	bne.n	8007804 <USB_EPStartXfer+0xe6c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2250      	movs	r2, #80	@ 0x50
 80077ce:	5a9b      	ldrh	r3, [r3, r2]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	001a      	movs	r2, r3
 80077d4:	21a4      	movs	r1, #164	@ 0xa4
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	189b      	adds	r3, r3, r2
 80077dc:	187a      	adds	r2, r7, r1
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	00da      	lsls	r2, r3, #3
 80077e6:	187b      	adds	r3, r7, r1
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <USB_EPStartXfer+0xf24>)
 80077ee:	4694      	mov	ip, r2
 80077f0:	4463      	add	r3, ip
 80077f2:	21a0      	movs	r1, #160	@ 0xa0
 80077f4:	187a      	adds	r2, r7, r1
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	187b      	adds	r3, r7, r1
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d100      	bne.n	800780e <USB_EPStartXfer+0xe76>
 800780c:	e1c0      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	18d2      	adds	r2, r2, r3
 8007818:	2196      	movs	r1, #150	@ 0x96
 800781a:	187b      	adds	r3, r7, r1
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007820:	187b      	adds	r3, r7, r1
 8007822:	881a      	ldrh	r2, [r3, #0]
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	01db      	lsls	r3, r3, #7
 8007828:	4013      	ands	r3, r2
 800782a:	d004      	beq.n	8007836 <USB_EPStartXfer+0xe9e>
 800782c:	187b      	adds	r3, r7, r1
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	2240      	movs	r2, #64	@ 0x40
 8007832:	4013      	ands	r3, r2
 8007834:	d10d      	bne.n	8007852 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007836:	2196      	movs	r1, #150	@ 0x96
 8007838:	187b      	adds	r3, r7, r1
 800783a:	881a      	ldrh	r2, [r3, #0]
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	01db      	lsls	r3, r3, #7
 8007840:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007842:	d000      	beq.n	8007846 <USB_EPStartXfer+0xeae>
 8007844:	e1a4      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007846:	187b      	adds	r3, r7, r1
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	2240      	movs	r2, #64	@ 0x40
 800784c:	4013      	ands	r3, r2
 800784e:	d000      	beq.n	8007852 <USB_EPStartXfer+0xeba>
 8007850:	e19e      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	18d3      	adds	r3, r2, r3
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29a      	uxth	r2, r3
 8007860:	2094      	movs	r0, #148	@ 0x94
 8007862:	183b      	adds	r3, r7, r0
 8007864:	4916      	ldr	r1, [pc, #88]	@ (80078c0 <USB_EPStartXfer+0xf28>)
 8007866:	400a      	ands	r2, r1
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	183a      	adds	r2, r7, r0
 8007876:	8812      	ldrh	r2, [r2, #0]
 8007878:	4912      	ldr	r1, [pc, #72]	@ (80078c4 <USB_EPStartXfer+0xf2c>)
 800787a:	430a      	orrs	r2, r1
 800787c:	b292      	uxth	r2, r2
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e186      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	78db      	ldrb	r3, [r3, #3]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d000      	beq.n	800788c <USB_EPStartXfer+0xef4>
 800788a:	e17f      	b.n	8007b8c <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d917      	bls.n	80078c8 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	1d7a      	adds	r2, r7, #5
 800789e:	32ff      	adds	r2, #255	@ 0xff
 80078a0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	1d7b      	adds	r3, r7, #5
 80078a8:	33ff      	adds	r3, #255	@ 0xff
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	1ad2      	subs	r2, r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	619a      	str	r2, [r3, #24]
 80078b2:	e011      	b.n	80078d8 <USB_EPStartXfer+0xf40>
 80078b4:	ffff8000 	.word	0xffff8000
 80078b8:	00000402 	.word	0x00000402
 80078bc:	00000406 	.word	0x00000406
 80078c0:	ffff8f8f 	.word	0xffff8f8f
 80078c4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	1d7a      	adds	r2, r7, #5
 80078ce:	32ff      	adds	r2, #255	@ 0xff
 80078d0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2200      	movs	r2, #0
 80078d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d000      	beq.n	80078e2 <USB_EPStartXfer+0xf4a>
 80078e0:	e081      	b.n	80079e6 <USB_EPStartXfer+0x104e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	21cc      	movs	r1, #204	@ 0xcc
 80078e6:	187a      	adds	r2, r7, r1
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2250      	movs	r2, #80	@ 0x50
 80078ee:	5a9b      	ldrh	r3, [r3, r2]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	189b      	adds	r3, r3, r2
 80078fa:	187a      	adds	r2, r7, r1
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	00da      	lsls	r2, r3, #3
 8007904:	187b      	adds	r3, r7, r1
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	18d3      	adds	r3, r2, r3
 800790a:	4ab6      	ldr	r2, [pc, #728]	@ (8007be4 <USB_EPStartXfer+0x124c>)
 800790c:	4694      	mov	ip, r2
 800790e:	4463      	add	r3, ip
 8007910:	21c8      	movs	r1, #200	@ 0xc8
 8007912:	187a      	adds	r2, r7, r1
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	187b      	adds	r3, r7, r1
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	059b      	lsls	r3, r3, #22
 8007920:	0d9b      	lsrs	r3, r3, #22
 8007922:	b29a      	uxth	r2, r3
 8007924:	187b      	adds	r3, r7, r1
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	1d7b      	adds	r3, r7, #5
 800792c:	33ff      	adds	r3, #255	@ 0xff
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <USB_EPStartXfer+0xfb2>
 8007934:	187b      	adds	r3, r7, r1
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	4aaa      	ldr	r2, [pc, #680]	@ (8007be8 <USB_EPStartXfer+0x1250>)
 800793e:	4313      	orrs	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	187b      	adds	r3, r7, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	e072      	b.n	8007a30 <USB_EPStartXfer+0x1098>
 800794a:	1d7b      	adds	r3, r7, #5
 800794c:	33ff      	adds	r3, #255	@ 0xff
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b3e      	cmp	r3, #62	@ 0x3e
 8007952:	d822      	bhi.n	800799a <USB_EPStartXfer+0x1002>
 8007954:	1d7b      	adds	r3, r7, #5
 8007956:	33ff      	adds	r3, #255	@ 0xff
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	21dc      	movs	r1, #220	@ 0xdc
 800795e:	187a      	adds	r2, r7, r1
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	1d7b      	adds	r3, r7, #5
 8007964:	33ff      	adds	r3, #255	@ 0xff
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2201      	movs	r2, #1
 800796a:	4013      	ands	r3, r2
 800796c:	d004      	beq.n	8007978 <USB_EPStartXfer+0xfe0>
 800796e:	187b      	adds	r3, r7, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	187a      	adds	r2, r7, r1
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	21c8      	movs	r1, #200	@ 0xc8
 800797a:	187b      	adds	r3, r7, r1
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29a      	uxth	r2, r3
 8007982:	23dc      	movs	r3, #220	@ 0xdc
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	187b      	adds	r3, r7, r1
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e04a      	b.n	8007a30 <USB_EPStartXfer+0x1098>
 800799a:	1d7b      	adds	r3, r7, #5
 800799c:	33ff      	adds	r3, #255	@ 0xff
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	21dc      	movs	r1, #220	@ 0xdc
 80079a4:	187a      	adds	r2, r7, r1
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	1d7b      	adds	r3, r7, #5
 80079aa:	33ff      	adds	r3, #255	@ 0xff
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	221f      	movs	r2, #31
 80079b0:	4013      	ands	r3, r2
 80079b2:	d104      	bne.n	80079be <USB_EPStartXfer+0x1026>
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	187a      	adds	r2, r7, r1
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	21c8      	movs	r1, #200	@ 0xc8
 80079c0:	187b      	adds	r3, r7, r1
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	23dc      	movs	r3, #220	@ 0xdc
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	029b      	lsls	r3, r3, #10
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4a83      	ldr	r2, [pc, #524]	@ (8007be8 <USB_EPStartXfer+0x1250>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	b29a      	uxth	r2, r3
 80079de:	187b      	adds	r3, r7, r1
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e024      	b.n	8007a30 <USB_EPStartXfer+0x1098>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d120      	bne.n	8007a30 <USB_EPStartXfer+0x1098>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	21d4      	movs	r1, #212	@ 0xd4
 80079f2:	187a      	adds	r2, r7, r1
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2250      	movs	r2, #80	@ 0x50
 80079fa:	5a9b      	ldrh	r3, [r3, r2]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	001a      	movs	r2, r3
 8007a00:	187b      	adds	r3, r7, r1
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	189b      	adds	r3, r3, r2
 8007a06:	187a      	adds	r2, r7, r1
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	00da      	lsls	r2, r3, #3
 8007a10:	187b      	adds	r3, r7, r1
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	4a73      	ldr	r2, [pc, #460]	@ (8007be4 <USB_EPStartXfer+0x124c>)
 8007a18:	4694      	mov	ip, r2
 8007a1a:	4463      	add	r3, ip
 8007a1c:	21d0      	movs	r1, #208	@ 0xd0
 8007a1e:	187a      	adds	r2, r7, r1
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	1d7b      	adds	r3, r7, #5
 8007a24:	33ff      	adds	r3, #255	@ 0xff
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	187b      	adds	r3, r7, r1
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	22c4      	movs	r2, #196	@ 0xc4
 8007a34:	18ba      	adds	r2, r7, r2
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d000      	beq.n	8007a42 <USB_EPStartXfer+0x10aa>
 8007a40:	e081      	b.n	8007b46 <USB_EPStartXfer+0x11ae>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	21bc      	movs	r1, #188	@ 0xbc
 8007a46:	187a      	adds	r2, r7, r1
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2250      	movs	r2, #80	@ 0x50
 8007a4e:	5a9b      	ldrh	r3, [r3, r2]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	001a      	movs	r2, r3
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	189b      	adds	r3, r3, r2
 8007a5a:	187a      	adds	r2, r7, r1
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00da      	lsls	r2, r3, #3
 8007a64:	187b      	adds	r3, r7, r1
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	18d3      	adds	r3, r2, r3
 8007a6a:	4a60      	ldr	r2, [pc, #384]	@ (8007bec <USB_EPStartXfer+0x1254>)
 8007a6c:	4694      	mov	ip, r2
 8007a6e:	4463      	add	r3, ip
 8007a70:	21b8      	movs	r1, #184	@ 0xb8
 8007a72:	187a      	adds	r2, r7, r1
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	187b      	adds	r3, r7, r1
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	059b      	lsls	r3, r3, #22
 8007a80:	0d9b      	lsrs	r3, r3, #22
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	187b      	adds	r3, r7, r1
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	1d7b      	adds	r3, r7, #5
 8007a8c:	33ff      	adds	r3, #255	@ 0xff
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <USB_EPStartXfer+0x1112>
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4a52      	ldr	r2, [pc, #328]	@ (8007be8 <USB_EPStartXfer+0x1250>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	187b      	adds	r3, r7, r1
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e072      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
 8007aaa:	1d7b      	adds	r3, r7, #5
 8007aac:	33ff      	adds	r3, #255	@ 0xff
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ab2:	d822      	bhi.n	8007afa <USB_EPStartXfer+0x1162>
 8007ab4:	1d7b      	adds	r3, r7, #5
 8007ab6:	33ff      	adds	r3, #255	@ 0xff
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	085b      	lsrs	r3, r3, #1
 8007abc:	21d8      	movs	r1, #216	@ 0xd8
 8007abe:	187a      	adds	r2, r7, r1
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	1d7b      	adds	r3, r7, #5
 8007ac4:	33ff      	adds	r3, #255	@ 0xff
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	4013      	ands	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <USB_EPStartXfer+0x1140>
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	187a      	adds	r2, r7, r1
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	21b8      	movs	r1, #184	@ 0xb8
 8007ada:	187b      	adds	r3, r7, r1
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	23d8      	movs	r3, #216	@ 0xd8
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	029b      	lsls	r3, r3, #10
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	e04a      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
 8007afa:	1d7b      	adds	r3, r7, #5
 8007afc:	33ff      	adds	r3, #255	@ 0xff
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	21d8      	movs	r1, #216	@ 0xd8
 8007b04:	187a      	adds	r2, r7, r1
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	1d7b      	adds	r3, r7, #5
 8007b0a:	33ff      	adds	r3, #255	@ 0xff
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	221f      	movs	r2, #31
 8007b10:	4013      	ands	r3, r2
 8007b12:	d104      	bne.n	8007b1e <USB_EPStartXfer+0x1186>
 8007b14:	187b      	adds	r3, r7, r1
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	187a      	adds	r2, r7, r1
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	21b8      	movs	r1, #184	@ 0xb8
 8007b20:	187b      	adds	r3, r7, r1
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	23d8      	movs	r3, #216	@ 0xd8
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	029b      	lsls	r3, r3, #10
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4a2b      	ldr	r2, [pc, #172]	@ (8007be8 <USB_EPStartXfer+0x1250>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e024      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d120      	bne.n	8007b90 <USB_EPStartXfer+0x11f8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2250      	movs	r2, #80	@ 0x50
 8007b52:	5a9b      	ldrh	r3, [r3, r2]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	001a      	movs	r2, r3
 8007b58:	21c4      	movs	r1, #196	@ 0xc4
 8007b5a:	187b      	adds	r3, r7, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	189b      	adds	r3, r3, r2
 8007b60:	187a      	adds	r2, r7, r1
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	00da      	lsls	r2, r3, #3
 8007b6a:	187b      	adds	r3, r7, r1
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	18d3      	adds	r3, r2, r3
 8007b70:	4a1e      	ldr	r2, [pc, #120]	@ (8007bec <USB_EPStartXfer+0x1254>)
 8007b72:	4694      	mov	ip, r2
 8007b74:	4463      	add	r3, ip
 8007b76:	21c0      	movs	r1, #192	@ 0xc0
 8007b78:	187a      	adds	r2, r7, r1
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	1d7b      	adds	r3, r7, #5
 8007b7e:	33ff      	adds	r3, #255	@ 0xff
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e001      	b.n	8007b90 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e025      	b.n	8007bdc <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	18d3      	adds	r3, r2, r3
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	208a      	movs	r0, #138	@ 0x8a
 8007ba0:	183b      	adds	r3, r7, r0
 8007ba2:	4913      	ldr	r1, [pc, #76]	@ (8007bf0 <USB_EPStartXfer+0x1258>)
 8007ba4:	400a      	ands	r2, r1
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	183b      	adds	r3, r7, r0
 8007baa:	183a      	adds	r2, r7, r0
 8007bac:	8812      	ldrh	r2, [r2, #0]
 8007bae:	2180      	movs	r1, #128	@ 0x80
 8007bb0:	0149      	lsls	r1, r1, #5
 8007bb2:	404a      	eors	r2, r1
 8007bb4:	801a      	strh	r2, [r3, #0]
 8007bb6:	183b      	adds	r3, r7, r0
 8007bb8:	183a      	adds	r2, r7, r0
 8007bba:	8812      	ldrh	r2, [r2, #0]
 8007bbc:	2180      	movs	r1, #128	@ 0x80
 8007bbe:	0189      	lsls	r1, r1, #6
 8007bc0:	404a      	eors	r2, r1
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	18d3      	adds	r3, r2, r3
 8007bce:	183a      	adds	r2, r7, r0
 8007bd0:	8812      	ldrh	r2, [r2, #0]
 8007bd2:	4908      	ldr	r1, [pc, #32]	@ (8007bf4 <USB_EPStartXfer+0x125c>)
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b043      	add	sp, #268	@ 0x10c
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	00000402 	.word	0x00000402
 8007be8:	ffff8000 	.word	0xffff8000
 8007bec:	00000406 	.word	0x00000406
 8007bf0:	ffffbf8f 	.word	0xffffbf8f
 8007bf4:	ffff8080 	.word	0xffff8080

08007bf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01d      	beq.n	8007c46 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	200c      	movs	r0, #12
 8007c1a:	183b      	adds	r3, r7, r0
 8007c1c:	491b      	ldr	r1, [pc, #108]	@ (8007c8c <USB_EPSetStall+0x94>)
 8007c1e:	400a      	ands	r2, r1
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	183b      	adds	r3, r7, r0
 8007c24:	183a      	adds	r2, r7, r0
 8007c26:	8812      	ldrh	r2, [r2, #0]
 8007c28:	2110      	movs	r1, #16
 8007c2a:	404a      	eors	r2, r1
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	18d3      	adds	r3, r2, r3
 8007c38:	183a      	adds	r2, r7, r0
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	4914      	ldr	r1, [pc, #80]	@ (8007c90 <USB_EPSetStall+0x98>)
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	b292      	uxth	r2, r2
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e01d      	b.n	8007c82 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	200e      	movs	r0, #14
 8007c56:	183b      	adds	r3, r7, r0
 8007c58:	490e      	ldr	r1, [pc, #56]	@ (8007c94 <USB_EPSetStall+0x9c>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	183b      	adds	r3, r7, r0
 8007c60:	183a      	adds	r2, r7, r0
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	2180      	movs	r1, #128	@ 0x80
 8007c66:	0149      	lsls	r1, r1, #5
 8007c68:	404a      	eors	r2, r1
 8007c6a:	801a      	strh	r2, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	18d3      	adds	r3, r2, r3
 8007c76:	183a      	adds	r2, r7, r0
 8007c78:	8812      	ldrh	r2, [r2, #0]
 8007c7a:	4905      	ldr	r1, [pc, #20]	@ (8007c90 <USB_EPSetStall+0x98>)
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	b292      	uxth	r2, r2
 8007c80:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	0018      	movs	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b004      	add	sp, #16
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	ffff8fbf 	.word	0xffff8fbf
 8007c90:	ffff8080 	.word	0xffff8080
 8007c94:	ffffbf8f 	.word	0xffffbf8f

08007c98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	7b1b      	ldrb	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d000      	beq.n	8007cac <USB_EPClearStall+0x14>
 8007caa:	e095      	b.n	8007dd8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d046      	beq.n	8007d42 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	18d2      	adds	r2, r2, r3
 8007cbe:	2110      	movs	r1, #16
 8007cc0:	187b      	adds	r3, r7, r1
 8007cc2:	8812      	ldrh	r2, [r2, #0]
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	187b      	adds	r3, r7, r1
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	2240      	movs	r2, #64	@ 0x40
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d016      	beq.n	8007cfe <USB_EPClearStall+0x66>
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	18d3      	adds	r3, r2, r3
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	200e      	movs	r0, #14
 8007ce0:	183b      	adds	r3, r7, r0
 8007ce2:	4940      	ldr	r1, [pc, #256]	@ (8007de4 <USB_EPClearStall+0x14c>)
 8007ce4:	400a      	ands	r2, r1
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	183a      	adds	r2, r7, r0
 8007cf4:	8812      	ldrh	r2, [r2, #0]
 8007cf6:	493c      	ldr	r1, [pc, #240]	@ (8007de8 <USB_EPClearStall+0x150>)
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	b292      	uxth	r2, r2
 8007cfc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	78db      	ldrb	r3, [r3, #3]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d068      	beq.n	8007dd8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	18d3      	adds	r3, r2, r3
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	200c      	movs	r0, #12
 8007d16:	183b      	adds	r3, r7, r0
 8007d18:	4934      	ldr	r1, [pc, #208]	@ (8007dec <USB_EPClearStall+0x154>)
 8007d1a:	400a      	ands	r2, r1
 8007d1c:	801a      	strh	r2, [r3, #0]
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	183a      	adds	r2, r7, r0
 8007d22:	8812      	ldrh	r2, [r2, #0]
 8007d24:	2120      	movs	r1, #32
 8007d26:	404a      	eors	r2, r1
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	18d3      	adds	r3, r2, r3
 8007d34:	183a      	adds	r2, r7, r0
 8007d36:	8812      	ldrh	r2, [r2, #0]
 8007d38:	492d      	ldr	r1, [pc, #180]	@ (8007df0 <USB_EPClearStall+0x158>)
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	e04a      	b.n	8007dd8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	18d2      	adds	r2, r2, r3
 8007d4c:	2116      	movs	r1, #22
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	8812      	ldrh	r2, [r2, #0]
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	2380      	movs	r3, #128	@ 0x80
 8007d5a:	01db      	lsls	r3, r3, #7
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	d016      	beq.n	8007d8e <USB_EPClearStall+0xf6>
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18d3      	adds	r3, r2, r3
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	2014      	movs	r0, #20
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	491c      	ldr	r1, [pc, #112]	@ (8007de4 <USB_EPClearStall+0x14c>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	18d3      	adds	r3, r2, r3
 8007d82:	183a      	adds	r2, r7, r0
 8007d84:	8812      	ldrh	r2, [r2, #0]
 8007d86:	491b      	ldr	r1, [pc, #108]	@ (8007df4 <USB_EPClearStall+0x15c>)
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	18d3      	adds	r3, r2, r3
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	2012      	movs	r0, #18
 8007d9e:	183b      	adds	r3, r7, r0
 8007da0:	4915      	ldr	r1, [pc, #84]	@ (8007df8 <USB_EPClearStall+0x160>)
 8007da2:	400a      	ands	r2, r1
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	183b      	adds	r3, r7, r0
 8007da8:	183a      	adds	r2, r7, r0
 8007daa:	8812      	ldrh	r2, [r2, #0]
 8007dac:	2180      	movs	r1, #128	@ 0x80
 8007dae:	0149      	lsls	r1, r1, #5
 8007db0:	404a      	eors	r2, r1
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	183b      	adds	r3, r7, r0
 8007db6:	183a      	adds	r2, r7, r0
 8007db8:	8812      	ldrh	r2, [r2, #0]
 8007dba:	2180      	movs	r1, #128	@ 0x80
 8007dbc:	0189      	lsls	r1, r1, #6
 8007dbe:	404a      	eors	r2, r1
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	18d3      	adds	r3, r2, r3
 8007dcc:	183a      	adds	r2, r7, r0
 8007dce:	8812      	ldrh	r2, [r2, #0]
 8007dd0:	4907      	ldr	r1, [pc, #28]	@ (8007df0 <USB_EPClearStall+0x158>)
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	0018      	movs	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b006      	add	sp, #24
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	ffff8f8f 	.word	0xffff8f8f
 8007de8:	ffff80c0 	.word	0xffff80c0
 8007dec:	ffff8fbf 	.word	0xffff8fbf
 8007df0:	ffff8080 	.word	0xffff8080
 8007df4:	ffffc080 	.word	0xffffc080
 8007df8:	ffffbf8f 	.word	0xffffbf8f

08007dfc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	000a      	movs	r2, r1
 8007e06:	1cfb      	adds	r3, r7, #3
 8007e08:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007e0a:	1cfb      	adds	r3, r7, #3
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	224c      	movs	r2, #76	@ 0x4c
 8007e16:	2180      	movs	r1, #128	@ 0x80
 8007e18:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b002      	add	sp, #8
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2258      	movs	r2, #88	@ 0x58
 8007e30:	5a9b      	ldrh	r3, [r3, r2]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4a05      	ldr	r2, [pc, #20]	@ (8007e4c <USB_DevConnect+0x28>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	b299      	uxth	r1, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2258      	movs	r2, #88	@ 0x58
 8007e3e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b002      	add	sp, #8
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	ffff8000 	.word	0xffff8000

08007e50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2244      	movs	r2, #68	@ 0x44
 8007e5c:	5a9b      	ldrh	r3, [r3, r2]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b004      	add	sp, #16
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	0019      	movs	r1, r3
 8007e78:	1dbb      	adds	r3, r7, #6
 8007e7a:	801a      	strh	r2, [r3, #0]
 8007e7c:	1d3b      	adds	r3, r7, #4
 8007e7e:	1c0a      	adds	r2, r1, #0
 8007e80:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	3301      	adds	r3, #1
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e94:	1dbb      	adds	r3, r7, #6
 8007e96:	881a      	ldrh	r2, [r3, #0]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	18d3      	adds	r3, r2, r3
 8007e9c:	2280      	movs	r2, #128	@ 0x80
 8007e9e:	00d2      	lsls	r2, r2, #3
 8007ea0:	4694      	mov	ip, r2
 8007ea2:	4463      	add	r3, ip
 8007ea4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eaa:	e021      	b.n	8007ef0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	2112      	movs	r1, #18
 8007eb2:	187b      	adds	r3, r7, r1
 8007eb4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b21b      	sxth	r3, r3
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	b21a      	sxth	r2, r3
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	5e1b      	ldrsh	r3, [r3, r0]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b21a      	sxth	r2, r3
 8007ecc:	187b      	adds	r3, r7, r1
 8007ece:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	187a      	adds	r2, r7, r1
 8007ed4:	8812      	ldrh	r2, [r2, #0]
 8007ed6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	3302      	adds	r3, #2
 8007edc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	3b01      	subs	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1da      	bne.n	8007eac <USB_WritePMA+0x40>
  }
}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b00a      	add	sp, #40	@ 0x28
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08a      	sub	sp, #40	@ 0x28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	1dbb      	adds	r3, r7, #6
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	1c0a      	adds	r2, r1, #0
 8007f14:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f16:	1d3b      	adds	r3, r7, #4
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f28:	1dbb      	adds	r3, r7, #6
 8007f2a:	881a      	ldrh	r2, [r3, #0]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	18d3      	adds	r3, r2, r3
 8007f30:	2280      	movs	r2, #128	@ 0x80
 8007f32:	00d2      	lsls	r2, r2, #3
 8007f34:	4694      	mov	ip, r2
 8007f36:	4463      	add	r3, ip
 8007f38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f3e:	e018      	b.n	8007f72 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f78:	1d3b      	adds	r3, r7, #4
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4013      	ands	r3, r2
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d007      	beq.n	8007f96 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	701a      	strb	r2, [r3, #0]
  }
}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b00a      	add	sp, #40	@ 0x28
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007f9e:	b590      	push	{r4, r7, lr}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	000a      	movs	r2, r1
 8007fa8:	1cfb      	adds	r3, r7, #3
 8007faa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007fac:	240f      	movs	r4, #15
 8007fae:	193b      	adds	r3, r7, r4
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	2203      	movs	r2, #3
 8007fba:	2181      	movs	r1, #129	@ 0x81
 8007fbc:	f001 ff19 	bl	8009df2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	2302      	movs	r3, #2
 8007fca:	2203      	movs	r2, #3
 8007fcc:	2101      	movs	r1, #1
 8007fce:	f001 ff10 	bl	8009df2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	23b6      	movs	r3, #182	@ 0xb6
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	2101      	movs	r1, #1
 8007fda:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007fdc:	201c      	movs	r0, #28
 8007fde:	f002 f889 	bl	800a0f4 <USBD_static_malloc>
 8007fe2:	0001      	movs	r1, r0
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	23ae      	movs	r3, #174	@ 0xae
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	23ae      	movs	r3, #174	@ 0xae
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	58d3      	ldr	r3, [r2, r3]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d103      	bne.n	8008000 <USBD_CUSTOM_HID_Init+0x62>
  {
    ret = 1U;
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e013      	b.n	8008028 <USBD_CUSTOM_HID_Init+0x8a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	23ae      	movs	r3, #174	@ 0xae
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	58d3      	ldr	r3, [r2, r3]
 8008008:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2200      	movs	r2, #0
 800800e:	761a      	strb	r2, [r3, #24]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	23af      	movs	r3, #175	@ 0xaf
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	58d3      	ldr	r3, [r2, r3]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	2308      	movs	r3, #8
 8008022:	2101      	movs	r1, #1
 8008024:	f002 f82f 	bl	800a086 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008028:	230f      	movs	r3, #15
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	781b      	ldrb	r3, [r3, #0]
}
 800802e:	0018      	movs	r0, r3
 8008030:	46bd      	mov	sp, r7
 8008032:	b005      	add	sp, #20
 8008034:	bd90      	pop	{r4, r7, pc}

08008036 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	000a      	movs	r2, r1
 8008040:	1cfb      	adds	r3, r7, #3
 8008042:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2181      	movs	r1, #129	@ 0x81
 8008048:	0018      	movs	r0, r3
 800804a:	f001 ff09 	bl	8009e60 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2101      	movs	r1, #1
 8008058:	0018      	movs	r0, r3
 800805a:	f001 ff01 	bl	8009e60 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	23b6      	movs	r3, #182	@ 0xb6
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	2100      	movs	r1, #0
 8008066:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	23ae      	movs	r3, #174	@ 0xae
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	58d3      	ldr	r3, [r2, r3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d011      	beq.n	8008098 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	23af      	movs	r3, #175	@ 0xaf
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	58d3      	ldr	r3, [r2, r3]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	23ae      	movs	r3, #174	@ 0xae
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	58d3      	ldr	r3, [r2, r3]
 8008088:	0018      	movs	r0, r3
 800808a:	f002 f83f 	bl	800a10c <USBD_static_free>
    pdev->pClassData = NULL;
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	23ae      	movs	r3, #174	@ 0xae
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	2100      	movs	r1, #0
 8008096:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	0018      	movs	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	b002      	add	sp, #8
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	23ae      	movs	r3, #174	@ 0xae
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	58d3      	ldr	r3, [r2, r3]
 80080b6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80080b8:	231e      	movs	r3, #30
 80080ba:	18fb      	adds	r3, r7, r3
 80080bc:	2200      	movs	r2, #0
 80080be:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80080c4:	230e      	movs	r3, #14
 80080c6:	18fb      	adds	r3, r7, r3
 80080c8:	2200      	movs	r2, #0
 80080ca:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80080cc:	2317      	movs	r3, #23
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	001a      	movs	r2, r3
 80080da:	2360      	movs	r3, #96	@ 0x60
 80080dc:	4013      	ands	r3, r2
 80080de:	d044      	beq.n	800816a <USBD_CUSTOM_HID_Setup+0xc6>
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d000      	beq.n	80080e6 <USBD_CUSTOM_HID_Setup+0x42>
 80080e4:	e0d8      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d831      	bhi.n	8008152 <USBD_CUSTOM_HID_Setup+0xae>
 80080ee:	009a      	lsls	r2, r3, #2
 80080f0:	4b72      	ldr	r3, [pc, #456]	@ (80082bc <USBD_CUSTOM_HID_Setup+0x218>)
 80080f2:	18d3      	adds	r3, r2, r3
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	001a      	movs	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	609a      	str	r2, [r3, #8]
          break;
 8008104:	e030      	b.n	8008168 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3308      	adds	r3, #8
 800810a:	0019      	movs	r1, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	0018      	movs	r0, r3
 8008112:	f001 faf8 	bl	8009706 <USBD_CtlSendData>
          break;
 8008116:	e027      	b.n	8008168 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	b29b      	uxth	r3, r3
 8008120:	b2db      	uxtb	r3, r3
 8008122:	001a      	movs	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	60da      	str	r2, [r3, #12]
          break;
 8008128:	e01e      	b.n	8008168 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	330c      	adds	r3, #12
 800812e:	0019      	movs	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	0018      	movs	r0, r3
 8008136:	f001 fae6 	bl	8009706 <USBD_CtlSendData>
          break;
 800813a:	e015      	b.n	8008168 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2201      	movs	r2, #1
 8008140:	615a      	str	r2, [r3, #20]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008142:	6939      	ldr	r1, [r7, #16]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	88da      	ldrh	r2, [r3, #6]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	0018      	movs	r0, r3
 800814c:	f001 fb0e 	bl	800976c <USBD_CtlPrepareRx>
          break;
 8008150:	e00a      	b.n	8008168 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	0011      	movs	r1, r2
 8008158:	0018      	movs	r0, r3
 800815a:	f001 fa56 	bl	800960a <USBD_CtlError>
          ret = USBD_FAIL;
 800815e:	2317      	movs	r3, #23
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	2202      	movs	r2, #2
 8008164:	701a      	strb	r2, [r3, #0]
          break;
 8008166:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008168:	e0a1      	b.n	80082ae <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b0b      	cmp	r3, #11
 8008170:	d100      	bne.n	8008174 <USBD_CUSTOM_HID_Setup+0xd0>
 8008172:	e06d      	b.n	8008250 <USBD_CUSTOM_HID_Setup+0x1ac>
 8008174:	dd00      	ble.n	8008178 <USBD_CUSTOM_HID_Setup+0xd4>
 8008176:	e083      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008178:	2b0a      	cmp	r3, #10
 800817a:	d04f      	beq.n	800821c <USBD_CUSTOM_HID_Setup+0x178>
 800817c:	dd00      	ble.n	8008180 <USBD_CUSTOM_HID_Setup+0xdc>
 800817e:	e07f      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_CUSTOM_HID_Setup+0xe6>
 8008184:	2b06      	cmp	r3, #6
 8008186:	d019      	beq.n	80081bc <USBD_CUSTOM_HID_Setup+0x118>
 8008188:	e07a      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	23a7      	movs	r3, #167	@ 0xa7
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	5cd3      	ldrb	r3, [r2, r3]
 8008192:	2b03      	cmp	r3, #3
 8008194:	d107      	bne.n	80081a6 <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008196:	230e      	movs	r3, #14
 8008198:	18f9      	adds	r1, r7, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	0018      	movs	r0, r3
 80081a0:	f001 fab1 	bl	8009706 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081a4:	e077      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	0011      	movs	r1, r2
 80081ac:	0018      	movs	r0, r3
 80081ae:	f001 fa2c 	bl	800960a <USBD_CtlError>
            ret = USBD_FAIL;
 80081b2:	2317      	movs	r3, #23
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	2202      	movs	r2, #2
 80081b8:	701a      	strb	r2, [r3, #0]
          break;
 80081ba:	e06c      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	885b      	ldrh	r3, [r3, #2]
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b22      	cmp	r3, #34	@ 0x22
 80081c6:	d10f      	bne.n	80081e8 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	88db      	ldrh	r3, [r3, #6]
 80081cc:	221e      	movs	r2, #30
 80081ce:	18ba      	adds	r2, r7, r2
 80081d0:	b299      	uxth	r1, r3
 80081d2:	293f      	cmp	r1, #63	@ 0x3f
 80081d4:	d900      	bls.n	80081d8 <USBD_CUSTOM_HID_Setup+0x134>
 80081d6:	233f      	movs	r3, #63	@ 0x3f
 80081d8:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	23af      	movs	r3, #175	@ 0xaf
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	58d3      	ldr	r3, [r2, r3]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e010      	b.n	800820a <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b21      	cmp	r3, #33	@ 0x21
 80081f2:	d10a      	bne.n	800820a <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80081f4:	4b32      	ldr	r3, [pc, #200]	@ (80082c0 <USBD_CUSTOM_HID_Setup+0x21c>)
 80081f6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	88db      	ldrh	r3, [r3, #6]
 80081fc:	221e      	movs	r2, #30
 80081fe:	18ba      	adds	r2, r7, r2
 8008200:	b299      	uxth	r1, r3
 8008202:	2909      	cmp	r1, #9
 8008204:	d900      	bls.n	8008208 <USBD_CUSTOM_HID_Setup+0x164>
 8008206:	2309      	movs	r3, #9
 8008208:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800820a:	231e      	movs	r3, #30
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	881a      	ldrh	r2, [r3, #0]
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	0018      	movs	r0, r3
 8008216:	f001 fa76 	bl	8009706 <USBD_CtlSendData>
          break;
 800821a:	e03c      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	23a7      	movs	r3, #167	@ 0xa7
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	5cd3      	ldrb	r3, [r2, r3]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d108      	bne.n	800823a <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3310      	adds	r3, #16
 800822c:	0019      	movs	r1, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	0018      	movs	r0, r3
 8008234:	f001 fa67 	bl	8009706 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008238:	e02d      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	0011      	movs	r1, r2
 8008240:	0018      	movs	r0, r3
 8008242:	f001 f9e2 	bl	800960a <USBD_CtlError>
            ret = USBD_FAIL;
 8008246:	2317      	movs	r3, #23
 8008248:	18fb      	adds	r3, r7, r3
 800824a:	2202      	movs	r2, #2
 800824c:	701a      	strb	r2, [r3, #0]
          break;
 800824e:	e022      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	23a7      	movs	r3, #167	@ 0xa7
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	5cd3      	ldrb	r3, [r2, r3]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d106      	bne.n	800826a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	001a      	movs	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008268:	e015      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f001 f9ca 	bl	800960a <USBD_CtlError>
            ret = USBD_FAIL;
 8008276:	2317      	movs	r3, #23
 8008278:	18fb      	adds	r3, r7, r3
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
          break;
 800827e:	e00a      	b.n	8008296 <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0011      	movs	r1, r2
 8008286:	0018      	movs	r0, r3
 8008288:	f001 f9bf 	bl	800960a <USBD_CtlError>
          ret = USBD_FAIL;
 800828c:	2317      	movs	r3, #23
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	2202      	movs	r2, #2
 8008292:	701a      	strb	r2, [r3, #0]
          break;
 8008294:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008296:	e00a      	b.n	80082ae <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	0011      	movs	r1, r2
 800829e:	0018      	movs	r0, r3
 80082a0:	f001 f9b3 	bl	800960a <USBD_CtlError>
      ret = USBD_FAIL;
 80082a4:	2317      	movs	r3, #23
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	2202      	movs	r2, #2
 80082aa:	701a      	strb	r2, [r3, #0]
      break;
 80082ac:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 80082ae:	2317      	movs	r3, #23
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	781b      	ldrb	r3, [r3, #0]
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b008      	add	sp, #32
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	0800a2dc 	.word	0x0800a2dc
 80082c0:	200000f4 	.word	0x200000f4

080082c4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2229      	movs	r2, #41	@ 0x29
 80082d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80082d2:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b002      	add	sp, #8
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000070 	.word	0x20000070

080082e0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2229      	movs	r2, #41	@ 0x29
 80082ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80082ee:	4b02      	ldr	r3, [pc, #8]	@ (80082f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 80082f0:	0018      	movs	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b002      	add	sp, #8
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000009c 	.word	0x2000009c

080082fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2229      	movs	r2, #41	@ 0x29
 8008308:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800830a:	4b02      	ldr	r3, [pc, #8]	@ (8008314 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 800830c:	0018      	movs	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200000c8 	.word	0x200000c8

08008318 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	000a      	movs	r2, r1
 8008322:	1cfb      	adds	r3, r7, #3
 8008324:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	23ae      	movs	r3, #174	@ 0xae
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	58d3      	ldr	r3, [r2, r3]
 800832e:	2200      	movs	r2, #0
 8008330:	761a      	strb	r2, [r3, #24]

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	0018      	movs	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	b002      	add	sp, #8
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	000a      	movs	r2, r1
 8008346:	1cfb      	adds	r3, r7, #3
 8008348:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	23ae      	movs	r3, #174	@ 0xae
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	58d3      	ldr	r3, [r2, r3]
 8008352:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	23af      	movs	r3, #175	@ 0xaf
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	58d3      	ldr	r3, [r2, r3]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	7810      	ldrb	r0, [r2, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	7852      	ldrb	r2, [r2, #1]
 8008366:	0011      	movs	r1, r2
 8008368:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	2308      	movs	r3, #8
 8008370:	2101      	movs	r1, #1
 8008372:	f001 fe88 	bl	800a086 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	0018      	movs	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	b004      	add	sp, #16
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	23ae      	movs	r3, #174	@ 0xae
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	58d3      	ldr	r3, [r2, r3]
 8008390:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d10d      	bne.n	80083b6 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	23af      	movs	r3, #175	@ 0xaf
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	58d3      	ldr	r3, [r2, r3]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	7810      	ldrb	r0, [r2, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	7852      	ldrb	r2, [r2, #1]
 80083ac:	0011      	movs	r1, r2
 80083ae:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	615a      	str	r2, [r3, #20]
  }

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b004      	add	sp, #16
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	220a      	movs	r2, #10
 80083cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80083ce:	4b02      	ldr	r3, [pc, #8]	@ (80083d8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 80083d0:	0018      	movs	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b002      	add	sp, #8
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000100 	.word	0x20000100

080083dc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083e6:	200f      	movs	r0, #15
 80083e8:	183b      	adds	r3, r7, r0
 80083ea:	2202      	movs	r2, #2
 80083ec:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d007      	beq.n	8008404 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	23af      	movs	r3, #175	@ 0xaf
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80083fe:	183b      	adds	r3, r7, r0
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008404:	230f      	movs	r3, #15
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	781b      	ldrb	r3, [r3, #0]
}
 800840a:	0018      	movs	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	b004      	add	sp, #16
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	1dfb      	adds	r3, r7, #7
 800841e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008426:	2302      	movs	r3, #2
 8008428:	e020      	b.n	800846c <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	23ad      	movs	r3, #173	@ 0xad
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	58d3      	ldr	r3, [r2, r3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	23ad      	movs	r3, #173	@ 0xad
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	2100      	movs	r1, #0
 800843e:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	23ac      	movs	r3, #172	@ 0xac
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	23a7      	movs	r3, #167	@ 0xa7
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	2101      	movs	r1, #1
 8008458:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1dfa      	adds	r2, r7, #7
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	0018      	movs	r0, r3
 8008466:	f001 fc47 	bl	8009cf8 <USBD_LL_Init>

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	0018      	movs	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	b004      	add	sp, #16
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800847e:	200f      	movs	r0, #15
 8008480:	183b      	adds	r3, r7, r0
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	23ad      	movs	r3, #173	@ 0xad
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008496:	183b      	adds	r3, r7, r0
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e003      	b.n	80084a6 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800849e:	230f      	movs	r3, #15
 80084a0:	18fb      	adds	r3, r7, r3
 80084a2:	2202      	movs	r2, #2
 80084a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80084a6:	230f      	movs	r3, #15
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	781b      	ldrb	r3, [r3, #0]
}
 80084ac:	0018      	movs	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	b004      	add	sp, #16
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	0018      	movs	r0, r3
 80084c0:	f001 fc72 	bl	8009da8 <USBD_LL_Start>

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	0018      	movs	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b002      	add	sp, #8
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	0018      	movs	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	b002      	add	sp, #8
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	000a      	movs	r2, r1
 80084ea:	1cfb      	adds	r3, r7, #3
 80084ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084ee:	240f      	movs	r4, #15
 80084f0:	193b      	adds	r3, r7, r4
 80084f2:	2202      	movs	r2, #2
 80084f4:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	23ad      	movs	r3, #173	@ 0xad
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	58d3      	ldr	r3, [r2, r3]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00e      	beq.n	8008520 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	23ad      	movs	r3, #173	@ 0xad
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	58d3      	ldr	r3, [r2, r3]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	1cfa      	adds	r2, r7, #3
 800850e:	7811      	ldrb	r1, [r2, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	0010      	movs	r0, r2
 8008514:	4798      	blx	r3
 8008516:	1e03      	subs	r3, r0, #0
 8008518:	d102      	bne.n	8008520 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800851a:	193b      	adds	r3, r7, r4
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8008520:	230f      	movs	r3, #15
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	781b      	ldrb	r3, [r3, #0]
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	b005      	add	sp, #20
 800852c:	bd90      	pop	{r4, r7, pc}

0800852e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	000a      	movs	r2, r1
 8008538:	1cfb      	adds	r3, r7, #3
 800853a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	23ad      	movs	r3, #173	@ 0xad
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	58d3      	ldr	r3, [r2, r3]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	1cfa      	adds	r2, r7, #3
 8008548:	7811      	ldrb	r1, [r2, #0]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	0010      	movs	r0, r2
 800854e:	4798      	blx	r3

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	0018      	movs	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	b002      	add	sp, #8
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	22aa      	movs	r2, #170	@ 0xaa
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	4694      	mov	ip, r2
 800856e:	4463      	add	r3, ip
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	0011      	movs	r1, r2
 8008574:	0018      	movs	r0, r3
 8008576:	f001 f810 	bl	800959a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	23a5      	movs	r3, #165	@ 0xa5
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	2101      	movs	r1, #1
 8008582:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a23      	ldr	r2, [pc, #140]	@ (8008614 <USBD_LL_SetupStage+0xb8>)
 8008588:	5a9b      	ldrh	r3, [r3, r2]
 800858a:	0019      	movs	r1, r3
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	23a6      	movs	r3, #166	@ 0xa6
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	23aa      	movs	r3, #170	@ 0xaa
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	5cd3      	ldrb	r3, [r2, r3]
 800859c:	001a      	movs	r2, r3
 800859e:	231f      	movs	r3, #31
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d019      	beq.n	80085da <USBD_LL_SetupStage+0x7e>
 80085a6:	d822      	bhi.n	80085ee <USBD_LL_SetupStage+0x92>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <USBD_LL_SetupStage+0x56>
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d00a      	beq.n	80085c6 <USBD_LL_SetupStage+0x6a>
 80085b0:	e01d      	b.n	80085ee <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	22aa      	movs	r2, #170	@ 0xaa
 80085b6:	0092      	lsls	r2, r2, #2
 80085b8:	189a      	adds	r2, r3, r2
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0011      	movs	r1, r2
 80085be:	0018      	movs	r0, r3
 80085c0:	f000 fa10 	bl	80089e4 <USBD_StdDevReq>
      break;
 80085c4:	e020      	b.n	8008608 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	22aa      	movs	r2, #170	@ 0xaa
 80085ca:	0092      	lsls	r2, r2, #2
 80085cc:	189a      	adds	r2, r3, r2
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	0011      	movs	r1, r2
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 fa78 	bl	8008ac8 <USBD_StdItfReq>
      break;
 80085d8:	e016      	b.n	8008608 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	22aa      	movs	r2, #170	@ 0xaa
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	189a      	adds	r2, r3, r2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	0011      	movs	r1, r2
 80085e6:	0018      	movs	r0, r3
 80085e8:	f000 fac5 	bl	8008b76 <USBD_StdEPReq>
      break;
 80085ec:	e00c      	b.n	8008608 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	23aa      	movs	r3, #170	@ 0xaa
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	5cd3      	ldrb	r3, [r2, r3]
 80085f6:	227f      	movs	r2, #127	@ 0x7f
 80085f8:	4393      	bics	r3, r2
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	0011      	movs	r1, r2
 8008600:	0018      	movs	r0, r3
 8008602:	f001 fc58 	bl	8009eb6 <USBD_LL_StallEP>
      break;
 8008606:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	0018      	movs	r0, r3
 800860c:	46bd      	mov	sp, r7
 800860e:	b002      	add	sp, #8
 8008610:	bd80      	pop	{r7, pc}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	000002ae 	.word	0x000002ae

08008618 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	200b      	movs	r0, #11
 8008624:	183b      	adds	r3, r7, r0
 8008626:	1c0a      	adds	r2, r1, #0
 8008628:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800862a:	183b      	adds	r3, r7, r0
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d154      	bne.n	80086dc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3355      	adds	r3, #85	@ 0x55
 8008636:	33ff      	adds	r3, #255	@ 0xff
 8008638:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	23a5      	movs	r3, #165	@ 0xa5
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	58d3      	ldr	r3, [r2, r3]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d139      	bne.n	80086ba <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	429a      	cmp	r2, r3
 8008650:	d919      	bls.n	8008686 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008668:	429a      	cmp	r2, r3
 800866a:	d203      	bcs.n	8008674 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008670:	b29b      	uxth	r3, r3
 8008672:	e002      	b.n	800867a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008678:	b29b      	uxth	r3, r3
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	001a      	movs	r2, r3
 8008680:	f001 f898 	bl	80097b4 <USBD_CtlContinueRx>
 8008684:	e045      	b.n	8008712 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	23ad      	movs	r3, #173	@ 0xad
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	58d3      	ldr	r3, [r2, r3]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	23a7      	movs	r3, #167	@ 0xa7
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800869c:	2b03      	cmp	r3, #3
 800869e:	d107      	bne.n	80086b0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	23ad      	movs	r3, #173	@ 0xad
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	58d3      	ldr	r3, [r2, r3]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	0010      	movs	r0, r2
 80086ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	0018      	movs	r0, r3
 80086b4:	f001 f891 	bl	80097da <USBD_CtlSendStatus>
 80086b8:	e02b      	b.n	8008712 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	23a5      	movs	r3, #165	@ 0xa5
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	58d3      	ldr	r3, [r2, r3]
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	d125      	bne.n	8008712 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	23a5      	movs	r3, #165	@ 0xa5
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	2100      	movs	r1, #0
 80086ce:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2100      	movs	r1, #0
 80086d4:	0018      	movs	r0, r3
 80086d6:	f001 fbee 	bl	8009eb6 <USBD_LL_StallEP>
 80086da:	e01a      	b.n	8008712 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	23ad      	movs	r3, #173	@ 0xad
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	58d3      	ldr	r3, [r2, r3]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d011      	beq.n	800870e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	23a7      	movs	r3, #167	@ 0xa7
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d10b      	bne.n	800870e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	23ad      	movs	r3, #173	@ 0xad
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	58d3      	ldr	r3, [r2, r3]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	220b      	movs	r2, #11
 8008702:	18ba      	adds	r2, r7, r2
 8008704:	7811      	ldrb	r1, [r2, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	0010      	movs	r0, r2
 800870a:	4798      	blx	r3
 800870c:	e001      	b.n	8008712 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800870e:	2302      	movs	r3, #2
 8008710:	e000      	b.n	8008714 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	0018      	movs	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	b006      	add	sp, #24
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	200b      	movs	r0, #11
 8008728:	183b      	adds	r3, r7, r0
 800872a:	1c0a      	adds	r2, r1, #0
 800872c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800872e:	183b      	adds	r3, r7, r0
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d000      	beq.n	8008738 <USBD_LL_DataInStage+0x1c>
 8008736:	e08e      	b.n	8008856 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3314      	adds	r3, #20
 800873c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	23a5      	movs	r3, #165	@ 0xa5
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	58d3      	ldr	r3, [r2, r3]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d164      	bne.n	8008814 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	429a      	cmp	r2, r3
 8008754:	d915      	bls.n	8008782 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	b29a      	uxth	r2, r3
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	0018      	movs	r0, r3
 8008770:	f000 ffe9 	bl	8009746 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	2300      	movs	r3, #0
 8008778:	2200      	movs	r2, #0
 800877a:	2100      	movs	r1, #0
 800877c:	f001 fc83 	bl	800a086 <USBD_LL_PrepareReceive>
 8008780:	e059      	b.n	8008836 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	0019      	movs	r1, r3
 800878c:	0010      	movs	r0, r2
 800878e:	f7f7 fd41 	bl	8000214 <__aeabi_uidivmod>
 8008792:	1e0b      	subs	r3, r1, #0
 8008794:	d11f      	bne.n	80087d6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800879e:	429a      	cmp	r2, r3
 80087a0:	d319      	bcc.n	80087d6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	23a6      	movs	r3, #166	@ 0xa6
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d211      	bcs.n	80087d6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 ffc4 	bl	8009746 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	23a6      	movs	r3, #166	@ 0xa6
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	2100      	movs	r1, #0
 80087c6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	f001 fc59 	bl	800a086 <USBD_LL_PrepareReceive>
 80087d4:	e02f      	b.n	8008836 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	23ad      	movs	r3, #173	@ 0xad
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	58d3      	ldr	r3, [r2, r3]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00d      	beq.n	8008800 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	23a7      	movs	r3, #167	@ 0xa7
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d107      	bne.n	8008800 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	23ad      	movs	r3, #173	@ 0xad
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	58d3      	ldr	r3, [r2, r3]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	0010      	movs	r0, r2
 80087fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	0018      	movs	r0, r3
 8008806:	f001 fb56 	bl	8009eb6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	0018      	movs	r0, r3
 800880e:	f000 fff8 	bl	8009802 <USBD_CtlReceiveStatus>
 8008812:	e010      	b.n	8008836 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	23a5      	movs	r3, #165	@ 0xa5
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	58d3      	ldr	r3, [r2, r3]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d005      	beq.n	800882c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	23a5      	movs	r3, #165	@ 0xa5
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2180      	movs	r1, #128	@ 0x80
 8008830:	0018      	movs	r0, r3
 8008832:	f001 fb40 	bl	8009eb6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	23a8      	movs	r3, #168	@ 0xa8
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	5cd3      	ldrb	r3, [r2, r3]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d124      	bne.n	800888c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	0018      	movs	r0, r3
 8008846:	f7ff fe42 	bl	80084ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	23a8      	movs	r3, #168	@ 0xa8
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	2100      	movs	r1, #0
 8008852:	54d1      	strb	r1, [r2, r3]
 8008854:	e01a      	b.n	800888c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	23ad      	movs	r3, #173	@ 0xad
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	58d3      	ldr	r3, [r2, r3]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	23a7      	movs	r3, #167	@ 0xa7
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800886c:	2b03      	cmp	r3, #3
 800886e:	d10b      	bne.n	8008888 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	23ad      	movs	r3, #173	@ 0xad
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	58d3      	ldr	r3, [r2, r3]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	220b      	movs	r2, #11
 800887c:	18ba      	adds	r2, r7, r2
 800887e:	7811      	ldrb	r1, [r2, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	0010      	movs	r0, r2
 8008884:	4798      	blx	r3
 8008886:	e001      	b.n	800888c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008888:	2302      	movs	r3, #2
 800888a:	e000      	b.n	800888e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	0018      	movs	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	b006      	add	sp, #24
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	2340      	movs	r3, #64	@ 0x40
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	f001 faa4 	bl	8009df2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	23ac      	movs	r3, #172	@ 0xac
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	2101      	movs	r1, #1
 80088b2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	23b2      	movs	r3, #178	@ 0xb2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	2140      	movs	r1, #64	@ 0x40
 80088bc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	2340      	movs	r3, #64	@ 0x40
 80088c2:	2200      	movs	r2, #0
 80088c4:	2180      	movs	r1, #128	@ 0x80
 80088c6:	f001 fa94 	bl	8009df2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2240      	movs	r2, #64	@ 0x40
 80088d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	23a7      	movs	r3, #167	@ 0xa7
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	2101      	movs	r1, #1
 80088de:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	23a5      	movs	r3, #165	@ 0xa5
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	2100      	movs	r1, #0
 80088e8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	23a9      	movs	r3, #169	@ 0xa9
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	2100      	movs	r1, #0
 80088f8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	23ae      	movs	r3, #174	@ 0xae
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	58d3      	ldr	r3, [r2, r3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	23ad      	movs	r3, #173	@ 0xad
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	58d3      	ldr	r3, [r2, r3]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	b2d9      	uxtb	r1, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	0018      	movs	r0, r3
 800891a:	4790      	blx	r2
  }

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	0018      	movs	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	b002      	add	sp, #8
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	000a      	movs	r2, r1
 8008930:	1cfb      	adds	r3, r7, #3
 8008932:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	1cfa      	adds	r2, r7, #3
 8008938:	7812      	ldrb	r2, [r2, #0]
 800893a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	0018      	movs	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	b002      	add	sp, #8
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	23a7      	movs	r3, #167	@ 0xa7
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	5cd1      	ldrb	r1, [r2, r3]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a06      	ldr	r2, [pc, #24]	@ (8008974 <USBD_LL_Suspend+0x2c>)
 800895c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	23a7      	movs	r3, #167	@ 0xa7
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	2104      	movs	r1, #4
 8008966:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	0018      	movs	r0, r3
 800896c:	46bd      	mov	sp, r7
 800896e:	b002      	add	sp, #8
 8008970:	bd80      	pop	{r7, pc}
 8008972:	46c0      	nop			@ (mov r8, r8)
 8008974:	0000029d 	.word	0x0000029d

08008978 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	23a7      	movs	r3, #167	@ 0xa7
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	5cd3      	ldrb	r3, [r2, r3]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d106      	bne.n	800899a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a05      	ldr	r2, [pc, #20]	@ (80089a4 <USBD_LL_Resume+0x2c>)
 8008990:	5c99      	ldrb	r1, [r3, r2]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	23a7      	movs	r3, #167	@ 0xa7
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b002      	add	sp, #8
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0000029d 	.word	0x0000029d

080089a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	23a7      	movs	r3, #167	@ 0xa7
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	5cd3      	ldrb	r3, [r2, r3]
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d10e      	bne.n	80089da <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	23ad      	movs	r3, #173	@ 0xad
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	58d3      	ldr	r3, [r2, r3]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	23ad      	movs	r3, #173	@ 0xad
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	58d3      	ldr	r3, [r2, r3]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	0010      	movs	r0, r2
 80089d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b002      	add	sp, #8
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	230f      	movs	r3, #15
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	2200      	movs	r2, #0
 80089f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	001a      	movs	r2, r3
 80089fc:	2360      	movs	r3, #96	@ 0x60
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b40      	cmp	r3, #64	@ 0x40
 8008a02:	d004      	beq.n	8008a0e <USBD_StdDevReq+0x2a>
 8008a04:	d84f      	bhi.n	8008aa6 <USBD_StdDevReq+0xc2>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <USBD_StdDevReq+0x3e>
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d14b      	bne.n	8008aa6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	23ad      	movs	r3, #173	@ 0xad
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	58d3      	ldr	r3, [r2, r3]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	0010      	movs	r0, r2
 8008a1e:	4798      	blx	r3
      break;
 8008a20:	e048      	b.n	8008ab4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d835      	bhi.n	8008a96 <USBD_StdDevReq+0xb2>
 8008a2a:	009a      	lsls	r2, r3, #2
 8008a2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ac4 <USBD_StdDevReq+0xe0>)
 8008a2e:	18d3      	adds	r3, r2, r3
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	0011      	movs	r1, r2
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f000 fa52 	bl	8008ee4 <USBD_GetDescriptor>
          break;
 8008a40:	e030      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	0011      	movs	r1, r2
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f000 fbfd 	bl	8009248 <USBD_SetAddress>
          break;
 8008a4e:	e029      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0011      	movs	r1, r2
 8008a56:	0018      	movs	r0, r3
 8008a58:	f000 fc4a 	bl	80092f0 <USBD_SetConfig>
          break;
 8008a5c:	e022      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	0011      	movs	r1, r2
 8008a64:	0018      	movs	r0, r3
 8008a66:	f000 fce7 	bl	8009438 <USBD_GetConfig>
          break;
 8008a6a:	e01b      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	0011      	movs	r1, r2
 8008a72:	0018      	movs	r0, r3
 8008a74:	f000 fd1b 	bl	80094ae <USBD_GetStatus>
          break;
 8008a78:	e014      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	0011      	movs	r1, r2
 8008a80:	0018      	movs	r0, r3
 8008a82:	f000 fd4e 	bl	8009522 <USBD_SetFeature>
          break;
 8008a86:	e00d      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	0011      	movs	r1, r2
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f000 fd5d 	bl	800954e <USBD_ClrFeature>
          break;
 8008a94:	e006      	b.n	8008aa4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	0011      	movs	r1, r2
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f000 fdb4 	bl	800960a <USBD_CtlError>
          break;
 8008aa2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008aa4:	e006      	b.n	8008ab4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	0011      	movs	r1, r2
 8008aac:	0018      	movs	r0, r3
 8008aae:	f000 fdac 	bl	800960a <USBD_CtlError>
      break;
 8008ab2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008ab4:	230f      	movs	r3, #15
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	781b      	ldrb	r3, [r3, #0]
}
 8008aba:	0018      	movs	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	b004      	add	sp, #16
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	0800a30c 	.word	0x0800a30c

08008ac8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ac8:	b5b0      	push	{r4, r5, r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ad2:	230f      	movs	r3, #15
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	001a      	movs	r2, r3
 8008ae0:	2360      	movs	r3, #96	@ 0x60
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b40      	cmp	r3, #64	@ 0x40
 8008ae6:	d004      	beq.n	8008af2 <USBD_StdItfReq+0x2a>
 8008ae8:	d839      	bhi.n	8008b5e <USBD_StdItfReq+0x96>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <USBD_StdItfReq+0x2a>
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d135      	bne.n	8008b5e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	23a7      	movs	r3, #167	@ 0xa7
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	5cd3      	ldrb	r3, [r2, r3]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d825      	bhi.n	8008b4c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	889b      	ldrh	r3, [r3, #4]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d819      	bhi.n	8008b3e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	23ad      	movs	r3, #173	@ 0xad
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	58d3      	ldr	r3, [r2, r3]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	250f      	movs	r5, #15
 8008b16:	197c      	adds	r4, r7, r5
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	0010      	movs	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	0003      	movs	r3, r0
 8008b22:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	88db      	ldrh	r3, [r3, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d116      	bne.n	8008b5a <USBD_StdItfReq+0x92>
 8008b2c:	197b      	adds	r3, r7, r5
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d112      	bne.n	8008b5a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 fe4f 	bl	80097da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b3c:	e00d      	b.n	8008b5a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	0011      	movs	r1, r2
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fd60 	bl	800960a <USBD_CtlError>
          break;
 8008b4a:	e006      	b.n	8008b5a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	0011      	movs	r1, r2
 8008b52:	0018      	movs	r0, r3
 8008b54:	f000 fd59 	bl	800960a <USBD_CtlError>
          break;
 8008b58:	e000      	b.n	8008b5c <USBD_StdItfReq+0x94>
          break;
 8008b5a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008b5c:	e006      	b.n	8008b6c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	0011      	movs	r1, r2
 8008b64:	0018      	movs	r0, r3
 8008b66:	f000 fd50 	bl	800960a <USBD_CtlError>
      break;
 8008b6a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	0018      	movs	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b004      	add	sp, #16
 8008b74:	bdb0      	pop	{r4, r5, r7, pc}

08008b76 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b76:	b5b0      	push	{r4, r5, r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b80:	230f      	movs	r3, #15
 8008b82:	18fb      	adds	r3, r7, r3
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	889a      	ldrh	r2, [r3, #4]
 8008b8c:	230e      	movs	r3, #14
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	001a      	movs	r2, r3
 8008b98:	2360      	movs	r3, #96	@ 0x60
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b40      	cmp	r3, #64	@ 0x40
 8008b9e:	d006      	beq.n	8008bae <USBD_StdEPReq+0x38>
 8008ba0:	d900      	bls.n	8008ba4 <USBD_StdEPReq+0x2e>
 8008ba2:	e190      	b.n	8008ec6 <USBD_StdEPReq+0x350>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <USBD_StdEPReq+0x4c>
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d000      	beq.n	8008bae <USBD_StdEPReq+0x38>
 8008bac:	e18b      	b.n	8008ec6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	23ad      	movs	r3, #173	@ 0xad
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	58d3      	ldr	r3, [r2, r3]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	0010      	movs	r0, r2
 8008bbe:	4798      	blx	r3
      break;
 8008bc0:	e188      	b.n	8008ed4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	001a      	movs	r2, r3
 8008bc8:	2360      	movs	r3, #96	@ 0x60
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d10f      	bne.n	8008bf0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	23ad      	movs	r3, #173	@ 0xad
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	58d3      	ldr	r3, [r2, r3]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	250f      	movs	r5, #15
 8008bdc:	197c      	adds	r4, r7, r5
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	0010      	movs	r0, r2
 8008be4:	4798      	blx	r3
 8008be6:	0003      	movs	r3, r0
 8008be8:	7023      	strb	r3, [r4, #0]

        return ret;
 8008bea:	197b      	adds	r3, r7, r5
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	e174      	b.n	8008eda <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d007      	beq.n	8008c08 <USBD_StdEPReq+0x92>
 8008bf8:	dd00      	ble.n	8008bfc <USBD_StdEPReq+0x86>
 8008bfa:	e15c      	b.n	8008eb6 <USBD_StdEPReq+0x340>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d100      	bne.n	8008c02 <USBD_StdEPReq+0x8c>
 8008c00:	e092      	b.n	8008d28 <USBD_StdEPReq+0x1b2>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d04b      	beq.n	8008c9e <USBD_StdEPReq+0x128>
 8008c06:	e156      	b.n	8008eb6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	23a7      	movs	r3, #167	@ 0xa7
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d002      	beq.n	8008c1a <USBD_StdEPReq+0xa4>
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d01d      	beq.n	8008c54 <USBD_StdEPReq+0xde>
 8008c18:	e039      	b.n	8008c8e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1a:	220e      	movs	r2, #14
 8008c1c:	18bb      	adds	r3, r7, r2
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d010      	beq.n	8008c46 <USBD_StdEPReq+0xd0>
 8008c24:	18bb      	adds	r3, r7, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b80      	cmp	r3, #128	@ 0x80
 8008c2a:	d00c      	beq.n	8008c46 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c2c:	18bb      	adds	r3, r7, r2
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	0011      	movs	r1, r2
 8008c34:	0018      	movs	r0, r3
 8008c36:	f001 f93e 	bl	8009eb6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2180      	movs	r1, #128	@ 0x80
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f001 f939 	bl	8009eb6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c44:	e02a      	b.n	8008c9c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 fcdc 	bl	800960a <USBD_CtlError>
              break;
 8008c52:	e023      	b.n	8008c9c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	885b      	ldrh	r3, [r3, #2]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d113      	bne.n	8008c84 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008c5c:	220e      	movs	r2, #14
 8008c5e:	18bb      	adds	r3, r7, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00e      	beq.n	8008c84 <USBD_StdEPReq+0x10e>
 8008c66:	18bb      	adds	r3, r7, r2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b80      	cmp	r3, #128	@ 0x80
 8008c6c:	d00a      	beq.n	8008c84 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c76:	18bb      	adds	r3, r7, r2
 8008c78:	781a      	ldrb	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f001 f919 	bl	8009eb6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	0018      	movs	r0, r3
 8008c88:	f000 fda7 	bl	80097da <USBD_CtlSendStatus>

              break;
 8008c8c:	e006      	b.n	8008c9c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f000 fcb8 	bl	800960a <USBD_CtlError>
              break;
 8008c9a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008c9c:	e112      	b.n	8008ec4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	23a7      	movs	r3, #167	@ 0xa7
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	5cd3      	ldrb	r3, [r2, r3]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d002      	beq.n	8008cb0 <USBD_StdEPReq+0x13a>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d01d      	beq.n	8008cea <USBD_StdEPReq+0x174>
 8008cae:	e032      	b.n	8008d16 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb0:	220e      	movs	r2, #14
 8008cb2:	18bb      	adds	r3, r7, r2
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d010      	beq.n	8008cdc <USBD_StdEPReq+0x166>
 8008cba:	18bb      	adds	r3, r7, r2
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b80      	cmp	r3, #128	@ 0x80
 8008cc0:	d00c      	beq.n	8008cdc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cc2:	18bb      	adds	r3, r7, r2
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	0011      	movs	r1, r2
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f001 f8f3 	bl	8009eb6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2180      	movs	r1, #128	@ 0x80
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f001 f8ee 	bl	8009eb6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cda:	e024      	b.n	8008d26 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	0011      	movs	r1, r2
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f000 fc91 	bl	800960a <USBD_CtlError>
              break;
 8008ce8:	e01d      	b.n	8008d26 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d118      	bne.n	8008d24 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cf2:	210e      	movs	r1, #14
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	227f      	movs	r2, #127	@ 0x7f
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d006      	beq.n	8008d0c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	0011      	movs	r1, r2
 8008d06:	0018      	movs	r0, r3
 8008d08:	f001 f900 	bl	8009f0c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f000 fd63 	bl	80097da <USBD_CtlSendStatus>
              }
              break;
 8008d14:	e006      	b.n	8008d24 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	0011      	movs	r1, r2
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f000 fc74 	bl	800960a <USBD_CtlError>
              break;
 8008d22:	e000      	b.n	8008d26 <USBD_StdEPReq+0x1b0>
              break;
 8008d24:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008d26:	e0cd      	b.n	8008ec4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	23a7      	movs	r3, #167	@ 0xa7
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	5cd3      	ldrb	r3, [r2, r3]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d002      	beq.n	8008d3a <USBD_StdEPReq+0x1c4>
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d03c      	beq.n	8008db2 <USBD_StdEPReq+0x23c>
 8008d38:	e0b5      	b.n	8008ea6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d3a:	220e      	movs	r2, #14
 8008d3c:	18bb      	adds	r3, r7, r2
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00a      	beq.n	8008d5a <USBD_StdEPReq+0x1e4>
 8008d44:	18bb      	adds	r3, r7, r2
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b80      	cmp	r3, #128	@ 0x80
 8008d4a:	d006      	beq.n	8008d5a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	0011      	movs	r1, r2
 8008d52:	0018      	movs	r0, r3
 8008d54:	f000 fc59 	bl	800960a <USBD_CtlError>
                break;
 8008d58:	e0ac      	b.n	8008eb4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d5a:	220e      	movs	r2, #14
 8008d5c:	18bb      	adds	r3, r7, r2
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b25b      	sxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da0c      	bge.n	8008d80 <USBD_StdEPReq+0x20a>
 8008d66:	18bb      	adds	r3, r7, r2
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	227f      	movs	r2, #127	@ 0x7f
 8008d6c:	401a      	ands	r2, r3
 8008d6e:	0013      	movs	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	189b      	adds	r3, r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	3310      	adds	r3, #16
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	18d3      	adds	r3, r2, r3
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	e00d      	b.n	8008d9c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d80:	230e      	movs	r3, #14
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	227f      	movs	r2, #127	@ 0x7f
 8008d88:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8a:	0013      	movs	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3351      	adds	r3, #81	@ 0x51
 8008d94:	33ff      	adds	r3, #255	@ 0xff
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	0018      	movs	r0, r3
 8008dac:	f000 fcab 	bl	8009706 <USBD_CtlSendData>
              break;
 8008db0:	e080      	b.n	8008eb4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008db2:	220e      	movs	r2, #14
 8008db4:	18bb      	adds	r3, r7, r2
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	b25b      	sxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da14      	bge.n	8008de8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dbe:	18bb      	adds	r3, r7, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	220f      	movs	r2, #15
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	0013      	movs	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	18cb      	adds	r3, r1, r3
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11e      	bne.n	8008e18 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	0011      	movs	r1, r2
 8008de0:	0018      	movs	r0, r3
 8008de2:	f000 fc12 	bl	800960a <USBD_CtlError>
                  break;
 8008de6:	e065      	b.n	8008eb4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008de8:	230e      	movs	r3, #14
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	220f      	movs	r2, #15
 8008df0:	401a      	ands	r2, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	23ac      	movs	r3, #172	@ 0xac
 8008df6:	0059      	lsls	r1, r3, #1
 8008df8:	0013      	movs	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	189b      	adds	r3, r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	18c3      	adds	r3, r0, r3
 8008e02:	185b      	adds	r3, r3, r1
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0011      	movs	r1, r2
 8008e10:	0018      	movs	r0, r3
 8008e12:	f000 fbfa 	bl	800960a <USBD_CtlError>
                  break;
 8008e16:	e04d      	b.n	8008eb4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e18:	220e      	movs	r2, #14
 8008e1a:	18bb      	adds	r3, r7, r2
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	b25b      	sxtb	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da0c      	bge.n	8008e3e <USBD_StdEPReq+0x2c8>
 8008e24:	18bb      	adds	r3, r7, r2
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	227f      	movs	r2, #127	@ 0x7f
 8008e2a:	401a      	ands	r2, r3
 8008e2c:	0013      	movs	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	189b      	adds	r3, r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	3310      	adds	r3, #16
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	18d3      	adds	r3, r2, r3
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	e00d      	b.n	8008e5a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e3e:	230e      	movs	r3, #14
 8008e40:	18fb      	adds	r3, r7, r3
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	227f      	movs	r2, #127	@ 0x7f
 8008e46:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e48:	0013      	movs	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	189b      	adds	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	3351      	adds	r3, #81	@ 0x51
 8008e52:	33ff      	adds	r3, #255	@ 0xff
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	18d3      	adds	r3, r2, r3
 8008e58:	3304      	adds	r3, #4
 8008e5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e5c:	220e      	movs	r2, #14
 8008e5e:	18bb      	adds	r3, r7, r2
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <USBD_StdEPReq+0x2f8>
 8008e66:	18bb      	adds	r3, r7, r2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b80      	cmp	r3, #128	@ 0x80
 8008e6c:	d103      	bne.n	8008e76 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e010      	b.n	8008e98 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e76:	230e      	movs	r3, #14
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	0011      	movs	r1, r2
 8008e80:	0018      	movs	r0, r3
 8008e82:	f001 f86e 	bl	8009f62 <USBD_LL_IsStallEP>
 8008e86:	1e03      	subs	r3, r0, #0
 8008e88:	d003      	beq.n	8008e92 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	e002      	b.n	8008e98 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f000 fc31 	bl	8009706 <USBD_CtlSendData>
              break;
 8008ea4:	e006      	b.n	8008eb4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0011      	movs	r1, r2
 8008eac:	0018      	movs	r0, r3
 8008eae:	f000 fbac 	bl	800960a <USBD_CtlError>
              break;
 8008eb2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008eb4:	e006      	b.n	8008ec4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 fba4 	bl	800960a <USBD_CtlError>
          break;
 8008ec2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008ec4:	e006      	b.n	8008ed4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	0011      	movs	r1, r2
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f000 fb9c 	bl	800960a <USBD_CtlError>
      break;
 8008ed2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008ed4:	230f      	movs	r3, #15
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	781b      	ldrb	r3, [r3, #0]
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b004      	add	sp, #16
 8008ee0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ee4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eee:	2308      	movs	r3, #8
 8008ef0:	18fb      	adds	r3, r7, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008efa:	230b      	movs	r3, #11
 8008efc:	18fb      	adds	r3, r7, r3
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b07      	cmp	r3, #7
 8008f0c:	d900      	bls.n	8008f10 <USBD_GetDescriptor+0x2c>
 8008f0e:	e159      	b.n	80091c4 <USBD_GetDescriptor+0x2e0>
 8008f10:	009a      	lsls	r2, r3, #2
 8008f12:	4bcb      	ldr	r3, [pc, #812]	@ (8009240 <USBD_GetDescriptor+0x35c>)
 8008f14:	18d3      	adds	r3, r2, r3
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	23ac      	movs	r3, #172	@ 0xac
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	58d3      	ldr	r3, [r2, r3]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	2108      	movs	r1, #8
 8008f2a:	1879      	adds	r1, r7, r1
 8008f2c:	0010      	movs	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	0003      	movs	r3, r0
 8008f32:	60fb      	str	r3, [r7, #12]
      break;
 8008f34:	e153      	b.n	80091de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7c1b      	ldrb	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10f      	bne.n	8008f5e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	23ad      	movs	r3, #173	@ 0xad
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	58d3      	ldr	r3, [r2, r3]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	2208      	movs	r2, #8
 8008f4a:	18ba      	adds	r2, r7, r2
 8008f4c:	0010      	movs	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	0003      	movs	r3, r0
 8008f52:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	2202      	movs	r2, #2
 8008f5a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f5c:	e13f      	b.n	80091de <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	23ad      	movs	r3, #173	@ 0xad
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	58d3      	ldr	r3, [r2, r3]
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	2208      	movs	r2, #8
 8008f6a:	18ba      	adds	r2, r7, r2
 8008f6c:	0010      	movs	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	0003      	movs	r3, r0
 8008f72:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3301      	adds	r3, #1
 8008f78:	2202      	movs	r2, #2
 8008f7a:	701a      	strb	r2, [r3, #0]
      break;
 8008f7c:	e12f      	b.n	80091de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	885b      	ldrh	r3, [r3, #2]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	d900      	bls.n	8008f8a <USBD_GetDescriptor+0xa6>
 8008f88:	e0d0      	b.n	800912c <USBD_GetDescriptor+0x248>
 8008f8a:	009a      	lsls	r2, r3, #2
 8008f8c:	4bad      	ldr	r3, [pc, #692]	@ (8009244 <USBD_GetDescriptor+0x360>)
 8008f8e:	18d3      	adds	r3, r2, r3
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	23ac      	movs	r3, #172	@ 0xac
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	58d3      	ldr	r3, [r2, r3]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00d      	beq.n	8008fbe <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	23ac      	movs	r3, #172	@ 0xac
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	58d3      	ldr	r3, [r2, r3]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	2108      	movs	r1, #8
 8008fb2:	1879      	adds	r1, r7, r1
 8008fb4:	0010      	movs	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	0003      	movs	r3, r0
 8008fba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fbc:	e0c3      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	0011      	movs	r1, r2
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f000 fb20 	bl	800960a <USBD_CtlError>
            err++;
 8008fca:	210b      	movs	r1, #11
 8008fcc:	187b      	adds	r3, r7, r1
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	701a      	strb	r2, [r3, #0]
          break;
 8008fd6:	e0b6      	b.n	8009146 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	23ac      	movs	r3, #172	@ 0xac
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	58d3      	ldr	r3, [r2, r3]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	23ac      	movs	r3, #172	@ 0xac
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	58d3      	ldr	r3, [r2, r3]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	7c12      	ldrb	r2, [r2, #16]
 8008ff4:	2108      	movs	r1, #8
 8008ff6:	1879      	adds	r1, r7, r1
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	0003      	movs	r3, r0
 8008ffe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009000:	e0a1      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0011      	movs	r1, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f000 fafe 	bl	800960a <USBD_CtlError>
            err++;
 800900e:	210b      	movs	r1, #11
 8009010:	187b      	adds	r3, r7, r1
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	187b      	adds	r3, r7, r1
 8009016:	3201      	adds	r2, #1
 8009018:	701a      	strb	r2, [r3, #0]
          break;
 800901a:	e094      	b.n	8009146 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	23ac      	movs	r3, #172	@ 0xac
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	58d3      	ldr	r3, [r2, r3]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	23ac      	movs	r3, #172	@ 0xac
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	58d3      	ldr	r3, [r2, r3]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7c12      	ldrb	r2, [r2, #16]
 8009038:	2108      	movs	r1, #8
 800903a:	1879      	adds	r1, r7, r1
 800903c:	0010      	movs	r0, r2
 800903e:	4798      	blx	r3
 8009040:	0003      	movs	r3, r0
 8009042:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009044:	e07f      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f000 fadc 	bl	800960a <USBD_CtlError>
            err++;
 8009052:	210b      	movs	r1, #11
 8009054:	187b      	adds	r3, r7, r1
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	187b      	adds	r3, r7, r1
 800905a:	3201      	adds	r2, #1
 800905c:	701a      	strb	r2, [r3, #0]
          break;
 800905e:	e072      	b.n	8009146 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	23ac      	movs	r3, #172	@ 0xac
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	58d3      	ldr	r3, [r2, r3]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00d      	beq.n	800908a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	23ac      	movs	r3, #172	@ 0xac
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	58d3      	ldr	r3, [r2, r3]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	2108      	movs	r1, #8
 800907e:	1879      	adds	r1, r7, r1
 8009080:	0010      	movs	r0, r2
 8009082:	4798      	blx	r3
 8009084:	0003      	movs	r3, r0
 8009086:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009088:	e05d      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	0011      	movs	r1, r2
 8009090:	0018      	movs	r0, r3
 8009092:	f000 faba 	bl	800960a <USBD_CtlError>
            err++;
 8009096:	210b      	movs	r1, #11
 8009098:	187b      	adds	r3, r7, r1
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	187b      	adds	r3, r7, r1
 800909e:	3201      	adds	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
          break;
 80090a2:	e050      	b.n	8009146 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	23ac      	movs	r3, #172	@ 0xac
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	58d3      	ldr	r3, [r2, r3]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00d      	beq.n	80090ce <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	23ac      	movs	r3, #172	@ 0xac
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	58d3      	ldr	r3, [r2, r3]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	2108      	movs	r1, #8
 80090c2:	1879      	adds	r1, r7, r1
 80090c4:	0010      	movs	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	0003      	movs	r3, r0
 80090ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090cc:	e03b      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	0011      	movs	r1, r2
 80090d4:	0018      	movs	r0, r3
 80090d6:	f000 fa98 	bl	800960a <USBD_CtlError>
            err++;
 80090da:	210b      	movs	r1, #11
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	187b      	adds	r3, r7, r1
 80090e2:	3201      	adds	r2, #1
 80090e4:	701a      	strb	r2, [r3, #0]
          break;
 80090e6:	e02e      	b.n	8009146 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	23ac      	movs	r3, #172	@ 0xac
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	58d3      	ldr	r3, [r2, r3]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00d      	beq.n	8009112 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	23ac      	movs	r3, #172	@ 0xac
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	58d3      	ldr	r3, [r2, r3]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	2108      	movs	r1, #8
 8009106:	1879      	adds	r1, r7, r1
 8009108:	0010      	movs	r0, r2
 800910a:	4798      	blx	r3
 800910c:	0003      	movs	r3, r0
 800910e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009110:	e019      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f000 fa76 	bl	800960a <USBD_CtlError>
            err++;
 800911e:	210b      	movs	r1, #11
 8009120:	187b      	adds	r3, r7, r1
 8009122:	781a      	ldrb	r2, [r3, #0]
 8009124:	187b      	adds	r3, r7, r1
 8009126:	3201      	adds	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
          break;
 800912a:	e00c      	b.n	8009146 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	0011      	movs	r1, r2
 8009132:	0018      	movs	r0, r3
 8009134:	f000 fa69 	bl	800960a <USBD_CtlError>
          err++;
 8009138:	210b      	movs	r1, #11
 800913a:	187b      	adds	r3, r7, r1
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	187b      	adds	r3, r7, r1
 8009140:	3201      	adds	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009144:	e04b      	b.n	80091de <USBD_GetDescriptor+0x2fa>
 8009146:	e04a      	b.n	80091de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	7c1b      	ldrb	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	23ad      	movs	r3, #173	@ 0xad
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	58d3      	ldr	r3, [r2, r3]
 8009158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915a:	2208      	movs	r2, #8
 800915c:	18ba      	adds	r2, r7, r2
 800915e:	0010      	movs	r0, r2
 8009160:	4798      	blx	r3
 8009162:	0003      	movs	r3, r0
 8009164:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009166:	e03a      	b.n	80091de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	0011      	movs	r1, r2
 800916e:	0018      	movs	r0, r3
 8009170:	f000 fa4b 	bl	800960a <USBD_CtlError>
        err++;
 8009174:	210b      	movs	r1, #11
 8009176:	187b      	adds	r3, r7, r1
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	187b      	adds	r3, r7, r1
 800917c:	3201      	adds	r2, #1
 800917e:	701a      	strb	r2, [r3, #0]
      break;
 8009180:	e02d      	b.n	80091de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7c1b      	ldrb	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10f      	bne.n	80091aa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	23ad      	movs	r3, #173	@ 0xad
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	58d3      	ldr	r3, [r2, r3]
 8009192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009194:	2208      	movs	r2, #8
 8009196:	18ba      	adds	r2, r7, r2
 8009198:	0010      	movs	r0, r2
 800919a:	4798      	blx	r3
 800919c:	0003      	movs	r3, r0
 800919e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	2207      	movs	r2, #7
 80091a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a8:	e019      	b.n	80091de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	0011      	movs	r1, r2
 80091b0:	0018      	movs	r0, r3
 80091b2:	f000 fa2a 	bl	800960a <USBD_CtlError>
        err++;
 80091b6:	210b      	movs	r1, #11
 80091b8:	187b      	adds	r3, r7, r1
 80091ba:	781a      	ldrb	r2, [r3, #0]
 80091bc:	187b      	adds	r3, r7, r1
 80091be:	3201      	adds	r2, #1
 80091c0:	701a      	strb	r2, [r3, #0]
      break;
 80091c2:	e00c      	b.n	80091de <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	0011      	movs	r1, r2
 80091ca:	0018      	movs	r0, r3
 80091cc:	f000 fa1d 	bl	800960a <USBD_CtlError>
      err++;
 80091d0:	210b      	movs	r1, #11
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	781a      	ldrb	r2, [r3, #0]
 80091d6:	187b      	adds	r3, r7, r1
 80091d8:	3201      	adds	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
      break;
 80091dc:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80091de:	230b      	movs	r3, #11
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d127      	bne.n	8009238 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091e8:	2108      	movs	r1, #8
 80091ea:	187b      	adds	r3, r7, r1
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d019      	beq.n	8009226 <USBD_GetDescriptor+0x342>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d015      	beq.n	8009226 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88da      	ldrh	r2, [r3, #6]
 80091fe:	187b      	adds	r3, r7, r1
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	1c18      	adds	r0, r3, #0
 8009204:	1c11      	adds	r1, r2, #0
 8009206:	b28a      	uxth	r2, r1
 8009208:	b283      	uxth	r3, r0
 800920a:	429a      	cmp	r2, r3
 800920c:	d900      	bls.n	8009210 <USBD_GetDescriptor+0x32c>
 800920e:	1c01      	adds	r1, r0, #0
 8009210:	b28a      	uxth	r2, r1
 8009212:	2108      	movs	r1, #8
 8009214:	187b      	adds	r3, r7, r1
 8009216:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009218:	187b      	adds	r3, r7, r1
 800921a:	881a      	ldrh	r2, [r3, #0]
 800921c:	68f9      	ldr	r1, [r7, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	0018      	movs	r0, r3
 8009222:	f000 fa70 	bl	8009706 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	0018      	movs	r0, r3
 8009232:	f000 fad2 	bl	80097da <USBD_CtlSendStatus>
 8009236:	e000      	b.n	800923a <USBD_GetDescriptor+0x356>
    return;
 8009238:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800923a:	46bd      	mov	sp, r7
 800923c:	b004      	add	sp, #16
 800923e:	bd80      	pop	{r7, pc}
 8009240:	0800a334 	.word	0x0800a334
 8009244:	0800a354 	.word	0x0800a354

08009248 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009248:	b590      	push	{r4, r7, lr}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	889b      	ldrh	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d13d      	bne.n	80092d6 <USBD_SetAddress+0x8e>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d139      	bne.n	80092d6 <USBD_SetAddress+0x8e>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	2b7f      	cmp	r3, #127	@ 0x7f
 8009268:	d835      	bhi.n	80092d6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	230f      	movs	r3, #15
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	217f      	movs	r1, #127	@ 0x7f
 8009276:	400a      	ands	r2, r1
 8009278:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	23a7      	movs	r3, #167	@ 0xa7
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	5cd3      	ldrb	r3, [r2, r3]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d106      	bne.n	8009294 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	0011      	movs	r1, r2
 800928c:	0018      	movs	r0, r3
 800928e:	f000 f9bc 	bl	800960a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009292:	e027      	b.n	80092e4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	240f      	movs	r4, #15
 8009298:	193a      	adds	r2, r7, r4
 800929a:	4914      	ldr	r1, [pc, #80]	@ (80092ec <USBD_SetAddress+0xa4>)
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	781a      	ldrb	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	0011      	movs	r1, r2
 80092a8:	0018      	movs	r0, r3
 80092aa:	f000 fe8a 	bl	8009fc2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	0018      	movs	r0, r3
 80092b2:	f000 fa92 	bl	80097da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	23a7      	movs	r3, #167	@ 0xa7
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	2102      	movs	r1, #2
 80092c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	e00c      	b.n	80092e4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	23a7      	movs	r3, #167	@ 0xa7
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	2101      	movs	r1, #1
 80092d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d4:	e006      	b.n	80092e4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0011      	movs	r1, r2
 80092dc:	0018      	movs	r0, r3
 80092de:	f000 f994 	bl	800960a <USBD_CtlError>
  }
}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	46c0      	nop			@ (mov r8, r8)
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b005      	add	sp, #20
 80092ea:	bd90      	pop	{r4, r7, pc}
 80092ec:	0000029e 	.word	0x0000029e

080092f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	885b      	ldrh	r3, [r3, #2]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	4b4c      	ldr	r3, [pc, #304]	@ (8009434 <USBD_SetConfig+0x144>)
 8009302:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009304:	4b4b      	ldr	r3, [pc, #300]	@ (8009434 <USBD_SetConfig+0x144>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d906      	bls.n	800931a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0011      	movs	r1, r2
 8009312:	0018      	movs	r0, r3
 8009314:	f000 f979 	bl	800960a <USBD_CtlError>
 8009318:	e088      	b.n	800942c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	23a7      	movs	r3, #167	@ 0xa7
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	5cd3      	ldrb	r3, [r2, r3]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d002      	beq.n	800932c <USBD_SetConfig+0x3c>
 8009326:	2b03      	cmp	r3, #3
 8009328:	d029      	beq.n	800937e <USBD_SetConfig+0x8e>
 800932a:	e071      	b.n	8009410 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800932c:	4b41      	ldr	r3, [pc, #260]	@ (8009434 <USBD_SetConfig+0x144>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01f      	beq.n	8009374 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8009334:	4b3f      	ldr	r3, [pc, #252]	@ (8009434 <USBD_SetConfig+0x144>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	001a      	movs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	23a7      	movs	r3, #167	@ 0xa7
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	2103      	movs	r1, #3
 8009346:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009348:	4b3a      	ldr	r3, [pc, #232]	@ (8009434 <USBD_SetConfig+0x144>)
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	0011      	movs	r1, r2
 8009350:	0018      	movs	r0, r3
 8009352:	f7ff f8c5 	bl	80084e0 <USBD_SetClassConfig>
 8009356:	0003      	movs	r3, r0
 8009358:	2b02      	cmp	r3, #2
 800935a:	d106      	bne.n	800936a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	0011      	movs	r1, r2
 8009362:	0018      	movs	r0, r3
 8009364:	f000 f951 	bl	800960a <USBD_CtlError>
            return;
 8009368:	e060      	b.n	800942c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	0018      	movs	r0, r3
 800936e:	f000 fa34 	bl	80097da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009372:	e05b      	b.n	800942c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	0018      	movs	r0, r3
 8009378:	f000 fa2f 	bl	80097da <USBD_CtlSendStatus>
        break;
 800937c:	e056      	b.n	800942c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800937e:	4b2d      	ldr	r3, [pc, #180]	@ (8009434 <USBD_SetConfig+0x144>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d115      	bne.n	80093b2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	23a7      	movs	r3, #167	@ 0xa7
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	2102      	movs	r1, #2
 800938e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009390:	4b28      	ldr	r3, [pc, #160]	@ (8009434 <USBD_SetConfig+0x144>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	001a      	movs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800939a:	4b26      	ldr	r3, [pc, #152]	@ (8009434 <USBD_SetConfig+0x144>)
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	0011      	movs	r1, r2
 80093a2:	0018      	movs	r0, r3
 80093a4:	f7ff f8c3 	bl	800852e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	0018      	movs	r0, r3
 80093ac:	f000 fa15 	bl	80097da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093b0:	e03c      	b.n	800942c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80093b2:	4b20      	ldr	r3, [pc, #128]	@ (8009434 <USBD_SetConfig+0x144>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	001a      	movs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d022      	beq.n	8009406 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	0011      	movs	r1, r2
 80093ca:	0018      	movs	r0, r3
 80093cc:	f7ff f8af 	bl	800852e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80093d0:	4b18      	ldr	r3, [pc, #96]	@ (8009434 <USBD_SetConfig+0x144>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	001a      	movs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093da:	4b16      	ldr	r3, [pc, #88]	@ (8009434 <USBD_SetConfig+0x144>)
 80093dc:	781a      	ldrb	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	0011      	movs	r1, r2
 80093e2:	0018      	movs	r0, r3
 80093e4:	f7ff f87c 	bl	80084e0 <USBD_SetClassConfig>
 80093e8:	0003      	movs	r3, r0
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d106      	bne.n	80093fc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	0011      	movs	r1, r2
 80093f4:	0018      	movs	r0, r3
 80093f6:	f000 f908 	bl	800960a <USBD_CtlError>
            return;
 80093fa:	e017      	b.n	800942c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 f9eb 	bl	80097da <USBD_CtlSendStatus>
        break;
 8009404:	e012      	b.n	800942c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	0018      	movs	r0, r3
 800940a:	f000 f9e6 	bl	80097da <USBD_CtlSendStatus>
        break;
 800940e:	e00d      	b.n	800942c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0011      	movs	r1, r2
 8009416:	0018      	movs	r0, r3
 8009418:	f000 f8f7 	bl	800960a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800941c:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <USBD_SetConfig+0x144>)
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	0011      	movs	r1, r2
 8009424:	0018      	movs	r0, r3
 8009426:	f7ff f882 	bl	800852e <USBD_ClrClassConfig>
        break;
 800942a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800942c:	46bd      	mov	sp, r7
 800942e:	b002      	add	sp, #8
 8009430:	bd80      	pop	{r7, pc}
 8009432:	46c0      	nop			@ (mov r8, r8)
 8009434:	2000051c 	.word	0x2000051c

08009438 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d006      	beq.n	8009458 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	0011      	movs	r1, r2
 8009450:	0018      	movs	r0, r3
 8009452:	f000 f8da 	bl	800960a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009456:	e026      	b.n	80094a6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	23a7      	movs	r3, #167	@ 0xa7
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	5cd3      	ldrb	r3, [r2, r3]
 8009460:	2b02      	cmp	r3, #2
 8009462:	dc02      	bgt.n	800946a <USBD_GetConfig+0x32>
 8009464:	2b00      	cmp	r3, #0
 8009466:	dc03      	bgt.n	8009470 <USBD_GetConfig+0x38>
 8009468:	e016      	b.n	8009498 <USBD_GetConfig+0x60>
 800946a:	2b03      	cmp	r3, #3
 800946c:	d00c      	beq.n	8009488 <USBD_GetConfig+0x50>
 800946e:	e013      	b.n	8009498 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3308      	adds	r3, #8
 800947a:	0019      	movs	r1, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	0018      	movs	r0, r3
 8009482:	f000 f940 	bl	8009706 <USBD_CtlSendData>
        break;
 8009486:	e00e      	b.n	80094a6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	1d19      	adds	r1, r3, #4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	0018      	movs	r0, r3
 8009492:	f000 f938 	bl	8009706 <USBD_CtlSendData>
        break;
 8009496:	e006      	b.n	80094a6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	0011      	movs	r1, r2
 800949e:	0018      	movs	r0, r3
 80094a0:	f000 f8b3 	bl	800960a <USBD_CtlError>
        break;
 80094a4:	46c0      	nop			@ (mov r8, r8)
}
 80094a6:	46c0      	nop			@ (mov r8, r8)
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b002      	add	sp, #8
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	23a7      	movs	r3, #167	@ 0xa7
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	5cd3      	ldrb	r3, [r2, r3]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d822      	bhi.n	800950c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	88db      	ldrh	r3, [r3, #6]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d006      	beq.n	80094dc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	0011      	movs	r1, r2
 80094d4:	0018      	movs	r0, r3
 80094d6:	f000 f898 	bl	800960a <USBD_CtlError>
        break;
 80094da:	e01e      	b.n	800951a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	23a9      	movs	r3, #169	@ 0xa9
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	58d3      	ldr	r3, [r2, r3]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	2202      	movs	r2, #2
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	330c      	adds	r3, #12
 80094fe:	0019      	movs	r1, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	0018      	movs	r0, r3
 8009506:	f000 f8fe 	bl	8009706 <USBD_CtlSendData>
      break;
 800950a:	e006      	b.n	800951a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	0011      	movs	r1, r2
 8009512:	0018      	movs	r0, r3
 8009514:	f000 f879 	bl	800960a <USBD_CtlError>
      break;
 8009518:	46c0      	nop			@ (mov r8, r8)
  }
}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	46bd      	mov	sp, r7
 800951e:	b002      	add	sp, #8
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	885b      	ldrh	r3, [r3, #2]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d108      	bne.n	8009546 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	23a9      	movs	r3, #169	@ 0xa9
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	2101      	movs	r1, #1
 800953c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0018      	movs	r0, r3
 8009542:	f000 f94a 	bl	80097da <USBD_CtlSendStatus>
  }
}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	46bd      	mov	sp, r7
 800954a:	b002      	add	sp, #8
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	23a7      	movs	r3, #167	@ 0xa7
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	5cd3      	ldrb	r3, [r2, r3]
 8009560:	3b01      	subs	r3, #1
 8009562:	2b02      	cmp	r3, #2
 8009564:	d80d      	bhi.n	8009582 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d110      	bne.n	8009590 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	23a9      	movs	r3, #169	@ 0xa9
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	2100      	movs	r1, #0
 8009576:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	0018      	movs	r0, r3
 800957c:	f000 f92d 	bl	80097da <USBD_CtlSendStatus>
      }
      break;
 8009580:	e006      	b.n	8009590 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	0011      	movs	r1, r2
 8009588:	0018      	movs	r0, r3
 800958a:	f000 f83e 	bl	800960a <USBD_CtlError>
      break;
 800958e:	e000      	b.n	8009592 <USBD_ClrFeature+0x44>
      break;
 8009590:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009592:	46c0      	nop			@ (mov r8, r8)
 8009594:	46bd      	mov	sp, r7
 8009596:	b002      	add	sp, #8
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	785a      	ldrb	r2, [r3, #1]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	3302      	adds	r3, #2
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	001a      	movs	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3303      	adds	r3, #3
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	18d3      	adds	r3, r2, r3
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	3304      	adds	r3, #4
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	001a      	movs	r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	3305      	adds	r3, #5
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	b29b      	uxth	r3, r3
 80095e0:	18d3      	adds	r3, r2, r3
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	3306      	adds	r3, #6
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	001a      	movs	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	3307      	adds	r3, #7
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	80da      	strh	r2, [r3, #6]

}
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	46bd      	mov	sp, r7
 8009606:	b002      	add	sp, #8
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2180      	movs	r1, #128	@ 0x80
 8009618:	0018      	movs	r0, r3
 800961a:	f000 fc4c 	bl	8009eb6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	0018      	movs	r0, r3
 8009624:	f000 fc47 	bl	8009eb6 <USBD_LL_StallEP>
}
 8009628:	46c0      	nop			@ (mov r8, r8)
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800963c:	2417      	movs	r4, #23
 800963e:	193b      	adds	r3, r7, r4
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d03c      	beq.n	80096c4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 f83d 	bl	80096cc <USBD_GetLen>
 8009652:	0003      	movs	r3, r0
 8009654:	3301      	adds	r3, #1
 8009656:	b29b      	uxth	r3, r3
 8009658:	18db      	adds	r3, r3, r3
 800965a:	b29a      	uxth	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009660:	193b      	adds	r3, r7, r4
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	193a      	adds	r2, r7, r4
 8009666:	1c59      	adds	r1, r3, #1
 8009668:	7011      	strb	r1, [r2, #0]
 800966a:	001a      	movs	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	189b      	adds	r3, r3, r2
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009676:	193b      	adds	r3, r7, r4
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	193a      	adds	r2, r7, r4
 800967c:	1c59      	adds	r1, r3, #1
 800967e:	7011      	strb	r1, [r2, #0]
 8009680:	001a      	movs	r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	189b      	adds	r3, r3, r2
 8009686:	2203      	movs	r2, #3
 8009688:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800968a:	e017      	b.n	80096bc <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	60fa      	str	r2, [r7, #12]
 8009692:	2417      	movs	r4, #23
 8009694:	193a      	adds	r2, r7, r4
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	1939      	adds	r1, r7, r4
 800969a:	1c50      	adds	r0, r2, #1
 800969c:	7008      	strb	r0, [r1, #0]
 800969e:	0011      	movs	r1, r2
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	1852      	adds	r2, r2, r1
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096a8:	193b      	adds	r3, r7, r4
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	193a      	adds	r2, r7, r4
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	7011      	strb	r1, [r2, #0]
 80096b2:	001a      	movs	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e3      	bne.n	800968c <USBD_GetString+0x5c>
    }
  }
}
 80096c4:	46c0      	nop			@ (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b007      	add	sp, #28
 80096ca:	bd90      	pop	{r4, r7, pc}

080096cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096d4:	230f      	movs	r3, #15
 80096d6:	18fb      	adds	r3, r7, r3
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80096dc:	e008      	b.n	80096f0 <USBD_GetLen+0x24>
  {
    len++;
 80096de:	210f      	movs	r1, #15
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	187b      	adds	r3, r7, r1
 80096e6:	3201      	adds	r2, #1
 80096e8:	701a      	strb	r2, [r3, #0]
    buf++;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3301      	adds	r3, #1
 80096ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f2      	bne.n	80096de <USBD_GetLen+0x12>
  }

  return len;
 80096f8:	230f      	movs	r3, #15
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	781b      	ldrb	r3, [r3, #0]
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b004      	add	sp, #16
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	1dbb      	adds	r3, r7, #6
 8009712:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	23a5      	movs	r3, #165	@ 0xa5
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	2102      	movs	r1, #2
 800971c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800971e:	1dbb      	adds	r3, r7, #6
 8009720:	881a      	ldrh	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009726:	1dbb      	adds	r3, r7, #6
 8009728:	881a      	ldrh	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800972e:	1dbb      	adds	r3, r7, #6
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	2100      	movs	r1, #0
 8009738:	f000 fc6e 	bl	800a018 <USBD_LL_Transmit>

  return USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	0018      	movs	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	b004      	add	sp, #16
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	1dbb      	adds	r3, r7, #6
 8009752:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009754:	1dbb      	adds	r3, r7, #6
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	2100      	movs	r1, #0
 800975e:	f000 fc5b 	bl	800a018 <USBD_LL_Transmit>

  return USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	0018      	movs	r0, r3
 8009766:	46bd      	mov	sp, r7
 8009768:	b004      	add	sp, #16
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	1dbb      	adds	r3, r7, #6
 8009778:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	23a5      	movs	r3, #165	@ 0xa5
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	2103      	movs	r1, #3
 8009782:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8009784:	1dbb      	adds	r3, r7, #6
 8009786:	8819      	ldrh	r1, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	23ae      	movs	r3, #174	@ 0xae
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8009790:	1dbb      	adds	r3, r7, #6
 8009792:	8819      	ldrh	r1, [r3, #0]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	23b0      	movs	r3, #176	@ 0xb0
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800979c:	1dbb      	adds	r3, r7, #6
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	2100      	movs	r1, #0
 80097a6:	f000 fc6e 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	0018      	movs	r0, r3
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b004      	add	sp, #16
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	1dbb      	adds	r3, r7, #6
 80097c0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097c2:	1dbb      	adds	r3, r7, #6
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	2100      	movs	r1, #0
 80097cc:	f000 fc5b 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	0018      	movs	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	b004      	add	sp, #16
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	23a5      	movs	r3, #165	@ 0xa5
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	2104      	movs	r1, #4
 80097ea:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	2300      	movs	r3, #0
 80097f0:	2200      	movs	r2, #0
 80097f2:	2100      	movs	r1, #0
 80097f4:	f000 fc10 	bl	800a018 <USBD_LL_Transmit>

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b002      	add	sp, #8
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	23a5      	movs	r3, #165	@ 0xa5
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	2105      	movs	r1, #5
 8009812:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	2300      	movs	r3, #0
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	f000 fc33 	bl	800a086 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	0018      	movs	r0, r3
 8009824:	46bd      	mov	sp, r7
 8009826:	b002      	add	sp, #8
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009830:	4914      	ldr	r1, [pc, #80]	@ (8009884 <MX_USB_DEVICE_Init+0x58>)
 8009832:	4b15      	ldr	r3, [pc, #84]	@ (8009888 <MX_USB_DEVICE_Init+0x5c>)
 8009834:	2200      	movs	r2, #0
 8009836:	0018      	movs	r0, r3
 8009838:	f7fe fdeb 	bl	8008412 <USBD_Init>
 800983c:	1e03      	subs	r3, r0, #0
 800983e:	d001      	beq.n	8009844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009840:	f7f7 fae8 	bl	8000e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009844:	4a11      	ldr	r2, [pc, #68]	@ (800988c <MX_USB_DEVICE_Init+0x60>)
 8009846:	4b10      	ldr	r3, [pc, #64]	@ (8009888 <MX_USB_DEVICE_Init+0x5c>)
 8009848:	0011      	movs	r1, r2
 800984a:	0018      	movs	r0, r3
 800984c:	f7fe fe12 	bl	8008474 <USBD_RegisterClass>
 8009850:	1e03      	subs	r3, r0, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009854:	f7f7 fade 	bl	8000e14 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009858:	4a0d      	ldr	r2, [pc, #52]	@ (8009890 <MX_USB_DEVICE_Init+0x64>)
 800985a:	4b0b      	ldr	r3, [pc, #44]	@ (8009888 <MX_USB_DEVICE_Init+0x5c>)
 800985c:	0011      	movs	r1, r2
 800985e:	0018      	movs	r0, r3
 8009860:	f7fe fdbc 	bl	80083dc <USBD_CUSTOM_HID_RegisterInterface>
 8009864:	1e03      	subs	r3, r0, #0
 8009866:	d001      	beq.n	800986c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009868:	f7f7 fad4 	bl	8000e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800986c:	4b06      	ldr	r3, [pc, #24]	@ (8009888 <MX_USB_DEVICE_Init+0x5c>)
 800986e:	0018      	movs	r0, r3
 8009870:	f7fe fe20 	bl	80084b4 <USBD_Start>
 8009874:	1e03      	subs	r3, r0, #0
 8009876:	d001      	beq.n	800987c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009878:	f7f7 facc 	bl	8000e14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800987c:	46c0      	nop			@ (mov r8, r8)
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	46c0      	nop			@ (mov r8, r8)
 8009884:	2000015c 	.word	0x2000015c
 8009888:	20000520 	.word	0x20000520
 800988c:	20000038 	.word	0x20000038
 8009890:	2000014c 	.word	0x2000014c

08009894 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800989a:	0018      	movs	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80098a4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098a6:	0018      	movs	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	0002      	movs	r2, r0
 80098b4:	1dfb      	adds	r3, r7, #7
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	1dbb      	adds	r3, r7, #6
 80098ba:	1c0a      	adds	r2, r1, #0
 80098bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80098be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b002      	add	sp, #8
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	0002      	movs	r2, r0
 80098d0:	6039      	str	r1, [r7, #0]
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2212      	movs	r2, #18
 80098da:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098dc:	4b02      	ldr	r3, [pc, #8]	@ (80098e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098de:	0018      	movs	r0, r3
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b002      	add	sp, #8
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	46c0      	nop			@ (mov r8, r8)
 80098e8:	20000178 	.word	0x20000178

080098ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	0002      	movs	r2, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	1dfb      	adds	r3, r7, #7
 80098f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2204      	movs	r2, #4
 80098fe:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009900:	4b02      	ldr	r3, [pc, #8]	@ (800990c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009902:	0018      	movs	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	b002      	add	sp, #8
 8009908:	bd80      	pop	{r7, pc}
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	2000018c 	.word	0x2000018c

08009910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	0002      	movs	r2, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	1dfb      	adds	r3, r7, #7
 800991c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800991e:	1dfb      	adds	r3, r7, #7
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4908      	ldr	r1, [pc, #32]	@ (800994c <USBD_FS_ProductStrDescriptor+0x3c>)
 800992a:	4b09      	ldr	r3, [pc, #36]	@ (8009950 <USBD_FS_ProductStrDescriptor+0x40>)
 800992c:	0018      	movs	r0, r3
 800992e:	f7ff fe7f 	bl	8009630 <USBD_GetString>
 8009932:	e005      	b.n	8009940 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	4905      	ldr	r1, [pc, #20]	@ (800994c <USBD_FS_ProductStrDescriptor+0x3c>)
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <USBD_FS_ProductStrDescriptor+0x40>)
 800993a:	0018      	movs	r0, r3
 800993c:	f7ff fe78 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009940:	4b02      	ldr	r3, [pc, #8]	@ (800994c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009942:	0018      	movs	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	b002      	add	sp, #8
 8009948:	bd80      	pop	{r7, pc}
 800994a:	46c0      	nop			@ (mov r8, r8)
 800994c:	200007e4 	.word	0x200007e4
 8009950:	0800a208 	.word	0x0800a208

08009954 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	0002      	movs	r2, r0
 800995c:	6039      	str	r1, [r7, #0]
 800995e:	1dfb      	adds	r3, r7, #7
 8009960:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4904      	ldr	r1, [pc, #16]	@ (8009978 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009966:	4b05      	ldr	r3, [pc, #20]	@ (800997c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009968:	0018      	movs	r0, r3
 800996a:	f7ff fe61 	bl	8009630 <USBD_GetString>
  return USBD_StrDesc;
 800996e:	4b02      	ldr	r3, [pc, #8]	@ (8009978 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009970:	0018      	movs	r0, r3
 8009972:	46bd      	mov	sp, r7
 8009974:	b002      	add	sp, #8
 8009976:	bd80      	pop	{r7, pc}
 8009978:	200007e4 	.word	0x200007e4
 800997c:	0800a218 	.word	0x0800a218

08009980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	0002      	movs	r2, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	1dfb      	adds	r3, r7, #7
 800998c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	221a      	movs	r2, #26
 8009992:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009994:	f000 f84c 	bl	8009a30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009998:	4b02      	ldr	r3, [pc, #8]	@ (80099a4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800999a:	0018      	movs	r0, r3
 800999c:	46bd      	mov	sp, r7
 800999e:	b002      	add	sp, #8
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	46c0      	nop			@ (mov r8, r8)
 80099a4:	20000190 	.word	0x20000190

080099a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	0002      	movs	r2, r0
 80099b0:	6039      	str	r1, [r7, #0]
 80099b2:	1dfb      	adds	r3, r7, #7
 80099b4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80099b6:	1dfb      	adds	r3, r7, #7
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	4908      	ldr	r1, [pc, #32]	@ (80099e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80099c2:	4b09      	ldr	r3, [pc, #36]	@ (80099e8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80099c4:	0018      	movs	r0, r3
 80099c6:	f7ff fe33 	bl	8009630 <USBD_GetString>
 80099ca:	e005      	b.n	80099d8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	4905      	ldr	r1, [pc, #20]	@ (80099e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80099d0:	4b05      	ldr	r3, [pc, #20]	@ (80099e8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7ff fe2c 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099d8:	4b02      	ldr	r3, [pc, #8]	@ (80099e4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b002      	add	sp, #8
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	46c0      	nop			@ (mov r8, r8)
 80099e4:	200007e4 	.word	0x200007e4
 80099e8:	0800a22c 	.word	0x0800a22c

080099ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	0002      	movs	r2, r0
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	1dfb      	adds	r3, r7, #7
 80099f8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80099fa:	1dfb      	adds	r3, r7, #7
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4908      	ldr	r1, [pc, #32]	@ (8009a28 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009a06:	4b09      	ldr	r3, [pc, #36]	@ (8009a2c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f7ff fe11 	bl	8009630 <USBD_GetString>
 8009a0e:	e005      	b.n	8009a1c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	4905      	ldr	r1, [pc, #20]	@ (8009a28 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009a14:	4b05      	ldr	r3, [pc, #20]	@ (8009a2c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009a16:	0018      	movs	r0, r3
 8009a18:	f7ff fe0a 	bl	8009630 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a1c:	4b02      	ldr	r3, [pc, #8]	@ (8009a28 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b002      	add	sp, #8
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	200007e4 	.word	0x200007e4
 8009a2c:	0800a240 	.word	0x0800a240

08009a30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a36:	4b10      	ldr	r3, [pc, #64]	@ (8009a78 <Get_SerialNum+0x48>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a7c <Get_SerialNum+0x4c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a42:	4b0f      	ldr	r3, [pc, #60]	@ (8009a80 <Get_SerialNum+0x50>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	18d3      	adds	r3, r2, r3
 8009a4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a56:	490b      	ldr	r1, [pc, #44]	@ (8009a84 <Get_SerialNum+0x54>)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f000 f815 	bl	8009a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a62:	4909      	ldr	r1, [pc, #36]	@ (8009a88 <Get_SerialNum+0x58>)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2204      	movs	r2, #4
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f000 f80f 	bl	8009a8c <IntToUnicode>
  }
}
 8009a6e:	46c0      	nop			@ (mov r8, r8)
 8009a70:	46bd      	mov	sp, r7
 8009a72:	b004      	add	sp, #16
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	46c0      	nop			@ (mov r8, r8)
 8009a78:	1ffff7ac 	.word	0x1ffff7ac
 8009a7c:	1ffff7b0 	.word	0x1ffff7b0
 8009a80:	1ffff7b4 	.word	0x1ffff7b4
 8009a84:	20000192 	.word	0x20000192
 8009a88:	200001a2 	.word	0x200001a2

08009a8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	1dfb      	adds	r3, r7, #7
 8009a98:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009a9a:	2117      	movs	r1, #23
 8009a9c:	187b      	adds	r3, r7, r1
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009aa2:	187b      	adds	r3, r7, r1
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e02f      	b.n	8009b0a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	0f1b      	lsrs	r3, r3, #28
 8009aae:	2b09      	cmp	r3, #9
 8009ab0:	d80d      	bhi.n	8009ace <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	0f1b      	lsrs	r3, r3, #28
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	2317      	movs	r3, #23
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	185b      	adds	r3, r3, r1
 8009ac6:	3230      	adds	r2, #48	@ 0x30
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e00c      	b.n	8009ae8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	0f1b      	lsrs	r3, r3, #28
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	2317      	movs	r3, #23
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	0019      	movs	r1, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	185b      	adds	r3, r3, r1
 8009ae2:	3237      	adds	r2, #55	@ 0x37
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009aee:	2117      	movs	r1, #23
 8009af0:	187b      	adds	r3, r7, r1
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	3301      	adds	r3, #1
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	18d3      	adds	r3, r2, r3
 8009afc:	2200      	movs	r2, #0
 8009afe:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b00:	187b      	adds	r3, r7, r1
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	187b      	adds	r3, r7, r1
 8009b06:	3201      	adds	r2, #1
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	2317      	movs	r3, #23
 8009b0c:	18fa      	adds	r2, r7, r3
 8009b0e:	1dfb      	adds	r3, r7, #7
 8009b10:	7812      	ldrb	r2, [r2, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d3c8      	bcc.n	8009aaa <IntToUnicode+0x1e>
  }
}
 8009b18:	46c0      	nop			@ (mov r8, r8)
 8009b1a:	46c0      	nop			@ (mov r8, r8)
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b006      	add	sp, #24
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0e      	ldr	r2, [pc, #56]	@ (8009b6c <HAL_PCD_MspInit+0x48>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d115      	bne.n	8009b62 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b36:	4b0e      	ldr	r3, [pc, #56]	@ (8009b70 <HAL_PCD_MspInit+0x4c>)
 8009b38:	69da      	ldr	r2, [r3, #28]
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <HAL_PCD_MspInit+0x4c>)
 8009b3c:	2180      	movs	r1, #128	@ 0x80
 8009b3e:	0409      	lsls	r1, r1, #16
 8009b40:	430a      	orrs	r2, r1
 8009b42:	61da      	str	r2, [r3, #28]
 8009b44:	4b0a      	ldr	r3, [pc, #40]	@ (8009b70 <HAL_PCD_MspInit+0x4c>)
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	2380      	movs	r3, #128	@ 0x80
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	201f      	movs	r0, #31
 8009b58:	f7f7 feec 	bl	8001934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009b5c:	201f      	movs	r0, #31
 8009b5e:	f7f7 fefe 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b62:	46c0      	nop			@ (mov r8, r8)
 8009b64:	46bd      	mov	sp, r7
 8009b66:	b004      	add	sp, #16
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	46c0      	nop			@ (mov r8, r8)
 8009b6c:	40005c00 	.word	0x40005c00
 8009b70:	40021000 	.word	0x40021000

08009b74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	23b6      	movs	r3, #182	@ 0xb6
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	58d2      	ldr	r2, [r2, r3]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	21a6      	movs	r1, #166	@ 0xa6
 8009b88:	0089      	lsls	r1, r1, #2
 8009b8a:	468c      	mov	ip, r1
 8009b8c:	4463      	add	r3, ip
 8009b8e:	0019      	movs	r1, r3
 8009b90:	0010      	movs	r0, r2
 8009b92:	f7fe fce3 	bl	800855c <USBD_LL_SetupStage>
}
 8009b96:	46c0      	nop			@ (mov r8, r8)
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b002      	add	sp, #8
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9e:	b590      	push	{r4, r7, lr}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	000a      	movs	r2, r1
 8009ba8:	1cfb      	adds	r3, r7, #3
 8009baa:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	23b6      	movs	r3, #182	@ 0xb6
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d4      	ldr	r4, [r2, r3]
 8009bb4:	1cfb      	adds	r3, r7, #3
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	23b2      	movs	r3, #178	@ 0xb2
 8009bbc:	0059      	lsls	r1, r3, #1
 8009bbe:	0013      	movs	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	00db      	lsls	r3, r3, #3
 8009bc6:	18c3      	adds	r3, r0, r3
 8009bc8:	185b      	adds	r3, r3, r1
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	1cfb      	adds	r3, r7, #3
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	0019      	movs	r1, r3
 8009bd2:	0020      	movs	r0, r4
 8009bd4:	f7fe fd20 	bl	8008618 <USBD_LL_DataOutStage>
}
 8009bd8:	46c0      	nop			@ (mov r8, r8)
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b003      	add	sp, #12
 8009bde:	bd90      	pop	{r4, r7, pc}

08009be0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	000a      	movs	r2, r1
 8009bea:	1cfb      	adds	r3, r7, #3
 8009bec:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	23b6      	movs	r3, #182	@ 0xb6
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	58d0      	ldr	r0, [r2, r3]
 8009bf6:	1cfb      	adds	r3, r7, #3
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	0013      	movs	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	189b      	adds	r3, r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	18cb      	adds	r3, r1, r3
 8009c06:	3324      	adds	r3, #36	@ 0x24
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	1cfb      	adds	r3, r7, #3
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	0019      	movs	r1, r3
 8009c10:	f7fe fd84 	bl	800871c <USBD_LL_DataInStage>
}
 8009c14:	46c0      	nop			@ (mov r8, r8)
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	23b6      	movs	r3, #182	@ 0xb6
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	58d3      	ldr	r3, [r2, r3]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f7fe febb 	bl	80089a8 <USBD_LL_SOF>
}
 8009c32:	46c0      	nop			@ (mov r8, r8)
 8009c34:	46bd      	mov	sp, r7
 8009c36:	b002      	add	sp, #8
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c42:	230f      	movs	r3, #15
 8009c44:	18fb      	adds	r3, r7, r3
 8009c46:	2201      	movs	r2, #1
 8009c48:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	795b      	ldrb	r3, [r3, #5]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d001      	beq.n	8009c56 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8009c52:	f7f7 f8df 	bl	8000e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	23b6      	movs	r3, #182	@ 0xb6
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	58d2      	ldr	r2, [r2, r3]
 8009c5e:	230f      	movs	r3, #15
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	0019      	movs	r1, r3
 8009c66:	0010      	movs	r0, r2
 8009c68:	f7fe fe5d 	bl	8008926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	23b6      	movs	r3, #182	@ 0xb6
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	58d3      	ldr	r3, [r2, r3]
 8009c74:	0018      	movs	r0, r3
 8009c76:	f7fe fe0e 	bl	8008896 <USBD_LL_Reset>
}
 8009c7a:	46c0      	nop			@ (mov r8, r8)
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	b004      	add	sp, #16
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	23b6      	movs	r3, #182	@ 0xb6
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	58d3      	ldr	r3, [r2, r3]
 8009c94:	0018      	movs	r0, r3
 8009c96:	f7fe fe57 	bl	8008948 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	7a5b      	ldrb	r3, [r3, #9]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d005      	beq.n	8009cae <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ca2:	4b05      	ldr	r3, [pc, #20]	@ (8009cb8 <HAL_PCD_SuspendCallback+0x34>)
 8009ca4:	691a      	ldr	r2, [r3, #16]
 8009ca6:	4b04      	ldr	r3, [pc, #16]	@ (8009cb8 <HAL_PCD_SuspendCallback+0x34>)
 8009ca8:	2106      	movs	r1, #6
 8009caa:	430a      	orrs	r2, r1
 8009cac:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	b002      	add	sp, #8
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	46c0      	nop			@ (mov r8, r8)
 8009cb8:	e000ed00 	.word	0xe000ed00

08009cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	7a5b      	ldrb	r3, [r3, #9]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d007      	beq.n	8009cdc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ccc:	4b09      	ldr	r3, [pc, #36]	@ (8009cf4 <HAL_PCD_ResumeCallback+0x38>)
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	4b08      	ldr	r3, [pc, #32]	@ (8009cf4 <HAL_PCD_ResumeCallback+0x38>)
 8009cd2:	2106      	movs	r1, #6
 8009cd4:	438a      	bics	r2, r1
 8009cd6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009cd8:	f000 fa20 	bl	800a11c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	23b6      	movs	r3, #182	@ 0xb6
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	58d3      	ldr	r3, [r2, r3]
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	f7fe fe47 	bl	8008978 <USBD_LL_Resume>
}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b002      	add	sp, #8
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	e000ed00 	.word	0xe000ed00

08009cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d00:	4a27      	ldr	r2, [pc, #156]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d02:	23b6      	movs	r3, #182	@ 0xb6
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	23b0      	movs	r3, #176	@ 0xb0
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4923      	ldr	r1, [pc, #140]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d12:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009d14:	4b22      	ldr	r3, [pc, #136]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d16:	4a23      	ldr	r2, [pc, #140]	@ (8009da4 <USBD_LL_Init+0xac>)
 8009d18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d1a:	4b21      	ldr	r3, [pc, #132]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d20:	4b1f      	ldr	r3, [pc, #124]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d22:	2202      	movs	r2, #2
 8009d24:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d26:	4b1e      	ldr	r3, [pc, #120]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d28:	2202      	movs	r2, #2
 8009d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d32:	4b1b      	ldr	r3, [pc, #108]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d38:	4b19      	ldr	r3, [pc, #100]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d3e:	4b18      	ldr	r3, [pc, #96]	@ (8009da0 <USBD_LL_Init+0xa8>)
 8009d40:	0018      	movs	r0, r3
 8009d42:	f7f8 f9b9 	bl	80020b8 <HAL_PCD_Init>
 8009d46:	1e03      	subs	r3, r0, #0
 8009d48:	d001      	beq.n	8009d4e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009d4a:	f7f7 f863 	bl	8000e14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	23b0      	movs	r3, #176	@ 0xb0
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	58d0      	ldr	r0, [r2, r3]
 8009d56:	2318      	movs	r3, #24
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	f7f9 ff52 	bl	8003c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	23b0      	movs	r3, #176	@ 0xb0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	58d0      	ldr	r0, [r2, r3]
 8009d68:	2358      	movs	r3, #88	@ 0x58
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2180      	movs	r1, #128	@ 0x80
 8009d6e:	f7f9 ff49 	bl	8003c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	23b0      	movs	r3, #176	@ 0xb0
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	58d0      	ldr	r0, [r2, r3]
 8009d7a:	2398      	movs	r3, #152	@ 0x98
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2181      	movs	r1, #129	@ 0x81
 8009d80:	f7f9 ff40 	bl	8003c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	23b0      	movs	r3, #176	@ 0xb0
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	58d0      	ldr	r0, [r2, r3]
 8009d8c:	23d8      	movs	r3, #216	@ 0xd8
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2101      	movs	r1, #1
 8009d92:	f7f9 ff37 	bl	8003c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b002      	add	sp, #8
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	200009e4 	.word	0x200009e4
 8009da4:	40005c00 	.word	0x40005c00

08009da8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db0:	210f      	movs	r1, #15
 8009db2:	187b      	adds	r3, r7, r1
 8009db4:	2200      	movs	r2, #0
 8009db6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db8:	260e      	movs	r6, #14
 8009dba:	19bb      	adds	r3, r7, r6
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	23b0      	movs	r3, #176	@ 0xb0
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	58d3      	ldr	r3, [r2, r3]
 8009dc8:	000d      	movs	r5, r1
 8009dca:	187c      	adds	r4, r7, r1
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7f8 fa67 	bl	80022a0 <HAL_PCD_Start>
 8009dd2:	0003      	movs	r3, r0
 8009dd4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	19bc      	adds	r4, r7, r6
 8009dd8:	197b      	adds	r3, r7, r5
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f000 f9a4 	bl	800a12a <USBD_Get_USB_Status>
 8009de2:	0003      	movs	r3, r0
 8009de4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009de6:	19bb      	adds	r3, r7, r6
 8009de8:	781b      	ldrb	r3, [r3, #0]
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b005      	add	sp, #20
 8009df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009df2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	000c      	movs	r4, r1
 8009dfc:	0010      	movs	r0, r2
 8009dfe:	0019      	movs	r1, r3
 8009e00:	1cfb      	adds	r3, r7, #3
 8009e02:	1c22      	adds	r2, r4, #0
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	1cbb      	adds	r3, r7, #2
 8009e08:	1c02      	adds	r2, r0, #0
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	003b      	movs	r3, r7
 8009e0e:	1c0a      	adds	r2, r1, #0
 8009e10:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e12:	260f      	movs	r6, #15
 8009e14:	19bb      	adds	r3, r7, r6
 8009e16:	2200      	movs	r2, #0
 8009e18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1a:	250e      	movs	r5, #14
 8009e1c:	197b      	adds	r3, r7, r5
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	23b0      	movs	r3, #176	@ 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	58d0      	ldr	r0, [r2, r3]
 8009e2a:	19bc      	adds	r4, r7, r6
 8009e2c:	1cbb      	adds	r3, r7, #2
 8009e2e:	781d      	ldrb	r5, [r3, #0]
 8009e30:	003b      	movs	r3, r7
 8009e32:	881a      	ldrh	r2, [r3, #0]
 8009e34:	1cfb      	adds	r3, r7, #3
 8009e36:	7819      	ldrb	r1, [r3, #0]
 8009e38:	002b      	movs	r3, r5
 8009e3a:	f7f8 fbc5 	bl	80025c8 <HAL_PCD_EP_Open>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e42:	250e      	movs	r5, #14
 8009e44:	197c      	adds	r4, r7, r5
 8009e46:	19bb      	adds	r3, r7, r6
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f000 f96d 	bl	800a12a <USBD_Get_USB_Status>
 8009e50:	0003      	movs	r3, r0
 8009e52:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009e54:	197b      	adds	r3, r7, r5
 8009e56:	781b      	ldrb	r3, [r3, #0]
}
 8009e58:	0018      	movs	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b005      	add	sp, #20
 8009e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	000a      	movs	r2, r1
 8009e6a:	1cfb      	adds	r3, r7, #3
 8009e6c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6e:	210f      	movs	r1, #15
 8009e70:	187b      	adds	r3, r7, r1
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e76:	260e      	movs	r6, #14
 8009e78:	19bb      	adds	r3, r7, r6
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	23b0      	movs	r3, #176	@ 0xb0
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	58d2      	ldr	r2, [r2, r3]
 8009e86:	000d      	movs	r5, r1
 8009e88:	187c      	adds	r4, r7, r1
 8009e8a:	1cfb      	adds	r3, r7, #3
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	0019      	movs	r1, r3
 8009e90:	0010      	movs	r0, r2
 8009e92:	f7f8 fc08 	bl	80026a6 <HAL_PCD_EP_Close>
 8009e96:	0003      	movs	r3, r0
 8009e98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e9a:	19bc      	adds	r4, r7, r6
 8009e9c:	197b      	adds	r3, r7, r5
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f000 f942 	bl	800a12a <USBD_Get_USB_Status>
 8009ea6:	0003      	movs	r3, r0
 8009ea8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009eaa:	19bb      	adds	r3, r7, r6
 8009eac:	781b      	ldrb	r3, [r3, #0]
}
 8009eae:	0018      	movs	r0, r3
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b005      	add	sp, #20
 8009eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eb6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	000a      	movs	r2, r1
 8009ec0:	1cfb      	adds	r3, r7, #3
 8009ec2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec4:	210f      	movs	r1, #15
 8009ec6:	187b      	adds	r3, r7, r1
 8009ec8:	2200      	movs	r2, #0
 8009eca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ecc:	260e      	movs	r6, #14
 8009ece:	19bb      	adds	r3, r7, r6
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	23b0      	movs	r3, #176	@ 0xb0
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	58d2      	ldr	r2, [r2, r3]
 8009edc:	000d      	movs	r5, r1
 8009ede:	187c      	adds	r4, r7, r1
 8009ee0:	1cfb      	adds	r3, r7, #3
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	0019      	movs	r1, r3
 8009ee6:	0010      	movs	r0, r2
 8009ee8:	f7f8 fca1 	bl	800282e <HAL_PCD_EP_SetStall>
 8009eec:	0003      	movs	r3, r0
 8009eee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	19bc      	adds	r4, r7, r6
 8009ef2:	197b      	adds	r3, r7, r5
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f000 f917 	bl	800a12a <USBD_Get_USB_Status>
 8009efc:	0003      	movs	r3, r0
 8009efe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f00:	19bb      	adds	r3, r7, r6
 8009f02:	781b      	ldrb	r3, [r3, #0]
}
 8009f04:	0018      	movs	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b005      	add	sp, #20
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f0c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	000a      	movs	r2, r1
 8009f16:	1cfb      	adds	r3, r7, #3
 8009f18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f1a:	210f      	movs	r1, #15
 8009f1c:	187b      	adds	r3, r7, r1
 8009f1e:	2200      	movs	r2, #0
 8009f20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f22:	260e      	movs	r6, #14
 8009f24:	19bb      	adds	r3, r7, r6
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	23b0      	movs	r3, #176	@ 0xb0
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	58d2      	ldr	r2, [r2, r3]
 8009f32:	000d      	movs	r5, r1
 8009f34:	187c      	adds	r4, r7, r1
 8009f36:	1cfb      	adds	r3, r7, #3
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	0019      	movs	r1, r3
 8009f3c:	0010      	movs	r0, r2
 8009f3e:	f7f8 fcd2 	bl	80028e6 <HAL_PCD_EP_ClrStall>
 8009f42:	0003      	movs	r3, r0
 8009f44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f46:	19bc      	adds	r4, r7, r6
 8009f48:	197b      	adds	r3, r7, r5
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f000 f8ec 	bl	800a12a <USBD_Get_USB_Status>
 8009f52:	0003      	movs	r3, r0
 8009f54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f56:	19bb      	adds	r3, r7, r6
 8009f58:	781b      	ldrb	r3, [r3, #0]
}
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	b005      	add	sp, #20
 8009f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f62 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	000a      	movs	r2, r1
 8009f6c:	1cfb      	adds	r3, r7, #3
 8009f6e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	23b0      	movs	r3, #176	@ 0xb0
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	58d3      	ldr	r3, [r2, r3]
 8009f78:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f7a:	1cfb      	adds	r3, r7, #3
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b25b      	sxtb	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da0c      	bge.n	8009f9e <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f84:	1cfb      	adds	r3, r7, #3
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	227f      	movs	r2, #127	@ 0x7f
 8009f8a:	401a      	ands	r2, r3
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	0013      	movs	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	189b      	adds	r3, r3, r2
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	18cb      	adds	r3, r1, r3
 8009f98:	3312      	adds	r3, #18
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	e00d      	b.n	8009fba <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f9e:	1cfb      	adds	r3, r7, #3
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	227f      	movs	r2, #127	@ 0x7f
 8009fa4:	401a      	ands	r2, r3
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	23a9      	movs	r3, #169	@ 0xa9
 8009faa:	0059      	lsls	r1, r3, #1
 8009fac:	0013      	movs	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	189b      	adds	r3, r3, r2
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	18c3      	adds	r3, r0, r3
 8009fb6:	185b      	adds	r3, r3, r1
 8009fb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fba:	0018      	movs	r0, r3
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	000a      	movs	r2, r1
 8009fcc:	1cfb      	adds	r3, r7, #3
 8009fce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd0:	210f      	movs	r1, #15
 8009fd2:	187b      	adds	r3, r7, r1
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd8:	260e      	movs	r6, #14
 8009fda:	19bb      	adds	r3, r7, r6
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	23b0      	movs	r3, #176	@ 0xb0
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	58d2      	ldr	r2, [r2, r3]
 8009fe8:	000d      	movs	r5, r1
 8009fea:	187c      	adds	r4, r7, r1
 8009fec:	1cfb      	adds	r3, r7, #3
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	0019      	movs	r1, r3
 8009ff2:	0010      	movs	r0, r2
 8009ff4:	f7f8 fabe 	bl	8002574 <HAL_PCD_SetAddress>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffc:	19bc      	adds	r4, r7, r6
 8009ffe:	197b      	adds	r3, r7, r5
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	0018      	movs	r0, r3
 800a004:	f000 f891 	bl	800a12a <USBD_Get_USB_Status>
 800a008:	0003      	movs	r3, r0
 800a00a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a00c:	19bb      	adds	r3, r7, r6
 800a00e:	781b      	ldrb	r3, [r3, #0]
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b005      	add	sp, #20
 800a016:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a018 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	0008      	movs	r0, r1
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	0019      	movs	r1, r3
 800a026:	230b      	movs	r3, #11
 800a028:	18fb      	adds	r3, r7, r3
 800a02a:	1c02      	adds	r2, r0, #0
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	2408      	movs	r4, #8
 800a030:	193b      	adds	r3, r7, r4
 800a032:	1c0a      	adds	r2, r1, #0
 800a034:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a036:	2117      	movs	r1, #23
 800a038:	187b      	adds	r3, r7, r1
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03e:	2516      	movs	r5, #22
 800a040:	197b      	adds	r3, r7, r5
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	23b0      	movs	r3, #176	@ 0xb0
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	58d0      	ldr	r0, [r2, r3]
 800a04e:	193b      	adds	r3, r7, r4
 800a050:	881d      	ldrh	r5, [r3, #0]
 800a052:	000e      	movs	r6, r1
 800a054:	187c      	adds	r4, r7, r1
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	230b      	movs	r3, #11
 800a05a:	18fb      	adds	r3, r7, r3
 800a05c:	7819      	ldrb	r1, [r3, #0]
 800a05e:	002b      	movs	r3, r5
 800a060:	f7f8 fba9 	bl	80027b6 <HAL_PCD_EP_Transmit>
 800a064:	0003      	movs	r3, r0
 800a066:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a068:	2516      	movs	r5, #22
 800a06a:	197c      	adds	r4, r7, r5
 800a06c:	19bb      	adds	r3, r7, r6
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	0018      	movs	r0, r3
 800a072:	f000 f85a 	bl	800a12a <USBD_Get_USB_Status>
 800a076:	0003      	movs	r3, r0
 800a078:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a07a:	197b      	adds	r3, r7, r5
 800a07c:	781b      	ldrb	r3, [r3, #0]
}
 800a07e:	0018      	movs	r0, r3
 800a080:	46bd      	mov	sp, r7
 800a082:	b007      	add	sp, #28
 800a084:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a086 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a086:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a088:	b087      	sub	sp, #28
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	0008      	movs	r0, r1
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	0019      	movs	r1, r3
 800a094:	230b      	movs	r3, #11
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	1c02      	adds	r2, r0, #0
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	2408      	movs	r4, #8
 800a09e:	193b      	adds	r3, r7, r4
 800a0a0:	1c0a      	adds	r2, r1, #0
 800a0a2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a4:	2117      	movs	r1, #23
 800a0a6:	187b      	adds	r3, r7, r1
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ac:	2516      	movs	r5, #22
 800a0ae:	197b      	adds	r3, r7, r5
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	23b0      	movs	r3, #176	@ 0xb0
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	58d0      	ldr	r0, [r2, r3]
 800a0bc:	193b      	adds	r3, r7, r4
 800a0be:	881d      	ldrh	r5, [r3, #0]
 800a0c0:	000e      	movs	r6, r1
 800a0c2:	187c      	adds	r4, r7, r1
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	230b      	movs	r3, #11
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	7819      	ldrb	r1, [r3, #0]
 800a0cc:	002b      	movs	r3, r5
 800a0ce:	f7f8 fb3b 	bl	8002748 <HAL_PCD_EP_Receive>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d6:	2516      	movs	r5, #22
 800a0d8:	197c      	adds	r4, r7, r5
 800a0da:	19bb      	adds	r3, r7, r6
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f000 f823 	bl	800a12a <USBD_Get_USB_Status>
 800a0e4:	0003      	movs	r3, r0
 800a0e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a0e8:	197b      	adds	r3, r7, r5
 800a0ea:	781b      	ldrb	r3, [r3, #0]
}
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	b007      	add	sp, #28
 800a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a0fc:	4b02      	ldr	r3, [pc, #8]	@ (800a108 <USBD_static_malloc+0x14>)
}
 800a0fe:	0018      	movs	r0, r3
 800a100:	46bd      	mov	sp, r7
 800a102:	b002      	add	sp, #8
 800a104:	bd80      	pop	{r7, pc}
 800a106:	46c0      	nop			@ (mov r8, r8)
 800a108:	20000cc0 	.word	0x20000cc0

0800a10c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

}
 800a114:	46c0      	nop			@ (mov r8, r8)
 800a116:	46bd      	mov	sp, r7
 800a118:	b002      	add	sp, #8
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a120:	f7f6 fc78 	bl	8000a14 <SystemClock_Config>
}
 800a124:	46c0      	nop			@ (mov r8, r8)
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	0002      	movs	r2, r0
 800a132:	1dfb      	adds	r3, r7, #7
 800a134:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a136:	230f      	movs	r3, #15
 800a138:	18fb      	adds	r3, r7, r3
 800a13a:	2200      	movs	r2, #0
 800a13c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a13e:	1dfb      	adds	r3, r7, #7
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d017      	beq.n	800a176 <USBD_Get_USB_Status+0x4c>
 800a146:	dc1b      	bgt.n	800a180 <USBD_Get_USB_Status+0x56>
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d00f      	beq.n	800a16c <USBD_Get_USB_Status+0x42>
 800a14c:	dc18      	bgt.n	800a180 <USBD_Get_USB_Status+0x56>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <USBD_Get_USB_Status+0x2e>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d005      	beq.n	800a162 <USBD_Get_USB_Status+0x38>
 800a156:	e013      	b.n	800a180 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a158:	230f      	movs	r3, #15
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	2200      	movs	r2, #0
 800a15e:	701a      	strb	r2, [r3, #0]
    break;
 800a160:	e013      	b.n	800a18a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a162:	230f      	movs	r3, #15
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2202      	movs	r2, #2
 800a168:	701a      	strb	r2, [r3, #0]
    break;
 800a16a:	e00e      	b.n	800a18a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a16c:	230f      	movs	r3, #15
 800a16e:	18fb      	adds	r3, r7, r3
 800a170:	2201      	movs	r2, #1
 800a172:	701a      	strb	r2, [r3, #0]
    break;
 800a174:	e009      	b.n	800a18a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a176:	230f      	movs	r3, #15
 800a178:	18fb      	adds	r3, r7, r3
 800a17a:	2202      	movs	r2, #2
 800a17c:	701a      	strb	r2, [r3, #0]
    break;
 800a17e:	e004      	b.n	800a18a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a180:	230f      	movs	r3, #15
 800a182:	18fb      	adds	r3, r7, r3
 800a184:	2202      	movs	r2, #2
 800a186:	701a      	strb	r2, [r3, #0]
    break;
 800a188:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800a18a:	230f      	movs	r3, #15
 800a18c:	18fb      	adds	r3, r7, r3
 800a18e:	781b      	ldrb	r3, [r3, #0]
}
 800a190:	0018      	movs	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	b004      	add	sp, #16
 800a196:	bd80      	pop	{r7, pc}

0800a198 <memset>:
 800a198:	0003      	movs	r3, r0
 800a19a:	1882      	adds	r2, r0, r2
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d100      	bne.n	800a1a2 <memset+0xa>
 800a1a0:	4770      	bx	lr
 800a1a2:	7019      	strb	r1, [r3, #0]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	e7f9      	b.n	800a19c <memset+0x4>

0800a1a8 <__libc_init_array>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	4c0c      	ldr	r4, [pc, #48]	@ (800a1e0 <__libc_init_array+0x38>)
 800a1ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a1e4 <__libc_init_array+0x3c>)
 800a1b0:	1b64      	subs	r4, r4, r5
 800a1b2:	10a4      	asrs	r4, r4, #2
 800a1b4:	42a6      	cmp	r6, r4
 800a1b6:	d109      	bne.n	800a1cc <__libc_init_array+0x24>
 800a1b8:	2600      	movs	r6, #0
 800a1ba:	f000 f819 	bl	800a1f0 <_init>
 800a1be:	4c0a      	ldr	r4, [pc, #40]	@ (800a1e8 <__libc_init_array+0x40>)
 800a1c0:	4d0a      	ldr	r5, [pc, #40]	@ (800a1ec <__libc_init_array+0x44>)
 800a1c2:	1b64      	subs	r4, r4, r5
 800a1c4:	10a4      	asrs	r4, r4, #2
 800a1c6:	42a6      	cmp	r6, r4
 800a1c8:	d105      	bne.n	800a1d6 <__libc_init_array+0x2e>
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	00b3      	lsls	r3, r6, #2
 800a1ce:	58eb      	ldr	r3, [r5, r3]
 800a1d0:	4798      	blx	r3
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	e7ee      	b.n	800a1b4 <__libc_init_array+0xc>
 800a1d6:	00b3      	lsls	r3, r6, #2
 800a1d8:	58eb      	ldr	r3, [r5, r3]
 800a1da:	4798      	blx	r3
 800a1dc:	3601      	adds	r6, #1
 800a1de:	e7f2      	b.n	800a1c6 <__libc_init_array+0x1e>
 800a1e0:	0800a36c 	.word	0x0800a36c
 800a1e4:	0800a36c 	.word	0x0800a36c
 800a1e8:	0800a370 	.word	0x0800a370
 800a1ec:	0800a36c 	.word	0x0800a36c

0800a1f0 <_init>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f6:	bc08      	pop	{r3}
 800a1f8:	469e      	mov	lr, r3
 800a1fa:	4770      	bx	lr

0800a1fc <_fini>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	46c0      	nop			@ (mov r8, r8)
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr
