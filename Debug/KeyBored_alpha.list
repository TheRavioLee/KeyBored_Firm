
KeyBored_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800a680  0800a680  0000b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d8  0800a7d8  0000c3a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a7d8  0800a7d8  0000c3a8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a7d8  0800a7d8  0000c3a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d8  0800a7d8  0000b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7dc  0800a7dc  0000b7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a8  20000000  0800a7e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  200003a8  0800ab88  0000c3a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee0  0800ab88  0000cee0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c3a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131aa  00000000  00000000  0000c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a5  00000000  00000000  0001f57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00023620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d90  00000000  00000000  00024848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0d6  00000000  00000000  000255d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1b3  00000000  00000000  000436ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a928  00000000  00000000  0005d861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d68  00000000  00000000  000f81cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fbf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003a8 	.word	0x200003a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a668 	.word	0x0800a668

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003ac 	.word	0x200003ac
 8000104:	0800a668 	.word	0x0800a668

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ProcessusKeys_Init>:

//Fonctions privees
void Process_KEYS(void);

void ProcessusKeys_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[PROCESSUS_KEYS_PHASE] = Process_KEYS;
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <ProcessusKeys_Init+0x10>)
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <ProcessusKeys_Init+0x14>)
 8000228:	609a      	str	r2, [r3, #8]
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000470 	.word	0x20000470
 8000234:	08000239 	.word	0x08000239

08000238 <Process_KEYS>:

void Process_KEYS(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	static uint8_t howManyKeysPressed = 0;
	static bool lastActionDone[64];

	Reset_HID_Report();
 800023e:	f000 fb55 	bl	80008ec <Reset_HID_Report>

	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0a9      	b.n	800039c <Process_KEYS+0x164>
	{
		if(key_map[key_index]->state == PRESSED)
 8000248:	4b70      	ldr	r3, [pc, #448]	@ (800040c <Process_KEYS+0x1d4>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0092      	lsls	r2, r2, #2
 800024e:	58d3      	ldr	r3, [r2, r3]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d000      	beq.n	8000258 <Process_KEYS+0x20>
 8000256:	e08c      	b.n	8000372 <Process_KEYS+0x13a>
		{
			howManyKeysPressed++;
 8000258:	4b6d      	ldr	r3, [pc, #436]	@ (8000410 <Process_KEYS+0x1d8>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b6b      	ldr	r3, [pc, #428]	@ (8000410 <Process_KEYS+0x1d8>)
 8000262:	701a      	strb	r2, [r3, #0]
			if(howManyKeysPressed > 6)
 8000264:	4b6a      	ldr	r3, [pc, #424]	@ (8000410 <Process_KEYS+0x1d8>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b06      	cmp	r3, #6
 800026a:	d900      	bls.n	800026e <Process_KEYS+0x36>
 800026c:	e076      	b.n	800035c <Process_KEYS+0x124>
			{
				//DO NOTHING
			}
			else
			{
				switch(key_map[FN_KEY]->state)
 800026e:	4b67      	ldr	r3, [pc, #412]	@ (800040c <Process_KEYS+0x1d4>)
 8000270:	22f0      	movs	r2, #240	@ 0xf0
 8000272:	589b      	ldr	r3, [r3, r2]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d000      	beq.n	800027c <Process_KEYS+0x44>
 800027a:	e064      	b.n	8000346 <Process_KEYS+0x10e>
				{
				case PRESSED:
					switch(key_index)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000280:	d030      	beq.n	80002e4 <Process_KEYS+0xac>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b3f      	cmp	r3, #63	@ 0x3f
 8000286:	dc37      	bgt.n	80002f8 <Process_KEYS+0xc0>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b3e      	cmp	r3, #62	@ 0x3e
 800028c:	d014      	beq.n	80002b8 <Process_KEYS+0x80>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b3e      	cmp	r3, #62	@ 0x3e
 8000292:	dc31      	bgt.n	80002f8 <Process_KEYS+0xc0>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b35      	cmp	r3, #53	@ 0x35
 8000298:	d003      	beq.n	80002a2 <Process_KEYS+0x6a>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b3d      	cmp	r3, #61	@ 0x3d
 800029e:	d016      	beq.n	80002ce <Process_KEYS+0x96>
 80002a0:	e02a      	b.n	80002f8 <Process_KEYS+0xc0>
					{
					case UP_KEY:
						if(lastActionDone[UP_KEY] == false)
 80002a2:	4b5c      	ldr	r3, [pc, #368]	@ (8000414 <Process_KEYS+0x1dc>)
 80002a4:	2235      	movs	r2, #53	@ 0x35
 80002a6:	5c9b      	ldrb	r3, [r3, r2]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4053      	eors	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d043      	beq.n	800033a <Process_KEYS+0x102>
						{ LEDS_Increase_Brightness(); }
 80002b2:	f000 f8eb 	bl	800048c <LEDS_Increase_Brightness>
						break;
 80002b6:	e040      	b.n	800033a <Process_KEYS+0x102>
					case DOWN_KEY:
						if(lastActionDone[DOWN_KEY] == false)
 80002b8:	4b56      	ldr	r3, [pc, #344]	@ (8000414 <Process_KEYS+0x1dc>)
 80002ba:	223e      	movs	r2, #62	@ 0x3e
 80002bc:	5c9b      	ldrb	r3, [r3, r2]
 80002be:	2201      	movs	r2, #1
 80002c0:	4053      	eors	r3, r2
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d03a      	beq.n	800033e <Process_KEYS+0x106>
						{ LEDS_Decrease_Brightness(); }
 80002c8:	f000 f8fc 	bl	80004c4 <LEDS_Decrease_Brightness>
						break;
 80002cc:	e037      	b.n	800033e <Process_KEYS+0x106>
					case LEFT_KEY:
						if(lastActionDone[LEFT_KEY] == false)
 80002ce:	4b51      	ldr	r3, [pc, #324]	@ (8000414 <Process_KEYS+0x1dc>)
 80002d0:	223d      	movs	r2, #61	@ 0x3d
 80002d2:	5c9b      	ldrb	r3, [r3, r2]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4053      	eors	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d031      	beq.n	8000342 <Process_KEYS+0x10a>
						{ LEDS_Cycle_Hue(); }
 80002de:	f000 f90d 	bl	80004fc <LEDS_Cycle_Hue>
						break;
 80002e2:	e02e      	b.n	8000342 <Process_KEYS+0x10a>
					case RIGHT_KEY:
						if(lastActionDone[RIGHT_KEY] == false)
 80002e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000414 <Process_KEYS+0x1dc>)
 80002e6:	223f      	movs	r2, #63	@ 0x3f
 80002e8:	5c9b      	ldrb	r3, [r3, r2]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4053      	eors	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <Process_KEYS+0xc0>
						{ LEDS_Cycle_Effect(); }
 80002f4:	f000 f922 	bl	800053c <LEDS_Cycle_Effect>
					default:
						switch(key_map[R_ALT_KEY]->state)
 80002f8:	4b44      	ldr	r3, [pc, #272]	@ (800040c <Process_KEYS+0x1d4>)
 80002fa:	22ec      	movs	r2, #236	@ 0xec
 80002fc:	589b      	ldr	r3, [r3, r2]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b02      	cmp	r3, #2
 8000302:	d10c      	bne.n	800031e <Process_KEYS+0xe6>
						{
						case PRESSED:
							Make_HID_Report(default_keycodes_map[FN_RALT_LAYER][key_index], howManyKeysPressed);
 8000304:	4a44      	ldr	r2, [pc, #272]	@ (8000418 <Process_KEYS+0x1e0>)
 8000306:	2180      	movs	r1, #128	@ 0x80
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	18d3      	adds	r3, r2, r3
 800030c:	185b      	adds	r3, r3, r1
 800030e:	781a      	ldrb	r2, [r3, #0]
 8000310:	4b3f      	ldr	r3, [pc, #252]	@ (8000410 <Process_KEYS+0x1d8>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	0019      	movs	r1, r3
 8000316:	0010      	movs	r0, r2
 8000318:	f000 fb58 	bl	80009cc <Make_HID_Report>
							break;
 800031c:	e00c      	b.n	8000338 <Process_KEYS+0x100>
						default:
							Make_HID_Report(default_keycodes_map[FN_LAYER][key_index], howManyKeysPressed);
 800031e:	4a3e      	ldr	r2, [pc, #248]	@ (8000418 <Process_KEYS+0x1e0>)
 8000320:	2140      	movs	r1, #64	@ 0x40
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	18d3      	adds	r3, r2, r3
 8000326:	185b      	adds	r3, r3, r1
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	4b39      	ldr	r3, [pc, #228]	@ (8000410 <Process_KEYS+0x1d8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	0019      	movs	r1, r3
 8000330:	0010      	movs	r0, r2
 8000332:	f000 fb4b 	bl	80009cc <Make_HID_Report>
							break;
 8000336:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8000338:	e004      	b.n	8000344 <Process_KEYS+0x10c>
						break;
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	e00e      	b.n	800035c <Process_KEYS+0x124>
						break;
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	e00c      	b.n	800035c <Process_KEYS+0x124>
						break;
 8000342:	46c0      	nop			@ (mov r8, r8)
					}
					break;
 8000344:	e00a      	b.n	800035c <Process_KEYS+0x124>
				default:
					Make_HID_Report(default_keycodes_map[BASE_LAYER][key_index], howManyKeysPressed);
 8000346:	4a34      	ldr	r2, [pc, #208]	@ (8000418 <Process_KEYS+0x1e0>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	18d3      	adds	r3, r2, r3
 800034c:	781a      	ldrb	r2, [r3, #0]
 800034e:	4b30      	ldr	r3, [pc, #192]	@ (8000410 <Process_KEYS+0x1d8>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	0019      	movs	r1, r3
 8000354:	0010      	movs	r0, r2
 8000356:	f000 fb39 	bl	80009cc <Make_HID_Report>
					break;
 800035a:	46c0      	nop			@ (mov r8, r8)
				}
			}
			lastActionDone[key_index] = true;
 800035c:	4a2d      	ldr	r2, [pc, #180]	@ (8000414 <Process_KEYS+0x1dc>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	18d3      	adds	r3, r2, r3
 8000362:	2201      	movs	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = true;
 8000366:	4a2d      	ldr	r2, [pc, #180]	@ (800041c <Process_KEYS+0x1e4>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	18d3      	adds	r3, r2, r3
 800036c:	3303      	adds	r3, #3
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		}
		if(key_map[key_index]->state == IDLE)
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <Process_KEYS+0x1d4>)
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	58d3      	ldr	r3, [r2, r3]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10a      	bne.n	8000396 <Process_KEYS+0x15e>
		{
			lastActionDone[key_index] = false;
 8000380:	4a24      	ldr	r2, [pc, #144]	@ (8000414 <Process_KEYS+0x1dc>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	18d3      	adds	r3, r2, r3
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = false;
 800038a:	4a24      	ldr	r2, [pc, #144]	@ (800041c <Process_KEYS+0x1e4>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	18d3      	adds	r3, r2, r3
 8000390:	3303      	adds	r3, #3
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b3f      	cmp	r3, #63	@ 0x3f
 80003a0:	dc00      	bgt.n	80003a4 <Process_KEYS+0x16c>
 80003a2:	e751      	b.n	8000248 <Process_KEYS+0x10>
		}
	}

	if(!Check_HID_KeyboardReport(lastHIDkeyboard))
 80003a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <Process_KEYS+0x1e8>)
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	6859      	ldr	r1, [r3, #4]
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	f000 fac0 	bl	8000930 <Check_HID_KeyboardReport>
 80003b0:	0003      	movs	r3, r0
 80003b2:	001a      	movs	r2, r3
 80003b4:	2301      	movs	r3, #1
 80003b6:	4053      	eors	r3, r2
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <Process_KEYS+0x18a>
	{
		Send_HID_KeyboardReport();
 80003be:	f000 fba1 	bl	8000b04 <Send_HID_KeyboardReport>
	}

	if(!Check_HID_MediaReport(lastHIDmedia))
 80003c2:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <Process_KEYS+0x1ec>)
 80003c4:	6818      	ldr	r0, [r3, #0]
 80003c6:	f000 faed 	bl	80009a4 <Check_HID_MediaReport>
 80003ca:	0003      	movs	r3, r0
 80003cc:	001a      	movs	r2, r3
 80003ce:	2301      	movs	r3, #1
 80003d0:	4053      	eors	r3, r2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <Process_KEYS+0x1a4>
	{
		Send_HID_MediaReport();
 80003d8:	f000 fba4 	bl	8000b24 <Send_HID_MediaReport>
	}

	lastHIDmedia = HIDmedia;
 80003dc:	4a11      	ldr	r2, [pc, #68]	@ (8000424 <Process_KEYS+0x1ec>)
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <Process_KEYS+0x1f0>)
 80003e0:	0010      	movs	r0, r2
 80003e2:	0019      	movs	r1, r3
 80003e4:	2302      	movs	r3, #2
 80003e6:	001a      	movs	r2, r3
 80003e8:	f00a f934 	bl	800a654 <memcpy>
	lastHIDkeyboard = HIDkeyboard;
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <Process_KEYS+0x1e8>)
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <Process_KEYS+0x1f4>)
 80003f0:	0010      	movs	r0, r2
 80003f2:	0019      	movs	r1, r3
 80003f4:	2309      	movs	r3, #9
 80003f6:	001a      	movs	r2, r3
 80003f8:	f00a f92c 	bl	800a654 <memcpy>
	howManyKeysPressed = 0;
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <Process_KEYS+0x1d8>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000000 	.word	0x20000000
 8000410:	200003d2 	.word	0x200003d2
 8000414:	200003d4 	.word	0x200003d4
 8000418:	20000130 	.word	0x20000130
 800041c:	2000042c 	.word	0x2000042c
 8000420:	200003c4 	.word	0x200003c4
 8000424:	200003d0 	.word	0x200003d0
 8000428:	2000012c 	.word	0x2000012c
 800042c:	20000120 	.word	0x20000120

08000430 <Process_LEDS>:

//Fonctions privees
void Process_LEDS(void);

void Process_LEDS(void)
{
 8000430:	b5b0      	push	{r4, r5, r7, lr}
 8000432:	b08e      	sub	sp, #56	@ 0x38
 8000434:	af0e      	add	r7, sp, #56	@ 0x38
	static uint8_t compteur_LEDS;

	compteur_LEDS++;
 8000436:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <Process_LEDS+0x50>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <Process_LEDS+0x50>)
 8000440:	701a      	strb	r2, [r3, #0]

	if(compteur_LEDS > 30)//update 30ms = ~30fps
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <Process_LEDS+0x50>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b1e      	cmp	r3, #30
 8000448:	d916      	bls.n	8000478 <Process_LEDS+0x48>
	{
		Processus_LEDS_execute[leds.phase](leds);
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <Process_LEDS+0x54>)
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	001a      	movs	r2, r3
 8000450:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <Process_LEDS+0x58>)
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	58d5      	ldr	r5, [r2, r3]
 8000456:	4c0b      	ldr	r4, [pc, #44]	@ (8000484 <Process_LEDS+0x54>)
 8000458:	466b      	mov	r3, sp
 800045a:	0018      	movs	r0, r3
 800045c:	0023      	movs	r3, r4
 800045e:	3310      	adds	r3, #16
 8000460:	2233      	movs	r2, #51	@ 0x33
 8000462:	0019      	movs	r1, r3
 8000464:	f00a f8f6 	bl	800a654 <memcpy>
 8000468:	6820      	ldr	r0, [r4, #0]
 800046a:	6861      	ldr	r1, [r4, #4]
 800046c:	68a2      	ldr	r2, [r4, #8]
 800046e:	68e3      	ldr	r3, [r4, #12]
 8000470:	47a8      	blx	r5
		compteur_LEDS = 0;
 8000472:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <Process_LEDS+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
	}
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bdb0      	pop	{r4, r5, r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	2000046f 	.word	0x2000046f
 8000484:	2000042c 	.word	0x2000042c
 8000488:	20000418 	.word	0x20000418

0800048c <LEDS_Increase_Brightness>:

LEDS leds;

//Fonctions publiques
void LEDS_Increase_Brightness(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	if(brightness_index < 11)
 8000490:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <LEDS_Increase_Brightness+0x2c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b0a      	cmp	r3, #10
 8000496:	d805      	bhi.n	80004a4 <LEDS_Increase_Brightness+0x18>
	{ brightness_index++; }
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <LEDS_Increase_Brightness+0x2c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <LEDS_Increase_Brightness+0x2c>)
 80004a2:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004a4:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <LEDS_Increase_Brightness+0x2c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	001a      	movs	r2, r3
 80004aa:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <LEDS_Increase_Brightness+0x30>)
 80004ac:	5c9a      	ldrb	r2, [r3, r2]
 80004ae:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <LEDS_Increase_Brightness+0x34>)
 80004b0:	705a      	strb	r2, [r3, #1]
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000011d 	.word	0x2000011d
 80004bc:	2000010c 	.word	0x2000010c
 80004c0:	2000042c 	.word	0x2000042c

080004c4 <LEDS_Decrease_Brightness>:

void LEDS_Decrease_Brightness(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	if(brightness_index > 0)
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <LEDS_Decrease_Brightness+0x2c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d005      	beq.n	80004dc <LEDS_Decrease_Brightness+0x18>
	{ brightness_index--; }
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <LEDS_Decrease_Brightness+0x2c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <LEDS_Decrease_Brightness+0x2c>)
 80004da:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <LEDS_Decrease_Brightness+0x2c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <LEDS_Decrease_Brightness+0x30>)
 80004e4:	5c9a      	ldrb	r2, [r3, r2]
 80004e6:	4b04      	ldr	r3, [pc, #16]	@ (80004f8 <LEDS_Decrease_Brightness+0x34>)
 80004e8:	705a      	strb	r2, [r3, #1]
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000011d 	.word	0x2000011d
 80004f4:	2000010c 	.word	0x2000010c
 80004f8:	2000042c 	.word	0x2000042c

080004fc <LEDS_Cycle_Hue>:

void LEDS_Cycle_Hue(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	hue_index++;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <LEDS_Cycle_Hue+0x34>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <LEDS_Cycle_Hue+0x34>)
 800050a:	701a      	strb	r2, [r3, #0]
	if(hue_index > 11)
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <LEDS_Cycle_Hue+0x34>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b0b      	cmp	r3, #11
 8000512:	d902      	bls.n	800051a <LEDS_Cycle_Hue+0x1e>
	{ hue_index = 0; }
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <LEDS_Cycle_Hue+0x34>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
	leds.hue = hue_table[hue_index];
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <LEDS_Cycle_Hue+0x34>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	001a      	movs	r2, r3
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <LEDS_Cycle_Hue+0x38>)
 8000522:	5c9a      	ldrb	r2, [r3, r2]
 8000524:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <LEDS_Cycle_Hue+0x3c>)
 8000526:	701a      	strb	r2, [r3, #0]
}
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	20000414 	.word	0x20000414
 8000534:	20000100 	.word	0x20000100
 8000538:	2000042c 	.word	0x2000042c

0800053c <LEDS_Cycle_Effect>:

void LEDS_Cycle_Effect(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	phase_index++;
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <LEDS_Cycle_Effect+0x34>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <LEDS_Cycle_Effect+0x34>)
 800054a:	701a      	strb	r2, [r3, #0]
	if(phase_index > 4)
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <LEDS_Cycle_Effect+0x34>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b04      	cmp	r3, #4
 8000552:	d902      	bls.n	800055a <LEDS_Cycle_Effect+0x1e>
	{ phase_index = 0; }
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <LEDS_Cycle_Effect+0x34>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	leds.phase = phase_table[phase_index];
 800055a:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <LEDS_Cycle_Effect+0x34>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <LEDS_Cycle_Effect+0x38>)
 8000562:	5c9a      	ldrb	r2, [r3, r2]
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <LEDS_Cycle_Effect+0x3c>)
 8000566:	709a      	strb	r2, [r3, #2]
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	20000415 	.word	0x20000415
 8000574:	20000118 	.word	0x20000118
 8000578:	2000042c 	.word	0x2000042c

0800057c <ProcessusLEDS_init>:


void ProcessusLEDS_init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  serviceBaseDeTemps_execute[PROCESSUS_LEDS_PHASE] = Process_LEDS;
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <ProcessusLEDS_init+0x7c>)
 8000584:	4a1d      	ldr	r2, [pc, #116]	@ (80005fc <ProcessusLEDS_init+0x80>)
 8000586:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_RAINBOW_PHASE] = effet_Rainbow;
 8000588:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <ProcessusLEDS_init+0x84>)
 800058a:	4a1e      	ldr	r2, [pc, #120]	@ (8000604 <ProcessusLEDS_init+0x88>)
 800058c:	601a      	str	r2, [r3, #0]
  Processus_LEDS_execute[LEDS_BREATHING_PHASE] = effet_Breathing;
 800058e:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <ProcessusLEDS_init+0x84>)
 8000590:	4a1d      	ldr	r2, [pc, #116]	@ (8000608 <ProcessusLEDS_init+0x8c>)
 8000592:	605a      	str	r2, [r3, #4]
  Processus_LEDS_execute[LEDS_STATIC_PHASE] = effet_StaticColor;
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <ProcessusLEDS_init+0x84>)
 8000596:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <ProcessusLEDS_init+0x90>)
 8000598:	609a      	str	r2, [r3, #8]
  Processus_LEDS_execute[LEDS_RAINBOW_BREATHING_PHASE] = effet_Rainbow_Breathing;
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <ProcessusLEDS_init+0x84>)
 800059c:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <ProcessusLEDS_init+0x94>)
 800059e:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_KEY_RESPONSE_PHASE] = effet_Key_Responsive;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <ProcessusLEDS_init+0x84>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <ProcessusLEDS_init+0x98>)
 80005a4:	611a      	str	r2, [r3, #16]

  leds.hue = hue_table[hue_index];
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <ProcessusLEDS_init+0x9c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001a      	movs	r2, r3
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <ProcessusLEDS_init+0xa0>)
 80005ae:	5c9a      	ldrb	r2, [r3, r2]
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <ProcessusLEDS_init+0xa4>)
 80005b2:	701a      	strb	r2, [r3, #0]
  leds.phase = phase_table[phase_index];
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <ProcessusLEDS_init+0xa8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <ProcessusLEDS_init+0xac>)
 80005bc:	5c9a      	ldrb	r2, [r3, r2]
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <ProcessusLEDS_init+0xa4>)
 80005c0:	709a      	strb	r2, [r3, #2]
  leds.brightness = brightness_table[brightness_index];
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <ProcessusLEDS_init+0xb0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	001a      	movs	r2, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <ProcessusLEDS_init+0xb4>)
 80005ca:	5c9a      	ldrb	r2, [r3, r2]
 80005cc:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <ProcessusLEDS_init+0xa4>)
 80005ce:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < 64; i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	e008      	b.n	80005e8 <ProcessusLEDS_init+0x6c>
  { leds.position[i] = false; }
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <ProcessusLEDS_init+0xa4>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	18d3      	adds	r3, r2, r3
 80005dc:	3303      	adds	r3, #3
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 64; i++)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80005ec:	ddf3      	ble.n	80005d6 <ProcessusLEDS_init+0x5a>
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b002      	add	sp, #8
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000470 	.word	0x20000470
 80005fc:	08000431 	.word	0x08000431
 8000600:	20000418 	.word	0x20000418
 8000604:	08000db1 	.word	0x08000db1
 8000608:	08000e69 	.word	0x08000e69
 800060c:	08001109 	.word	0x08001109
 8000610:	08000f11 	.word	0x08000f11
 8000614:	08001009 	.word	0x08001009
 8000618:	20000414 	.word	0x20000414
 800061c:	20000100 	.word	0x20000100
 8000620:	2000042c 	.word	0x2000042c
 8000624:	20000415 	.word	0x20000415
 8000628:	20000118 	.word	0x20000118
 800062c:	2000011d 	.word	0x2000011d
 8000630:	2000010c 	.word	0x2000010c

08000634 <serviceBaseDeTemps_gere>:
//Definitions de variables privees:
//pas de variables privees

//Definitions de fonctions privees:
void serviceBaseDeTemps_gere(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e00a      	b.n	8000658 <serviceBaseDeTemps_gere+0x24>
  {
    serviceBaseDeTemps_execute[i]();
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <serviceBaseDeTemps_gere+0x38>)
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	58d3      	ldr	r3, [r2, r3]
 800064c:	4798      	blx	r3
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	3201      	adds	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d9f0      	bls.n	8000642 <serviceBaseDeTemps_gere+0xe>
  }
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000470 	.word	0x20000470

08000670 <serviceBaseDeTemps_initialise>:
//Definitions de variables publiques:
void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);

//Definitions de fonctions publiques:
void serviceBaseDeTemps_initialise(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e00a      	b.n	8000694 <serviceBaseDeTemps_initialise+0x24>
  {
    serviceBaseDeTemps_execute[i] = doNothing;
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <serviceBaseDeTemps_initialise+0x3c>)
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <serviceBaseDeTemps_initialise+0x40>)
 8000688:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	3201      	adds	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d9f0      	bls.n	800067e <serviceBaseDeTemps_initialise+0xe>
  }
  piloteTimer14_execute = serviceBaseDeTemps_gere;
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <serviceBaseDeTemps_initialise+0x44>)
 800069e:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <serviceBaseDeTemps_initialise+0x48>)
 80006a0:	601a      	str	r2, [r3, #0]
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	20000470 	.word	0x20000470
 80006b0:	0800117d 	.word	0x0800117d
 80006b4:	20000720 	.word	0x20000720
 80006b8:	08000635 	.word	0x08000635

080006bc <Debounce_Switch_Matrix>:


KeyState matriceDebouncing[NUM_ROWS][NUM_COLS];

//Definitions fonctions publiques
void Debounce_Switch_Matrix(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	e07e      	b.n	80007c6 <Debounce_Switch_Matrix+0x10a>
        for (int col = 0; col < NUM_COLS; col++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	e075      	b.n	80007ba <Debounce_Switch_Matrix+0xfe>
            bool physicalState = matrice[row][col];
 80006ce:	1df9      	adds	r1, r7, #7
 80006d0:	4841      	ldr	r0, [pc, #260]	@ (80007d8 <Debounce_Switch_Matrix+0x11c>)
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	0013      	movs	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	18c2      	adds	r2, r0, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	700b      	strb	r3, [r1, #0]
            KeyState *key = &matriceDebouncing[row][col];
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	0013      	movs	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	189b      	adds	r3, r3, r2
 80006f4:	005a      	lsls	r2, r3, #1
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <Debounce_Switch_Matrix+0x120>)
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	603b      	str	r3, [r7, #0]

            switch (key->state) {
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d037      	beq.n	8000774 <Debounce_Switch_Matrix+0xb8>
 8000704:	dc56      	bgt.n	80007b4 <Debounce_Switch_Matrix+0xf8>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d026      	beq.n	8000758 <Debounce_Switch_Matrix+0x9c>
 800070a:	dc53      	bgt.n	80007b4 <Debounce_Switch_Matrix+0xf8>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <Debounce_Switch_Matrix+0x5a>
 8000710:	2b01      	cmp	r3, #1
 8000712:	d00b      	beq.n	800072c <Debounce_Switch_Matrix+0x70>
 8000714:	e04e      	b.n	80007b4 <Debounce_Switch_Matrix+0xf8>
                case IDLE:
                    if (physicalState) {
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d043      	beq.n	80007a6 <Debounce_Switch_Matrix+0xea>
                        key->state = BOUNCE_PRESS;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 800072a:	e03c      	b.n	80007a6 <Debounce_Switch_Matrix+0xea>
                case BOUNCE_PRESS:
                    if (physicalState) {
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00d      	beq.n	8000750 <Debounce_Switch_Matrix+0x94>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	705a      	strb	r2, [r3, #1]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	2b04      	cmp	r3, #4
 8000746:	d930      	bls.n	80007aa <Debounce_Switch_Matrix+0xee>
                            key->state = PRESSED;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = IDLE;
                    }
                    break;
 800074e:	e02c      	b.n	80007aa <Debounce_Switch_Matrix+0xee>
                        key->state = IDLE;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
                    break;
 8000756:	e028      	b.n	80007aa <Debounce_Switch_Matrix+0xee>
                case PRESSED:
                    if (!physicalState) {
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2201      	movs	r2, #1
 800075e:	4053      	eors	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d023      	beq.n	80007ae <Debounce_Switch_Matrix+0xf2>
                        key->state = BOUNCE_RELEASE;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2203      	movs	r2, #3
 800076a:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 8000772:	e01c      	b.n	80007ae <Debounce_Switch_Matrix+0xf2>
                case BOUNCE_RELEASE:
                    if (!physicalState) {
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2201      	movs	r2, #1
 800077a:	4053      	eors	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00d      	beq.n	800079e <Debounce_Switch_Matrix+0xe2>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	705a      	strb	r2, [r3, #1]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d90d      	bls.n	80007b2 <Debounce_Switch_Matrix+0xf6>
                            key->state = IDLE;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = PRESSED;
                    }
                    break;
 800079c:	e009      	b.n	80007b2 <Debounce_Switch_Matrix+0xf6>
                        key->state = PRESSED;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2202      	movs	r2, #2
 80007a2:	701a      	strb	r2, [r3, #0]
                    break;
 80007a4:	e005      	b.n	80007b2 <Debounce_Switch_Matrix+0xf6>
                    break;
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	e004      	b.n	80007b4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	e002      	b.n	80007b4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	e000      	b.n	80007b4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007b2:	46c0      	nop			@ (mov r8, r8)
        for (int col = 0; col < NUM_COLS; col++) {
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b0d      	cmp	r3, #13
 80007be:	dd86      	ble.n	80006ce <Debounce_Switch_Matrix+0x12>
    for (int row = 0; row < NUM_ROWS; row++) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	dc00      	bgt.n	80007ce <Debounce_Switch_Matrix+0x112>
 80007cc:	e77c      	b.n	80006c8 <Debounce_Switch_Matrix+0xc>
            }
        }
    }
}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b004      	add	sp, #16
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000050c 	.word	0x2000050c
 80007dc:	20000480 	.word	0x20000480

080007e0 <InterfaceDebouncing_Init>:

void InterfaceDebouncing_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[DEBOUNCE_MATRICE_PHASE] = Debounce_Switch_Matrix;
 80007e4:	4b02      	ldr	r3, [pc, #8]	@ (80007f0 <InterfaceDebouncing_Init+0x10>)
 80007e6:	4a03      	ldr	r2, [pc, #12]	@ (80007f4 <InterfaceDebouncing_Init+0x14>)
 80007e8:	605a      	str	r2, [r3, #4]
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000470 	.word	0x20000470
 80007f4:	080006bd 	.word	0x080006bd

080007f8 <ScanMatrice>:
#include "ServiceBaseTemps_1ms.h"

bool matrice[NUM_ROWS][NUM_COLS];

void ScanMatrice(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	Set_All_Rows();
 80007fe:	f000 fec3 	bl	8001588 <Set_All_Rows>

	for (int row = 0; row < NUM_ROWS; row++)
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e030      	b.n	800086a <ScanMatrice+0x72>
	{
		Reset_Row(row);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b29b      	uxth	r3, r3
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fea3 	bl	8001558 <Reset_Row>

		for(int col = 0; col < NUM_COLS; col++)
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	e01d      	b.n	8000854 <ScanMatrice+0x5c>
		{
			matrice[row][col] = (Read_Col(col) == 0) ? 1 : 0;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe67 	bl	80014f0 <Read_Col>
 8000822:	0003      	movs	r3, r0
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2201      	movs	r2, #1
 800082c:	4053      	eors	r3, r2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	1c1a      	adds	r2, r3, #0
 8000832:	2301      	movs	r3, #1
 8000834:	4013      	ands	r3, r2
 8000836:	b2d8      	uxtb	r0, r3
 8000838:	4910      	ldr	r1, [pc, #64]	@ (800087c <ScanMatrice+0x84>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	0013      	movs	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	18ca      	adds	r2, r1, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	1c02      	adds	r2, r0, #0
 800084c:	701a      	strb	r2, [r3, #0]
		for(int col = 0; col < NUM_COLS; col++)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b0d      	cmp	r3, #13
 8000858:	ddde      	ble.n	8000818 <ScanMatrice+0x20>
		}

		Set_Row(row);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	b29b      	uxth	r3, r3
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fe62 	bl	8001528 <Set_Row>
	for (int row = 0; row < NUM_ROWS; row++)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b04      	cmp	r3, #4
 800086e:	ddcb      	ble.n	8000808 <ScanMatrice+0x10>
	}
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	2000050c 	.word	0x2000050c

08000880 <InterfaceMatrice_Init>:

void InterfaceMatrice_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[SCAN_MATRICE_PHASE] = ScanMatrice;
 8000884:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <InterfaceMatrice_Init+0x10>)
 8000886:	4a03      	ldr	r2, [pc, #12]	@ (8000894 <InterfaceMatrice_Init+0x14>)
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000470 	.word	0x20000470
 8000894:	080007f9 	.word	0x080007f9

08000898 <isMediaKey>:

keyboardReport HIDkeyboard = {0x01, 0, 0, 0, 0, 0, 0, 0, 0};
mediaReport HIDmedia = {0x02, 0};

bool isMediaKey(uint8_t keycode)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	701a      	strb	r2, [r3, #0]
    switch (keycode)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2bea      	cmp	r3, #234	@ 0xea
 80008aa:	dc17      	bgt.n	80008dc <isMediaKey+0x44>
 80008ac:	2bcd      	cmp	r3, #205	@ 0xcd
 80008ae:	da04      	bge.n	80008ba <isMediaKey+0x22>
 80008b0:	2b70      	cmp	r3, #112	@ 0x70
 80008b2:	dc0e      	bgt.n	80008d2 <isMediaKey+0x3a>
 80008b4:	2b6f      	cmp	r3, #111	@ 0x6f
 80008b6:	da0f      	bge.n	80008d8 <isMediaKey+0x40>
 80008b8:	e010      	b.n	80008dc <isMediaKey+0x44>
 80008ba:	3bcd      	subs	r3, #205	@ 0xcd
 80008bc:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <isMediaKey+0x50>)
 80008be:	40da      	lsrs	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	4193      	sbcs	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <isMediaKey+0x40>
 80008d0:	e004      	b.n	80008dc <isMediaKey+0x44>
 80008d2:	3bb5      	subs	r3, #181	@ 0xb5
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d801      	bhi.n	80008dc <isMediaKey+0x44>
        case KC_MUTE:
        case KC_NEXT:
        case KC_PREVIOUS:
        case KC_BRIGHT_UP:
        case KC_BRIGHT_DOWN:
            return true;
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <isMediaKey+0x46>
        default:
            return false;
 80008dc:	2300      	movs	r3, #0
    }
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	30200001 	.word	0x30200001

080008ec <Reset_HID_Report>:

void Reset_HID_Report(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HIDmedia.MEDIA_KEY = 0;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <Reset_HID_Report+0x3c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.MODIFIER = 0;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <Reset_HID_Report+0x40>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.KEYCODE1 = 0;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <Reset_HID_Report+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
	HIDkeyboard.KEYCODE2 = 0;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <Reset_HID_Report+0x40>)
 8000904:	2200      	movs	r2, #0
 8000906:	711a      	strb	r2, [r3, #4]
	HIDkeyboard.KEYCODE3 = 0;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <Reset_HID_Report+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
	HIDkeyboard.KEYCODE4 = 0;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <Reset_HID_Report+0x40>)
 8000910:	2200      	movs	r2, #0
 8000912:	719a      	strb	r2, [r3, #6]
	HIDkeyboard.KEYCODE5 = 0;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <Reset_HID_Report+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	71da      	strb	r2, [r3, #7]
	HIDkeyboard.KEYCODE6 = 0;
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <Reset_HID_Report+0x40>)
 800091c:	2200      	movs	r2, #0
 800091e:	721a      	strb	r2, [r3, #8]
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	2000012c 	.word	0x2000012c
 800092c:	20000120 	.word	0x20000120

08000930 <Check_HID_KeyboardReport>:

bool Check_HID_KeyboardReport(keyboardReport lastReport)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	6018      	str	r0, [r3, #0]
 800093a:	6059      	str	r1, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
	if(lastReport.MODIFIER == HIDkeyboard.MODIFIER && lastReport.KEYCODE1 == HIDkeyboard.KEYCODE1 && lastReport.KEYCODE2 == HIDkeyboard.KEYCODE2
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	785a      	ldrb	r2, [r3, #1]
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	429a      	cmp	r2, r3
 8000948:	d125      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	78da      	ldrb	r2, [r3, #3]
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	429a      	cmp	r2, r3
 8000954:	d11f      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	791a      	ldrb	r2, [r3, #4]
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d119      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE3 == HIDkeyboard.KEYCODE3 && lastReport.KEYCODE4 == HIDkeyboard.KEYCODE4 && lastReport.KEYCODE5 == HIDkeyboard.KEYCODE5
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	795a      	ldrb	r2, [r3, #5]
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	429a      	cmp	r2, r3
 800096c:	d113      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	799a      	ldrb	r2, [r3, #6]
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	429a      	cmp	r2, r3
 8000978:	d10d      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	79da      	ldrb	r2, [r3, #7]
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 8000980:	79db      	ldrb	r3, [r3, #7]
 8000982:	429a      	cmp	r2, r3
 8000984:	d107      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE6 == HIDkeyboard.KEYCODE6)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	7a1a      	ldrb	r2, [r3, #8]
 800098a:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <Check_HID_KeyboardReport+0x70>)
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	429a      	cmp	r2, r3
 8000990:	d101      	bne.n	8000996 <Check_HID_KeyboardReport+0x66>
	{
		return true;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <Check_HID_KeyboardReport+0x68>
	}
	else
	{
		return false;
 8000996:	2300      	movs	r3, #0
	}
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000120 	.word	0x20000120

080009a4 <Check_HID_MediaReport>:

bool Check_HID_MediaReport(mediaReport lastReport)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	8018      	strh	r0, [r3, #0]
	if(lastReport.MEDIA_KEY == HIDmedia.MEDIA_KEY)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <Check_HID_MediaReport+0x24>)
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d101      	bne.n	80009be <Check_HID_MediaReport+0x1a>
	{
		return true;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e000      	b.n	80009c0 <Check_HID_MediaReport+0x1c>
	}
	else
	{
		return false;
 80009be:	2300      	movs	r3, #0
	}
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000012c 	.word	0x2000012c

080009cc <Make_HID_Report>:

void Make_HID_Report(uint8_t keycode, uint8_t position)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	1c0a      	adds	r2, r1, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	if(isMediaKey(keycode))
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff ff58 	bl	8000898 <isMediaKey>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d004      	beq.n	80009f6 <Make_HID_Report+0x2a>
	{
		HIDmedia.MEDIA_KEY = keycode;
 80009ec:	4b41      	ldr	r3, [pc, #260]	@ (8000af4 <Make_HID_Report+0x128>)
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	705a      	strb	r2, [r3, #1]
				break;

			}
		}
	}
}
 80009f4:	e07a      	b.n	8000aec <Make_HID_Report+0x120>
		if(keycode >= 0xE0 && keycode <= 0xE7)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2bdf      	cmp	r3, #223	@ 0xdf
 80009fc:	d94f      	bls.n	8000a9e <Make_HID_Report+0xd2>
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2be7      	cmp	r3, #231	@ 0xe7
 8000a04:	d84b      	bhi.n	8000a9e <Make_HID_Report+0xd2>
			switch(keycode)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	3be0      	subs	r3, #224	@ 0xe0
 8000a0c:	2b07      	cmp	r3, #7
 8000a0e:	d86d      	bhi.n	8000aec <Make_HID_Report+0x120>
 8000a10:	009a      	lsls	r2, r3, #2
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <Make_HID_Report+0x12c>)
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	469f      	mov	pc, r3
				HIDkeyboard.MODIFIER |= 0x01;
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <Make_HID_Report+0x130>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <Make_HID_Report+0x130>)
 8000a26:	705a      	strb	r2, [r3, #1]
				break;
 8000a28:	e038      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x02;
 8000a2a:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <Make_HID_Report+0x130>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <Make_HID_Report+0x130>)
 8000a36:	705a      	strb	r2, [r3, #1]
				break;
 8000a38:	e030      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x04;
 8000a3a:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <Make_HID_Report+0x130>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <Make_HID_Report+0x130>)
 8000a46:	705a      	strb	r2, [r3, #1]
				break;
 8000a48:	e028      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x08;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <Make_HID_Report+0x130>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	2208      	movs	r2, #8
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <Make_HID_Report+0x130>)
 8000a56:	705a      	strb	r2, [r3, #1]
				break;
 8000a58:	e020      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x10;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <Make_HID_Report+0x130>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	2210      	movs	r2, #16
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <Make_HID_Report+0x130>)
 8000a66:	705a      	strb	r2, [r3, #1]
				break;
 8000a68:	e018      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x20;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <Make_HID_Report+0x130>)
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	2220      	movs	r2, #32
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <Make_HID_Report+0x130>)
 8000a76:	705a      	strb	r2, [r3, #1]
				break;
 8000a78:	e010      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x40;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <Make_HID_Report+0x130>)
 8000a7c:	785b      	ldrb	r3, [r3, #1]
 8000a7e:	2240      	movs	r2, #64	@ 0x40
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <Make_HID_Report+0x130>)
 8000a86:	705a      	strb	r2, [r3, #1]
				break;
 8000a88:	e008      	b.n	8000a9c <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x80;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <Make_HID_Report+0x130>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	4252      	negs	r2, r2
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <Make_HID_Report+0x130>)
 8000a98:	705a      	strb	r2, [r3, #1]
				break;
 8000a9a:	46c0      	nop			@ (mov r8, r8)
			switch(keycode)
 8000a9c:	e026      	b.n	8000aec <Make_HID_Report+0x120>
			switch(position)
 8000a9e:	1dbb      	adds	r3, r7, #6
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d822      	bhi.n	8000aec <Make_HID_Report+0x120>
 8000aa6:	009a      	lsls	r2, r3, #2
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <Make_HID_Report+0x134>)
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	469f      	mov	pc, r3
				HIDkeyboard.KEYCODE1 = keycode;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <Make_HID_Report+0x130>)
 8000ab2:	1dfa      	adds	r2, r7, #7
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	70da      	strb	r2, [r3, #3]
				break;
 8000ab8:	e018      	b.n	8000aec <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE2 = keycode;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <Make_HID_Report+0x130>)
 8000abc:	1dfa      	adds	r2, r7, #7
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	711a      	strb	r2, [r3, #4]
				break;
 8000ac2:	e013      	b.n	8000aec <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE3 = keycode;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <Make_HID_Report+0x130>)
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	715a      	strb	r2, [r3, #5]
				break;
 8000acc:	e00e      	b.n	8000aec <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE4 = keycode;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <Make_HID_Report+0x130>)
 8000ad0:	1dfa      	adds	r2, r7, #7
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	719a      	strb	r2, [r3, #6]
				break;
 8000ad6:	e009      	b.n	8000aec <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE5 = keycode;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <Make_HID_Report+0x130>)
 8000ada:	1dfa      	adds	r2, r7, #7
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	71da      	strb	r2, [r3, #7]
				break;
 8000ae0:	e004      	b.n	8000aec <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE6 = keycode;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <Make_HID_Report+0x130>)
 8000ae4:	1dfa      	adds	r2, r7, #7
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	721a      	strb	r2, [r3, #8]
				break;
 8000aea:	46c0      	nop			@ (mov r8, r8)
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000012c 	.word	0x2000012c
 8000af8:	0800a6b8 	.word	0x0800a6b8
 8000afc:	20000120 	.word	0x20000120
 8000b00:	0800a6d8 	.word	0x0800a6d8

08000b04 <Send_HID_KeyboardReport>:


void Send_HID_KeyboardReport(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyboard, sizeof(HIDkeyboard));
 8000b08:	4904      	ldr	r1, [pc, #16]	@ (8000b1c <Send_HID_KeyboardReport+0x18>)
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <Send_HID_KeyboardReport+0x1c>)
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f007 fe94 	bl	800883c <USBD_HID_SendReport>
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	20000120 	.word	0x20000120
 8000b20:	2000072c 	.word	0x2000072c

08000b24 <Send_HID_MediaReport>:

void Send_HID_MediaReport(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	USBD_HID_SendReport(&hUsbDeviceFS, &HIDmedia, sizeof(HIDmedia));
 8000b28:	4904      	ldr	r1, [pc, #16]	@ (8000b3c <Send_HID_MediaReport+0x18>)
 8000b2a:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <Send_HID_MediaReport+0x1c>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f007 fe84 	bl	800883c <USBD_HID_SendReport>
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	2000012c 	.word	0x2000012c
 8000b40:	2000072c 	.word	0x2000072c

08000b44 <hsl_to_rgb>:
  55, 56, 57, 58, 59, 60, 61, 62, 63
};


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0004      	movs	r4, r0
 8000b4c:	0008      	movs	r0, r1
 8000b4e:	0011      	movs	r1, r2
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	1c22      	adds	r2, r4, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	1c02      	adds	r2, r0, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	1d7b      	adds	r3, r7, #5
 8000b5e:	1c0a      	adds	r2, r1, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	if(l == 0) return 0;
 8000b62:	1d7b      	adds	r3, r7, #5
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <hsl_to_rgb+0x2a>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e119      	b.n	8000da2 <hsl_to_rgb+0x25e>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000b6e:	1d7b      	adds	r3, r7, #5
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3301      	adds	r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	210c      	movs	r1, #12
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	801a      	strh	r2, [r3, #0]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000b7e:	1d7b      	adds	r3, r7, #5
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0c      	blt.n	8000ba2 <hsl_to_rgb+0x5e>
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1dba      	adds	r2, r7, #6
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	4353      	muls	r3, r2
 8000b96:	121b      	asrs	r3, r3, #8
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	2313      	movs	r3, #19
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e00f      	b.n	8000bc2 <hsl_to_rgb+0x7e>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2280      	movs	r2, #128	@ 0x80
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	1dba      	adds	r2, r7, #6
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	4353      	muls	r3, r2
 8000bb8:	121b      	asrs	r3, r3, #8
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	2313      	movs	r3, #19
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	701a      	strb	r2, [r3, #0]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	1c1a      	adds	r2, r3, #0
 8000bca:	1c13      	adds	r3, r2, #0
 8000bcc:	18db      	adds	r3, r3, r3
 8000bce:	189b      	adds	r3, r3, r2
 8000bd0:	18db      	adds	r3, r3, r3
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	210a      	movs	r1, #10
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	801a      	strh	r2, [r3, #0]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	2014      	movs	r0, #20
 8000be4:	183b      	adds	r3, r7, r0
 8000be6:	701a      	strb	r2, [r3, #0]
	h1 = lo + 1;
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	183b      	adds	r3, r7, r0
 8000bf6:	801a      	strh	r2, [r3, #0]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	d10e      	bne.n	8000c26 <hsl_to_rgb+0xe2>
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2313      	movs	r3, #19
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4353      	muls	r3, r2
 8000c1a:	121b      	asrs	r3, r3, #8
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e011      	b.n	8000c4a <hsl_to_rgb+0x106>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8000c26:	230e      	movs	r3, #14
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	2213      	movs	r2, #19
 8000c38:	18ba      	adds	r2, r7, r2
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	4353      	muls	r3, r2
 8000c40:	121b      	asrs	r3, r3, #8
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	2312      	movs	r3, #18
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	701a      	strb	r2, [r3, #0]

	m = l - (c >> 1);
 8000c4a:	2313      	movs	r3, #19
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	1d7a      	adds	r2, r7, #5
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	2311      	movs	r3, #17
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	701a      	strb	r2, [r3, #0]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000c64:	230a      	movs	r3, #10
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d863      	bhi.n	8000d3c <hsl_to_rgb+0x1f8>
 8000c74:	009a      	lsls	r2, r3, #2
 8000c76:	4b4d      	ldr	r3, [pc, #308]	@ (8000dac <hsl_to_rgb+0x268>)
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	469f      	mov	pc, r3
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8000c7e:	2313      	movs	r3, #19
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	2317      	movs	r3, #23
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	2316      	movs	r3, #22
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	2315      	movs	r3, #21
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e05e      	b.n	8000d62 <hsl_to_rgb+0x21e>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	2317      	movs	r3, #23
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	2313      	movs	r3, #19
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	2316      	movs	r3, #22
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	2315      	movs	r3, #21
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e04b      	b.n	8000d62 <hsl_to_rgb+0x21e>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8000cca:	2317      	movs	r3, #23
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	2313      	movs	r3, #19
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	2316      	movs	r3, #22
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	2315      	movs	r3, #21
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e038      	b.n	8000d62 <hsl_to_rgb+0x21e>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8000cf0:	2317      	movs	r3, #23
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	2316      	movs	r3, #22
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	2313      	movs	r3, #19
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	2315      	movs	r3, #21
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e025      	b.n	8000d62 <hsl_to_rgb+0x21e>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8000d16:	2312      	movs	r3, #18
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	2317      	movs	r3, #23
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	2316      	movs	r3, #22
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	2313      	movs	r3, #19
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	2315      	movs	r3, #21
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e012      	b.n	8000d62 <hsl_to_rgb+0x21e>
	 default: r = c; g = 0; b = x; break; // M to R
 8000d3c:	2313      	movs	r3, #19
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	2317      	movs	r3, #23
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	2316      	movs	r3, #22
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	2312      	movs	r3, #18
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	2315      	movs	r3, #21
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	46c0      	nop			@ (mov r8, r8)
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8000d62:	2317      	movs	r3, #23
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2011      	movs	r0, #17
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	041a      	lsls	r2, r3, #16
 8000d78:	2316      	movs	r3, #22
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	0019      	movs	r1, r3
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	18cb      	adds	r3, r1, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	2315      	movs	r3, #21
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	0019      	movs	r1, r3
 8000d98:	183b      	adds	r3, r7, r0
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	18cb      	adds	r3, r1, r3
 8000da0:	4313      	orrs	r3, r2
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b007      	add	sp, #28
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	0800a734 	.word	0x0800a734

08000db0 <effet_Rainbow>:


void effet_Rainbow(LEDS led_param)
{
 8000db0:	b084      	sub	sp, #16
 8000db2:	b590      	push	{r4, r7, lr}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	2418      	movs	r4, #24
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	6020      	str	r0, [r4, #0]
 8000dbe:	6061      	str	r1, [r4, #4]
 8000dc0:	60a2      	str	r2, [r4, #8]
 8000dc2:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	2212      	movs	r2, #18
 8000dc8:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e02f      	b.n	8000e32 <effet_Rainbow+0x82>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	1d7b      	adds	r3, r7, #5
 8000dd8:	4921      	ldr	r1, [pc, #132]	@ (8000e60 <effet_Rainbow+0xb0>)
 8000dda:	5c8a      	ldrb	r2, [r1, r2]
 8000ddc:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, led_param.brightness);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	223f      	movs	r2, #63	@ 0x3f
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	1dba      	adds	r2, r7, #6
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	4353      	muls	r3, r2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <effet_Rainbow+0xb4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	b2d8      	uxtb	r0, r3
 8000dfc:	2318      	movs	r3, #24
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	001a      	movs	r2, r3
 8000e04:	21ff      	movs	r1, #255	@ 0xff
 8000e06:	f7ff fe9d 	bl	8000b44 <hsl_to_rgb>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2dc      	uxtb	r4, r3
 8000e1e:	1d7b      	adds	r3, r7, #5
 8000e20:	7818      	ldrb	r0, [r3, #0]
 8000e22:	0023      	movs	r3, r4
 8000e24:	f000 fbda 	bl	80015dc <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	3201      	adds	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e38:	d9cb      	bls.n	8000dd2 <effet_Rainbow+0x22>
	}

	// Write to LED
	++angle;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <effet_Rainbow+0xb4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <effet_Rainbow+0xb4>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	led_render();
 8000e4c:	f000 fc30 	bl	80016b0 <led_render>
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bc90      	pop	{r4, r7}
 8000e58:	bc08      	pop	{r3}
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4718      	bx	r3
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	0800a6f4 	.word	0x0800a6f4
 8000e64:	20000552 	.word	0x20000552

08000e68 <effet_Breathing>:


void effet_Breathing(LEDS led_param)
{
 8000e68:	b084      	sub	sp, #16
 8000e6a:	b5b0      	push	{r4, r5, r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	2518      	movs	r5, #24
 8000e72:	197c      	adds	r4, r7, r5
 8000e74:	6020      	str	r0, [r4, #0]
 8000e76:	6061      	str	r1, [r4, #4]
 8000e78:	60a2      	str	r2, [r4, #8]
 8000e7a:	60e3      	str	r3, [r4, #12]
    static uint8_t current_brightness = 0;
    static int8_t direction = 1;

    // Adjust brightness
    current_brightness += direction;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <effet_Breathing+0xa0>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <effet_Breathing+0xa4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <effet_Breathing+0xa0>)
 8000e8e:	701a      	strb	r2, [r3, #0]
    if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <effet_Breathing+0xa0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <effet_Breathing+0x3c>
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	785a      	ldrb	r2, [r3, #1]
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <effet_Breathing+0xa0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d108      	bne.n	8000eb6 <effet_Breathing+0x4e>
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <effet_Breathing+0xa4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	425b      	negs	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <effet_Breathing+0xa4>)
 8000eb4:	701a      	strb	r2, [r3, #0]

    // Set all LEDs to the same color with fading
    uint32_t rgb = hsl_to_rgb(led_param.hue, 255, current_brightness); // Static hue
 8000eb6:	2318      	movs	r3, #24
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	7818      	ldrb	r0, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <effet_Breathing+0xa0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	21ff      	movs	r1, #255	@ 0xff
 8000ec4:	f7ff fe3e 	bl	8000b44 <hsl_to_rgb>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	607b      	str	r3, [r7, #4]
    uint8_t r = (rgb >> 16) & 0xFF;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	0c1a      	lsrs	r2, r3, #16
 8000ed0:	1cfb      	adds	r3, r7, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
    uint8_t g = (rgb >> 8) & 0xFF;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0a1a      	lsrs	r2, r3, #8
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	701a      	strb	r2, [r3, #0]
    uint8_t b = rgb & 0xFF;
 8000edc:	1c7b      	adds	r3, r7, #1
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	701a      	strb	r2, [r3, #0]

    led_set_all_RGB(r, g, b);
 8000ee2:	1c7b      	adds	r3, r7, #1
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	1cbb      	adds	r3, r7, #2
 8000ee8:	7819      	ldrb	r1, [r3, #0]
 8000eea:	1cfb      	adds	r3, r7, #3
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fbb6 	bl	8001660 <led_set_all_RGB>
    led_render();
 8000ef4:	f000 fbdc 	bl	80016b0 <led_render>
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bcb0      	pop	{r4, r5, r7}
 8000f00:	bc08      	pop	{r3}
 8000f02:	b004      	add	sp, #16
 8000f04:	4718      	bx	r3
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	20000553 	.word	0x20000553
 8000f0c:	200001f0 	.word	0x200001f0

08000f10 <effet_Rainbow_Breathing>:


void effet_Rainbow_Breathing(LEDS led_param)
{
 8000f10:	b084      	sub	sp, #16
 8000f12:	b5b0      	push	{r4, r5, r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	2518      	movs	r5, #24
 8000f1a:	197c      	adds	r4, r7, r5
 8000f1c:	6020      	str	r0, [r4, #0]
 8000f1e:	6061      	str	r1, [r4, #4]
 8000f20:	60a2      	str	r2, [r4, #8]
 8000f22:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	2212      	movs	r2, #18
 8000f28:	701a      	strb	r2, [r3, #0]

	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <effet_Rainbow_Breathing+0xe8>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <effet_Rainbow_Breathing+0xec>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	18d3      	adds	r3, r2, r3
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <effet_Rainbow_Breathing+0xe8>)
 8000f3c:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <effet_Rainbow_Breathing+0xe8>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <effet_Rainbow_Breathing+0x42>
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	785a      	ldrb	r2, [r3, #1]
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <effet_Rainbow_Breathing+0xe8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d108      	bne.n	8000f64 <effet_Rainbow_Breathing+0x54>
 8000f52:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <effet_Rainbow_Breathing+0xec>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <effet_Rainbow_Breathing+0xec>)
 8000f62:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e02e      	b.n	8000fca <effet_Rainbow_Breathing+0xba>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	1d7b      	adds	r3, r7, #5
 8000f72:	4923      	ldr	r1, [pc, #140]	@ (8001000 <effet_Rainbow_Breathing+0xf0>)
 8000f74:	5c8a      	ldrb	r2, [r1, r2]
 8000f76:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, current_brightness);
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	223f      	movs	r2, #63	@ 0x3f
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	1dba      	adds	r2, r7, #6
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4353      	muls	r3, r2
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <effet_Rainbow_Breathing+0xf4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	18d3      	adds	r3, r2, r3
 8000f94:	b2d8      	uxtb	r0, r3
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <effet_Rainbow_Breathing+0xe8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	21ff      	movs	r1, #255	@ 0xff
 8000f9e:	f7ff fdd1 	bl	8000b44 <hsl_to_rgb>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	0c1b      	lsrs	r3, r3, #16
 8000faa:	b2d9      	uxtb	r1, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2dc      	uxtb	r4, r3
 8000fb6:	1d7b      	adds	r3, r7, #5
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	0023      	movs	r3, r4
 8000fbc:	f000 fb0e 	bl	80015dc <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fd0:	d9cc      	bls.n	8000f6c <effet_Rainbow_Breathing+0x5c>
	}

	// Write to LED
	++angle;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <effet_Rainbow_Breathing+0xf4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <effet_Rainbow_Breathing+0xf4>)
 8000fe2:	701a      	strb	r2, [r3, #0]
	led_render();
 8000fe4:	f000 fb64 	bl	80016b0 <led_render>
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bcb0      	pop	{r4, r5, r7}
 8000ff0:	bc08      	pop	{r3}
 8000ff2:	b004      	add	sp, #16
 8000ff4:	4718      	bx	r3
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000554 	.word	0x20000554
 8000ffc:	200001f1 	.word	0x200001f1
 8001000:	0800a6f4 	.word	0x0800a6f4
 8001004:	20000555 	.word	0x20000555

08001008 <effet_Key_Responsive>:


void effet_Key_Responsive(LEDS led_param)
{
 8001008:	b084      	sub	sp, #16
 800100a:	b5b0      	push	{r4, r5, r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	2520      	movs	r5, #32
 8001012:	197c      	adds	r4, r7, r5
 8001014:	6020      	str	r0, [r4, #0]
 8001016:	6061      	str	r1, [r4, #4]
 8001018:	60a2      	str	r2, [r4, #8]
 800101a:	60e3      	str	r3, [r4, #12]
	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <effet_Key_Responsive+0xf0>)
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <effet_Key_Responsive+0xf4>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <effet_Key_Responsive+0xf0>)
 800102e:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001030:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <effet_Key_Responsive+0xf0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <effet_Key_Responsive+0x3c>
 8001038:	197b      	adds	r3, r7, r5
 800103a:	785a      	ldrb	r2, [r3, #1]
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <effet_Key_Responsive+0xf0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d108      	bne.n	8001056 <effet_Key_Responsive+0x4e>
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <effet_Key_Responsive+0xf4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	425b      	negs	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b25a      	sxtb	r2, r3
 8001052:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <effet_Key_Responsive+0xf4>)
 8001054:	701a      	strb	r2, [r3, #0]

	// Set all LEDs to the same color with fading
	uint32_t rgb = hsl_to_rgb(led_param.hue, 255, led_param.brightness); // Static hue
 8001056:	2220      	movs	r2, #32
 8001058:	18bb      	adds	r3, r7, r2
 800105a:	7818      	ldrb	r0, [r3, #0]
 800105c:	18bb      	adds	r3, r7, r2
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	001a      	movs	r2, r3
 8001062:	21ff      	movs	r1, #255	@ 0xff
 8001064:	f7ff fd6e 	bl	8000b44 <hsl_to_rgb>
 8001068:	0003      	movs	r3, r0
 800106a:	60bb      	str	r3, [r7, #8]
	uint8_t r = (rgb >> 16) & 0xFF;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	0c1a      	lsrs	r2, r3, #16
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t g = (rgb >> 8) & 0xFF;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	0a1a      	lsrs	r2, r3, #8
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	701a      	strb	r2, [r3, #0]
	uint8_t b = rgb & 0xFF;
 800107c:	1d7b      	adds	r3, r7, #5
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < LED_CNT; i++)
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	e027      	b.n	80010dc <effet_Key_Responsive+0xd4>
	{
		uint8_t led_index = led_map[i];
 800108c:	200f      	movs	r0, #15
 800108e:	183b      	adds	r3, r7, r0
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	491a      	ldr	r1, [pc, #104]	@ (8001100 <effet_Key_Responsive+0xf8>)
 8001096:	5c8a      	ldrb	r2, [r1, r2]
 8001098:	701a      	strb	r2, [r3, #0]

		switch(leds.position[i])
 800109a:	183b      	adds	r3, r7, r0
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <effet_Key_Responsive+0xfc>)
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10b      	bne.n	80010c0 <effet_Key_Responsive+0xb8>
		{
		case true:
			led_set_RGB(led_index, r, g, b);
 80010a8:	1d7b      	adds	r3, r7, #5
 80010aa:	781c      	ldrb	r4, [r3, #0]
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	7818      	ldrb	r0, [r3, #0]
 80010b8:	0023      	movs	r3, r4
 80010ba:	f000 fa8f 	bl	80015dc <led_set_RGB>
			break;
 80010be:	e007      	b.n	80010d0 <effet_Key_Responsive+0xc8>
		case false:
			led_set_RGB(led_index, 0, 0, 0);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	7818      	ldrb	r0, [r3, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	f000 fa87 	bl	80015dc <led_set_RGB>
			break;
 80010ce:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < LED_CNT; i++)
 80010d0:	210f      	movs	r1, #15
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	3201      	adds	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	230f      	movs	r3, #15
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e4:	d9d2      	bls.n	800108c <effet_Key_Responsive+0x84>
		}
	}

	led_render();
 80010e6:	f000 fae3 	bl	80016b0 <led_render>
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bcb0      	pop	{r4, r5, r7}
 80010f2:	bc08      	pop	{r3}
 80010f4:	b004      	add	sp, #16
 80010f6:	4718      	bx	r3
 80010f8:	20000556 	.word	0x20000556
 80010fc:	200001f2 	.word	0x200001f2
 8001100:	0800a6f4 	.word	0x0800a6f4
 8001104:	2000042c 	.word	0x2000042c

08001108 <effet_StaticColor>:


void effet_StaticColor(LEDS led_param)
{
 8001108:	b084      	sub	sp, #16
 800110a:	b5b0      	push	{r4, r5, r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	2518      	movs	r5, #24
 8001112:	197c      	adds	r4, r7, r5
 8001114:	6020      	str	r0, [r4, #0]
 8001116:	6061      	str	r1, [r4, #4]
 8001118:	60a2      	str	r2, [r4, #8]
 800111a:	60e3      	str	r3, [r4, #12]
	uint32_t rgb_color = hsl_to_rgb(led_param.hue, 255, led_param.brightness);
 800111c:	002a      	movs	r2, r5
 800111e:	18bb      	adds	r3, r7, r2
 8001120:	7818      	ldrb	r0, [r3, #0]
 8001122:	18bb      	adds	r3, r7, r2
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	001a      	movs	r2, r3
 8001128:	21ff      	movs	r1, #255	@ 0xff
 800112a:	f7ff fd0b 	bl	8000b44 <hsl_to_rgb>
 800112e:	0003      	movs	r3, r0
 8001130:	607b      	str	r3, [r7, #4]
	led_set_all_RGB((rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	b2d8      	uxtb	r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b2db      	uxtb	r3, r3
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	0019      	movs	r1, r3
 8001144:	f000 fa8c 	bl	8001660 <led_set_all_RGB>
	led_render();
 8001148:	f000 fab2 	bl	80016b0 <led_render>
}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bcb0      	pop	{r4, r5, r7}
 8001154:	bc08      	pop	{r3}
 8001156:	b004      	add	sp, #16
 8001158:	4718      	bx	r3

0800115a <Main_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Main_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
	piloteTimer14_initialise();
 800115e:	f000 fc87 	bl	8001a70 <piloteTimer14_initialise>
	serviceBaseDeTemps_initialise();
 8001162:	f7ff fa85 	bl	8000670 <serviceBaseDeTemps_initialise>
	InterfaceMatrice_Init();
 8001166:	f7ff fb8b 	bl	8000880 <InterfaceMatrice_Init>
	InterfaceDebouncing_Init();
 800116a:	f7ff fb39 	bl	80007e0 <InterfaceDebouncing_Init>
	ProcessusKeys_Init();
 800116e:	f7ff f857 	bl	8000220 <ProcessusKeys_Init>
	ProcessusLEDS_init();
 8001172:	f7ff fa03 	bl	800057c <ProcessusLEDS_init>
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <doNothing>:

void doNothing(void){}
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 fdb3 	bl	8001cf4 <HAL_Init>

  /* USER CODE BEGIN Init */

  Main_Init();
 800118e:	f7ff ffe4 	bl	800115a <Main_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f80e 	bl	80011b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 f923 	bl	80013e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800119a:	f000 f903 	bl	80013a4 <MX_DMA_Init>
  MX_TIM2_Init();
 800119e:	f000 f85d 	bl	800125c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80011a2:	f008 fda3 	bl	8009cec <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 80011a6:	f000 f8d7 	bl	8001358 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  piloteTimer14_permetLesInterruptions();
 80011aa:	f000 fc55 	bl	8001a58 <piloteTimer14_permetLesInterruptions>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	e7fd      	b.n	80011ae <main+0x28>

080011b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b2:	b590      	push	{r4, r7, lr}
 80011b4:	b099      	sub	sp, #100	@ 0x64
 80011b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b8:	242c      	movs	r4, #44	@ 0x2c
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	0018      	movs	r0, r3
 80011be:	2334      	movs	r3, #52	@ 0x34
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f009 fa1a 	bl	800a5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	231c      	movs	r3, #28
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	0018      	movs	r0, r3
 80011ce:	2310      	movs	r3, #16
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f009 fa12 	bl	800a5fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d8:	003b      	movs	r3, r7
 80011da:	0018      	movs	r0, r3
 80011dc:	231c      	movs	r3, #28
 80011de:	001a      	movs	r2, r3
 80011e0:	2100      	movs	r1, #0
 80011e2:	f009 fa0b 	bl	800a5fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2220      	movs	r2, #32
 80011ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2201      	movs	r2, #1
 80011f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	0018      	movs	r0, r3
 80011fc:	f003 f876 	bl	80042ec <HAL_RCC_OscConfig>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001204:	f000 f96e 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	211c      	movs	r1, #28
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2203      	movs	r2, #3
 8001214:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2101      	movs	r1, #1
 8001226:	0018      	movs	r0, r3
 8001228:	f003 fbe6 	bl	80049f8 <HAL_RCC_ClockConfig>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001230:	f000 f958 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001234:	003b      	movs	r3, r7
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	0292      	lsls	r2, r2, #10
 800123a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001242:	003b      	movs	r3, r7
 8001244:	0018      	movs	r0, r3
 8001246:	f003 fd23 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800124e:	f000 f949 	bl	80014e4 <Error_Handler>
  }
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b019      	add	sp, #100	@ 0x64
 8001258:	bd90      	pop	{r4, r7, pc}
	...

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	@ 0x38
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	2328      	movs	r3, #40	@ 0x28
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	0018      	movs	r0, r3
 8001268:	2310      	movs	r3, #16
 800126a:	001a      	movs	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	f009 f9c5 	bl	800a5fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	2320      	movs	r3, #32
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	0018      	movs	r0, r3
 8001278:	2308      	movs	r3, #8
 800127a:	001a      	movs	r2, r3
 800127c:	2100      	movs	r1, #0
 800127e:	f009 f9bd 	bl	800a5fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	0018      	movs	r0, r3
 8001286:	231c      	movs	r3, #28
 8001288:	001a      	movs	r2, r3
 800128a:	2100      	movs	r1, #0
 800128c:	f009 f9b6 	bl	800a5fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001290:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <MX_TIM2_Init+0xf8>)
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	05d2      	lsls	r2, r2, #23
 8001296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <MX_TIM2_Init+0xf8>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012a6:	223b      	movs	r2, #59	@ 0x3b
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f003 fde7 	bl	8004e8c <HAL_TIM_Base_Init>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012c2:	f000 f90f 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	2128      	movs	r1, #40	@ 0x28
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	0152      	lsls	r2, r2, #5
 80012ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d0:	187a      	adds	r2, r7, r1
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f004 fb1c 	bl	8005914 <HAL_TIM_ConfigClockSource>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012e0:	f000 f900 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <MX_TIM2_Init+0xf8>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f003 fe72 	bl	8004fd0 <HAL_TIM_PWM_Init>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012f0:	f000 f8f8 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2120      	movs	r1, #32
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001302:	187a      	adds	r2, r7, r1
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <MX_TIM2_Init+0xf8>)
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f005 f813 	bl	8006334 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001312:	f000 f8e7 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2260      	movs	r2, #96	@ 0x60
 800131a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d39      	adds	r1, r7, #4
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_TIM2_Init+0xf8>)
 8001332:	2200      	movs	r2, #0
 8001334:	0018      	movs	r0, r3
 8001336:	f004 fa27 	bl	8005788 <HAL_TIM_PWM_ConfigChannel>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800133e:	f000 f8d1 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <MX_TIM2_Init+0xf8>)
 8001344:	0018      	movs	r0, r3
 8001346:	f000 fc29 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b00e      	add	sp, #56	@ 0x38
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	20000558 	.word	0x20000558

08001358 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_TIM14_Init+0x40>)
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <MX_TIM14_Init+0x44>)
 8001360:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_TIM14_Init+0x40>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_TIM14_Init+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_TIM14_Init+0x40>)
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <MX_TIM14_Init+0x48>)
 8001372:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_TIM14_Init+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_TIM14_Init+0x40>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <MX_TIM14_Init+0x40>)
 8001382:	0018      	movs	r0, r3
 8001384:	f003 fd82 	bl	8004e8c <HAL_TIM_Base_Init>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800138c:	f000 f8aa 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	200005a0 	.word	0x200005a0
 800139c:	40002000 	.word	0x40002000
 80013a0:	0000ffff 	.word	0x0000ffff

080013a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_DMA_Init+0x38>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_DMA_Init+0x38>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_DMA_Init+0x38>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	200b      	movs	r0, #11
 80013c8:	f000 fda4 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80013cc:	200b      	movs	r0, #11
 80013ce:	f000 fdb6 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	40021000 	.word	0x40021000

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b089      	sub	sp, #36	@ 0x24
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	240c      	movs	r4, #12
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	0018      	movs	r0, r3
 80013ec:	2314      	movs	r3, #20
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f009 f903 	bl	800a5fc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	0289      	lsls	r1, r1, #10
 8001400:	430a      	orrs	r2, r1
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	029b      	lsls	r3, r3, #10
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	02c9      	lsls	r1, r1, #11
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <MX_GPIO_Init+0xf8>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	02db      	lsls	r3, r3, #11
 8001428:	4013      	ands	r3, r2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 800142e:	2390      	movs	r3, #144	@ 0x90
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	2200      	movs	r2, #0
 8001434:	211f      	movs	r1, #31
 8001436:	0018      	movs	r0, r3
 8001438:	f001 f911 	bl	800265e <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 800143c:	193b      	adds	r3, r7, r4
 800143e:	221f      	movs	r2, #31
 8001440:	601a      	str	r2, [r3, #0]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	193b      	adds	r3, r7, r4
 8001444:	2201      	movs	r2, #1
 8001446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	193b      	adds	r3, r7, r4
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	193a      	adds	r2, r7, r4
 8001456:	2390      	movs	r3, #144	@ 0x90
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 ff69 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDS_STAT_Pin */
  GPIO_InitStruct.Pin = LEDS_STAT_Pin;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	193b      	adds	r3, r7, r4
 800146a:	2202      	movs	r2, #2
 800146c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	193b      	adds	r3, r7, r4
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2201      	movs	r2, #1
 800147e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(LEDS_STAT_GPIO_Port, &GPIO_InitStruct);
 8001480:	193a      	adds	r2, r7, r4
 8001482:	2390      	movs	r3, #144	@ 0x90
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f000 ff53 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OS1_Pin OS2_Pin OS3_Pin */
  GPIO_InitStruct.Pin = OS1_Pin|OS2_Pin|OS3_Pin;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	22e0      	movs	r2, #224	@ 0xe0
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2288      	movs	r2, #136	@ 0x88
 800149a:	0352      	lsls	r2, r2, #13
 800149c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	193a      	adds	r2, r7, r4
 80014a6:	2390      	movs	r3, #144	@ 0x90
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 ff41 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL11_Pin
                           COL12_Pin COL13_Pin COL14_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           COL9_Pin COL10_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL11_Pin
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <MX_GPIO_Init+0xfc>)
 80014b6:	601a      	str	r2, [r3, #0]
                          |COL12_Pin|COL13_Pin|COL14_Pin|COL4_Pin
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |COL9_Pin|COL10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2201      	movs	r2, #1
 80014c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <MX_GPIO_Init+0x100>)
 80014c8:	0019      	movs	r1, r3
 80014ca:	0010      	movs	r0, r2
 80014cc:	f000 ff32 	bl	8002334 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b009      	add	sp, #36	@ 0x24
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	00003fff 	.word	0x00003fff
 80014e0:	48000400 	.word	0x48000400

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	e7fd      	b.n	80014ec <Error_Handler+0x8>

080014f0 <Read_Col>:

uint16_t col_pin[NUM_COLS] = { COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,
							COL10, COL11, COL12, COL13, COL14 };

bool Read_Col(uint16_t col_index)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	801a      	strh	r2, [r3, #0]
	return HAL_GPIO_ReadPin(COL_PORT, col_pin[col_index]);
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <Read_Col+0x30>)
 8001502:	0052      	lsls	r2, r2, #1
 8001504:	5ad3      	ldrh	r3, [r2, r3]
 8001506:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <Read_Col+0x34>)
 8001508:	0019      	movs	r1, r3
 800150a:	0010      	movs	r0, r2
 800150c:	f001 f88a 	bl	8002624 <HAL_GPIO_ReadPin>
 8001510:	0003      	movs	r3, r0
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	4193      	sbcs	r3, r2
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f4 	.word	0x200001f4
 8001524:	48000400 	.word	0x48000400

08001528 <Set_Row>:
#include "pilote_ROW.h"

uint16_t row_pin[NUM_ROWS] = { ROW1, ROW2, ROW3, ROW4, ROW5};

void Set_Row(uint16_t row_index)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_SET);
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <Set_Row+0x2c>)
 800153a:	0052      	lsls	r2, r2, #1
 800153c:	5ad1      	ldrh	r1, [r2, r3]
 800153e:	2390      	movs	r3, #144	@ 0x90
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	2201      	movs	r2, #1
 8001544:	0018      	movs	r0, r3
 8001546:	f001 f88a 	bl	800265e <HAL_GPIO_WritePin>
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	20000210 	.word	0x20000210

08001558 <Reset_Row>:

void Reset_Row(uint16_t row_index)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_RESET);
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <Reset_Row+0x2c>)
 800156a:	0052      	lsls	r2, r2, #1
 800156c:	5ad1      	ldrh	r1, [r2, r3]
 800156e:	2390      	movs	r3, #144	@ 0x90
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	2200      	movs	r2, #0
 8001574:	0018      	movs	r0, r3
 8001576:	f001 f872 	bl	800265e <HAL_GPIO_WritePin>
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	20000210 	.word	0x20000210

08001588 <Set_All_Rows>:

void Set_All_Rows(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	e007      	b.n	80015a4 <Set_All_Rows+0x1c>
	{
		Set_Row(i);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff ffc5 	bl	8001528 <Set_Row>
	for(int i = 0; i < NUM_ROWS; i++)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	ddf4      	ble.n	8001594 <Set_All_Rows+0xc>
	}
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <scale8>:
// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	0002      	movs	r2, r0
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	1c0a      	adds	r2, r1, #0
 80015c4:	701a      	strb	r2, [r3, #0]
  return ((uint16_t)x * scale) >> 8;
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	1dba      	adds	r2, r7, #6
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	4353      	muls	r3, r2
 80015d0:	121b      	asrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <led_set_RGB>:


// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	0005      	movs	r5, r0
 80015e4:	000c      	movs	r4, r1
 80015e6:	0010      	movs	r0, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	1c2a      	adds	r2, r5, #0
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	1c22      	adds	r2, r4, #0
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	1d7b      	adds	r3, r7, #5
 80015f8:	1c02      	adds	r2, r0, #0
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	1c0a      	adds	r2, r1, #0
 8001600:	701a      	strb	r2, [r3, #0]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	0013      	movs	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	189c      	adds	r4, r3, r2
 800160c:	1d7b      	adds	r3, r7, #5
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	21b0      	movs	r1, #176	@ 0xb0
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff ffce 	bl	80015b4 <scale8>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <led_set_RGB+0x80>)
 800161e:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	0013      	movs	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	189b      	adds	r3, r3, r2
 800162a:	3301      	adds	r3, #1
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <led_set_RGB+0x80>)
 800162e:	1db9      	adds	r1, r7, #6
 8001630:	7809      	ldrb	r1, [r1, #0]
 8001632:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	0013      	movs	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	189b      	adds	r3, r3, r2
 800163e:	1c9c      	adds	r4, r3, #2
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	21f0      	movs	r1, #240	@ 0xf0
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff ffb4 	bl	80015b4 <scale8>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <led_set_RGB+0x80>)
 8001652:	551a      	strb	r2, [r3, r4]
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	2000062c 	.word	0x2000062c

08001660 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	0004      	movs	r4, r0
 8001668:	0008      	movs	r0, r1
 800166a:	0011      	movs	r1, r2
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	1c22      	adds	r2, r4, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	1dbb      	adds	r3, r7, #6
 8001674:	1c02      	adds	r2, r0, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	1d7b      	adds	r3, r7, #5
 800167a:	1c0a      	adds	r2, r1, #0
 800167c:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < LED_CNT; ++i) led_set_RGB(i, r, g, b);
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e00d      	b.n	80016a0 <led_set_all_RGB+0x40>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	b2d8      	uxtb	r0, r3
 8001688:	1d7b      	adds	r3, r7, #5
 800168a:	781c      	ldrb	r4, [r3, #0]
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	0023      	movs	r3, r4
 8001696:	f7ff ffa1 	bl	80015dc <led_set_RGB>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3301      	adds	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80016a4:	d9ee      	bls.n	8001684 <led_set_all_RGB+0x24>
}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b005      	add	sp, #20
 80016ae:	bd90      	pop	{r4, r7, pc}

080016b0 <led_render>:

// Shuttle the data to the LEDs!
void led_render()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 80016b6:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <led_render+0x148>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <led_render+0x1a>
 80016be:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <led_render+0x14c>)
 80016c0:	2221      	movs	r2, #33	@ 0x21
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d01a      	beq.n	8001700 <led_render+0x50>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e009      	b.n	80016e6 <led_render+0x36>
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001800 <led_render+0x150>)
 80016d8:	2100      	movs	r1, #0
 80016da:	54d1      	strb	r1, [r2, r3]
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	1dfa      	adds	r2, r7, #7
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	3201      	adds	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80016ec:	d9f1      	bls.n	80016d2 <led_render+0x22>
    wr_buf_p = 0;
 80016ee:	4b42      	ldr	r3, [pc, #264]	@ (80017f8 <led_render+0x148>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80016f4:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <led_render+0x154>)
 80016f6:	2100      	movs	r1, #0
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 fe77 	bl	80053ec <HAL_TIM_PWM_Stop_DMA>
    return;
 80016fe:	e078      	b.n	80017f2 <led_render+0x142>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	e069      	b.n	80017da <led_render+0x12a>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001706:	4b40      	ldr	r3, [pc, #256]	@ (8001808 <led_render+0x158>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	001a      	movs	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	2280      	movs	r2, #128	@ 0x80
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	dd01      	ble.n	800171e <led_render+0x6e>
 800171a:	2126      	movs	r1, #38	@ 0x26
 800171c:	e000      	b.n	8001720 <led_render+0x70>
 800171e:	2113      	movs	r1, #19
 8001720:	4a37      	ldr	r2, [pc, #220]	@ (8001800 <led_render+0x150>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	1c0a      	adds	r2, r1, #0
 8001728:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <led_render+0x158>)
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	001a      	movs	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	2280      	movs	r2, #128	@ 0x80
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd01      	ble.n	8001742 <led_render+0x92>
 800173e:	2126      	movs	r1, #38	@ 0x26
 8001740:	e000      	b.n	8001744 <led_render+0x94>
 8001742:	2113      	movs	r1, #19
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3308      	adds	r3, #8
 8001748:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <led_render+0x150>)
 800174a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <led_render+0x158>)
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	001a      	movs	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	dd01      	ble.n	8001764 <led_render+0xb4>
 8001760:	2126      	movs	r1, #38	@ 0x26
 8001762:	e000      	b.n	8001766 <led_render+0xb6>
 8001764:	2113      	movs	r1, #19
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3310      	adds	r3, #16
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <led_render+0x150>)
 800176c:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <led_render+0x158>)
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	001a      	movs	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd01      	ble.n	8001786 <led_render+0xd6>
 8001782:	2126      	movs	r1, #38	@ 0x26
 8001784:	e000      	b.n	8001788 <led_render+0xd8>
 8001786:	2113      	movs	r1, #19
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3318      	adds	r3, #24
 800178c:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <led_render+0x150>)
 800178e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <led_render+0x158>)
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	001a      	movs	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	409a      	lsls	r2, r3
 800179a:	0013      	movs	r3, r2
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd01      	ble.n	80017a8 <led_render+0xf8>
 80017a4:	2126      	movs	r1, #38	@ 0x26
 80017a6:	e000      	b.n	80017aa <led_render+0xfa>
 80017a8:	2113      	movs	r1, #19
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3320      	adds	r3, #32
 80017ae:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <led_render+0x150>)
 80017b0:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <led_render+0x158>)
 80017b4:	795b      	ldrb	r3, [r3, #5]
 80017b6:	001a      	movs	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	dd01      	ble.n	80017ca <led_render+0x11a>
 80017c6:	2126      	movs	r1, #38	@ 0x26
 80017c8:	e000      	b.n	80017cc <led_render+0x11c>
 80017ca:	2113      	movs	r1, #19
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3328      	adds	r3, #40	@ 0x28
 80017d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <led_render+0x150>)
 80017d2:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d992      	bls.n	8001706 <led_render+0x56>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <led_render+0x150>)
 80017e2:	4808      	ldr	r0, [pc, #32]	@ (8001804 <led_render+0x154>)
 80017e4:	2330      	movs	r3, #48	@ 0x30
 80017e6:	2100      	movs	r1, #0
 80017e8:	f003 fc4a 	bl	8005080 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80017ec:	4b02      	ldr	r3, [pc, #8]	@ (80017f8 <led_render+0x148>)
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
}
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000071c 	.word	0x2000071c
 80017fc:	200005e8 	.word	0x200005e8
 8001800:	200006ec 	.word	0x200006ec
 8001804:	20000558 	.word	0x20000558
 8001808:	2000062c 	.word	0x2000062c

0800180c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001814:	4b3c      	ldr	r3, [pc, #240]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b3f      	cmp	r3, #63	@ 0x3f
 800181a:	d853      	bhi.n	80018c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e047      	b.n	80018b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001822:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	0013      	movs	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	189b      	adds	r3, r3, r2
 800182c:	4a37      	ldr	r2, [pc, #220]	@ (800190c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	001a      	movs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	409a      	lsls	r2, r3
 8001836:	0013      	movs	r3, r2
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	dd01      	ble.n	8001844 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001840:	2126      	movs	r1, #38	@ 0x26
 8001842:	e000      	b.n	8001846 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001844:	2113      	movs	r1, #19
 8001846:	4a32      	ldr	r2, [pc, #200]	@ (8001910 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	18d3      	adds	r3, r2, r3
 800184c:	1c0a      	adds	r2, r1, #0
 800184e:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001850:	4b2d      	ldr	r3, [pc, #180]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	0013      	movs	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	189b      	adds	r3, r3, r2
 800185a:	3301      	adds	r3, #1
 800185c:	4a2b      	ldr	r2, [pc, #172]	@ (800190c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	001a      	movs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	409a      	lsls	r2, r3
 8001866:	0013      	movs	r3, r2
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd01      	ble.n	8001874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001870:	2126      	movs	r1, #38	@ 0x26
 8001872:	e000      	b.n	8001876 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001874:	2113      	movs	r1, #19
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3308      	adds	r3, #8
 800187a:	4a25      	ldr	r2, [pc, #148]	@ (8001910 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 800187c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	0013      	movs	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	189b      	adds	r3, r3, r2
 8001888:	3302      	adds	r3, #2
 800188a:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	001a      	movs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd01      	ble.n	80018a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800189e:	2126      	movs	r1, #38	@ 0x26
 80018a0:	e000      	b.n	80018a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80018a2:	2113      	movs	r1, #19
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3310      	adds	r3, #16
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80018aa:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b07      	cmp	r3, #7
 80018b6:	d9b4      	bls.n	8001822 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80018c0:	601a      	str	r2, [r3, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80018c2:	e01d      	b.n	8001900 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
  } else if (wr_buf_p < LED_CNT + 2) {
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b41      	cmp	r3, #65	@ 0x41
 80018ca:	d819      	bhi.n	8001900 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80018cc:	230b      	movs	r3, #11
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e00a      	b.n	80018ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>
 80018d6:	200b      	movs	r0, #11
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 80018de:	2100      	movs	r1, #0
 80018e0:	54d1      	strb	r1, [r2, r3]
 80018e2:	183b      	adds	r3, r7, r0
 80018e4:	183a      	adds	r2, r7, r0
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	3201      	adds	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	230b      	movs	r3, #11
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b17      	cmp	r3, #23
 80018f4:	d9ef      	bls.n	80018d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xca>
    wr_buf_p++;
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	4b02      	ldr	r3, [pc, #8]	@ (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	46c0      	nop			@ (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000071c 	.word	0x2000071c
 800190c:	2000062c 	.word	0x2000062c
 8001910:	200006ec 	.word	0x200006ec

08001914 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 800191c:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b3f      	cmp	r3, #63	@ 0x3f
 8001922:	d852      	bhi.n	80019ca <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    //Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e046      	b.n	80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800192a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	0013      	movs	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	189b      	adds	r3, r3, r2
 8001934:	4a3b      	ldr	r2, [pc, #236]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	001a      	movs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	409a      	lsls	r2, r3
 800193e:	0013      	movs	r3, r2
 8001940:	2280      	movs	r2, #128	@ 0x80
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	dd01      	ble.n	800194c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001948:	2126      	movs	r1, #38	@ 0x26
 800194a:	e000      	b.n	800194e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800194c:	2113      	movs	r1, #19
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3318      	adds	r3, #24
 8001952:	4a35      	ldr	r2, [pc, #212]	@ (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001954:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001956:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	0013      	movs	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	189b      	adds	r3, r3, r2
 8001960:	3301      	adds	r3, #1
 8001962:	4a30      	ldr	r2, [pc, #192]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	001a      	movs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	dd01      	ble.n	800197a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001976:	2126      	movs	r1, #38	@ 0x26
 8001978:	e000      	b.n	800197c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800197a:	2113      	movs	r1, #19
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3320      	adds	r3, #32
 8001980:	4a29      	ldr	r2, [pc, #164]	@ (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001982:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001984:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	0013      	movs	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	189b      	adds	r3, r3, r2
 800198e:	3302      	adds	r3, #2
 8001990:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	001a      	movs	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dd01      	ble.n	80019a8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80019a4:	2126      	movs	r1, #38	@ 0x26
 80019a6:	e000      	b.n	80019aa <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80019a8:	2113      	movs	r1, #19
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3328      	adds	r3, #40	@ 0x28
 80019ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80019b0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	d9b5      	bls.n	800192a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80019c6:	601a      	str	r2, [r3, #0]
  } else {

    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80019c8:	e026      	b.n	8001a18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
  } else if (wr_buf_p < LED_CNT + 2) {
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b41      	cmp	r3, #65	@ 0x41
 80019d0:	d81a      	bhi.n	8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80019d2:	230b      	movs	r3, #11
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2218      	movs	r2, #24
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e00a      	b.n	80019f2 <HAL_TIM_PWM_PulseFinishedCallback+0xde>
 80019dc:	200b      	movs	r0, #11
 80019de:	183b      	adds	r3, r7, r0
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	54d1      	strb	r1, [r2, r3]
 80019e8:	183b      	adds	r3, r7, r0
 80019ea:	183a      	adds	r2, r7, r0
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	3201      	adds	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	230b      	movs	r3, #11
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80019fa:	d9ef      	bls.n	80019dc <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
    ++wr_buf_p;
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	e007      	b.n	8001a18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
    wr_buf_p = 0;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001a10:	2100      	movs	r1, #0
 8001a12:	0018      	movs	r0, r3
 8001a14:	f003 fcea 	bl	80053ec <HAL_TIM_PWM_Stop_DMA>
}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000071c 	.word	0x2000071c
 8001a24:	2000062c 	.word	0x2000062c
 8001a28:	200006ec 	.word	0x200006ec
 8001a2c:	20000558 	.word	0x20000558

08001a30 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer14_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d102      	bne.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  piloteTimer14_execute();
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4798      	blx	r3
  }
}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	200005a0 	.word	0x200005a0
 8001a54:	20000720 	.word	0x20000720

08001a58 <piloteTimer14_permetLesInterruptions>:

void piloteTimer14_permetLesInterruptions(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim14);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <piloteTimer14_permetLesInterruptions+0x14>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f003 fa64 	bl	8004f2c <HAL_TIM_Base_Start_IT>
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	200005a0 	.word	0x200005a0

08001a70 <piloteTimer14_initialise>:

void piloteTimer14_initialise(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  piloteTimer14_execute = doNothing;
 8001a74:	4b02      	ldr	r3, [pc, #8]	@ (8001a80 <piloteTimer14_initialise+0x10>)
 8001a76:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <piloteTimer14_initialise+0x14>)
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000720 	.word	0x20000720
 8001a84:	0800117d 	.word	0x0800117d

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_MspInit+0x44>)
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <HAL_MspInit+0x44>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_MspInit+0x44>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x44>)
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_MspInit+0x44>)
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0549      	lsls	r1, r1, #21
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	61da      	str	r2, [r3, #28]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_MspInit+0x44>)
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	055b      	lsls	r3, r3, #21
 8001abc:	4013      	ands	r3, r2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d133      	bne.n	8001b4c <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae4:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	61da      	str	r2, [r3, #28]
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001afe:	4a25      	ldr	r2, [pc, #148]	@ (8001b94 <HAL_TIM_Base_MspInit+0xc4>)
 8001b00:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b04:	2210      	movs	r2, #16
 8001b06:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b24:	2220      	movs	r2, #32
 8001b26:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fa21 	bl	8001f78 <HAL_DMA_Init>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001b3a:	f7ff fcd3 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b4a:	e01a      	b.n	8001b82 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM14)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <HAL_TIM_Base_MspInit+0xc8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0049      	lsls	r1, r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2102      	movs	r1, #2
 8001b76:	2013      	movs	r0, #19
 8001b78:	f000 f9cc 	bl	8001f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b7c:	2013      	movs	r0, #19
 8001b7e:	f000 f9de 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	200005e8 	.word	0x200005e8
 8001b94:	40020058 	.word	0x40020058
 8001b98:	40002000 	.word	0x40002000

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	240c      	movs	r4, #12
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	0018      	movs	r0, r3
 8001baa:	2314      	movs	r3, #20
 8001bac:	001a      	movs	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f008 fd24 	bl	800a5fc <memset>
  if(htim->Instance==TIM2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	05db      	lsls	r3, r3, #23
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d125      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0289      	lsls	r1, r1, #10
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_TIM_MspPostInit+0x78>)
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_OUT_Pin;
 8001bdc:	193b      	adds	r3, r7, r4
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	0212      	lsls	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	0021      	movs	r1, r4
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2202      	movs	r2, #2
 8001bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	187a      	adds	r2, r7, r1
 8001c00:	2390      	movs	r3, #144	@ 0x90
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fb94 	bl	8002334 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b009      	add	sp, #36	@ 0x24
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	40021000 	.word	0x40021000

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	46c0      	nop			@ (mov r8, r8)
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 f8a0 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fa83 	bl	800215e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	200005e8 	.word	0x200005e8

08001c64 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <TIM14_IRQHandler+0x14>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f003 fc9e 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	200005a0 	.word	0x200005a0

08001c7c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <USB_IRQHandler+0x14>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fe22 	bl	80028cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	20000bf0 	.word	0x20000bf0

08001c94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <Reset_Handler>:
 8001ca0:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <LoopForever+0x2>)
 8001ca2:	4685      	mov	sp, r0
 8001ca4:	f7ff fff6 	bl	8001c94 <SystemInit>
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopForever+0x6>)
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopForever+0xa>)
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopForever+0xe>)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:
 8001cb2:	58d4      	ldr	r4, [r2, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:
 8001cb8:	18c4      	adds	r4, r0, r3
 8001cba:	428c      	cmp	r4, r1
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopForever+0x12>)
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopForever+0x16>)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:
 8001cca:	42a2      	cmp	r2, r4
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>
 8001cce:	f008 fc9d 	bl	800a60c <__libc_init_array>
 8001cd2:	f7ff fa58 	bl	8001186 <main>

08001cd6 <LoopForever>:
 8001cd6:	e7fe      	b.n	8001cd6 <LoopForever>
 8001cd8:	20004000 	.word	0x20004000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	200003a8 	.word	0x200003a8
 8001ce4:	0800a7e0 	.word	0x0800a7e0
 8001ce8:	200003a8 	.word	0x200003a8
 8001cec:	20000ee0 	.word	0x20000ee0

08001cf0 <ADC1_COMP_IRQHandler>:
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_COMP_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_Init+0x24>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_Init+0x24>)
 8001cfe:	2110      	movs	r1, #16
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 f809 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0a:	f7ff febd 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_InitTick+0x5c>)
 8001d26:	681c      	ldr	r4, [r3, #0]
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <HAL_InitTick+0x60>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	23fa      	movs	r3, #250	@ 0xfa
 8001d30:	0098      	lsls	r0, r3, #2
 8001d32:	f7fe f9e9 	bl	8000108 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	0019      	movs	r1, r3
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f7fe f9e4 	bl	8000108 <__udivsi3>
 8001d40:	0003      	movs	r3, r0
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f90b 	bl	8001f5e <HAL_SYSTICK_Config>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e00f      	b.n	8001d70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d80b      	bhi.n	8001d6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	425b      	negs	r3, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f8d8 	bl	8001f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_InitTick+0x64>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b003      	add	sp, #12
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	2000021c 	.word	0x2000021c
 8001d7c:	20000224 	.word	0x20000224
 8001d80:	20000220 	.word	0x20000220

08001d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_IncTick+0x1c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_IncTick+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	18d2      	adds	r2, r2, r3
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_IncTick+0x20>)
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	20000224 	.word	0x20000224
 8001da4:	20000724 	.word	0x20000724

08001da8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b02      	ldr	r3, [pc, #8]	@ (8001db8 <HAL_GetTick+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	20000724 	.word	0x20000724

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dce:	d809      	bhi.n	8001de4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_EnableIRQ+0x30>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4091      	lsls	r1, r2
 8001de0:	000a      	movs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
  }
}
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	0002      	movs	r2, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e04:	d828      	bhi.n	8001e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <__NVIC_SetPriority+0xd4>)
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	33c0      	adds	r3, #192	@ 0xc0
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	589b      	ldr	r3, [r3, r2]
 8001e16:	1dfa      	adds	r2, r7, #7
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	400a      	ands	r2, r1
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	21ff      	movs	r1, #255	@ 0xff
 8001e24:	4091      	lsls	r1, r2
 8001e26:	000a      	movs	r2, r1
 8001e28:	43d2      	mvns	r2, r2
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	22ff      	movs	r2, #255	@ 0xff
 8001e34:	401a      	ands	r2, r3
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	4003      	ands	r3, r0
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e44:	481f      	ldr	r0, [pc, #124]	@ (8001ec4 <__NVIC_SetPriority+0xd4>)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	33c0      	adds	r3, #192	@ 0xc0
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e56:	e031      	b.n	8001ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <__NVIC_SetPriority+0xd8>)
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	0019      	movs	r1, r3
 8001e60:	230f      	movs	r3, #15
 8001e62:	400b      	ands	r3, r1
 8001e64:	3b08      	subs	r3, #8
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3306      	adds	r3, #6
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	3304      	adds	r3, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	1dfa      	adds	r2, r7, #7
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	0011      	movs	r1, r2
 8001e78:	2203      	movs	r2, #3
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	00d2      	lsls	r2, r2, #3
 8001e7e:	21ff      	movs	r1, #255	@ 0xff
 8001e80:	4091      	lsls	r1, r2
 8001e82:	000a      	movs	r2, r1
 8001e84:	43d2      	mvns	r2, r2
 8001e86:	401a      	ands	r2, r3
 8001e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	22ff      	movs	r2, #255	@ 0xff
 8001e90:	401a      	ands	r2, r3
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	0018      	movs	r0, r3
 8001e98:	2303      	movs	r3, #3
 8001e9a:	4003      	ands	r3, r0
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea0:	4809      	ldr	r0, [pc, #36]	@ (8001ec8 <__NVIC_SetPriority+0xd8>)
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	4023      	ands	r3, r4
 8001eac:	3b08      	subs	r3, #8
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	3306      	adds	r3, #6
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	18c3      	adds	r3, r0, r3
 8001eb8:	3304      	adds	r3, #4
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	045b      	lsls	r3, r3, #17
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d301      	bcc.n	8001ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e010      	b.n	8001f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <SysTick_Config+0x44>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	3a01      	subs	r2, #1
 8001eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eec:	2301      	movs	r3, #1
 8001eee:	425b      	negs	r3, r3
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff ff7c 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <SysTick_Config+0x44>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <SysTick_Config+0x44>)
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	210f      	movs	r1, #15
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	0002      	movs	r2, r0
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff33 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff ffaf 	bl	8001ecc <SysTick_Config>
 8001f6e:	0003      	movs	r3, r0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e036      	b.n	8001ffc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2221      	movs	r2, #33	@ 0x21
 8001f92:	2102      	movs	r1, #2
 8001f94:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <HAL_DMA_Init+0x8c>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f98c 	bl	80022fc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2221      	movs	r2, #33	@ 0x21
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}
 8002004:	ffffc00f 	.word	0xffffc00f

08002008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2317      	movs	r3, #23
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	5c9b      	ldrb	r3, [r3, r2]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_DMA_Start_IT+0x24>
 8002028:	2302      	movs	r3, #2
 800202a:	e04f      	b.n	80020cc <HAL_DMA_Start_IT+0xc4>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2221      	movs	r2, #33	@ 0x21
 8002038:	5c9b      	ldrb	r3, [r3, r2]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d13a      	bne.n	80020b6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2221      	movs	r2, #33	@ 0x21
 8002044:	2102      	movs	r1, #2
 8002046:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	438a      	bics	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f91c 	bl	80022a2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	210e      	movs	r1, #14
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00f      	b.n	80020a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	210a      	movs	r1, #10
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2104      	movs	r1, #4
 80020a0:	438a      	bics	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e007      	b.n	80020c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020be:	2317      	movs	r3, #23
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2202      	movs	r2, #2
 80020c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	781b      	ldrb	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	210f      	movs	r1, #15
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2221      	movs	r2, #33	@ 0x21
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d006      	beq.n	80020fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e028      	b.n	8002150 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	210e      	movs	r1, #14
 800210a:	438a      	bics	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	438a      	bics	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002126:	2101      	movs	r1, #1
 8002128:	4091      	lsls	r1, r2
 800212a:	000a      	movs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2221      	movs	r2, #33	@ 0x21
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	0010      	movs	r0, r2
 800214e:	4798      	blx	r3
    }
  }
  return status;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2204      	movs	r2, #4
 800217c:	409a      	lsls	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	d024      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x72>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2204      	movs	r2, #4
 800218a:	4013      	ands	r3, r2
 800218c:	d020      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2220      	movs	r2, #32
 8002196:	4013      	ands	r3, r2
 8002198:	d107      	bne.n	80021aa <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2104      	movs	r1, #4
 80021a6:	438a      	bics	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b2:	2104      	movs	r1, #4
 80021b4:	4091      	lsls	r1, r2
 80021b6:	000a      	movs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d100      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x66>
 80021c2:	e06a      	b.n	800229a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	0010      	movs	r0, r2
 80021cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021ce:	e064      	b.n	800229a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	2202      	movs	r2, #2
 80021d6:	409a      	lsls	r2, r3
 80021d8:	0013      	movs	r3, r2
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	d02b      	beq.n	8002238 <HAL_DMA_IRQHandler+0xda>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2220      	movs	r2, #32
 80021f0:	4013      	ands	r3, r2
 80021f2:	d10b      	bne.n	800220c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	210a      	movs	r1, #10
 8002200:	438a      	bics	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2221      	movs	r2, #33	@ 0x21
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	2102      	movs	r1, #2
 8002216:	4091      	lsls	r1, r2
 8002218:	000a      	movs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	2100      	movs	r1, #0
 8002222:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	0010      	movs	r0, r2
 8002234:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002236:	e030      	b.n	800229a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	2208      	movs	r2, #8
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	d028      	beq.n	800229a <HAL_DMA_IRQHandler+0x13c>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2208      	movs	r2, #8
 800224c:	4013      	ands	r3, r2
 800224e:	d024      	beq.n	800229a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	210e      	movs	r1, #14
 800225c:	438a      	bics	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	4091      	lsls	r1, r2
 800226c:	000a      	movs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	@ 0x21
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	0010      	movs	r0, r2
 8002296:	4798      	blx	r3
    }
  }
}
 8002298:	e7ff      	b.n	800229a <HAL_DMA_IRQHandler+0x13c>
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b8:	2101      	movs	r1, #1
 80022ba:	4091      	lsls	r1, r2
 80022bc:	000a      	movs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d108      	bne.n	80022e2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022e0:	e007      	b.n	80022f2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	60da      	str	r2, [r3, #12]
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a08      	ldr	r2, [pc, #32]	@ (800232c <DMA_CalcBaseAndBitshift+0x30>)
 800230a:	4694      	mov	ip, r2
 800230c:	4463      	add	r3, ip
 800230e:	2114      	movs	r1, #20
 8002310:	0018      	movs	r0, r3
 8002312:	f7fd fef9 	bl	8000108 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a03      	ldr	r2, [pc, #12]	@ (8002330 <DMA_CalcBaseAndBitshift+0x34>)
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}
 800232c:	bffdfff8 	.word	0xbffdfff8
 8002330:	40020000 	.word	0x40020000

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e155      	b.n	80025f0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d100      	bne.n	800235c <HAL_GPIO_Init+0x28>
 800235a:	e146      	b.n	80025ea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	4013      	ands	r3, r2
 8002364:	2b01      	cmp	r3, #1
 8002366:	d005      	beq.n	8002374 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002370:	2b02      	cmp	r3, #2
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	409a      	lsls	r2, r3
 8002396:	0013      	movs	r3, r2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
 80023b0:	0013      	movs	r3, r2
 80023b2:	43da      	mvns	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	2201      	movs	r2, #1
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	4013      	ands	r3, r2
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d017      	beq.n	8002412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	409a      	lsls	r2, r3
 80023f0:	0013      	movs	r3, r2
 80023f2:	43da      	mvns	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	4013      	ands	r3, r2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d123      	bne.n	8002466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	58d3      	ldr	r3, [r2, r3]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2207      	movs	r2, #7
 8002430:	4013      	ands	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2107      	movs	r1, #7
 800244a:	400b      	ands	r3, r1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	6939      	ldr	r1, [r7, #16]
 8002464:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	409a      	lsls	r2, r3
 8002474:	0013      	movs	r3, r2
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2203      	movs	r2, #3
 8002484:	401a      	ands	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	0013      	movs	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	23c0      	movs	r3, #192	@ 0xc0
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	4013      	ands	r3, r2
 80024a4:	d100      	bne.n	80024a8 <HAL_GPIO_Init+0x174>
 80024a6:	e0a0      	b.n	80025ea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_GPIO_Init+0x2d4>)
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	4b56      	ldr	r3, [pc, #344]	@ (8002608 <HAL_GPIO_Init+0x2d4>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	619a      	str	r2, [r3, #24]
 80024b4:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <HAL_GPIO_Init+0x2d4>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c0:	4a52      	ldr	r2, [pc, #328]	@ (800260c <HAL_GPIO_Init+0x2d8>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	589b      	ldr	r3, [r3, r2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4013      	ands	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	43da      	mvns	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	2390      	movs	r3, #144	@ 0x90
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x1ee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a47      	ldr	r2, [pc, #284]	@ (8002610 <HAL_GPIO_Init+0x2dc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x1ea>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a46      	ldr	r2, [pc, #280]	@ (8002614 <HAL_GPIO_Init+0x2e0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x1e6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a45      	ldr	r2, [pc, #276]	@ (8002618 <HAL_GPIO_Init+0x2e4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a44      	ldr	r2, [pc, #272]	@ (800261c <HAL_GPIO_Init+0x2e8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x1de>
 800250e:	2304      	movs	r3, #4
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x1f0>
 8002512:	2305      	movs	r3, #5
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x1f0>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x1f0>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x1f0>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x1f0>
 8002522:	2300      	movs	r3, #0
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	2103      	movs	r1, #3
 8002528:	400a      	ands	r2, r1
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002534:	4935      	ldr	r1, [pc, #212]	@ (800260c <HAL_GPIO_Init+0x2d8>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002542:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43da      	mvns	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	035b      	lsls	r3, r3, #13
 800255a:	4013      	ands	r3, r2
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800256c:	4b2c      	ldr	r3, [pc, #176]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43da      	mvns	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	039b      	lsls	r3, r3, #14
 8002584:	4013      	ands	r3, r2
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002596:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43da      	mvns	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	4013      	ands	r3, r2
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80025c0:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	025b      	lsls	r3, r3, #9
 80025d8:	4013      	ands	r3, r2
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_GPIO_Init+0x2ec>)
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	1e13      	subs	r3, r2, #0
 80025fa:	d000      	beq.n	80025fe <HAL_GPIO_Init+0x2ca>
 80025fc:	e6a2      	b.n	8002344 <HAL_GPIO_Init+0x10>
  } 
}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b006      	add	sp, #24
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	40010000 	.word	0x40010000
 8002610:	48000400 	.word	0x48000400
 8002614:	48000800 	.word	0x48000800
 8002618:	48000c00 	.word	0x48000c00
 800261c:	48001000 	.word	0x48001000
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	000a      	movs	r2, r1
 800262e:	1cbb      	adds	r3, r7, #2
 8002630:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	1cba      	adds	r2, r7, #2
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	4013      	ands	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800263e:	230f      	movs	r3, #15
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e003      	b.n	8002650 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
  }
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	0008      	movs	r0, r1
 8002668:	0011      	movs	r1, r2
 800266a:	1cbb      	adds	r3, r7, #2
 800266c:	1c02      	adds	r2, r0, #0
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	1c7b      	adds	r3, r7, #1
 8002672:	1c0a      	adds	r2, r1, #0
 8002674:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002676:	1c7b      	adds	r3, r7, #1
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800267e:	1cbb      	adds	r3, r7, #2
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002686:	e003      	b.n	8002690 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002688:	1cbb      	adds	r3, r7, #2
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0e4      	b.n	8002874 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a73      	ldr	r2, [pc, #460]	@ (800287c <HAL_PCD_Init+0x1e4>)
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	23a4      	movs	r3, #164	@ 0xa4
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	2100      	movs	r1, #0
 80026be:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f007 fc68 	bl	8009f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a6c      	ldr	r2, [pc, #432]	@ (800287c <HAL_PCD_Init+0x1e4>)
 80026cc:	2103      	movs	r1, #3
 80026ce:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f003 feb1 	bl	800643c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e047      	b.n	8002774 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e4:	200f      	movs	r0, #15
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	0013      	movs	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	18cb      	adds	r3, r1, r3
 80026f6:	3311      	adds	r3, #17
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	0013      	movs	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	189b      	adds	r3, r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	18cb      	adds	r3, r1, r3
 800270c:	3310      	adds	r3, #16
 800270e:	183a      	adds	r2, r7, r0
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002714:	183b      	adds	r3, r7, r0
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	0013      	movs	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	189b      	adds	r3, r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	18cb      	adds	r3, r1, r3
 8002724:	3313      	adds	r3, #19
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800272a:	183b      	adds	r3, r7, r0
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	0013      	movs	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	189b      	adds	r3, r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	18cb      	adds	r3, r1, r3
 800273a:	3320      	adds	r3, #32
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002740:	183b      	adds	r3, r7, r0
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	0013      	movs	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	189b      	adds	r3, r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	18cb      	adds	r3, r1, r3
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002756:	183b      	adds	r3, r7, r0
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	0013      	movs	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	189b      	adds	r3, r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	2200      	movs	r2, #0
 8002768:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276a:	183b      	adds	r3, r7, r0
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	183b      	adds	r3, r7, r0
 8002770:	3201      	adds	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	791b      	ldrb	r3, [r3, #4]
 8002778:	210f      	movs	r1, #15
 800277a:	187a      	adds	r2, r7, r1
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d3b0      	bcc.n	80026e4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e056      	b.n	8002838 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278a:	240f      	movs	r4, #15
 800278c:	193b      	adds	r3, r7, r4
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	2352      	movs	r3, #82	@ 0x52
 8002794:	33ff      	adds	r3, #255	@ 0xff
 8002796:	0019      	movs	r1, r3
 8002798:	0013      	movs	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	189b      	adds	r3, r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	18c3      	adds	r3, r0, r3
 80027a2:	185b      	adds	r3, r3, r1
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	23a8      	movs	r3, #168	@ 0xa8
 80027b0:	0059      	lsls	r1, r3, #1
 80027b2:	0013      	movs	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	18c3      	adds	r3, r0, r3
 80027bc:	185b      	adds	r3, r3, r1
 80027be:	193a      	adds	r2, r7, r4
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	2354      	movs	r3, #84	@ 0x54
 80027cc:	33ff      	adds	r3, #255	@ 0xff
 80027ce:	0019      	movs	r1, r3
 80027d0:	0013      	movs	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	18c3      	adds	r3, r0, r3
 80027da:	185b      	adds	r3, r3, r1
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	23b0      	movs	r3, #176	@ 0xb0
 80027e8:	0059      	lsls	r1, r3, #1
 80027ea:	0013      	movs	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	18c3      	adds	r3, r0, r3
 80027f4:	185b      	adds	r3, r3, r1
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	23b2      	movs	r3, #178	@ 0xb2
 8002802:	0059      	lsls	r1, r3, #1
 8002804:	0013      	movs	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	189b      	adds	r3, r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	18c3      	adds	r3, r0, r3
 800280e:	185b      	adds	r3, r3, r1
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	23b4      	movs	r3, #180	@ 0xb4
 800281c:	0059      	lsls	r1, r3, #1
 800281e:	0013      	movs	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	189b      	adds	r3, r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	18c3      	adds	r3, r0, r3
 8002828:	185b      	adds	r3, r3, r1
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	193b      	adds	r3, r7, r4
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	193b      	adds	r3, r7, r4
 8002834:	3201      	adds	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	220f      	movs	r2, #15
 800283e:	18ba      	adds	r2, r7, r2
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3a1      	bcc.n	800278a <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	f003 fe0e 	bl	8006470 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a07      	ldr	r2, [pc, #28]	@ (800287c <HAL_PCD_Init+0x1e4>)
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7a9b      	ldrb	r3, [r3, #10]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d103      	bne.n	8002872 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f001 fd07 	bl	8004280 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b005      	add	sp, #20
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	00000291 	.word	0x00000291

08002880 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	23a4      	movs	r3, #164	@ 0xa4
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_Start+0x18>
 8002894:	2302      	movs	r3, #2
 8002896:	e014      	b.n	80028c2 <HAL_PCD_Start+0x42>
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	23a4      	movs	r3, #164	@ 0xa4
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	2101      	movs	r1, #1
 80028a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f003 fdb2 	bl	8006410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f005 fda7 	bl	8008404 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	23a4      	movs	r3, #164	@ 0xa4
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	2100      	movs	r1, #0
 80028be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f005 fda9 	bl	8008430 <USB_ReadInterrupts>
 80028de:	0003      	movs	r3, r0
 80028e0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4013      	ands	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fb48 	bl	8002f84 <PCD_EP_ISR_Handler>

    return;
 80028f4:	e11d      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	d015      	beq.n	800292c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2244      	movs	r2, #68	@ 0x44
 8002906:	5a9b      	ldrh	r3, [r3, r2]
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	498a      	ldr	r1, [pc, #552]	@ (8002b38 <HAL_PCD_IRQHandler+0x26c>)
 8002910:	400a      	ands	r2, r1
 8002912:	b291      	uxth	r1, r2
 8002914:	2244      	movs	r2, #68	@ 0x44
 8002916:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0018      	movs	r0, r3
 800291c:	f007 fbc7 	bl	800a0ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2100      	movs	r1, #0
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f915 	bl	8002b54 <HAL_PCD_SetAddress>

    return;
 800292a:	e102      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	01db      	lsls	r3, r3, #7
 8002932:	4013      	ands	r3, r2
 8002934:	d00c      	beq.n	8002950 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2244      	movs	r2, #68	@ 0x44
 800293c:	5a9b      	ldrh	r3, [r3, r2]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	497d      	ldr	r1, [pc, #500]	@ (8002b3c <HAL_PCD_IRQHandler+0x270>)
 8002946:	400a      	ands	r2, r1
 8002948:	b291      	uxth	r1, r2
 800294a:	2244      	movs	r2, #68	@ 0x44
 800294c:	5299      	strh	r1, [r3, r2]

    return;
 800294e:	e0f0      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	4013      	ands	r3, r2
 8002958:	d00c      	beq.n	8002974 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2244      	movs	r2, #68	@ 0x44
 8002960:	5a9b      	ldrh	r3, [r3, r2]
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4975      	ldr	r1, [pc, #468]	@ (8002b40 <HAL_PCD_IRQHandler+0x274>)
 800296a:	400a      	ands	r2, r1
 800296c:	b291      	uxth	r1, r2
 800296e:	2244      	movs	r2, #68	@ 0x44
 8002970:	5299      	strh	r1, [r3, r2]

    return;
 8002972:	e0de      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	4013      	ands	r3, r2
 800297c:	d038      	beq.n	80029f0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2240      	movs	r2, #64	@ 0x40
 8002984:	5a9b      	ldrh	r3, [r3, r2]
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2104      	movs	r1, #4
 800298e:	438a      	bics	r2, r1
 8002990:	b291      	uxth	r1, r2
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	5a9b      	ldrh	r3, [r3, r2]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2108      	movs	r1, #8
 80029a6:	438a      	bics	r2, r1
 80029a8:	b291      	uxth	r1, r2
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	23b2      	movs	r3, #178	@ 0xb2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d109      	bne.n	80029ce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	23b2      	movs	r3, #178	@ 0xb2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	2100      	movs	r1, #0
 80029c2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2100      	movs	r1, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f001 fc83 	bl	80042d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f007 fbad 	bl	800a130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2244      	movs	r2, #68	@ 0x44
 80029dc:	5a9b      	ldrh	r3, [r3, r2]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4957      	ldr	r1, [pc, #348]	@ (8002b44 <HAL_PCD_IRQHandler+0x278>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	b291      	uxth	r1, r2
 80029ea:	2244      	movs	r2, #68	@ 0x44
 80029ec:	5299      	strh	r1, [r3, r2]

    return;
 80029ee:	e0a0      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	4013      	ands	r3, r2
 80029f8:	d028      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	5a9b      	ldrh	r3, [r3, r2]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2108      	movs	r1, #8
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	b291      	uxth	r1, r2
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2244      	movs	r2, #68	@ 0x44
 8002a18:	5a9b      	ldrh	r3, [r3, r2]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4949      	ldr	r1, [pc, #292]	@ (8002b48 <HAL_PCD_IRQHandler+0x27c>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	b291      	uxth	r1, r2
 8002a26:	2244      	movs	r2, #68	@ 0x44
 8002a28:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	5a9b      	ldrh	r3, [r3, r2]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2104      	movs	r1, #4
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	b291      	uxth	r1, r2
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f007 fb57 	bl	800a0f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a4a:	e072      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	4013      	ands	r3, r2
 8002a52:	d046      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2244      	movs	r2, #68	@ 0x44
 8002a5a:	5a9b      	ldrh	r3, [r3, r2]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	438a      	bics	r2, r1
 8002a66:	b291      	uxth	r1, r2
 8002a68:	2244      	movs	r2, #68	@ 0x44
 8002a6a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	23b2      	movs	r3, #178	@ 0xb2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d12f      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	5a9b      	ldrh	r3, [r3, r2]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2104      	movs	r1, #4
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	b291      	uxth	r1, r2
 8002a8c:	2240      	movs	r2, #64	@ 0x40
 8002a8e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2240      	movs	r2, #64	@ 0x40
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	b291      	uxth	r1, r2
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	23b2      	movs	r3, #178	@ 0xb2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	2101      	movs	r1, #1
 8002ab0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2254      	movs	r2, #84	@ 0x54
 8002ab8:	5a9b      	ldrh	r3, [r3, r2]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	223c      	movs	r2, #60	@ 0x3c
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	23b3      	movs	r3, #179	@ 0xb3
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f001 fbff 	bl	80042d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ad6:	e02c      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f007 fb0c 	bl	800a0f8 <HAL_PCD_SuspendCallback>
    return;
 8002ae0:	e027      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d010      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2244      	movs	r2, #68	@ 0x44
 8002af2:	5a9b      	ldrh	r3, [r3, r2]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4914      	ldr	r1, [pc, #80]	@ (8002b4c <HAL_PCD_IRQHandler+0x280>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	b291      	uxth	r1, r2
 8002b00:	2244      	movs	r2, #68	@ 0x44
 8002b02:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f007 fac2 	bl	800a090 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b0c:	e011      	b.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00c      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2244      	movs	r2, #68	@ 0x44
 8002b1e:	5a9b      	ldrh	r3, [r3, r2]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	490a      	ldr	r1, [pc, #40]	@ (8002b50 <HAL_PCD_IRQHandler+0x284>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	b291      	uxth	r1, r2
 8002b2c:	2244      	movs	r2, #68	@ 0x44
 8002b2e:	5299      	strh	r1, [r3, r2]

    return;
 8002b30:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	fffffbff 	.word	0xfffffbff
 8002b3c:	ffffbfff 	.word	0xffffbfff
 8002b40:	ffffdfff 	.word	0xffffdfff
 8002b44:	ffffefff 	.word	0xffffefff
 8002b48:	fffff7ff 	.word	0xfffff7ff
 8002b4c:	fffffdff 	.word	0xfffffdff
 8002b50:	fffffeff 	.word	0xfffffeff

08002b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	1cfb      	adds	r3, r7, #3
 8002b60:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	23a4      	movs	r3, #164	@ 0xa4
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_SetAddress+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e016      	b.n	8002ba0 <HAL_PCD_SetAddress+0x4c>
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	23a4      	movs	r3, #164	@ 0xa4
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	2101      	movs	r1, #1
 8002b7a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1cfa      	adds	r2, r7, #3
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	1cfb      	adds	r3, r7, #3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	0010      	movs	r0, r2
 8002b90:	f005 fc24 	bl	80083dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	23a4      	movs	r3, #164	@ 0xa4
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	000c      	movs	r4, r1
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	1cfb      	adds	r3, r7, #3
 8002bb8:	1c22      	adds	r2, r4, #0
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	003b      	movs	r3, r7
 8002bbe:	1c02      	adds	r2, r0, #0
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	1cbb      	adds	r3, r7, #2
 8002bc4:	1c0a      	adds	r2, r1, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bc8:	230b      	movs	r3, #11
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bd0:	1cfb      	adds	r3, r7, #3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da0f      	bge.n	8002bfa <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	1cfb      	adds	r3, r7, #3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2207      	movs	r2, #7
 8002be0:	401a      	ands	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	3310      	adds	r3, #16
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	18d3      	adds	r3, r2, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	705a      	strb	r2, [r3, #1]
 8002bf8:	e00f      	b.n	8002c1a <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfa:	1cfb      	adds	r3, r7, #3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2207      	movs	r2, #7
 8002c00:	401a      	ands	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	3351      	adds	r3, #81	@ 0x51
 8002c0c:	33ff      	adds	r3, #255	@ 0xff
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	18d3      	adds	r3, r2, r3
 8002c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1a:	1cfb      	adds	r3, r7, #3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c28:	003b      	movs	r3, r7
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1cba      	adds	r2, r7, #2
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c38:	1cbb      	adds	r3, r7, #2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d102      	bne.n	8002c46 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	23a4      	movs	r3, #164	@ 0xa4
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	5cd3      	ldrb	r3, [r2, r3]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_EP_Open+0xae>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e013      	b.n	8002c7e <HAL_PCD_EP_Open+0xd6>
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	23a4      	movs	r3, #164	@ 0xa4
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	0011      	movs	r1, r2
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f003 fc1d 	bl	80064a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	23a4      	movs	r3, #164	@ 0xa4
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	2100      	movs	r1, #0
 8002c76:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002c78:	230b      	movs	r3, #11
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	781b      	ldrb	r3, [r3, #0]
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b005      	add	sp, #20
 8002c84:	bd90      	pop	{r4, r7, pc}

08002c86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	000a      	movs	r2, r1
 8002c90:	1cfb      	adds	r3, r7, #3
 8002c92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c94:	1cfb      	adds	r3, r7, #3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da0f      	bge.n	8002cbe <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	1cfb      	adds	r3, r7, #3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	3310      	adds	r3, #16
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	705a      	strb	r2, [r3, #1]
 8002cbc:	e00f      	b.n	8002cde <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cbe:	1cfb      	adds	r3, r7, #3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	3351      	adds	r3, #81	@ 0x51
 8002cd0:	33ff      	adds	r3, #255	@ 0xff
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	18d3      	adds	r3, r2, r3
 8002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	1cfb      	adds	r3, r7, #3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	23a4      	movs	r3, #164	@ 0xa4
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_EP_Close+0x76>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e011      	b.n	8002d20 <HAL_PCD_EP_Close+0x9a>
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	23a4      	movs	r3, #164	@ 0xa4
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	2101      	movs	r1, #1
 8002d04:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f003 ff72 	bl	8006bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	23a4      	movs	r3, #164	@ 0xa4
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	200b      	movs	r0, #11
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	1c0a      	adds	r2, r1, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	0001      	movs	r1, r0
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2207      	movs	r2, #7
 8002d44:	401a      	ands	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	3351      	adds	r3, #81	@ 0x51
 8002d50:	33ff      	adds	r3, #255	@ 0xff
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2207      	movs	r2, #7
 8002d76:	4013      	ands	r3, r2
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	0011      	movs	r1, r2
 8002d86:	0018      	movs	r0, r3
 8002d88:	f004 f8f6 	bl	8006f78 <USB_EPStartXfer>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	200b      	movs	r0, #11
 8002da4:	183b      	adds	r3, r7, r0
 8002da6:	1c0a      	adds	r2, r1, #0
 8002da8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2207      	movs	r2, #7
 8002db0:	401a      	ands	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	3310      	adds	r3, #16
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2224      	movs	r2, #36	@ 0x24
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2201      	movs	r2, #1
 8002de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2207      	movs	r2, #7
 8002dee:	4013      	ands	r3, r2
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f004 f8ba 	bl	8006f78 <USB_EPStartXfer>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b006      	add	sp, #24
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	000a      	movs	r2, r1
 8002e18:	1cfb      	adds	r3, r7, #3
 8002e1a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e1c:	1cfb      	adds	r3, r7, #3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2207      	movs	r2, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	7912      	ldrb	r2, [r2, #4]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e046      	b.n	8002ebe <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e30:	1cfb      	adds	r3, r7, #3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da0f      	bge.n	8002e5a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	1cfb      	adds	r3, r7, #3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2207      	movs	r2, #7
 8002e40:	401a      	ands	r2, r3
 8002e42:	0013      	movs	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	3310      	adds	r3, #16
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	18d3      	adds	r3, r2, r3
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	705a      	strb	r2, [r3, #1]
 8002e58:	e00d      	b.n	8002e76 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e5a:	1cfb      	adds	r3, r7, #3
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	0013      	movs	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3351      	adds	r3, #81	@ 0x51
 8002e68:	33ff      	adds	r3, #255	@ 0xff
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7c:	1cfb      	adds	r3, r7, #3
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2207      	movs	r2, #7
 8002e82:	4013      	ands	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	23a4      	movs	r3, #164	@ 0xa4
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_SetStall+0x8c>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e011      	b.n	8002ebe <HAL_PCD_EP_SetStall+0xb0>
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	23a4      	movs	r3, #164	@ 0xa4
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f005 f993 	bl	80081d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	23a4      	movs	r3, #164	@ 0xa4
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	2100      	movs	r1, #0
 8002eba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	000a      	movs	r2, r1
 8002ed0:	1cfb      	adds	r3, r7, #3
 8002ed2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ed4:	1cfb      	adds	r3, r7, #3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	220f      	movs	r2, #15
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	7912      	ldrb	r2, [r2, #4]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e048      	b.n	8002f7a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee8:	1cfb      	adds	r3, r7, #3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0f      	bge.n	8002f12 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	401a      	ands	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	3310      	adds	r3, #16
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	18d3      	adds	r3, r2, r3
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
 8002f10:	e00f      	b.n	8002f32 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	1cfb      	adds	r3, r7, #3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2207      	movs	r2, #7
 8002f18:	401a      	ands	r2, r3
 8002f1a:	0013      	movs	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	3351      	adds	r3, #81	@ 0x51
 8002f24:	33ff      	adds	r3, #255	@ 0xff
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	18d3      	adds	r3, r2, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	1cfb      	adds	r3, r7, #3
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	23a4      	movs	r3, #164	@ 0xa4
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_PCD_EP_ClrStall+0x90>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e011      	b.n	8002f7a <HAL_PCD_EP_ClrStall+0xb4>
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	23a4      	movs	r3, #164	@ 0xa4
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	0011      	movs	r1, r2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f005 f985 	bl	8008278 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	23a4      	movs	r3, #164	@ 0xa4
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	2100      	movs	r1, #0
 8002f76:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b096      	sub	sp, #88	@ 0x58
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f8c:	f000 fbea 	bl	8003764 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2048      	movs	r0, #72	@ 0x48
 8002f96:	183b      	adds	r3, r7, r0
 8002f98:	2144      	movs	r1, #68	@ 0x44
 8002f9a:	5a52      	ldrh	r2, [r2, r1]
 8002f9c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	244f      	movs	r4, #79	@ 0x4f
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	210f      	movs	r1, #15
 8002faa:	400a      	ands	r2, r1
 8002fac:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d000      	beq.n	8002fb8 <PCD_EP_ISR_Handler+0x34>
 8002fb6:	e18d      	b.n	80032d4 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d152      	bne.n	8003068 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	200e      	movs	r0, #14
 8002fcc:	183b      	adds	r3, r7, r0
 8002fce:	49ba      	ldr	r1, [pc, #744]	@ (80032b8 <PCD_EP_ISR_Handler+0x334>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	183a      	adds	r2, r7, r0
 8002fda:	8812      	ldrh	r2, [r2, #0]
 8002fdc:	49b7      	ldr	r1, [pc, #732]	@ (80032bc <PCD_EP_ISR_Handler+0x338>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2250      	movs	r2, #80	@ 0x50
 8002ff0:	5a9b      	ldrh	r3, [r3, r2]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	18d2      	adds	r2, r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	4aae      	ldr	r2, [pc, #696]	@ (80032c0 <PCD_EP_ISR_Handler+0x33c>)
 8003006:	4694      	mov	ip, r2
 8003008:	4463      	add	r3, ip
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	059b      	lsls	r3, r3, #22
 800300e:	0d9a      	lsrs	r2, r3, #22
 8003010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003012:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	18d2      	adds	r2, r2, r3
 800301e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003020:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2100      	movs	r1, #0
 8003026:	0018      	movs	r0, r3
 8003028:	f007 f814 	bl	800a054 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7b1b      	ldrb	r3, [r3, #12]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <PCD_EP_ISR_Handler+0xb6>
 8003036:	f000 fb95 	bl	8003764 <PCD_EP_ISR_Handler+0x7e0>
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <PCD_EP_ISR_Handler+0xc2>
 8003042:	f000 fb8f 	bl	8003764 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7b1b      	ldrb	r3, [r3, #12]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2280      	movs	r2, #128	@ 0x80
 800304e:	4252      	negs	r2, r2
 8003050:	4313      	orrs	r3, r2
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0011      	movs	r1, r2
 800305a:	224c      	movs	r2, #76	@ 0x4c
 800305c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	731a      	strb	r2, [r3, #12]
 8003064:	f000 fb7e 	bl	8003764 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3351      	adds	r3, #81	@ 0x51
 800306c:	33ff      	adds	r3, #255	@ 0xff
 800306e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	214c      	movs	r1, #76	@ 0x4c
 8003076:	187b      	adds	r3, r7, r1
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800307c:	187b      	adds	r3, r7, r1
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d037      	beq.n	80030f8 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2250      	movs	r2, #80	@ 0x50
 800308e:	5a9b      	ldrh	r3, [r3, r2]
 8003090:	b29b      	uxth	r3, r3
 8003092:	001a      	movs	r2, r3
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	18d2      	adds	r2, r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	18d3      	adds	r3, r2, r3
 80030a2:	4a88      	ldr	r2, [pc, #544]	@ (80032c4 <PCD_EP_ISR_Handler+0x340>)
 80030a4:	4694      	mov	ip, r2
 80030a6:	4463      	add	r3, ip
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	059b      	lsls	r3, r3, #22
 80030ac:	0d9a      	lsrs	r2, r3, #22
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	22a6      	movs	r2, #166	@ 0xa6
 80030ba:	0092      	lsls	r2, r2, #2
 80030bc:	1899      	adds	r1, r3, r2
 80030be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f005 fa0a 	bl	80084e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	2010      	movs	r0, #16
 80030d6:	183b      	adds	r3, r7, r0
 80030d8:	497b      	ldr	r1, [pc, #492]	@ (80032c8 <PCD_EP_ISR_Handler+0x344>)
 80030da:	400a      	ands	r2, r1
 80030dc:	801a      	strh	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	183a      	adds	r2, r7, r0
 80030e4:	8812      	ldrh	r2, [r2, #0]
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	430a      	orrs	r2, r1
 80030ea:	b292      	uxth	r2, r2
 80030ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f006 ff79 	bl	8009fe8 <HAL_PCD_SetupStageCallback>
 80030f6:	e335      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030f8:	234c      	movs	r3, #76	@ 0x4c
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db00      	blt.n	8003106 <PCD_EP_ISR_Handler+0x182>
 8003104:	e32e      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29a      	uxth	r2, r3
 800310e:	201e      	movs	r0, #30
 8003110:	183b      	adds	r3, r7, r0
 8003112:	496d      	ldr	r1, [pc, #436]	@ (80032c8 <PCD_EP_ISR_Handler+0x344>)
 8003114:	400a      	ands	r2, r1
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	183a      	adds	r2, r7, r0
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	2180      	movs	r1, #128	@ 0x80
 8003122:	430a      	orrs	r2, r1
 8003124:	b292      	uxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2250      	movs	r2, #80	@ 0x50
 800312e:	5a9b      	ldrh	r3, [r3, r2]
 8003130:	b29b      	uxth	r3, r3
 8003132:	001a      	movs	r2, r3
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	18d2      	adds	r2, r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	4a60      	ldr	r2, [pc, #384]	@ (80032c4 <PCD_EP_ISR_Handler+0x340>)
 8003144:	4694      	mov	ip, r2
 8003146:	4463      	add	r3, ip
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	059b      	lsls	r3, r3, #22
 800314c:	0d9a      	lsrs	r2, r3, #22
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01a      	beq.n	8003190 <PCD_EP_ISR_Handler+0x20c>
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	6959      	ldr	r1, [r3, #20]
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003172:	b29b      	uxth	r3, r3
 8003174:	f005 f9b4 	bl	80084e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	18d2      	adds	r2, r2, r3
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2100      	movs	r1, #0
 800318a:	0018      	movs	r0, r3
 800318c:	f006 ff41 	bl	800a012 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	214c      	movs	r1, #76	@ 0x4c
 8003196:	187b      	adds	r3, r7, r1
 8003198:	8812      	ldrh	r2, [r2, #0]
 800319a:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800319c:	187b      	adds	r3, r7, r1
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	d000      	beq.n	80031aa <PCD_EP_ISR_Handler+0x226>
 80031a8:	e2dc      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	23c0      	movs	r3, #192	@ 0xc0
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	401a      	ands	r2, r3
 80031b4:	23c0      	movs	r3, #192	@ 0xc0
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d100      	bne.n	80031be <PCD_EP_ISR_Handler+0x23a>
 80031bc:	e2d2      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2250      	movs	r2, #80	@ 0x50
 80031ca:	5a9b      	ldrh	r3, [r3, r2]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	001a      	movs	r2, r3
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	@ (80032c4 <PCD_EP_ISR_Handler+0x340>)
 80031da:	4694      	mov	ip, r2
 80031dc:	4463      	add	r3, ip
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	059b      	lsls	r3, r3, #22
 80031e8:	0d9b      	lsrs	r3, r3, #22
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d108      	bne.n	800320a <PCD_EP_ISR_Handler+0x286>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4a2f      	ldr	r2, [pc, #188]	@ (80032bc <PCD_EP_ISR_Handler+0x338>)
 8003200:	4313      	orrs	r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e035      	b.n	8003276 <PCD_EP_ISR_Handler+0x2f2>
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003210:	d817      	bhi.n	8003242 <PCD_EP_ISR_Handler+0x2be>
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2201      	movs	r2, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d002      	beq.n	800322a <PCD_EP_ISR_Handler+0x2a6>
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	3301      	adds	r3, #1
 8003228:	647b      	str	r3, [r7, #68]	@ 0x44
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29a      	uxth	r2, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003232:	b29b      	uxth	r3, r3
 8003234:	029b      	lsls	r3, r3, #10
 8003236:	b29b      	uxth	r3, r3
 8003238:	4313      	orrs	r3, r2
 800323a:	b29a      	uxth	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	e019      	b.n	8003276 <PCD_EP_ISR_Handler+0x2f2>
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	221f      	movs	r2, #31
 8003250:	4013      	ands	r3, r2
 8003252:	d102      	bne.n	800325a <PCD_EP_ISR_Handler+0x2d6>
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	3b01      	subs	r3, #1
 8003258:	647b      	str	r3, [r7, #68]	@ 0x44
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29a      	uxth	r2, r3
 8003260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003262:	b29b      	uxth	r3, r3
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	b29b      	uxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <PCD_EP_ISR_Handler+0x338>)
 800326e:	4313      	orrs	r3, r2
 8003270:	b29a      	uxth	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
 800327e:	2012      	movs	r0, #18
 8003280:	183b      	adds	r3, r7, r0
 8003282:	4912      	ldr	r1, [pc, #72]	@ (80032cc <PCD_EP_ISR_Handler+0x348>)
 8003284:	400a      	ands	r2, r1
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	183b      	adds	r3, r7, r0
 800328a:	183a      	adds	r2, r7, r0
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	0149      	lsls	r1, r1, #5
 8003292:	404a      	eors	r2, r1
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	183b      	adds	r3, r7, r0
 8003298:	183a      	adds	r2, r7, r0
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	0189      	lsls	r1, r1, #6
 80032a0:	404a      	eors	r2, r1
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	183a      	adds	r2, r7, r0
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <PCD_EP_ISR_Handler+0x34c>)
 80032ae:	430a      	orrs	r2, r1
 80032b0:	b292      	uxth	r2, r2
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	e256      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	ffff8f0f 	.word	0xffff8f0f
 80032bc:	ffff8000 	.word	0xffff8000
 80032c0:	00000402 	.word	0x00000402
 80032c4:	00000406 	.word	0x00000406
 80032c8:	00000f8f 	.word	0x00000f8f
 80032cc:	ffffbf8f 	.word	0xffffbf8f
 80032d0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	001a      	movs	r2, r3
 80032da:	204f      	movs	r0, #79	@ 0x4f
 80032dc:	183b      	adds	r3, r7, r0
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	18d2      	adds	r2, r2, r3
 80032e4:	214c      	movs	r1, #76	@ 0x4c
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	8812      	ldrh	r2, [r2, #0]
 80032ea:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2200      	movs	r2, #0
 80032f0:	5e9b      	ldrsh	r3, [r3, r2]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db00      	blt.n	80032f8 <PCD_EP_ISR_Handler+0x374>
 80032f6:	e0fa      	b.n	80034ee <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	001a      	movs	r2, r3
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	18d3      	adds	r3, r2, r3
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29a      	uxth	r2, r3
 800330a:	244a      	movs	r4, #74	@ 0x4a
 800330c:	193b      	adds	r3, r7, r4
 800330e:	49d1      	ldr	r1, [pc, #836]	@ (8003654 <PCD_EP_ISR_Handler+0x6d0>)
 8003310:	400a      	ands	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	001a      	movs	r2, r3
 800331a:	183b      	adds	r3, r7, r0
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	193a      	adds	r2, r7, r4
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	430a      	orrs	r2, r1
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800332e:	183b      	adds	r3, r7, r0
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	0013      	movs	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	189b      	adds	r3, r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	3351      	adds	r3, #81	@ 0x51
 800333c:	33ff      	adds	r3, #255	@ 0xff
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d125      	bne.n	8003398 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2250      	movs	r2, #80	@ 0x50
 8003352:	5a9b      	ldrh	r3, [r3, r2]
 8003354:	b29b      	uxth	r3, r3
 8003356:	001a      	movs	r2, r3
 8003358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	18d2      	adds	r2, r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	4abc      	ldr	r2, [pc, #752]	@ (8003658 <PCD_EP_ISR_Handler+0x6d4>)
 8003368:	4694      	mov	ip, r2
 800336a:	4463      	add	r3, ip
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	2450      	movs	r4, #80	@ 0x50
 8003370:	193b      	adds	r3, r7, r4
 8003372:	0592      	lsls	r2, r2, #22
 8003374:	0d92      	lsrs	r2, r2, #22
 8003376:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003378:	193b      	adds	r3, r7, r4
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d100      	bne.n	8003382 <PCD_EP_ISR_Handler+0x3fe>
 8003380:	e08d      	b.n	800349e <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003388:	6959      	ldr	r1, [r3, #20]
 800338a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338c:	88da      	ldrh	r2, [r3, #6]
 800338e:	193b      	adds	r3, r7, r4
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	f005 f8a5 	bl	80084e0 <USB_ReadPMA>
 8003396:	e082      	b.n	800349e <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339a:	78db      	ldrb	r3, [r3, #3]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d10c      	bne.n	80033ba <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033a0:	2350      	movs	r3, #80	@ 0x50
 80033a2:	18fc      	adds	r4, r7, r3
 80033a4:	234c      	movs	r3, #76	@ 0x4c
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f9ec 	bl	800378c <HAL_PCD_EP_DB_Receive>
 80033b4:	0003      	movs	r3, r0
 80033b6:	8023      	strh	r3, [r4, #0]
 80033b8:	e071      	b.n	800349e <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	001a      	movs	r2, r3
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	18d3      	adds	r3, r2, r3
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	2052      	movs	r0, #82	@ 0x52
 80033ce:	183b      	adds	r3, r7, r0
 80033d0:	49a2      	ldr	r1, [pc, #648]	@ (800365c <PCD_EP_ISR_Handler+0x6d8>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	001a      	movs	r2, r3
 80033dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	18d3      	adds	r3, r2, r3
 80033e4:	183a      	adds	r2, r7, r0
 80033e6:	8812      	ldrh	r2, [r2, #0]
 80033e8:	499d      	ldr	r1, [pc, #628]	@ (8003660 <PCD_EP_ISR_Handler+0x6dc>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	b292      	uxth	r2, r2
 80033ee:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	001a      	movs	r2, r3
 80033f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	001a      	movs	r2, r3
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	01db      	lsls	r3, r3, #7
 8003408:	4013      	ands	r3, r2
 800340a:	d024      	beq.n	8003456 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2250      	movs	r2, #80	@ 0x50
 8003412:	5a9b      	ldrh	r3, [r3, r2]
 8003414:	b29b      	uxth	r3, r3
 8003416:	001a      	movs	r2, r3
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	18d2      	adds	r2, r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	4a8f      	ldr	r2, [pc, #572]	@ (8003664 <PCD_EP_ISR_Handler+0x6e0>)
 8003428:	4694      	mov	ip, r2
 800342a:	4463      	add	r3, ip
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	2450      	movs	r4, #80	@ 0x50
 8003430:	193b      	adds	r3, r7, r4
 8003432:	0592      	lsls	r2, r2, #22
 8003434:	0d92      	lsrs	r2, r2, #22
 8003436:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003438:	193b      	adds	r3, r7, r4
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02e      	beq.n	800349e <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	6959      	ldr	r1, [r3, #20]
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	891a      	ldrh	r2, [r3, #8]
 800344c:	193b      	adds	r3, r7, r4
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f005 f846 	bl	80084e0 <USB_ReadPMA>
 8003454:	e023      	b.n	800349e <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2250      	movs	r2, #80	@ 0x50
 800345c:	5a9b      	ldrh	r3, [r3, r2]
 800345e:	b29b      	uxth	r3, r3
 8003460:	001a      	movs	r2, r3
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	18d2      	adds	r2, r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	18d3      	adds	r3, r2, r3
 8003470:	4a79      	ldr	r2, [pc, #484]	@ (8003658 <PCD_EP_ISR_Handler+0x6d4>)
 8003472:	4694      	mov	ip, r2
 8003474:	4463      	add	r3, ip
 8003476:	881a      	ldrh	r2, [r3, #0]
 8003478:	2450      	movs	r4, #80	@ 0x50
 800347a:	193b      	adds	r3, r7, r4
 800347c:	0592      	lsls	r2, r2, #22
 800347e:	0d92      	lsrs	r2, r2, #22
 8003480:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003482:	193b      	adds	r3, r7, r4
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	6959      	ldr	r1, [r3, #20]
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	895a      	ldrh	r2, [r3, #10]
 8003496:	193b      	adds	r3, r7, r4
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	f005 f821 	bl	80084e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	2150      	movs	r1, #80	@ 0x50
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	18d2      	adds	r2, r2, r3
 80034aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	18d2      	adds	r2, r2, r3
 80034b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <PCD_EP_ISR_Handler+0x54c>
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d207      	bcs.n	80034e0 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f006 fd9a 	bl	800a012 <HAL_PCD_DataOutStageCallback>
 80034de:	e006      	b.n	80034ee <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f003 fd45 	bl	8006f78 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034ee:	244c      	movs	r4, #76	@ 0x4c
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	2280      	movs	r2, #128	@ 0x80
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <PCD_EP_ISR_Handler+0x578>
 80034fa:	e133      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80034fc:	204f      	movs	r0, #79	@ 0x4f
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	0013      	movs	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	189b      	adds	r3, r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	3310      	adds	r3, #16
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	001a      	movs	r2, r3
 8003518:	183b      	adds	r3, r7, r0
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29a      	uxth	r2, r3
 8003524:	2542      	movs	r5, #66	@ 0x42
 8003526:	197b      	adds	r3, r7, r5
 8003528:	494f      	ldr	r1, [pc, #316]	@ (8003668 <PCD_EP_ISR_Handler+0x6e4>)
 800352a:	400a      	ands	r2, r1
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	001a      	movs	r2, r3
 8003534:	183b      	adds	r3, r7, r0
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	18d3      	adds	r3, r2, r3
 800353c:	197a      	adds	r2, r7, r5
 800353e:	8812      	ldrh	r2, [r2, #0]
 8003540:	494a      	ldr	r1, [pc, #296]	@ (800366c <PCD_EP_ISR_Handler+0x6e8>)
 8003542:	430a      	orrs	r2, r1
 8003544:	b292      	uxth	r2, r2
 8003546:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	78db      	ldrb	r3, [r3, #3]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d000      	beq.n	8003552 <PCD_EP_ISR_Handler+0x5ce>
 8003550:	e0af      	b.n	80036b2 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355a:	7b1b      	ldrb	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d100      	bne.n	8003562 <PCD_EP_ISR_Handler+0x5de>
 8003560:	e09f      	b.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003562:	193b      	adds	r3, r7, r4
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	4013      	ands	r3, r2
 800356a:	d046      	beq.n	80035fa <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d125      	bne.n	80035c0 <PCD_EP_ISR_Handler+0x63c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2250      	movs	r2, #80	@ 0x50
 8003580:	5a9b      	ldrh	r3, [r3, r2]
 8003582:	b29b      	uxth	r3, r3
 8003584:	001a      	movs	r2, r3
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	189b      	adds	r3, r3, r2
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
 800358c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00da      	lsls	r2, r3, #3
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	4a33      	ldr	r2, [pc, #204]	@ (8003664 <PCD_EP_ISR_Handler+0x6e0>)
 8003598:	4694      	mov	ip, r2
 800359a:	4463      	add	r3, ip
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	059b      	lsls	r3, r3, #22
 80035a6:	0d9b      	lsrs	r3, r3, #22
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <PCD_EP_ISR_Handler+0x6e8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	e070      	b.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
 80035c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d16c      	bne.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2250      	movs	r2, #80	@ 0x50
 80035d4:	5a9b      	ldrh	r3, [r3, r2]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	001a      	movs	r2, r3
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00da      	lsls	r2, r3, #3
 80035e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <PCD_EP_ISR_Handler+0x6e0>)
 80035ec:	4694      	mov	ip, r2
 80035ee:	4463      	add	r3, ip
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	2200      	movs	r2, #0
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e053      	b.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d133      	bne.n	8003670 <PCD_EP_ISR_Handler+0x6ec>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2250      	movs	r2, #80	@ 0x50
 8003614:	5a9b      	ldrh	r3, [r3, r2]
 8003616:	b29b      	uxth	r3, r3
 8003618:	001a      	movs	r2, r3
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	189b      	adds	r3, r3, r2
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	00da      	lsls	r2, r3, #3
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	4a0b      	ldr	r2, [pc, #44]	@ (8003658 <PCD_EP_ISR_Handler+0x6d4>)
 800362c:	4694      	mov	ip, r2
 800362e:	4463      	add	r3, ip
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	059b      	lsls	r3, r3, #22
 800363a:	0d9b      	lsrs	r3, r3, #22
 800363c:	b29a      	uxth	r2, r3
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4a08      	ldr	r2, [pc, #32]	@ (800366c <PCD_EP_ISR_Handler+0x6e8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	b29a      	uxth	r2, r3
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	e026      	b.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
 8003654:	00000f8f 	.word	0x00000f8f
 8003658:	00000406 	.word	0x00000406
 800365c:	ffff8f8f 	.word	0xffff8f8f
 8003660:	ffff80c0 	.word	0xffff80c0
 8003664:	00000402 	.word	0x00000402
 8003668:	ffff8f0f 	.word	0xffff8f0f
 800366c:	ffff8000 	.word	0xffff8000
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d114      	bne.n	80036a2 <PCD_EP_ISR_Handler+0x71e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2250      	movs	r2, #80	@ 0x50
 800367e:	5a9b      	ldrh	r3, [r3, r2]
 8003680:	b29b      	uxth	r3, r3
 8003682:	001a      	movs	r2, r3
 8003684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003686:	189b      	adds	r3, r3, r2
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00da      	lsls	r2, r3, #3
 8003690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	4a3b      	ldr	r2, [pc, #236]	@ (8003784 <PCD_EP_ISR_Handler+0x800>)
 8003696:	4694      	mov	ip, r2
 8003698:	4463      	add	r3, ip
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0011      	movs	r1, r2
 80036aa:	0018      	movs	r0, r3
 80036ac:	f006 fcd2 	bl	800a054 <HAL_PCD_DataInStageCallback>
 80036b0:	e058      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80036b2:	234c      	movs	r3, #76	@ 0x4c
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	881a      	ldrh	r2, [r3, #0]
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	d149      	bne.n	8003754 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2250      	movs	r2, #80	@ 0x50
 80036c6:	5a9b      	ldrh	r3, [r3, r2]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	18d2      	adds	r2, r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	18d3      	adds	r3, r2, r3
 80036da:	4a2b      	ldr	r2, [pc, #172]	@ (8003788 <PCD_EP_ISR_Handler+0x804>)
 80036dc:	4694      	mov	ip, r2
 80036de:	4463      	add	r3, ip
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	2140      	movs	r1, #64	@ 0x40
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	0592      	lsls	r2, r2, #22
 80036e8:	0d92      	lsrs	r2, r2, #22
 80036ea:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d907      	bls.n	8003708 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	1ad2      	subs	r2, r2, r3
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	619a      	str	r2, [r3, #24]
 8003706:	e002      	b.n	800370e <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0011      	movs	r1, r2
 800371e:	0018      	movs	r0, r3
 8003720:	f006 fc98 	bl	800a054 <HAL_PCD_DataInStageCallback>
 8003724:	e01e      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	2140      	movs	r1, #64	@ 0x40
 800372c:	187b      	adds	r3, r7, r1
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	18d2      	adds	r2, r2, r3
 8003732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003734:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	187b      	adds	r3, r7, r1
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	18d2      	adds	r2, r2, r3
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f003 fc13 	bl	8006f78 <USB_EPStartXfer>
 8003752:	e007      	b.n	8003764 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003754:	234c      	movs	r3, #76	@ 0x4c
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f930 	bl	80039c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2244      	movs	r2, #68	@ 0x44
 800376a:	5a9b      	ldrh	r3, [r3, r2]
 800376c:	b29b      	uxth	r3, r3
 800376e:	b21b      	sxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	da01      	bge.n	8003778 <PCD_EP_ISR_Handler+0x7f4>
 8003774:	f7ff fc0c 	bl	8002f90 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b016      	add	sp, #88	@ 0x58
 8003780:	bdb0      	pop	{r4, r5, r7, pc}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	00000406 	.word	0x00000406
 8003788:	00000402 	.word	0x00000402

0800378c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b089      	sub	sp, #36	@ 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	01db      	lsls	r3, r3, #7
 80037a2:	4013      	ands	r3, r2
 80037a4:	d100      	bne.n	80037a8 <HAL_PCD_EP_DB_Receive+0x1c>
 80037a6:	e07d      	b.n	80038a4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2250      	movs	r2, #80	@ 0x50
 80037ae:	5a9b      	ldrh	r3, [r3, r2]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	001a      	movs	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	18d2      	adds	r2, r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	4a7a      	ldr	r2, [pc, #488]	@ (80039ac <HAL_PCD_EP_DB_Receive+0x220>)
 80037c4:	4694      	mov	ip, r2
 80037c6:	4463      	add	r3, ip
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	211a      	movs	r1, #26
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	0592      	lsls	r2, r2, #22
 80037d0:	0d92      	lsrs	r2, r2, #22
 80037d2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d307      	bcc.n	80037f0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	187b      	adds	r3, r7, r1
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	619a      	str	r2, [r3, #24]
 80037ee:	e002      	b.n	80037f6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	001a      	movs	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	18d3      	adds	r3, r2, r3
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29a      	uxth	r2, r3
 8003810:	2018      	movs	r0, #24
 8003812:	183b      	adds	r3, r7, r0
 8003814:	4966      	ldr	r1, [pc, #408]	@ (80039b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003816:	400a      	ands	r2, r1
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	183b      	adds	r3, r7, r0
 800381c:	183a      	adds	r2, r7, r0
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	2180      	movs	r1, #128	@ 0x80
 8003822:	0189      	lsls	r1, r1, #6
 8003824:	404a      	eors	r2, r1
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	001a      	movs	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	183a      	adds	r2, r7, r0
 8003838:	8812      	ldrh	r2, [r2, #0]
 800383a:	495e      	ldr	r1, [pc, #376]	@ (80039b4 <HAL_PCD_EP_DB_Receive+0x228>)
 800383c:	430a      	orrs	r2, r1
 800383e:	b292      	uxth	r2, r2
 8003840:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003842:	1dbb      	adds	r3, r7, #6
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2240      	movs	r2, #64	@ 0x40
 8003848:	4013      	ands	r3, r2
 800384a:	d01a      	beq.n	8003882 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	001a      	movs	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	2016      	movs	r0, #22
 8003860:	183b      	adds	r3, r7, r0
 8003862:	4955      	ldr	r1, [pc, #340]	@ (80039b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003864:	400a      	ands	r2, r1
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	001a      	movs	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	18d3      	adds	r3, r2, r3
 8003876:	183a      	adds	r2, r7, r0
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	4950      	ldr	r1, [pc, #320]	@ (80039bc <HAL_PCD_EP_DB_Receive+0x230>)
 800387c:	430a      	orrs	r2, r1
 800387e:	b292      	uxth	r2, r2
 8003880:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003882:	241a      	movs	r4, #26
 8003884:	193b      	adds	r3, r7, r4
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d100      	bne.n	800388e <HAL_PCD_EP_DB_Receive+0x102>
 800388c:	e086      	b.n	800399c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6959      	ldr	r1, [r3, #20]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	891a      	ldrh	r2, [r3, #8]
 800389a:	193b      	adds	r3, r7, r4
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	f004 fe1f 	bl	80084e0 <USB_ReadPMA>
 80038a2:	e07b      	b.n	800399c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2250      	movs	r2, #80	@ 0x50
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	001a      	movs	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	18d2      	adds	r2, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	4a40      	ldr	r2, [pc, #256]	@ (80039c0 <HAL_PCD_EP_DB_Receive+0x234>)
 80038c0:	4694      	mov	ip, r2
 80038c2:	4463      	add	r3, ip
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	211a      	movs	r1, #26
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	0592      	lsls	r2, r2, #22
 80038cc:	0d92      	lsrs	r2, r2, #22
 80038ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d307      	bcc.n	80038ec <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	619a      	str	r2, [r3, #24]
 80038ea:	e002      	b.n	80038f2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d121      	bne.n	800393e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	001a      	movs	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	18d3      	adds	r3, r2, r3
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29a      	uxth	r2, r3
 800390c:	201e      	movs	r0, #30
 800390e:	183b      	adds	r3, r7, r0
 8003910:	4927      	ldr	r1, [pc, #156]	@ (80039b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003912:	400a      	ands	r2, r1
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	183b      	adds	r3, r7, r0
 8003918:	183a      	adds	r2, r7, r0
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	0189      	lsls	r1, r1, #6
 8003920:	404a      	eors	r2, r1
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	001a      	movs	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	183a      	adds	r2, r7, r0
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	491f      	ldr	r1, [pc, #124]	@ (80039b4 <HAL_PCD_EP_DB_Receive+0x228>)
 8003938:	430a      	orrs	r2, r1
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	2240      	movs	r2, #64	@ 0x40
 8003944:	4013      	ands	r3, r2
 8003946:	d11a      	bne.n	800397e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29a      	uxth	r2, r3
 800395a:	201c      	movs	r0, #28
 800395c:	183b      	adds	r3, r7, r0
 800395e:	4916      	ldr	r1, [pc, #88]	@ (80039b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003960:	400a      	ands	r2, r1
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	001a      	movs	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	183a      	adds	r2, r7, r0
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	4911      	ldr	r1, [pc, #68]	@ (80039bc <HAL_PCD_EP_DB_Receive+0x230>)
 8003978:	430a      	orrs	r2, r1
 800397a:	b292      	uxth	r2, r2
 800397c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800397e:	241a      	movs	r4, #26
 8003980:	193b      	adds	r3, r7, r4
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6959      	ldr	r1, [r3, #20]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	895a      	ldrh	r2, [r3, #10]
 8003994:	193b      	adds	r3, r7, r4
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	f004 fda2 	bl	80084e0 <USB_ReadPMA>
    }
  }

  return count;
 800399c:	231a      	movs	r3, #26
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	881b      	ldrh	r3, [r3, #0]
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b009      	add	sp, #36	@ 0x24
 80039a8:	bd90      	pop	{r4, r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	00000402 	.word	0x00000402
 80039b0:	ffffbf8f 	.word	0xffffbf8f
 80039b4:	ffff8080 	.word	0xffff8080
 80039b8:	ffff8f8f 	.word	0xffff8f8f
 80039bc:	ffff80c0 	.word	0xffff80c0
 80039c0:	00000406 	.word	0x00000406

080039c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0a4      	sub	sp, #144	@ 0x90
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	1dbb      	adds	r3, r7, #6
 80039d0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039d2:	1dbb      	adds	r3, r7, #6
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	2240      	movs	r2, #64	@ 0x40
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_PCD_EP_DB_Transmit+0x1a>
 80039dc:	e1e4      	b.n	8003da8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2250      	movs	r2, #80	@ 0x50
 80039e4:	5a9b      	ldrh	r3, [r3, r2]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	001a      	movs	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	18d2      	adds	r2, r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	18d3      	adds	r3, r2, r3
 80039f8:	4ad0      	ldr	r2, [pc, #832]	@ (8003d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 80039fa:	4694      	mov	ip, r2
 80039fc:	4463      	add	r3, ip
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	2188      	movs	r1, #136	@ 0x88
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	0592      	lsls	r2, r2, #22
 8003a06:	0d92      	lsrs	r2, r2, #22
 8003a08:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d907      	bls.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	619a      	str	r2, [r3, #24]
 8003a24:	e002      	b.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d000      	beq.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x72>
 8003a34:	e0b5      	b.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d125      	bne.n	8003a8a <HAL_PCD_EP_DB_Transmit+0xc6>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2250      	movs	r2, #80	@ 0x50
 8003a4a:	5a9b      	ldrh	r3, [r3, r2]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	001a      	movs	r2, r3
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	00da      	lsls	r2, r3, #3
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	4ab6      	ldr	r2, [pc, #728]	@ (8003d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003a62:	4694      	mov	ip, r2
 8003a64:	4463      	add	r3, ip
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	059b      	lsls	r3, r3, #22
 8003a70:	0d9b      	lsrs	r3, r3, #22
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4ab0      	ldr	r2, [pc, #704]	@ (8003d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e01b      	b.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d117      	bne.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2250      	movs	r2, #80	@ 0x50
 8003a9e:	5a9b      	ldrh	r3, [r3, r2]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00da      	lsls	r2, r3, #3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8003d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	4463      	add	r3, ip
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d125      	bne.n	8003b1c <HAL_PCD_EP_DB_Transmit+0x158>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2250      	movs	r2, #80	@ 0x50
 8003adc:	5a9b      	ldrh	r3, [r3, r2]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	00da      	lsls	r2, r3, #3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	4a94      	ldr	r2, [pc, #592]	@ (8003d44 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003af4:	4694      	mov	ip, r2
 8003af6:	4463      	add	r3, ip
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	0d9b      	lsrs	r3, r3, #22
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4a8b      	ldr	r2, [pc, #556]	@ (8003d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e018      	b.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d114      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2250      	movs	r2, #80	@ 0x50
 8003b2a:	5a9b      	ldrh	r3, [r3, r2]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	00da      	lsls	r2, r3, #3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	4a80      	ldr	r2, [pc, #512]	@ (8003d44 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003b42:	4694      	mov	ip, r2
 8003b44:	4463      	add	r3, ip
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f006 fa7c 	bl	800a054 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	01db      	lsls	r3, r3, #7
 8003b64:	4013      	ands	r3, r2
 8003b66:	d100      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003b68:	e308      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	001a      	movs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	2016      	movs	r0, #22
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	4971      	ldr	r1, [pc, #452]	@ (8003d48 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	183a      	adds	r2, r7, r0
 8003b96:	8812      	ldrh	r2, [r2, #0]
 8003b98:	496c      	ldr	r1, [pc, #432]	@ (8003d4c <HAL_PCD_EP_DB_Transmit+0x388>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	e2ec      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4013      	ands	r3, r2
 8003bac:	d01a      	beq.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	18d3      	adds	r3, r2, r3
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	208a      	movs	r0, #138	@ 0x8a
 8003bc2:	183b      	adds	r3, r7, r0
 8003bc4:	4960      	ldr	r1, [pc, #384]	@ (8003d48 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	001a      	movs	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	183a      	adds	r2, r7, r0
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	495b      	ldr	r1, [pc, #364]	@ (8003d4c <HAL_PCD_EP_DB_Transmit+0x388>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	b292      	uxth	r2, r2
 8003be2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2224      	movs	r2, #36	@ 0x24
 8003be8:	5c9b      	ldrb	r3, [r3, r2]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d000      	beq.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003bee:	e2c5      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	2188      	movs	r1, #136	@ 0x88
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	18d2      	adds	r2, r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	18d2      	adds	r2, r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d30c      	bcc.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	218c      	movs	r1, #140	@ 0x8c
 8003c20:	187a      	adds	r2, r7, r1
 8003c22:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a1a      	ldr	r2, [r3, #32]
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1ad2      	subs	r2, r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	621a      	str	r2, [r3, #32]
 8003c32:	e01a      	b.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003c3c:	2388      	movs	r3, #136	@ 0x88
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	228c      	movs	r2, #140	@ 0x8c
 8003c44:	18ba      	adds	r2, r7, r2
 8003c46:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]
 8003c50:	e00b      	b.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2224      	movs	r2, #36	@ 0x24
 8003c56:	2100      	movs	r1, #0
 8003c58:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	228c      	movs	r2, #140	@ 0x8c
 8003c60:	18ba      	adds	r2, r7, r2
 8003c62:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d000      	beq.n	8003c74 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003c72:	e06d      	b.n	8003d50 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2250      	movs	r2, #80	@ 0x50
 8003c80:	5a9b      	ldrh	r3, [r3, r2]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	001a      	movs	r2, r3
 8003c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	00da      	lsls	r2, r3, #3
 8003c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003c98:	4694      	mov	ip, r2
 8003c9a:	4463      	add	r3, ip
 8003c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	059b      	lsls	r3, r3, #22
 8003ca6:	0d9b      	lsrs	r3, r3, #22
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	238c      	movs	r3, #140	@ 0x8c
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0x306>
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4a20      	ldr	r2, [pc, #128]	@ (8003d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e061      	b.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003cca:	228c      	movs	r2, #140	@ 0x8c
 8003ccc:	18bb      	adds	r3, r7, r2
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cd2:	d817      	bhi.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x340>
 8003cd4:	18bb      	adds	r3, r7, r2
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cdc:	18bb      	adds	r3, r7, r2
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d002      	beq.n	8003cec <HAL_PCD_EP_DB_Transmit+0x328>
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce8:	3301      	adds	r3, #1
 8003cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e044      	b.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003d04:	228c      	movs	r2, #140	@ 0x8c
 8003d06:	18bb      	adds	r3, r7, r2
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0e:	18bb      	adds	r3, r7, r2
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	221f      	movs	r2, #31
 8003d14:	4013      	ands	r3, r2
 8003d16:	d102      	bne.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4a03      	ldr	r2, [pc, #12]	@ (8003d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	e028      	b.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003d3c:	00000402 	.word	0x00000402
 8003d40:	ffff8000 	.word	0xffff8000
 8003d44:	00000406 	.word	0x00000406
 8003d48:	ffff8f8f 	.word	0xffff8f8f
 8003d4c:	ffffc080 	.word	0xffffc080
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d11a      	bne.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2250      	movs	r2, #80	@ 0x50
 8003d64:	5a9b      	ldrh	r3, [r3, r2]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	001a      	movs	r2, r3
 8003d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	00da      	lsls	r2, r3, #3
 8003d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d78:	18d3      	adds	r3, r2, r3
 8003d7a:	4ad9      	ldr	r2, [pc, #868]	@ (80040e0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8003d7c:	4694      	mov	ip, r2
 8003d7e:	4463      	add	r3, ip
 8003d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d82:	238c      	movs	r3, #140	@ 0x8c
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6959      	ldr	r1, [r3, #20]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	891a      	ldrh	r2, [r3, #8]
 8003d9a:	238c      	movs	r3, #140	@ 0x8c
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f004 fb53 	bl	800844c <USB_WritePMA>
 8003da6:	e1e9      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2250      	movs	r2, #80	@ 0x50
 8003dae:	5a9b      	ldrh	r3, [r3, r2]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	001a      	movs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	18d2      	adds	r2, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	4ac8      	ldr	r2, [pc, #800]	@ (80040e4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8003dc4:	4694      	mov	ip, r2
 8003dc6:	4463      	add	r3, ip
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	2188      	movs	r1, #136	@ 0x88
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	0592      	lsls	r2, r2, #22
 8003dd0:	0d92      	lsrs	r2, r2, #22
 8003dd2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d307      	bcc.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	1ad2      	subs	r2, r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	619a      	str	r2, [r3, #24]
 8003dee:	e002      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d000      	beq.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x43c>
 8003dfe:	e0bb      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d125      	bne.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x490>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2250      	movs	r2, #80	@ 0x50
 8003e14:	5a9b      	ldrh	r3, [r3, r2]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	001a      	movs	r2, r3
 8003e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	00da      	lsls	r2, r3, #3
 8003e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e28:	18d3      	adds	r3, r2, r3
 8003e2a:	4aad      	ldr	r2, [pc, #692]	@ (80040e0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8003e2c:	4694      	mov	ip, r2
 8003e2e:	4463      	add	r3, ip
 8003e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	059b      	lsls	r3, r3, #22
 8003e3a:	0d9b      	lsrs	r3, r3, #22
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4aa7      	ldr	r2, [pc, #668]	@ (80040e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e01b      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d117      	bne.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2250      	movs	r2, #80	@ 0x50
 8003e68:	5a9b      	ldrh	r3, [r3, r2]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	00da      	lsls	r2, r3, #3
 8003e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	4a98      	ldr	r2, [pc, #608]	@ (80040e0 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8003e80:	4694      	mov	ip, r2
 8003e82:	4463      	add	r3, ip
 8003e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	785b      	ldrb	r3, [r3, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d12b      	bne.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2250      	movs	r2, #80	@ 0x50
 8003ea6:	5a9b      	ldrh	r3, [r3, r2]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00da      	lsls	r2, r3, #3
 8003eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eba:	18d3      	adds	r3, r2, r3
 8003ebc:	4a89      	ldr	r2, [pc, #548]	@ (80040e4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8003ebe:	4694      	mov	ip, r2
 8003ec0:	4463      	add	r3, ip
 8003ec2:	2184      	movs	r1, #132	@ 0x84
 8003ec4:	187a      	adds	r2, r7, r1
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	059b      	lsls	r3, r3, #22
 8003ed2:	0d9b      	lsrs	r3, r3, #22
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4a80      	ldr	r2, [pc, #512]	@ (80040e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e018      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x560>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d114      	bne.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x560>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2250      	movs	r2, #80	@ 0x50
 8003f00:	5a9b      	ldrh	r3, [r3, r2]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	001a      	movs	r2, r3
 8003f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	00da      	lsls	r2, r3, #3
 8003f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	4a73      	ldr	r2, [pc, #460]	@ (80040e4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8003f18:	4694      	mov	ip, r2
 8003f1a:	4463      	add	r3, ip
 8003f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f20:	2200      	movs	r2, #0
 8003f22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f006 f891 	bl	800a054 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f32:	1dbb      	adds	r3, r7, #6
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	01db      	lsls	r3, r3, #7
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d000      	beq.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x57c>
 8003f3e:	e11d      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	001a      	movs	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	2082      	movs	r0, #130	@ 0x82
 8003f54:	183b      	adds	r3, r7, r0
 8003f56:	4965      	ldr	r1, [pc, #404]	@ (80040ec <HAL_PCD_EP_DB_Transmit+0x728>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	001a      	movs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	18d3      	adds	r3, r2, r3
 8003f6a:	183a      	adds	r2, r7, r0
 8003f6c:	8812      	ldrh	r2, [r2, #0]
 8003f6e:	4960      	ldr	r1, [pc, #384]	@ (80040f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003f70:	430a      	orrs	r2, r1
 8003f72:	b292      	uxth	r2, r2
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e101      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	881a      	ldrh	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4013      	ands	r3, r2
 8003f82:	d11a      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	001a      	movs	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	204e      	movs	r0, #78	@ 0x4e
 8003f98:	183b      	adds	r3, r7, r0
 8003f9a:	4954      	ldr	r1, [pc, #336]	@ (80040ec <HAL_PCD_EP_DB_Transmit+0x728>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	183a      	adds	r2, r7, r0
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	494f      	ldr	r1, [pc, #316]	@ (80040f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2224      	movs	r2, #36	@ 0x24
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d000      	beq.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x602>
 8003fc4:	e0da      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	2188      	movs	r1, #136	@ 0x88
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	18d2      	adds	r2, r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	18d2      	adds	r2, r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d30c      	bcc.n	800400a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	218c      	movs	r1, #140	@ 0x8c
 8003ff6:	187a      	adds	r2, r7, r1
 8003ff8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	621a      	str	r2, [r3, #32]
 8004008:	e01a      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8004012:	2388      	movs	r3, #136	@ 0x88
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	228c      	movs	r2, #140	@ 0x8c
 800401a:	18ba      	adds	r2, r7, r2
 800401c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2224      	movs	r2, #36	@ 0x24
 8004022:	2100      	movs	r1, #0
 8004024:	5499      	strb	r1, [r3, r2]
 8004026:	e00b      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	228c      	movs	r2, #140	@ 0x8c
 800402e:	18ba      	adds	r2, r7, r2
 8004030:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2224      	movs	r2, #36	@ 0x24
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	657b      	str	r3, [r7, #84]	@ 0x54
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d000      	beq.n	8004050 <HAL_PCD_EP_DB_Transmit+0x68c>
 800404e:	e06d      	b.n	800412c <HAL_PCD_EP_DB_Transmit+0x768>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2250      	movs	r2, #80	@ 0x50
 800405c:	5a9b      	ldrh	r3, [r3, r2]
 800405e:	b29b      	uxth	r3, r3
 8004060:	001a      	movs	r2, r3
 8004062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004064:	189b      	adds	r3, r3, r2
 8004066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00da      	lsls	r2, r3, #3
 800406e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004074:	4694      	mov	ip, r2
 8004076:	4463      	add	r3, ip
 8004078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800407a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	059b      	lsls	r3, r3, #22
 8004082:	0d9b      	lsrs	r3, r3, #22
 8004084:	b29a      	uxth	r2, r3
 8004086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	238c      	movs	r3, #140	@ 0x8c
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8004094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	4a13      	ldr	r2, [pc, #76]	@ (80040e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 800409c:	4313      	orrs	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e05e      	b.n	8004164 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80040a6:	228c      	movs	r2, #140	@ 0x8c
 80040a8:	18bb      	adds	r3, r7, r2
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80040ae:	d821      	bhi.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x730>
 80040b0:	18bb      	adds	r3, r7, r2
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040b8:	18bb      	adds	r3, r7, r2
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	d002      	beq.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x704>
 80040c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c4:	3301      	adds	r3, #1
 80040c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b29a      	uxth	r2, r3
 80040da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e041      	b.n	8004164 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80040e0:	00000402 	.word	0x00000402
 80040e4:	00000406 	.word	0x00000406
 80040e8:	ffff8000 	.word	0xffff8000
 80040ec:	ffff8f8f 	.word	0xffff8f8f
 80040f0:	ffffc080 	.word	0xffffc080
 80040f4:	228c      	movs	r2, #140	@ 0x8c
 80040f6:	18bb      	adds	r3, r7, r2
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fe:	18bb      	adds	r3, r7, r2
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	221f      	movs	r2, #31
 8004104:	4013      	ands	r3, r2
 8004106:	d102      	bne.n	800410e <HAL_PCD_EP_DB_Transmit+0x74a>
 8004108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410a:	3b01      	subs	r3, #1
 800410c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29a      	uxth	r2, r3
 8004114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004116:	b29b      	uxth	r3, r3
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	b29b      	uxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	4a2c      	ldr	r2, [pc, #176]	@ (80041d4 <HAL_PCD_EP_DB_Transmit+0x810>)
 8004122:	4313      	orrs	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	e01b      	b.n	8004164 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d117      	bne.n	8004164 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2250      	movs	r2, #80	@ 0x50
 800413a:	5a9b      	ldrh	r3, [r3, r2]
 800413c:	b29b      	uxth	r3, r3
 800413e:	001a      	movs	r2, r3
 8004140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004142:	189b      	adds	r3, r3, r2
 8004144:	657b      	str	r3, [r7, #84]	@ 0x54
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00da      	lsls	r2, r3, #3
 800414c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	4a21      	ldr	r2, [pc, #132]	@ (80041d8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8004152:	4694      	mov	ip, r2
 8004154:	4463      	add	r3, ip
 8004156:	653b      	str	r3, [r7, #80]	@ 0x50
 8004158:	238c      	movs	r3, #140	@ 0x8c
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	b29a      	uxth	r2, r3
 8004160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004162:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6959      	ldr	r1, [r3, #20]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	895a      	ldrh	r2, [r3, #10]
 8004170:	238c      	movs	r3, #140	@ 0x8c
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f004 f968 	bl	800844c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	001a      	movs	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	18d3      	adds	r3, r2, r3
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29a      	uxth	r2, r3
 800418e:	2014      	movs	r0, #20
 8004190:	183b      	adds	r3, r7, r0
 8004192:	4912      	ldr	r1, [pc, #72]	@ (80041dc <HAL_PCD_EP_DB_Transmit+0x818>)
 8004194:	400a      	ands	r2, r1
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	183b      	adds	r3, r7, r0
 800419a:	183a      	adds	r2, r7, r0
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	2110      	movs	r1, #16
 80041a0:	404a      	eors	r2, r1
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	183b      	adds	r3, r7, r0
 80041a6:	183a      	adds	r2, r7, r0
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	2120      	movs	r1, #32
 80041ac:	404a      	eors	r2, r1
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	001a      	movs	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	18d3      	adds	r3, r2, r3
 80041be:	183a      	adds	r2, r7, r0
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	4907      	ldr	r1, [pc, #28]	@ (80041e0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80041c4:	430a      	orrs	r2, r1
 80041c6:	b292      	uxth	r2, r2
 80041c8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b024      	add	sp, #144	@ 0x90
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	ffff8000 	.word	0xffff8000
 80041d8:	00000406 	.word	0x00000406
 80041dc:	ffff8fbf 	.word	0xffff8fbf
 80041e0:	ffff8080 	.word	0xffff8080

080041e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	0008      	movs	r0, r1
 80041ee:	0011      	movs	r1, r2
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	240a      	movs	r4, #10
 80041f4:	193b      	adds	r3, r7, r4
 80041f6:	1c02      	adds	r2, r0, #0
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	2308      	movs	r3, #8
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	1c0a      	adds	r2, r1, #0
 8004200:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004202:	0021      	movs	r1, r4
 8004204:	187b      	adds	r3, r7, r1
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	187b      	adds	r3, r7, r1
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	2207      	movs	r2, #7
 8004218:	401a      	ands	r2, r3
 800421a:	0013      	movs	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	189b      	adds	r3, r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	3310      	adds	r3, #16
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e00b      	b.n	8004244 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800422c:	230a      	movs	r3, #10
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	881a      	ldrh	r2, [r3, #0]
 8004232:	0013      	movs	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	189b      	adds	r3, r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	3351      	adds	r3, #81	@ 0x51
 800423c:	33ff      	adds	r3, #255	@ 0xff
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004244:	2308      	movs	r3, #8
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	b29a      	uxth	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	80da      	strh	r2, [r3, #6]
 800425c:	e00b      	b.n	8004276 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2201      	movs	r2, #1
 8004262:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	b29a      	uxth	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b29a      	uxth	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b007      	add	sp, #28
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	23b4      	movs	r3, #180	@ 0xb4
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	2101      	movs	r1, #1
 8004296:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	23b2      	movs	r3, #178	@ 0xb2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	2100      	movs	r1, #0
 80042a0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2254      	movs	r2, #84	@ 0x54
 80042a6:	5a9b      	ldrh	r3, [r3, r2]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2201      	movs	r2, #1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b299      	uxth	r1, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2254      	movs	r2, #84	@ 0x54
 80042b4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2254      	movs	r2, #84	@ 0x54
 80042ba:	5a9b      	ldrh	r3, [r3, r2]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2202      	movs	r2, #2
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b299      	uxth	r1, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2254      	movs	r2, #84	@ 0x54
 80042c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	000a      	movs	r2, r1
 80042de:	1cfb      	adds	r3, r7, #3
 80042e0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f000 fb76 	bl	80049ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	d100      	bne.n	800430c <HAL_RCC_OscConfig+0x20>
 800430a:	e08e      	b.n	800442a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800430c:	4bc5      	ldr	r3, [pc, #788]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	220c      	movs	r2, #12
 8004312:	4013      	ands	r3, r2
 8004314:	2b04      	cmp	r3, #4
 8004316:	d00e      	beq.n	8004336 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004318:	4bc2      	ldr	r3, [pc, #776]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	220c      	movs	r2, #12
 800431e:	4013      	ands	r3, r2
 8004320:	2b08      	cmp	r3, #8
 8004322:	d117      	bne.n	8004354 <HAL_RCC_OscConfig+0x68>
 8004324:	4bbf      	ldr	r3, [pc, #764]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	23c0      	movs	r3, #192	@ 0xc0
 800432a:	025b      	lsls	r3, r3, #9
 800432c:	401a      	ands	r2, r3
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	025b      	lsls	r3, r3, #9
 8004332:	429a      	cmp	r2, r3
 8004334:	d10e      	bne.n	8004354 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	4bbb      	ldr	r3, [pc, #748]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	4013      	ands	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x58>
 8004342:	e071      	b.n	8004428 <HAL_RCC_OscConfig+0x13c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d000      	beq.n	800434e <HAL_RCC_OscConfig+0x62>
 800434c:	e06c      	b.n	8004428 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f000 fb4c 	bl	80049ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_RCC_OscConfig+0x80>
 800435c:	4bb1      	ldr	r3, [pc, #708]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4bb0      	ldr	r3, [pc, #704]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004362:	2180      	movs	r1, #128	@ 0x80
 8004364:	0249      	lsls	r1, r1, #9
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e02f      	b.n	80043cc <HAL_RCC_OscConfig+0xe0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0xa2>
 8004374:	4bab      	ldr	r3, [pc, #684]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4baa      	ldr	r3, [pc, #680]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800437a:	49ab      	ldr	r1, [pc, #684]	@ (8004628 <HAL_RCC_OscConfig+0x33c>)
 800437c:	400a      	ands	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	4ba8      	ldr	r3, [pc, #672]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4ba7      	ldr	r3, [pc, #668]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004386:	49a9      	ldr	r1, [pc, #676]	@ (800462c <HAL_RCC_OscConfig+0x340>)
 8004388:	400a      	ands	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e01e      	b.n	80043cc <HAL_RCC_OscConfig+0xe0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10e      	bne.n	80043b4 <HAL_RCC_OscConfig+0xc8>
 8004396:	4ba3      	ldr	r3, [pc, #652]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4ba2      	ldr	r3, [pc, #648]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	02c9      	lsls	r1, r1, #11
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	4b9f      	ldr	r3, [pc, #636]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043aa:	2180      	movs	r1, #128	@ 0x80
 80043ac:	0249      	lsls	r1, r1, #9
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xe0>
 80043b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b9a      	ldr	r3, [pc, #616]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043ba:	499b      	ldr	r1, [pc, #620]	@ (8004628 <HAL_RCC_OscConfig+0x33c>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	4b98      	ldr	r3, [pc, #608]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b97      	ldr	r3, [pc, #604]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043c6:	4999      	ldr	r1, [pc, #612]	@ (800462c <HAL_RCC_OscConfig+0x340>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d014      	beq.n	80043fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fce8 	bl	8001da8 <HAL_GetTick>
 80043d8:	0003      	movs	r3, r0
 80043da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043de:	f7fd fce3 	bl	8001da8 <HAL_GetTick>
 80043e2:	0002      	movs	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b64      	cmp	r3, #100	@ 0x64
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e2fd      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	4013      	ands	r3, r2
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0xf2>
 80043fc:	e015      	b.n	800442a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd fcd3 	bl	8001da8 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7fd fcce 	bl	8001da8 <HAL_GetTick>
 800440c:	0002      	movs	r2, r0
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e2e8      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b82      	ldr	r3, [pc, #520]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	4013      	ands	r3, r2
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x11c>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2202      	movs	r2, #2
 8004430:	4013      	ands	r3, r2
 8004432:	d100      	bne.n	8004436 <HAL_RCC_OscConfig+0x14a>
 8004434:	e06c      	b.n	8004510 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004436:	4b7b      	ldr	r3, [pc, #492]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	220c      	movs	r2, #12
 800443c:	4013      	ands	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004440:	4b78      	ldr	r3, [pc, #480]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	220c      	movs	r2, #12
 8004446:	4013      	ands	r3, r2
 8004448:	2b08      	cmp	r3, #8
 800444a:	d11f      	bne.n	800448c <HAL_RCC_OscConfig+0x1a0>
 800444c:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	23c0      	movs	r3, #192	@ 0xc0
 8004452:	025b      	lsls	r3, r3, #9
 8004454:	401a      	ands	r2, r3
 8004456:	2380      	movs	r3, #128	@ 0x80
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	429a      	cmp	r2, r3
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b71      	ldr	r3, [pc, #452]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x188>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e2bb      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	22f8      	movs	r2, #248	@ 0xf8
 800447a:	4393      	bics	r3, r2
 800447c:	0019      	movs	r1, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e041      	b.n	8004510 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d024      	beq.n	80044de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b62      	ldr	r3, [pc, #392]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fd fc82 	bl	8001da8 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd fc7d 	bl	8001da8 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e297      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d0f1      	beq.n	80044aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b57      	ldr	r3, [pc, #348]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	22f8      	movs	r2, #248	@ 0xf8
 80044cc:	4393      	bics	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00da      	lsls	r2, r3, #3
 80044d6:	4b53      	ldr	r3, [pc, #332]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e018      	b.n	8004510 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b51      	ldr	r3, [pc, #324]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b50      	ldr	r3, [pc, #320]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	438a      	bics	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ea:	f7fd fc5d 	bl	8001da8 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd fc58 	bl	8001da8 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e272      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2202      	movs	r2, #2
 800450c:	4013      	ands	r3, r2
 800450e:	d1f1      	bne.n	80044f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	4013      	ands	r3, r2
 8004518:	d036      	beq.n	8004588 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d019      	beq.n	8004556 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004522:	4b40      	ldr	r3, [pc, #256]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004526:	4b3f      	ldr	r3, [pc, #252]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004528:	2101      	movs	r1, #1
 800452a:	430a      	orrs	r2, r1
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fd fc3b 	bl	8001da8 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004538:	f7fd fc36 	bl	8001da8 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e250      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	4b36      	ldr	r3, [pc, #216]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d0f1      	beq.n	8004538 <HAL_RCC_OscConfig+0x24c>
 8004554:	e018      	b.n	8004588 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004556:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800455a:	4b32      	ldr	r3, [pc, #200]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800455c:	2101      	movs	r1, #1
 800455e:	438a      	bics	r2, r1
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fd fc21 	bl	8001da8 <HAL_GetTick>
 8004566:	0003      	movs	r3, r0
 8004568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fd fc1c 	bl	8001da8 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e236      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457e:	4b29      	ldr	r3, [pc, #164]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	2202      	movs	r2, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d1f1      	bne.n	800456c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2204      	movs	r2, #4
 800458e:	4013      	ands	r3, r2
 8004590:	d100      	bne.n	8004594 <HAL_RCC_OscConfig+0x2a8>
 8004592:	e0b5      	b.n	8004700 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004594:	201f      	movs	r0, #31
 8004596:	183b      	adds	r3, r7, r0
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459c:	4b21      	ldr	r3, [pc, #132]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	055b      	lsls	r3, r3, #21
 80045a4:	4013      	ands	r3, r2
 80045a6:	d110      	bne.n	80045ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80045ae:	2180      	movs	r1, #128	@ 0x80
 80045b0:	0549      	lsls	r1, r1, #21
 80045b2:	430a      	orrs	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	055b      	lsls	r3, r3, #21
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	2201      	movs	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <HAL_RCC_OscConfig+0x344>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4013      	ands	r3, r2
 80045d4:	d11a      	bne.n	800460c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b16      	ldr	r3, [pc, #88]	@ (8004630 <HAL_RCC_OscConfig+0x344>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_RCC_OscConfig+0x344>)
 80045dc:	2180      	movs	r1, #128	@ 0x80
 80045de:	0049      	lsls	r1, r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e4:	f7fd fbe0 	bl	8001da8 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fd fbdb 	bl	8001da8 <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	@ 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1f5      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_OscConfig+0x344>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	2380      	movs	r3, #128	@ 0x80
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10f      	bne.n	8004634 <HAL_RCC_OscConfig+0x348>
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	4b02      	ldr	r3, [pc, #8]	@ (8004624 <HAL_RCC_OscConfig+0x338>)
 800461a:	2101      	movs	r1, #1
 800461c:	430a      	orrs	r2, r1
 800461e:	621a      	str	r2, [r3, #32]
 8004620:	e036      	b.n	8004690 <HAL_RCC_OscConfig+0x3a4>
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	40021000 	.word	0x40021000
 8004628:	fffeffff 	.word	0xfffeffff
 800462c:	fffbffff 	.word	0xfffbffff
 8004630:	40007000 	.word	0x40007000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x36a>
 800463c:	4bca      	ldr	r3, [pc, #808]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	4bc9      	ldr	r3, [pc, #804]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004642:	2101      	movs	r1, #1
 8004644:	438a      	bics	r2, r1
 8004646:	621a      	str	r2, [r3, #32]
 8004648:	4bc7      	ldr	r3, [pc, #796]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800464a:	6a1a      	ldr	r2, [r3, #32]
 800464c:	4bc6      	ldr	r3, [pc, #792]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800464e:	2104      	movs	r1, #4
 8004650:	438a      	bics	r2, r1
 8004652:	621a      	str	r2, [r3, #32]
 8004654:	e01c      	b.n	8004690 <HAL_RCC_OscConfig+0x3a4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0x38c>
 800465e:	4bc2      	ldr	r3, [pc, #776]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	4bc1      	ldr	r3, [pc, #772]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004664:	2104      	movs	r1, #4
 8004666:	430a      	orrs	r2, r1
 8004668:	621a      	str	r2, [r3, #32]
 800466a:	4bbf      	ldr	r3, [pc, #764]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	4bbe      	ldr	r3, [pc, #760]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004670:	2101      	movs	r1, #1
 8004672:	430a      	orrs	r2, r1
 8004674:	621a      	str	r2, [r3, #32]
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0x3a4>
 8004678:	4bbb      	ldr	r3, [pc, #748]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	4bba      	ldr	r3, [pc, #744]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800467e:	2101      	movs	r1, #1
 8004680:	438a      	bics	r2, r1
 8004682:	621a      	str	r2, [r3, #32]
 8004684:	4bb8      	ldr	r3, [pc, #736]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	4bb7      	ldr	r3, [pc, #732]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800468a:	2104      	movs	r1, #4
 800468c:	438a      	bics	r2, r1
 800468e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d014      	beq.n	80046c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fd fb86 	bl	8001da8 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	e009      	b.n	80046b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fd fb81 	bl	8001da8 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	4aaf      	ldr	r2, [pc, #700]	@ (800496c <HAL_RCC_OscConfig+0x680>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e19a      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	4bac      	ldr	r3, [pc, #688]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	2202      	movs	r2, #2
 80046bc:	4013      	ands	r3, r2
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3b6>
 80046c0:	e013      	b.n	80046ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fd fb71 	bl	8001da8 <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ca:	e009      	b.n	80046e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd fb6c 	bl	8001da8 <HAL_GetTick>
 80046d0:	0002      	movs	r2, r0
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	4aa5      	ldr	r2, [pc, #660]	@ (800496c <HAL_RCC_OscConfig+0x680>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e185      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	2202      	movs	r2, #2
 80046e6:	4013      	ands	r3, r2
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ea:	231f      	movs	r3, #31
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80046fa:	499d      	ldr	r1, [pc, #628]	@ (8004970 <HAL_RCC_OscConfig+0x684>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	4013      	ands	r3, r2
 8004708:	d063      	beq.n	80047d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d12a      	bne.n	8004768 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004712:	4b95      	ldr	r3, [pc, #596]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004716:	4b94      	ldr	r3, [pc, #592]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004718:	2104      	movs	r1, #4
 800471a:	430a      	orrs	r2, r1
 800471c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800471e:	4b92      	ldr	r3, [pc, #584]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004722:	4b91      	ldr	r3, [pc, #580]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004724:	2101      	movs	r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd fb3d 	bl	8001da8 <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004734:	f7fd fb38 	bl	8001da8 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e152      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004746:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474a:	2202      	movs	r2, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d0f1      	beq.n	8004734 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004750:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004754:	22f8      	movs	r2, #248	@ 0xf8
 8004756:	4393      	bics	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	00da      	lsls	r2, r3, #3
 8004760:	4b81      	ldr	r3, [pc, #516]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004762:	430a      	orrs	r2, r1
 8004764:	635a      	str	r2, [r3, #52]	@ 0x34
 8004766:	e034      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	3305      	adds	r3, #5
 800476e:	d111      	bne.n	8004794 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004770:	4b7d      	ldr	r3, [pc, #500]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004774:	4b7c      	ldr	r3, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004776:	2104      	movs	r1, #4
 8004778:	438a      	bics	r2, r1
 800477a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800477c:	4b7a      	ldr	r3, [pc, #488]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800477e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004780:	22f8      	movs	r2, #248	@ 0xf8
 8004782:	4393      	bics	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	00da      	lsls	r2, r3, #3
 800478c:	4b76      	ldr	r3, [pc, #472]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800478e:	430a      	orrs	r2, r1
 8004790:	635a      	str	r2, [r3, #52]	@ 0x34
 8004792:	e01e      	b.n	80047d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004794:	4b74      	ldr	r3, [pc, #464]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004798:	4b73      	ldr	r3, [pc, #460]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800479a:	2104      	movs	r1, #4
 800479c:	430a      	orrs	r2, r1
 800479e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80047a0:	4b71      	ldr	r3, [pc, #452]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a4:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ac:	f7fd fafc 	bl	8001da8 <HAL_GetTick>
 80047b0:	0003      	movs	r3, r0
 80047b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047b6:	f7fd faf7 	bl	8001da8 <HAL_GetTick>
 80047ba:	0002      	movs	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e111      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047c8:	4b67      	ldr	r3, [pc, #412]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	2202      	movs	r2, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	d1f1      	bne.n	80047b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2220      	movs	r2, #32
 80047d8:	4013      	ands	r3, r2
 80047da:	d05c      	beq.n	8004896 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80047dc:	4b62      	ldr	r3, [pc, #392]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	220c      	movs	r2, #12
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d00e      	beq.n	8004806 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80047e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	220c      	movs	r2, #12
 80047ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d114      	bne.n	800481e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80047f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	23c0      	movs	r3, #192	@ 0xc0
 80047fa:	025b      	lsls	r3, r3, #9
 80047fc:	401a      	ands	r2, r3
 80047fe:	23c0      	movs	r3, #192	@ 0xc0
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	429a      	cmp	r2, r3
 8004804:	d10b      	bne.n	800481e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004806:	4b58      	ldr	r3, [pc, #352]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	4013      	ands	r3, r2
 8004810:	d040      	beq.n	8004894 <HAL_RCC_OscConfig+0x5a8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d03c      	beq.n	8004894 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0e6      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004826:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482a:	4b4f      	ldr	r3, [pc, #316]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800482c:	2180      	movs	r1, #128	@ 0x80
 800482e:	0249      	lsls	r1, r1, #9
 8004830:	430a      	orrs	r2, r1
 8004832:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fd fab8 	bl	8001da8 <HAL_GetTick>
 8004838:	0003      	movs	r3, r0
 800483a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483e:	f7fd fab3 	bl	8001da8 <HAL_GetTick>
 8004842:	0002      	movs	r2, r0
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0cd      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004850:	4b45      	ldr	r3, [pc, #276]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004854:	2380      	movs	r3, #128	@ 0x80
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	4013      	ands	r3, r2
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x552>
 800485c:	e01b      	b.n	8004896 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800485e:	4b42      	ldr	r3, [pc, #264]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004862:	4b41      	ldr	r3, [pc, #260]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004864:	4943      	ldr	r1, [pc, #268]	@ (8004974 <HAL_RCC_OscConfig+0x688>)
 8004866:	400a      	ands	r2, r1
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd fa9d 	bl	8001da8 <HAL_GetTick>
 800486e:	0003      	movs	r3, r0
 8004870:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004874:	f7fd fa98 	bl	8001da8 <HAL_GetTick>
 8004878:	0002      	movs	r2, r0
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0b2      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004886:	4b38      	ldr	r3, [pc, #224]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	029b      	lsls	r3, r3, #10
 800488e:	4013      	ands	r3, r2
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x588>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004894:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d100      	bne.n	80048a0 <HAL_RCC_OscConfig+0x5b4>
 800489e:	e0a4      	b.n	80049ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a0:	4b31      	ldr	r3, [pc, #196]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	220c      	movs	r2, #12
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d100      	bne.n	80048ae <HAL_RCC_OscConfig+0x5c2>
 80048ac:	e078      	b.n	80049a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d14c      	bne.n	8004950 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048bc:	492e      	ldr	r1, [pc, #184]	@ (8004978 <HAL_RCC_OscConfig+0x68c>)
 80048be:	400a      	ands	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fa71 	bl	8001da8 <HAL_GetTick>
 80048c6:	0003      	movs	r3, r0
 80048c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd fa6c 	bl	8001da8 <HAL_GetTick>
 80048d0:	0002      	movs	r2, r0
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e086      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048de:	4b22      	ldr	r3, [pc, #136]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	2380      	movs	r3, #128	@ 0x80
 80048e4:	049b      	lsls	r3, r3, #18
 80048e6:	4013      	ands	r3, r2
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	220f      	movs	r2, #15
 80048f0:	4393      	bics	r3, r2
 80048f2:	0019      	movs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <HAL_RCC_OscConfig+0x690>)
 8004904:	4013      	ands	r3, r2
 8004906:	0019      	movs	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	431a      	orrs	r2, r3
 8004912:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004918:	4b13      	ldr	r3, [pc, #76]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 800491e:	2180      	movs	r1, #128	@ 0x80
 8004920:	0449      	lsls	r1, r1, #17
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fd fa3f 	bl	8001da8 <HAL_GetTick>
 800492a:	0003      	movs	r3, r0
 800492c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fd fa3a 	bl	8001da8 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e054      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	049b      	lsls	r3, r3, #18
 800494a:	4013      	ands	r3, r2
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x644>
 800494e:	e04c      	b.n	80049ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004950:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <HAL_RCC_OscConfig+0x67c>)
 8004956:	4908      	ldr	r1, [pc, #32]	@ (8004978 <HAL_RCC_OscConfig+0x68c>)
 8004958:	400a      	ands	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fa24 	bl	8001da8 <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x6a6>
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	40021000 	.word	0x40021000
 800496c:	00001388 	.word	0x00001388
 8004970:	efffffff 	.word	0xefffffff
 8004974:	fffeffff 	.word	0xfffeffff
 8004978:	feffffff 	.word	0xfeffffff
 800497c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004980:	f7fd fa12 	bl	8001da8 <HAL_GetTick>
 8004984:	0002      	movs	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e02c      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004992:	4b18      	ldr	r3, [pc, #96]	@ (80049f4 <HAL_RCC_OscConfig+0x708>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	2380      	movs	r3, #128	@ 0x80
 8004998:	049b      	lsls	r3, r3, #18
 800499a:	4013      	ands	r3, r2
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x694>
 800499e:	e024      	b.n	80049ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01f      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_OscConfig+0x708>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_RCC_OscConfig+0x708>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	23c0      	movs	r3, #192	@ 0xc0
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d10e      	bne.n	80049e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	220f      	movs	r2, #15
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	23f0      	movs	r3, #240	@ 0xf0
 80049da:	039b      	lsls	r3, r3, #14
 80049dc:	401a      	ands	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b008      	add	sp, #32
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000

080049f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0bf      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b61      	ldr	r3, [pc, #388]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2201      	movs	r2, #1
 8004a12:	4013      	ands	r3, r2
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d911      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4393      	bics	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	4b5b      	ldr	r3, [pc, #364]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2c:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0a6      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2202      	movs	r2, #2
 8004a44:	4013      	ands	r3, r2
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d006      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a52:	4b51      	ldr	r3, [pc, #324]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4b50      	ldr	r3, [pc, #320]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a58:	21e0      	movs	r1, #224	@ 0xe0
 8004a5a:	00c9      	lsls	r1, r1, #3
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b4d      	ldr	r3, [pc, #308]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	22f0      	movs	r2, #240	@ 0xf0
 8004a66:	4393      	bics	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d04c      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b44      	ldr	r3, [pc, #272]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d120      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07a      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	049b      	lsls	r3, r3, #18
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d114      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06e      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ab6:	4b38      	ldr	r3, [pc, #224]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d108      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e062      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac6:	4b34      	ldr	r3, [pc, #208]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2202      	movs	r2, #2
 8004acc:	4013      	ands	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e05b      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad4:	4b30      	ldr	r3, [pc, #192]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	4393      	bics	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae8:	f7fd f95e 	bl	8001da8 <HAL_GetTick>
 8004aec:	0003      	movs	r3, r0
 8004aee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af0:	e009      	b.n	8004b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af2:	f7fd f959 	bl	8001da8 <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	4a27      	ldr	r2, [pc, #156]	@ (8004b9c <HAL_RCC_ClockConfig+0x1a4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e042      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d1ec      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b18:	4b1e      	ldr	r3, [pc, #120]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4013      	ands	r3, r2
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d211      	bcs.n	8004b4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b38:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <HAL_RCC_ClockConfig+0x19c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e020      	b.n	8004b8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	4013      	ands	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b54:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1a8>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b68:	f000 f820 	bl	8004bac <HAL_RCC_GetSysClockFreq>
 8004b6c:	0001      	movs	r1, r0
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <HAL_RCC_ClockConfig+0x1a0>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	220f      	movs	r2, #15
 8004b76:	4013      	ands	r3, r2
 8004b78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1ac>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	000a      	movs	r2, r1
 8004b7e:	40da      	lsrs	r2, r3
 8004b80:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b84:	2003      	movs	r0, #3
 8004b86:	f7fd f8c9 	bl	8001d1c <HAL_InitTick>
  
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	00001388 	.word	0x00001388
 8004ba0:	fffff8ff 	.word	0xfffff8ff
 8004ba4:	0800a748 	.word	0x0800a748
 8004ba8:	2000021c 	.word	0x2000021c

08004bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	220c      	movs	r2, #12
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d046      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0xb8>
 8004bd6:	d848      	bhi.n	8004c6a <HAL_RCC_GetSysClockFreq+0xbe>
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d002      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x36>
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d003      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x3c>
 8004be0:	e043      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be2:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004be4:	613b      	str	r3, [r7, #16]
      break;
 8004be6:	e043      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0c9b      	lsrs	r3, r3, #18
 8004bec:	220f      	movs	r2, #15
 8004bee:	4013      	ands	r3, r2
 8004bf0:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004bf6:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	220f      	movs	r2, #15
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004c00:	5cd3      	ldrb	r3, [r2, r3]
 8004c02:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	23c0      	movs	r3, #192	@ 0xc0
 8004c08:	025b      	lsls	r3, r3, #9
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	025b      	lsls	r3, r3, #9
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d109      	bne.n	8004c28 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	481a      	ldr	r0, [pc, #104]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c18:	f7fb fa76 	bl	8000108 <__udivsi3>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	001a      	movs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4353      	muls	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e01a      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	23c0      	movs	r3, #192	@ 0xc0
 8004c2c:	025b      	lsls	r3, r3, #9
 8004c2e:	401a      	ands	r2, r3
 8004c30:	23c0      	movs	r3, #192	@ 0xc0
 8004c32:	025b      	lsls	r3, r3, #9
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d109      	bne.n	8004c4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4814      	ldr	r0, [pc, #80]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004c3c:	f7fb fa64 	bl	8000108 <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	001a      	movs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4353      	muls	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	480c      	ldr	r0, [pc, #48]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c50:	f7fb fa5a 	bl	8000108 <__udivsi3>
 8004c54:	0003      	movs	r3, r0
 8004c56:	001a      	movs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4353      	muls	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	613b      	str	r3, [r7, #16]
      break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004c66:	613b      	str	r3, [r7, #16]
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c6c:	613b      	str	r3, [r7, #16]
      break;
 8004c6e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c70:	693b      	ldr	r3, [r7, #16]
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b006      	add	sp, #24
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	007a1200 	.word	0x007a1200
 8004c84:	0800a758 	.word	0x0800a758
 8004c88:	0800a768 	.word	0x0800a768
 8004c8c:	02dc6c00 	.word	0x02dc6c00

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	025b      	lsls	r3, r3, #9
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d100      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004cac:	e08e      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2017      	movs	r0, #23
 8004cb0:	183b      	adds	r3, r7, r0
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	055b      	lsls	r3, r3, #21
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d110      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	0549      	lsls	r1, r1, #21
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	61da      	str	r2, [r3, #28]
 8004cd0:	4b67      	ldr	r3, [pc, #412]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	055b      	lsls	r3, r3, #21
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cde:	183b      	adds	r3, r7, r0
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce4:	4b63      	ldr	r3, [pc, #396]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d11a      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf0:	4b60      	ldr	r3, [pc, #384]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cf6:	2180      	movs	r1, #128	@ 0x80
 8004cf8:	0049      	lsls	r1, r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd f853 	bl	8001da8 <HAL_GetTick>
 8004d02:	0003      	movs	r3, r0
 8004d04:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	e008      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fd f84e 	bl	8001da8 <HAL_GetTick>
 8004d0c:	0002      	movs	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b64      	cmp	r3, #100	@ 0x64
 8004d14:	d901      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0a6      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	4b56      	ldr	r3, [pc, #344]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d26:	4b52      	ldr	r3, [pc, #328]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	23c0      	movs	r3, #192	@ 0xc0
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d034      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	23c0      	movs	r3, #192	@ 0xc0
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d02c      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d48:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	4b46      	ldr	r3, [pc, #280]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d58:	2180      	movs	r1, #128	@ 0x80
 8004d5a:	0249      	lsls	r1, r1, #9
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d60:	4b43      	ldr	r3, [pc, #268]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	4b42      	ldr	r3, [pc, #264]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d66:	4945      	ldr	r1, [pc, #276]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d6c:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	4013      	ands	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fd f815 	bl	8001da8 <HAL_GetTick>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e009      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd f810 	bl	8001da8 <HAL_GetTick>
 8004d88:	0002      	movs	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e067      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	4b35      	ldr	r3, [pc, #212]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	4b33      	ldr	r3, [pc, #204]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	4a34      	ldr	r2, [pc, #208]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4b2f      	ldr	r3, [pc, #188]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004db2:	430a      	orrs	r2, r1
 8004db4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004db6:	2317      	movs	r3, #23
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc6:	492f      	ldr	r1, [pc, #188]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd6:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	2203      	movs	r2, #3
 8004ddc:	4393      	bics	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de6:	430a      	orrs	r2, r1
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	4a23      	ldr	r2, [pc, #140]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e04:	430a      	orrs	r2, r1
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	2210      	movs	r2, #16
 8004e18:	4393      	bics	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e22:	430a      	orrs	r2, r1
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e32:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	2280      	movs	r2, #128	@ 0x80
 8004e38:	4393      	bics	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e42:	430a      	orrs	r2, r1
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	@ 0x80
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	2240      	movs	r2, #64	@ 0x40
 8004e58:	4393      	bics	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	4b03      	ldr	r3, [pc, #12]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e62:	430a      	orrs	r2, r1
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b006      	add	sp, #24
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
 8004e78:	fffffcff 	.word	0xfffffcff
 8004e7c:	fffeffff 	.word	0xfffeffff
 8004e80:	00001388 	.word	0x00001388
 8004e84:	efffffff 	.word	0xefffffff
 8004e88:	fffcffff 	.word	0xfffcffff

08004e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e042      	b.n	8004f24 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	223d      	movs	r2, #61	@ 0x3d
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223c      	movs	r2, #60	@ 0x3c
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fc fe0b 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	223d      	movs	r2, #61	@ 0x3d
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	0019      	movs	r1, r3
 8004ecc:	0010      	movs	r0, r2
 8004ece:	f000 fee9 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2246      	movs	r2, #70	@ 0x46
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	223e      	movs	r2, #62	@ 0x3e
 8004ede:	2101      	movs	r1, #1
 8004ee0:	5499      	strb	r1, [r3, r2]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	223f      	movs	r2, #63	@ 0x3f
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	5499      	strb	r1, [r3, r2]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2240      	movs	r2, #64	@ 0x40
 8004eee:	2101      	movs	r1, #1
 8004ef0:	5499      	strb	r1, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2241      	movs	r2, #65	@ 0x41
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2242      	movs	r2, #66	@ 0x42
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2243      	movs	r2, #67	@ 0x43
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2244      	movs	r2, #68	@ 0x44
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2245      	movs	r2, #69	@ 0x45
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	223d      	movs	r2, #61	@ 0x3d
 8004f1e:	2101      	movs	r1, #1
 8004f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	223d      	movs	r2, #61	@ 0x3d
 8004f38:	5c9b      	ldrb	r3, [r3, r2]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e03b      	b.n	8004fbc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	223d      	movs	r2, #61	@ 0x3d
 8004f48:	2102      	movs	r1, #2
 8004f4a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2101      	movs	r1, #1
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <HAL_TIM_Base_Start_IT+0x98>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <HAL_TIM_Base_Start_IT+0x5a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d009      	beq.n	8004f86 <HAL_TIM_Base_Start_IT+0x5a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a14      	ldr	r2, [pc, #80]	@ (8004fc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIM_Base_Start_IT+0x5a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <HAL_TIM_Base_Start_IT+0xa0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	4013      	ands	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d010      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	e007      	b.n	8004fba <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b004      	add	sp, #16
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40014000 	.word	0x40014000

08004fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e042      	b.n	8005068 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	223d      	movs	r2, #61	@ 0x3d
 8004fe6:	5c9b      	ldrb	r3, [r3, r2]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	223c      	movs	r2, #60	@ 0x3c
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f839 	bl	8005070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	223d      	movs	r2, #61	@ 0x3d
 8005002:	2102      	movs	r1, #2
 8005004:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	0019      	movs	r1, r3
 8005010:	0010      	movs	r0, r2
 8005012:	f000 fe47 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2246      	movs	r2, #70	@ 0x46
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	223e      	movs	r2, #62	@ 0x3e
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	223f      	movs	r2, #63	@ 0x3f
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2240      	movs	r2, #64	@ 0x40
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2241      	movs	r2, #65	@ 0x41
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2242      	movs	r2, #66	@ 0x42
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2243      	movs	r2, #67	@ 0x43
 800504a:	2101      	movs	r1, #1
 800504c:	5499      	strb	r1, [r3, r2]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2244      	movs	r2, #68	@ 0x44
 8005052:	2101      	movs	r1, #1
 8005054:	5499      	strb	r1, [r3, r2]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2245      	movs	r2, #69	@ 0x45
 800505a:	2101      	movs	r1, #1
 800505c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	223d      	movs	r2, #61	@ 0x3d
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	0018      	movs	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005078:	46c0      	nop			@ (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	001a      	movs	r2, r3
 800508e:	1cbb      	adds	r3, r7, #2
 8005090:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2317      	movs	r3, #23
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d108      	bne.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x32>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	223e      	movs	r2, #62	@ 0x3e
 80050a4:	5c9b      	ldrb	r3, [r3, r2]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	3b02      	subs	r3, #2
 80050aa:	425a      	negs	r2, r3
 80050ac:	4153      	adcs	r3, r2
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e01f      	b.n	80050f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d108      	bne.n	80050ca <HAL_TIM_PWM_Start_DMA+0x4a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	223f      	movs	r2, #63	@ 0x3f
 80050bc:	5c9b      	ldrb	r3, [r3, r2]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	3b02      	subs	r3, #2
 80050c2:	425a      	negs	r2, r3
 80050c4:	4153      	adcs	r3, r2
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e013      	b.n	80050f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d108      	bne.n	80050e2 <HAL_TIM_PWM_Start_DMA+0x62>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2240      	movs	r2, #64	@ 0x40
 80050d4:	5c9b      	ldrb	r3, [r3, r2]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	3b02      	subs	r3, #2
 80050da:	425a      	negs	r2, r3
 80050dc:	4153      	adcs	r3, r2
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e007      	b.n	80050f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2241      	movs	r2, #65	@ 0x41
 80050e6:	5c9b      	ldrb	r3, [r3, r2]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	3b02      	subs	r3, #2
 80050ec:	425a      	negs	r2, r3
 80050ee:	4153      	adcs	r3, r2
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	e164      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <HAL_TIM_PWM_Start_DMA+0x92>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	223e      	movs	r2, #62	@ 0x3e
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	425a      	negs	r2, r3
 800510c:	4153      	adcs	r3, r2
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e01f      	b.n	8005152 <HAL_TIM_PWM_Start_DMA+0xd2>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d108      	bne.n	800512a <HAL_TIM_PWM_Start_DMA+0xaa>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	223f      	movs	r2, #63	@ 0x3f
 800511c:	5c9b      	ldrb	r3, [r3, r2]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	425a      	negs	r2, r3
 8005124:	4153      	adcs	r3, r2
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e013      	b.n	8005152 <HAL_TIM_PWM_Start_DMA+0xd2>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d108      	bne.n	8005142 <HAL_TIM_PWM_Start_DMA+0xc2>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	5c9b      	ldrb	r3, [r3, r2]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	425a      	negs	r2, r3
 800513c:	4153      	adcs	r3, r2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e007      	b.n	8005152 <HAL_TIM_PWM_Start_DMA+0xd2>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2241      	movs	r2, #65	@ 0x41
 8005146:	5c9b      	ldrb	r3, [r3, r2]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	425a      	negs	r2, r3
 800514e:	4153      	adcs	r3, r2
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d025      	beq.n	80051a2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_TIM_PWM_Start_DMA+0xe4>
 800515c:	1cbb      	adds	r3, r7, #2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e12d      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_TIM_PWM_Start_DMA+0xf8>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	223e      	movs	r2, #62	@ 0x3e
 8005172:	2102      	movs	r1, #2
 8005174:	5499      	strb	r1, [r3, r2]
 8005176:	e016      	b.n	80051a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d104      	bne.n	8005188 <HAL_TIM_PWM_Start_DMA+0x108>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	223f      	movs	r2, #63	@ 0x3f
 8005182:	2102      	movs	r1, #2
 8005184:	5499      	strb	r1, [r3, r2]
 8005186:	e00e      	b.n	80051a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d104      	bne.n	8005198 <HAL_TIM_PWM_Start_DMA+0x118>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2240      	movs	r2, #64	@ 0x40
 8005192:	2102      	movs	r1, #2
 8005194:	5499      	strb	r1, [r3, r2]
 8005196:	e006      	b.n	80051a6 <HAL_TIM_PWM_Start_DMA+0x126>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2241      	movs	r2, #65	@ 0x41
 800519c:	2102      	movs	r1, #2
 800519e:	5499      	strb	r1, [r3, r2]
 80051a0:	e001      	b.n	80051a6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e10e      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d100      	bne.n	80051ae <HAL_TIM_PWM_Start_DMA+0x12e>
 80051ac:	e080      	b.n	80052b0 <HAL_TIM_PWM_Start_DMA+0x230>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d900      	bls.n	80051b6 <HAL_TIM_PWM_Start_DMA+0x136>
 80051b4:	e0a1      	b.n	80052fa <HAL_TIM_PWM_Start_DMA+0x27a>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d054      	beq.n	8005266 <HAL_TIM_PWM_Start_DMA+0x1e6>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d900      	bls.n	80051c4 <HAL_TIM_PWM_Start_DMA+0x144>
 80051c2:	e09a      	b.n	80052fa <HAL_TIM_PWM_Start_DMA+0x27a>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d025      	beq.n	800521c <HAL_TIM_PWM_Start_DMA+0x19c>
 80051d0:	e093      	b.n	80052fa <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	4a7d      	ldr	r2, [pc, #500]	@ (80053cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	4a7c      	ldr	r2, [pc, #496]	@ (80053d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 80051e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	4a7b      	ldr	r2, [pc, #492]	@ (80053d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3334      	adds	r3, #52	@ 0x34
 80051f6:	001a      	movs	r2, r3
 80051f8:	1cbb      	adds	r3, r7, #2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	f7fc ff04 	bl	8002008 <HAL_DMA_Start_IT>
 8005200:	1e03      	subs	r3, r0, #0
 8005202:	d001      	beq.n	8005208 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0dd      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	0089      	lsls	r1, r1, #2
 8005216:	430a      	orrs	r2, r1
 8005218:	60da      	str	r2, [r3, #12]
      break;
 800521a:	e073      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	4a6a      	ldr	r2, [pc, #424]	@ (80053cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	4a69      	ldr	r2, [pc, #420]	@ (80053d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800522a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	4a68      	ldr	r2, [pc, #416]	@ (80053d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3338      	adds	r3, #56	@ 0x38
 8005240:	001a      	movs	r2, r3
 8005242:	1cbb      	adds	r3, r7, #2
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	f7fc fedf 	bl	8002008 <HAL_DMA_Start_IT>
 800524a:	1e03      	subs	r3, r0, #0
 800524c:	d001      	beq.n	8005252 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0b8      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2180      	movs	r1, #128	@ 0x80
 800525e:	00c9      	lsls	r1, r1, #3
 8005260:	430a      	orrs	r2, r1
 8005262:	60da      	str	r2, [r3, #12]
      break;
 8005264:	e04e      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4a58      	ldr	r2, [pc, #352]	@ (80053cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	4a57      	ldr	r2, [pc, #348]	@ (80053d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005274:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	4a56      	ldr	r2, [pc, #344]	@ (80053d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	333c      	adds	r3, #60	@ 0x3c
 800528a:	001a      	movs	r2, r3
 800528c:	1cbb      	adds	r3, r7, #2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	f7fc feba 	bl	8002008 <HAL_DMA_Start_IT>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d001      	beq.n	800529c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e093      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2180      	movs	r1, #128	@ 0x80
 80052a8:	0109      	lsls	r1, r1, #4
 80052aa:	430a      	orrs	r2, r1
 80052ac:	60da      	str	r2, [r3, #12]
      break;
 80052ae:	e029      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	4a45      	ldr	r2, [pc, #276]	@ (80053cc <HAL_TIM_PWM_Start_DMA+0x34c>)
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	4a44      	ldr	r2, [pc, #272]	@ (80053d0 <HAL_TIM_PWM_Start_DMA+0x350>)
 80052be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	4a43      	ldr	r2, [pc, #268]	@ (80053d4 <HAL_TIM_PWM_Start_DMA+0x354>)
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3340      	adds	r3, #64	@ 0x40
 80052d4:	001a      	movs	r2, r3
 80052d6:	1cbb      	adds	r3, r7, #2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	f7fc fe95 	bl	8002008 <HAL_DMA_Start_IT>
 80052de:	1e03      	subs	r3, r0, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06e      	b.n	80053c4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2180      	movs	r1, #128	@ 0x80
 80052f2:	0149      	lsls	r1, r1, #5
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]
      break;
 80052f8:	e004      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80052fa:	2317      	movs	r3, #23
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
      break;
 8005302:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005304:	2317      	movs	r3, #23
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d157      	bne.n	80053be <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	2201      	movs	r2, #1
 8005316:	0018      	movs	r0, r3
 8005318:	f000 ffe8 	bl	80062ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2a      	ldr	r2, [pc, #168]	@ (80053e0 <HAL_TIM_PWM_Start_DMA+0x360>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <HAL_TIM_PWM_Start_DMA+0x364>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_TIM_PWM_Start_DMA+0x2ca>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2180      	movs	r1, #128	@ 0x80
 800535a:	0209      	lsls	r1, r1, #8
 800535c:	430a      	orrs	r2, r1
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <HAL_TIM_PWM_Start_DMA+0x30a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	2380      	movs	r3, #128	@ 0x80
 8005370:	05db      	lsls	r3, r3, #23
 8005372:	429a      	cmp	r2, r3
 8005374:	d009      	beq.n	800538a <HAL_TIM_PWM_Start_DMA+0x30a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_TIM_PWM_Start_DMA+0x30a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d111      	bne.n	80053ae <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2207      	movs	r2, #7
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d010      	beq.n	80053be <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2101      	movs	r1, #1
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	e007      	b.n	80053be <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2101      	movs	r1, #1
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053be:	2317      	movs	r3, #23
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	781b      	ldrb	r3, [r3, #0]
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b006      	add	sp, #24
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08005b91 	.word	0x08005b91
 80053d0:	08005c3b 	.word	0x08005c3b
 80053d4:	08005afd 	.word	0x08005afd
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40000400 	.word	0x40000400

080053ec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	230f      	movs	r3, #15
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d039      	beq.n	8005478 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d844      	bhi.n	8005494 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d025      	beq.n	800545c <HAL_TIM_PWM_Stop_DMA+0x70>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b08      	cmp	r3, #8
 8005414:	d83e      	bhi.n	8005494 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_TIM_PWM_Stop_DMA+0x38>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d00e      	beq.n	8005440 <HAL_TIM_PWM_Stop_DMA+0x54>
 8005422:	e037      	b.n	8005494 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4954      	ldr	r1, [pc, #336]	@ (8005580 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8005430:	400a      	ands	r2, r1
 8005432:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	0018      	movs	r0, r3
 800543a:	f7fc fe4b 	bl	80020d4 <HAL_DMA_Abort_IT>
      break;
 800543e:	e02e      	b.n	800549e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	494e      	ldr	r1, [pc, #312]	@ (8005584 <HAL_TIM_PWM_Stop_DMA+0x198>)
 800544c:	400a      	ands	r2, r1
 800544e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	0018      	movs	r0, r3
 8005456:	f7fc fe3d 	bl	80020d4 <HAL_DMA_Abort_IT>
      break;
 800545a:	e020      	b.n	800549e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4948      	ldr	r1, [pc, #288]	@ (8005588 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005468:	400a      	ands	r2, r1
 800546a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	0018      	movs	r0, r3
 8005472:	f7fc fe2f 	bl	80020d4 <HAL_DMA_Abort_IT>
      break;
 8005476:	e012      	b.n	800549e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4942      	ldr	r1, [pc, #264]	@ (800558c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005484:	400a      	ands	r2, r1
 8005486:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	0018      	movs	r0, r3
 800548e:	f7fc fe21 	bl	80020d4 <HAL_DMA_Abort_IT>
      break;
 8005492:	e004      	b.n	800549e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8005494:	230f      	movs	r3, #15
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]
      break;
 800549c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800549e:	230f      	movs	r3, #15
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d000      	beq.n	80054aa <HAL_TIM_PWM_Stop_DMA+0xbe>
 80054a8:	e063      	b.n	8005572 <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	2200      	movs	r2, #0
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 ff1a 	bl	80062ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a31      	ldr	r2, [pc, #196]	@ (8005598 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a30      	ldr	r2, [pc, #192]	@ (800559c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_TIM_PWM_Stop_DMA+0xfa>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d013      	beq.n	8005512 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	@ (80055a0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	d10d      	bne.n	8005512 <HAL_TIM_PWM_Stop_DMA+0x126>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4a29      	ldr	r2, [pc, #164]	@ (80055a4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80054fe:	4013      	ands	r3, r2
 8005500:	d107      	bne.n	8005512 <HAL_TIM_PWM_Stop_DMA+0x126>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4926      	ldr	r1, [pc, #152]	@ (80055a8 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800550e:	400a      	ands	r2, r1
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800551a:	4013      	ands	r3, r2
 800551c:	d10d      	bne.n	800553a <HAL_TIM_PWM_Stop_DMA+0x14e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8005526:	4013      	ands	r3, r2
 8005528:	d107      	bne.n	800553a <HAL_TIM_PWM_Stop_DMA+0x14e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	438a      	bics	r2, r1
 8005538:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Stop_DMA+0x15e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	223e      	movs	r2, #62	@ 0x3e
 8005544:	2101      	movs	r1, #1
 8005546:	5499      	strb	r1, [r3, r2]
 8005548:	e013      	b.n	8005572 <HAL_TIM_PWM_Stop_DMA+0x186>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	223f      	movs	r2, #63	@ 0x3f
 8005554:	2101      	movs	r1, #1
 8005556:	5499      	strb	r1, [r3, r2]
 8005558:	e00b      	b.n	8005572 <HAL_TIM_PWM_Stop_DMA+0x186>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Stop_DMA+0x17e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2240      	movs	r2, #64	@ 0x40
 8005564:	2101      	movs	r1, #1
 8005566:	5499      	strb	r1, [r3, r2]
 8005568:	e003      	b.n	8005572 <HAL_TIM_PWM_Stop_DMA+0x186>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2241      	movs	r2, #65	@ 0x41
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005572:	230f      	movs	r3, #15
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	781b      	ldrb	r3, [r3, #0]
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b004      	add	sp, #16
 800557e:	bd80      	pop	{r7, pc}
 8005580:	fffffdff 	.word	0xfffffdff
 8005584:	fffffbff 	.word	0xfffffbff
 8005588:	fffff7ff 	.word	0xfffff7ff
 800558c:	ffffefff 	.word	0xffffefff
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800
 80055a0:	00001111 	.word	0x00001111
 80055a4:	00000444 	.word	0x00000444
 80055a8:	ffff7fff 	.word	0xffff7fff

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2202      	movs	r2, #2
 80055c8:	4013      	ands	r3, r2
 80055ca:	d021      	beq.n	8005610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
 80055d2:	d01d      	beq.n	8005610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2203      	movs	r2, #3
 80055da:	4252      	negs	r2, r2
 80055dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2203      	movs	r2, #3
 80055ec:	4013      	ands	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0018      	movs	r0, r3
 80055f4:	f000 fa6a 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 80055f8:	e007      	b.n	800560a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 fa5d 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0018      	movs	r0, r3
 8005606:	f7fc f985 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2204      	movs	r2, #4
 8005614:	4013      	ands	r3, r2
 8005616:	d022      	beq.n	800565e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2204      	movs	r2, #4
 800561c:	4013      	ands	r3, r2
 800561e:	d01e      	beq.n	800565e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2205      	movs	r2, #5
 8005626:	4252      	negs	r2, r2
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	23c0      	movs	r3, #192	@ 0xc0
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4013      	ands	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 fa43 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 8005646:	e007      	b.n	8005658 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fa36 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f7fc f95e 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2208      	movs	r2, #8
 8005662:	4013      	ands	r3, r2
 8005664:	d021      	beq.n	80056aa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2208      	movs	r2, #8
 800566a:	4013      	ands	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2209      	movs	r2, #9
 8005674:	4252      	negs	r2, r2
 8005676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2204      	movs	r2, #4
 800567c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	2203      	movs	r2, #3
 8005686:	4013      	ands	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0018      	movs	r0, r3
 800568e:	f000 fa1d 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 8005692:	e007      	b.n	80056a4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fa10 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fc f938 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2210      	movs	r2, #16
 80056ae:	4013      	ands	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2210      	movs	r2, #16
 80056b6:	4013      	ands	r3, r2
 80056b8:	d01e      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2211      	movs	r2, #17
 80056c0:	4252      	negs	r2, r2
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2208      	movs	r2, #8
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	23c0      	movs	r3, #192	@ 0xc0
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 f9f6 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 80056e0:	e007      	b.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f9e9 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fc f911 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d00c      	beq.n	800571a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	4013      	ands	r3, r2
 8005706:	d008      	beq.n	800571a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2202      	movs	r2, #2
 800570e:	4252      	negs	r2, r2
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f7fc f98b 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	4013      	ands	r3, r2
 8005720:	d00c      	beq.n	800573c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2280      	movs	r2, #128	@ 0x80
 8005726:	4013      	ands	r3, r2
 8005728:	d008      	beq.n	800573c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2281      	movs	r2, #129	@ 0x81
 8005730:	4252      	negs	r2, r2
 8005732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0018      	movs	r0, r3
 8005738:	f000 fe62 	bl	8006400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2240      	movs	r2, #64	@ 0x40
 8005740:	4013      	ands	r3, r2
 8005742:	d00c      	beq.n	800575e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2240      	movs	r2, #64	@ 0x40
 8005748:	4013      	ands	r3, r2
 800574a:	d008      	beq.n	800575e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2241      	movs	r2, #65	@ 0x41
 8005752:	4252      	negs	r2, r2
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f9bf 	bl	8005adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2220      	movs	r2, #32
 8005762:	4013      	ands	r3, r2
 8005764:	d00c      	beq.n	8005780 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	4013      	ands	r3, r2
 800576c:	d008      	beq.n	8005780 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2221      	movs	r2, #33	@ 0x21
 8005774:	4252      	negs	r2, r2
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	0018      	movs	r0, r3
 800577c:	f000 fe38 	bl	80063f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2317      	movs	r3, #23
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	223c      	movs	r2, #60	@ 0x3c
 80057a0:	5c9b      	ldrb	r3, [r3, r2]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0ad      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	223c      	movs	r2, #60	@ 0x3c
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d100      	bne.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80057b8:	e076      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	d900      	bls.n	80057c2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80057c0:	e095      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d04e      	beq.n	8005866 <HAL_TIM_PWM_ConfigChannel+0xde>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d900      	bls.n	80057d0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80057ce:	e08e      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_PWM_ConfigChannel+0x56>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d021      	beq.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x98>
 80057dc:	e087      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0011      	movs	r1, r2
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 faea 	bl	8005dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2108      	movs	r1, #8
 80057f8:	430a      	orrs	r2, r1
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2104      	movs	r1, #4
 8005808:	438a      	bics	r2, r1
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
      break;
 800581e:	e06b      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0011      	movs	r1, r2
 8005828:	0018      	movs	r0, r3
 800582a:	f000 fb51 	bl	8005ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2180      	movs	r1, #128	@ 0x80
 800583a:	0109      	lsls	r1, r1, #4
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4931      	ldr	r1, [pc, #196]	@ (8005910 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800584c:	400a      	ands	r2, r1
 800584e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	619a      	str	r2, [r3, #24]
      break;
 8005864:	e048      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	0011      	movs	r1, r2
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fbb2 	bl	8005fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2108      	movs	r1, #8
 8005880:	430a      	orrs	r2, r1
 8005882:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2104      	movs	r1, #4
 8005890:	438a      	bics	r2, r1
 8005892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69d9      	ldr	r1, [r3, #28]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	61da      	str	r2, [r3, #28]
      break;
 80058a6:	e027      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	0011      	movs	r1, r2
 80058b0:	0018      	movs	r0, r3
 80058b2:	f000 fc17 	bl	80060e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0109      	lsls	r1, r1, #4
 80058c4:	430a      	orrs	r2, r1
 80058c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	490f      	ldr	r1, [pc, #60]	@ (8005910 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80058d4:	400a      	ands	r2, r1
 80058d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69d9      	ldr	r1, [r3, #28]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	61da      	str	r2, [r3, #28]
      break;
 80058ec:	e004      	b.n	80058f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80058ee:	2317      	movs	r3, #23
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	223c      	movs	r2, #60	@ 0x3c
 80058fc:	2100      	movs	r1, #0
 80058fe:	5499      	strb	r1, [r3, r2]

  return status;
 8005900:	2317      	movs	r3, #23
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	781b      	ldrb	r3, [r3, #0]
}
 8005906:	0018      	movs	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	b006      	add	sp, #24
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	fffffbff 	.word	0xfffffbff

08005914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	230f      	movs	r3, #15
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	223c      	movs	r2, #60	@ 0x3c
 800592a:	5c9b      	ldrb	r3, [r3, r2]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIM_ConfigClockSource+0x20>
 8005930:	2302      	movs	r3, #2
 8005932:	e0bc      	b.n	8005aae <HAL_TIM_ConfigClockSource+0x19a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	223c      	movs	r2, #60	@ 0x3c
 8005938:	2101      	movs	r1, #1
 800593a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	223d      	movs	r2, #61	@ 0x3d
 8005940:	2102      	movs	r1, #2
 8005942:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2277      	movs	r2, #119	@ 0x77
 8005950:	4393      	bics	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4a58      	ldr	r2, [pc, #352]	@ (8005ab8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005958:	4013      	ands	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2280      	movs	r2, #128	@ 0x80
 800596a:	0192      	lsls	r2, r2, #6
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0xde>
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	0192      	lsls	r2, r2, #6
 8005974:	4293      	cmp	r3, r2
 8005976:	d900      	bls.n	800597a <HAL_TIM_ConfigClockSource+0x66>
 8005978:	e088      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 800597a:	2280      	movs	r2, #128	@ 0x80
 800597c:	0152      	lsls	r2, r2, #5
 800597e:	4293      	cmp	r3, r2
 8005980:	d100      	bne.n	8005984 <HAL_TIM_ConfigClockSource+0x70>
 8005982:	e088      	b.n	8005a96 <HAL_TIM_ConfigClockSource+0x182>
 8005984:	2280      	movs	r2, #128	@ 0x80
 8005986:	0152      	lsls	r2, r2, #5
 8005988:	4293      	cmp	r3, r2
 800598a:	d900      	bls.n	800598e <HAL_TIM_ConfigClockSource+0x7a>
 800598c:	e07e      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 800598e:	2b70      	cmp	r3, #112	@ 0x70
 8005990:	d018      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0xb0>
 8005992:	d900      	bls.n	8005996 <HAL_TIM_ConfigClockSource+0x82>
 8005994:	e07a      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 8005996:	2b60      	cmp	r3, #96	@ 0x60
 8005998:	d04f      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x126>
 800599a:	d900      	bls.n	800599e <HAL_TIM_ConfigClockSource+0x8a>
 800599c:	e076      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 800599e:	2b50      	cmp	r3, #80	@ 0x50
 80059a0:	d03b      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x106>
 80059a2:	d900      	bls.n	80059a6 <HAL_TIM_ConfigClockSource+0x92>
 80059a4:	e072      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d057      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x146>
 80059aa:	d900      	bls.n	80059ae <HAL_TIM_ConfigClockSource+0x9a>
 80059ac:	e06e      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 80059ae:	2b30      	cmp	r3, #48	@ 0x30
 80059b0:	d063      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x166>
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x166>
 80059b8:	d868      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d05d      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x166>
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d05b      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x166>
 80059c2:	e063      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	f000 fc6a 	bl	80062ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2277      	movs	r2, #119	@ 0x77
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]
      break;
 80059f0:	e052      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a02:	f000 fc53 	bl	80062ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2180      	movs	r1, #128	@ 0x80
 8005a12:	01c9      	lsls	r1, r1, #7
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03e      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a26:	001a      	movs	r2, r3
 8005a28:	f000 fbc6 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	@ 0x50
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 fc20 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02e      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a46:	001a      	movs	r2, r3
 8005a48:	f000 fbe4 	bl	8006214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	@ 0x60
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 fc10 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01e      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a66:	001a      	movs	r2, r3
 8005a68:	f000 fba6 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	@ 0x40
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 fc00 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00e      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	0019      	movs	r1, r3
 8005a84:	0010      	movs	r0, r2
 8005a86:	f000 fbf7 	bl	8006278 <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e005      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
      break;
 8005a94:	e000      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005a96:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	223d      	movs	r2, #61	@ 0x3d
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	223c      	movs	r2, #60	@ 0x3c
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	5499      	strb	r1, [r3, r2]

  return status;
 8005aa8:	230f      	movs	r3, #15
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	781b      	ldrb	r3, [r3, #0]
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	ffff00ff 	.word	0xffff00ff

08005abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac4:	46c0      	nop			@ (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005af4:	46c0      	nop			@ (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}

08005afc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d107      	bne.n	8005b24 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	223e      	movs	r2, #62	@ 0x3e
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]
 8005b22:	e02a      	b.n	8005b7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d107      	bne.n	8005b3e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2202      	movs	r2, #2
 8005b32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	223f      	movs	r2, #63	@ 0x3f
 8005b38:	2101      	movs	r1, #1
 8005b3a:	5499      	strb	r1, [r3, r2]
 8005b3c:	e01d      	b.n	8005b7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d107      	bne.n	8005b58 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2240      	movs	r2, #64	@ 0x40
 8005b52:	2101      	movs	r1, #1
 8005b54:	5499      	strb	r1, [r3, r2]
 8005b56:	e010      	b.n	8005b7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d107      	bne.n	8005b72 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2208      	movs	r2, #8
 8005b66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2241      	movs	r2, #65	@ 0x41
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	5499      	strb	r1, [r3, r2]
 8005b70:	e003      	b.n	8005b7a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	223d      	movs	r2, #61	@ 0x3d
 8005b76:	2101      	movs	r1, #1
 8005b78:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7ff ffb5 	bl	8005aec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
}
 8005b88:	46c0      	nop			@ (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b004      	add	sp, #16
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10b      	bne.n	8005bc0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d136      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	223e      	movs	r2, #62	@ 0x3e
 8005bba:	2101      	movs	r1, #1
 8005bbc:	5499      	strb	r1, [r3, r2]
 8005bbe:	e031      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10b      	bne.n	8005be2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d125      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	223f      	movs	r2, #63	@ 0x3f
 8005bdc:	2101      	movs	r1, #1
 8005bde:	5499      	strb	r1, [r3, r2]
 8005be0:	e020      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10b      	bne.n	8005c04 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d114      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2240      	movs	r2, #64	@ 0x40
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
 8005c02:	e00f      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10a      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2241      	movs	r2, #65	@ 0x41
 8005c20:	2101      	movs	r1, #1
 8005c22:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fb fe74 	bl	8001914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	771a      	strb	r2, [r3, #28]
}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d103      	bne.n	8005c5a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	771a      	strb	r2, [r3, #28]
 8005c58:	e019      	b.n	8005c8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d103      	bne.n	8005c6c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2202      	movs	r2, #2
 8005c68:	771a      	strb	r2, [r3, #28]
 8005c6a:	e010      	b.n	8005c8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d103      	bne.n	8005c7e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	771a      	strb	r2, [r3, #28]
 8005c7c:	e007      	b.n	8005c8e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d102      	bne.n	8005c8e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f7fb fdbb 	bl	800180c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
}
 8005c9c:	46c0      	nop			@ (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <TIM_Base_SetConfig+0x100>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d008      	beq.n	8005cce <TIM_Base_SetConfig+0x2a>
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	05db      	lsls	r3, r3, #23
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d003      	beq.n	8005cce <TIM_Base_SetConfig+0x2a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a37      	ldr	r2, [pc, #220]	@ (8005da8 <TIM_Base_SetConfig+0x104>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2270      	movs	r2, #112	@ 0x70
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a30      	ldr	r2, [pc, #192]	@ (8005da4 <TIM_Base_SetConfig+0x100>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	2380      	movs	r3, #128	@ 0x80
 8005cec:	05db      	lsls	r3, r3, #23
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d013      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8005da8 <TIM_Base_SetConfig+0x104>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8005dac <TIM_Base_SetConfig+0x108>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2a      	ldr	r2, [pc, #168]	@ (8005db0 <TIM_Base_SetConfig+0x10c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a29      	ldr	r2, [pc, #164]	@ (8005db4 <TIM_Base_SetConfig+0x110>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0x76>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <TIM_Base_SetConfig+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a27      	ldr	r2, [pc, #156]	@ (8005dbc <TIM_Base_SetConfig+0x118>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	4393      	bics	r3, r2
 8005d32:	001a      	movs	r2, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a13      	ldr	r2, [pc, #76]	@ (8005da4 <TIM_Base_SetConfig+0x100>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <TIM_Base_SetConfig+0xce>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	@ (8005db0 <TIM_Base_SetConfig+0x10c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_Base_SetConfig+0xce>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <TIM_Base_SetConfig+0x110>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_Base_SetConfig+0xce>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a12      	ldr	r2, [pc, #72]	@ (8005db8 <TIM_Base_SetConfig+0x114>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d103      	bne.n	8005d7a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2201      	movs	r2, #1
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d106      	bne.n	8005d9a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2201      	movs	r2, #1
 8005d92:	4393      	bics	r3, r2
 8005d94:	001a      	movs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]
  }
}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40002000 	.word	0x40002000
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800
 8005dbc:	fffffcff 	.word	0xfffffcff

08005dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	4393      	bics	r3, r2
 8005dd8:	001a      	movs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2270      	movs	r2, #112	@ 0x70
 8005dee:	4393      	bics	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2203      	movs	r2, #3
 8005df6:	4393      	bics	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2202      	movs	r2, #2
 8005e08:	4393      	bics	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a27      	ldr	r2, [pc, #156]	@ (8005eb8 <TIM_OC1_SetConfig+0xf8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_OC1_SetConfig+0x76>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a26      	ldr	r2, [pc, #152]	@ (8005ebc <TIM_OC1_SetConfig+0xfc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_OC1_SetConfig+0x76>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	@ (8005ec0 <TIM_OC1_SetConfig+0x100>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC1_SetConfig+0x76>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	@ (8005ec4 <TIM_OC1_SetConfig+0x104>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10c      	bne.n	8005e50 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	4393      	bics	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	4393      	bics	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a19      	ldr	r2, [pc, #100]	@ (8005eb8 <TIM_OC1_SetConfig+0xf8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <TIM_OC1_SetConfig+0xb0>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <TIM_OC1_SetConfig+0xfc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_OC1_SetConfig+0xb0>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <TIM_OC1_SetConfig+0x100>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC1_SetConfig+0xb0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <TIM_OC1_SetConfig+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d111      	bne.n	8005e94 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_OC1_SetConfig+0x108>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <TIM_OC1_SetConfig+0x10c>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b006      	add	sp, #24
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800
 8005ec8:	fffffeff 	.word	0xfffffeff
 8005ecc:	fffffdff 	.word	0xfffffdff

08005ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	4393      	bics	r3, r2
 8005ee8:	001a      	movs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb8 <TIM_OC2_SetConfig+0xe8>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a2d      	ldr	r2, [pc, #180]	@ (8005fbc <TIM_OC2_SetConfig+0xec>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	4393      	bics	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a24      	ldr	r2, [pc, #144]	@ (8005fc0 <TIM_OC2_SetConfig+0xf0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10d      	bne.n	8005f4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	4393      	bics	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2240      	movs	r2, #64	@ 0x40
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc0 <TIM_OC2_SetConfig+0xf0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_OC2_SetConfig+0x9e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc4 <TIM_OC2_SetConfig+0xf4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_OC2_SetConfig+0x9e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a19      	ldr	r2, [pc, #100]	@ (8005fc8 <TIM_OC2_SetConfig+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_OC2_SetConfig+0x9e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a18      	ldr	r2, [pc, #96]	@ (8005fcc <TIM_OC2_SetConfig+0xfc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d113      	bne.n	8005f96 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4a17      	ldr	r2, [pc, #92]	@ (8005fd0 <TIM_OC2_SetConfig+0x100>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4a16      	ldr	r2, [pc, #88]	@ (8005fd4 <TIM_OC2_SetConfig+0x104>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b006      	add	sp, #24
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	ffff8fff 	.word	0xffff8fff
 8005fbc:	fffffcff 	.word	0xfffffcff
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800
 8005fd0:	fffffbff 	.word	0xfffffbff
 8005fd4:	fffff7ff 	.word	0xfffff7ff

08005fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	4a33      	ldr	r2, [pc, #204]	@ (80060bc <TIM_OC3_SetConfig+0xe4>)
 8005fee:	401a      	ands	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2270      	movs	r2, #112	@ 0x70
 8006004:	4393      	bics	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2203      	movs	r2, #3
 800600c:	4393      	bics	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4a28      	ldr	r2, [pc, #160]	@ (80060c0 <TIM_OC3_SetConfig+0xe8>)
 800601e:	4013      	ands	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a24      	ldr	r2, [pc, #144]	@ (80060c4 <TIM_OC3_SetConfig+0xec>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d10d      	bne.n	8006052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4a23      	ldr	r2, [pc, #140]	@ (80060c8 <TIM_OC3_SetConfig+0xf0>)
 800603a:	4013      	ands	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <TIM_OC3_SetConfig+0xf4>)
 800604e:	4013      	ands	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <TIM_OC3_SetConfig+0xec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_OC3_SetConfig+0x9a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <TIM_OC3_SetConfig+0xf8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_OC3_SetConfig+0x9a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <TIM_OC3_SetConfig+0xfc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0x9a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <TIM_OC3_SetConfig+0x100>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d113      	bne.n	800609a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <TIM_OC3_SetConfig+0x104>)
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <TIM_OC3_SetConfig+0x108>)
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	46c0      	nop			@ (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b006      	add	sp, #24
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	fffffeff 	.word	0xfffffeff
 80060c0:	fffffdff 	.word	0xfffffdff
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	fffff7ff 	.word	0xfffff7ff
 80060cc:	fffffbff 	.word	0xfffffbff
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	ffffefff 	.word	0xffffefff
 80060e0:	ffffdfff 	.word	0xffffdfff

080060e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4a26      	ldr	r2, [pc, #152]	@ (8006194 <TIM_OC4_SetConfig+0xb0>)
 80060fa:	401a      	ands	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a22      	ldr	r2, [pc, #136]	@ (8006198 <TIM_OC4_SetConfig+0xb4>)
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a21      	ldr	r2, [pc, #132]	@ (800619c <TIM_OC4_SetConfig+0xb8>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <TIM_OC4_SetConfig+0xbc>)
 800612c:	4013      	ands	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	031b      	lsls	r3, r3, #12
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a19      	ldr	r2, [pc, #100]	@ (80061a4 <TIM_OC4_SetConfig+0xc0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC4_SetConfig+0x78>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <TIM_OC4_SetConfig+0xc4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC4_SetConfig+0x78>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <TIM_OC4_SetConfig+0xc8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC4_SetConfig+0x78>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a16      	ldr	r2, [pc, #88]	@ (80061b0 <TIM_OC4_SetConfig+0xcc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4a15      	ldr	r2, [pc, #84]	@ (80061b4 <TIM_OC4_SetConfig+0xd0>)
 8006160:	4013      	ands	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	b006      	add	sp, #24
 8006190:	bd80      	pop	{r7, pc}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	ffffefff 	.word	0xffffefff
 8006198:	ffff8fff 	.word	0xffff8fff
 800619c:	fffffcff 	.word	0xfffffcff
 80061a0:	ffffdfff 	.word	0xffffdfff
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800
 80061b4:	ffffbfff 	.word	0xffffbfff

080061b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	2201      	movs	r2, #1
 80061d0:	4393      	bics	r3, r2
 80061d2:	001a      	movs	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	22f0      	movs	r2, #240	@ 0xf0
 80061e2:	4393      	bics	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	220a      	movs	r2, #10
 80061f4:	4393      	bics	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	46c0      	nop			@ (mov r8, r8)
 800620e:	46bd      	mov	sp, r7
 8006210:	b006      	add	sp, #24
 8006212:	bd80      	pop	{r7, pc}

08006214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	2210      	movs	r2, #16
 800622c:	4393      	bics	r3, r2
 800622e:	001a      	movs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <TIM_TI2_ConfigInputStage+0x60>)
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	22a0      	movs	r2, #160	@ 0xa0
 8006250:	4393      	bics	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	46bd      	mov	sp, r7
 800626e:	b006      	add	sp, #24
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	ffff0fff 	.word	0xffff0fff

08006278 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2270      	movs	r2, #112	@ 0x70
 800628c:	4393      	bics	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	2207      	movs	r2, #7
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	609a      	str	r2, [r3, #8]
}
 80062a2:	46c0      	nop			@ (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b004      	add	sp, #16
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4a09      	ldr	r2, [pc, #36]	@ (80062e8 <TIM_ETR_SetConfig+0x3c>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	021a      	lsls	r2, r3, #8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	ffff00ff 	.word	0xffff00ff

080062ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	221f      	movs	r2, #31
 80062fc:	4013      	ands	r3, r2
 80062fe:	2201      	movs	r2, #1
 8006300:	409a      	lsls	r2, r3
 8006302:	0013      	movs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	43d2      	mvns	r2, r2
 800630e:	401a      	ands	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	211f      	movs	r1, #31
 800631c:	400b      	ands	r3, r1
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4099      	lsls	r1, r3
 8006322:	000b      	movs	r3, r1
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b006      	add	sp, #24
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	223c      	movs	r2, #60	@ 0x3c
 8006342:	5c9b      	ldrb	r3, [r3, r2]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e047      	b.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	223c      	movs	r2, #60	@ 0x3c
 8006350:	2101      	movs	r1, #1
 8006352:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	223d      	movs	r2, #61	@ 0x3d
 8006358:	2102      	movs	r1, #2
 800635a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2270      	movs	r2, #112	@ 0x70
 8006370:	4393      	bics	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a16      	ldr	r2, [pc, #88]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00f      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	2380      	movs	r3, #128	@ 0x80
 8006396:	05db      	lsls	r3, r3, #23
 8006398:	429a      	cmp	r2, r3
 800639a:	d009      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a11      	ldr	r2, [pc, #68]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a10      	ldr	r2, [pc, #64]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10c      	bne.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2280      	movs	r2, #128	@ 0x80
 80063b4:	4393      	bics	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	223d      	movs	r2, #61	@ 0x3d
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	223c      	movs	r2, #60	@ 0x3c
 80063d6:	2100      	movs	r1, #0
 80063d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40014000 	.word	0x40014000

080063f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f8:	46c0      	nop			@ (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b002      	add	sp, #8
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006408:	46c0      	nop			@ (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b002      	add	sp, #8
 800640e:	bd80      	pop	{r7, pc}

08006410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2244      	movs	r2, #68	@ 0x44
 800641c:	2100      	movs	r1, #0
 800641e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <USB_EnableGlobalInt+0x28>)
 8006422:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	b299      	uxth	r1, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2240      	movs	r2, #64	@ 0x40
 800642c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	0000bf80 	.word	0x0000bf80

0800643c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006444:	4b09      	ldr	r3, [pc, #36]	@ (800646c <USB_DisableGlobalInt+0x30>)
 8006446:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2240      	movs	r2, #64	@ 0x40
 800644c:	5a9b      	ldrh	r3, [r3, r2]
 800644e:	b29b      	uxth	r3, r3
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	b292      	uxth	r2, r2
 8006454:	43d2      	mvns	r2, r2
 8006456:	b292      	uxth	r2, r2
 8006458:	4013      	ands	r3, r2
 800645a:	b299      	uxth	r1, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2240      	movs	r2, #64	@ 0x40
 8006460:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	b004      	add	sp, #16
 800646a:	bd80      	pop	{r7, pc}
 800646c:	0000bf80 	.word	0x0000bf80

08006470 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	6019      	str	r1, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2240      	movs	r2, #64	@ 0x40
 8006482:	2101      	movs	r1, #1
 8006484:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2240      	movs	r2, #64	@ 0x40
 800648a:	2100      	movs	r1, #0
 800648c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2244      	movs	r2, #68	@ 0x44
 8006492:	2100      	movs	r1, #0
 8006494:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2250      	movs	r2, #80	@ 0x50
 800649a:	2100      	movs	r1, #0
 800649c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b004      	add	sp, #16
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b09c      	sub	sp, #112	@ 0x70
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b2:	236f      	movs	r3, #111	@ 0x6f
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	18d3      	adds	r3, r2, r3
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	236c      	movs	r3, #108	@ 0x6c
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	49a1      	ldr	r1, [pc, #644]	@ (8006754 <USB_ActivateEndpoint+0x2ac>)
 80064ce:	400a      	ands	r2, r1
 80064d0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d017      	beq.n	800650a <USB_ActivateEndpoint+0x62>
 80064da:	dc28      	bgt.n	800652e <USB_ActivateEndpoint+0x86>
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d00e      	beq.n	80064fe <USB_ActivateEndpoint+0x56>
 80064e0:	dc25      	bgt.n	800652e <USB_ActivateEndpoint+0x86>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <USB_ActivateEndpoint+0x44>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d018      	beq.n	800651c <USB_ActivateEndpoint+0x74>
 80064ea:	e020      	b.n	800652e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064ec:	226c      	movs	r2, #108	@ 0x6c
 80064ee:	18bb      	adds	r3, r7, r2
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	8812      	ldrh	r2, [r2, #0]
 80064f4:	2180      	movs	r1, #128	@ 0x80
 80064f6:	0089      	lsls	r1, r1, #2
 80064f8:	430a      	orrs	r2, r1
 80064fa:	801a      	strh	r2, [r3, #0]
      break;
 80064fc:	e01c      	b.n	8006538 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80064fe:	226c      	movs	r2, #108	@ 0x6c
 8006500:	18bb      	adds	r3, r7, r2
 8006502:	18ba      	adds	r2, r7, r2
 8006504:	8812      	ldrh	r2, [r2, #0]
 8006506:	801a      	strh	r2, [r3, #0]
      break;
 8006508:	e016      	b.n	8006538 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800650a:	226c      	movs	r2, #108	@ 0x6c
 800650c:	18bb      	adds	r3, r7, r2
 800650e:	18ba      	adds	r2, r7, r2
 8006510:	8812      	ldrh	r2, [r2, #0]
 8006512:	21c0      	movs	r1, #192	@ 0xc0
 8006514:	00c9      	lsls	r1, r1, #3
 8006516:	430a      	orrs	r2, r1
 8006518:	801a      	strh	r2, [r3, #0]
      break;
 800651a:	e00d      	b.n	8006538 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800651c:	226c      	movs	r2, #108	@ 0x6c
 800651e:	18bb      	adds	r3, r7, r2
 8006520:	18ba      	adds	r2, r7, r2
 8006522:	8812      	ldrh	r2, [r2, #0]
 8006524:	2180      	movs	r1, #128	@ 0x80
 8006526:	00c9      	lsls	r1, r1, #3
 8006528:	430a      	orrs	r2, r1
 800652a:	801a      	strh	r2, [r3, #0]
      break;
 800652c:	e004      	b.n	8006538 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800652e:	236f      	movs	r3, #111	@ 0x6f
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	2201      	movs	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
      break;
 8006536:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18d3      	adds	r3, r2, r3
 8006542:	226c      	movs	r2, #108	@ 0x6c
 8006544:	18ba      	adds	r2, r7, r2
 8006546:	8812      	ldrh	r2, [r2, #0]
 8006548:	4983      	ldr	r1, [pc, #524]	@ (8006758 <USB_ActivateEndpoint+0x2b0>)
 800654a:	430a      	orrs	r2, r1
 800654c:	b292      	uxth	r2, r2
 800654e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	18d3      	adds	r3, r2, r3
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	b21b      	sxth	r3, r3
 8006560:	4a7e      	ldr	r2, [pc, #504]	@ (800675c <USB_ActivateEndpoint+0x2b4>)
 8006562:	4013      	ands	r3, r2
 8006564:	b21a      	sxth	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b21b      	sxth	r3, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	b21a      	sxth	r2, r3
 8006570:	2166      	movs	r1, #102	@ 0x66
 8006572:	187b      	adds	r3, r7, r1
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	18d3      	adds	r3, r2, r3
 8006580:	187a      	adds	r2, r7, r1
 8006582:	8812      	ldrh	r2, [r2, #0]
 8006584:	4974      	ldr	r1, [pc, #464]	@ (8006758 <USB_ActivateEndpoint+0x2b0>)
 8006586:	430a      	orrs	r2, r1
 8006588:	b292      	uxth	r2, r2
 800658a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	7b1b      	ldrb	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d000      	beq.n	8006596 <USB_ActivateEndpoint+0xee>
 8006594:	e177      	b.n	8006886 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d100      	bne.n	80065a0 <USB_ActivateEndpoint+0xf8>
 800659e:	e07a      	b.n	8006696 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2250      	movs	r2, #80	@ 0x50
 80065a8:	5a9b      	ldrh	r3, [r3, r2]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	001a      	movs	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	189b      	adds	r3, r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	00da      	lsls	r2, r3, #3
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	18d3      	adds	r3, r2, r3
 80065be:	2280      	movs	r2, #128	@ 0x80
 80065c0:	00d2      	lsls	r2, r2, #3
 80065c2:	4694      	mov	ip, r2
 80065c4:	4463      	add	r3, ip
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	88db      	ldrh	r3, [r3, #6]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	18db      	adds	r3, r3, r3
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	18d2      	adds	r2, r2, r3
 80065e2:	2112      	movs	r1, #18
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	187b      	adds	r3, r7, r1
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	2240      	movs	r2, #64	@ 0x40
 80065f0:	4013      	ands	r3, r2
 80065f2:	d016      	beq.n	8006622 <USB_ActivateEndpoint+0x17a>
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	18d3      	adds	r3, r2, r3
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29a      	uxth	r2, r3
 8006602:	2010      	movs	r0, #16
 8006604:	183b      	adds	r3, r7, r0
 8006606:	4955      	ldr	r1, [pc, #340]	@ (800675c <USB_ActivateEndpoint+0x2b4>)
 8006608:	400a      	ands	r2, r1
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	18d3      	adds	r3, r2, r3
 8006616:	183a      	adds	r2, r7, r0
 8006618:	8812      	ldrh	r2, [r2, #0]
 800661a:	4951      	ldr	r1, [pc, #324]	@ (8006760 <USB_ActivateEndpoint+0x2b8>)
 800661c:	430a      	orrs	r2, r1
 800661e:	b292      	uxth	r2, r2
 8006620:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	78db      	ldrb	r3, [r3, #3]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d01d      	beq.n	8006666 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	18d3      	adds	r3, r2, r3
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	200c      	movs	r0, #12
 800663a:	183b      	adds	r3, r7, r0
 800663c:	4949      	ldr	r1, [pc, #292]	@ (8006764 <USB_ActivateEndpoint+0x2bc>)
 800663e:	400a      	ands	r2, r1
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	183b      	adds	r3, r7, r0
 8006644:	183a      	adds	r2, r7, r0
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	2120      	movs	r1, #32
 800664a:	404a      	eors	r2, r1
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	18d3      	adds	r3, r2, r3
 8006658:	183a      	adds	r2, r7, r0
 800665a:	8812      	ldrh	r2, [r2, #0]
 800665c:	493e      	ldr	r1, [pc, #248]	@ (8006758 <USB_ActivateEndpoint+0x2b0>)
 800665e:	430a      	orrs	r2, r1
 8006660:	b292      	uxth	r2, r2
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e2b5      	b.n	8006bd2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	18d3      	adds	r3, r2, r3
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	200e      	movs	r0, #14
 8006676:	183b      	adds	r3, r7, r0
 8006678:	493a      	ldr	r1, [pc, #232]	@ (8006764 <USB_ActivateEndpoint+0x2bc>)
 800667a:	400a      	ands	r2, r1
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	183a      	adds	r2, r7, r0
 800668a:	8812      	ldrh	r2, [r2, #0]
 800668c:	4932      	ldr	r1, [pc, #200]	@ (8006758 <USB_ActivateEndpoint+0x2b0>)
 800668e:	430a      	orrs	r2, r1
 8006690:	b292      	uxth	r2, r2
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e29d      	b.n	8006bd2 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2250      	movs	r2, #80	@ 0x50
 800669e:	5a9b      	ldrh	r3, [r3, r2]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	001a      	movs	r2, r3
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	00da      	lsls	r2, r3, #3
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	18d3      	adds	r3, r2, r3
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <USB_ActivateEndpoint+0x2c0>)
 80066b6:	4694      	mov	ip, r2
 80066b8:	4463      	add	r3, ip
 80066ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	18db      	adds	r3, r3, r3
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2250      	movs	r2, #80	@ 0x50
 80066d4:	5a9b      	ldrh	r3, [r3, r2]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	001a      	movs	r2, r3
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	189b      	adds	r3, r3, r2
 80066de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	00da      	lsls	r2, r3, #3
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	18d3      	adds	r3, r2, r3
 80066ea:	4a20      	ldr	r2, [pc, #128]	@ (800676c <USB_ActivateEndpoint+0x2c4>)
 80066ec:	4694      	mov	ip, r2
 80066ee:	4463      	add	r3, ip
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	059b      	lsls	r3, r3, #22
 80066fa:	0d9b      	lsrs	r3, r3, #22
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <USB_ActivateEndpoint+0x274>
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <USB_ActivateEndpoint+0x2c8>)
 8006712:	4313      	orrs	r3, r2
 8006714:	b29a      	uxth	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e045      	b.n	80067a8 <USB_ActivateEndpoint+0x300>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b3e      	cmp	r3, #62	@ 0x3e
 8006722:	d827      	bhi.n	8006774 <USB_ActivateEndpoint+0x2cc>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2201      	movs	r2, #1
 8006732:	4013      	ands	r3, r2
 8006734:	d002      	beq.n	800673c <USB_ActivateEndpoint+0x294>
 8006736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006738:	3301      	adds	r3, #1
 800673a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29a      	uxth	r2, r3
 8006742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006744:	b29b      	uxth	r3, r3
 8006746:	029b      	lsls	r3, r3, #10
 8006748:	b29b      	uxth	r3, r3
 800674a:	4313      	orrs	r3, r2
 800674c:	b29a      	uxth	r2, r3
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e029      	b.n	80067a8 <USB_ActivateEndpoint+0x300>
 8006754:	ffff898f 	.word	0xffff898f
 8006758:	ffff8080 	.word	0xffff8080
 800675c:	ffff8f8f 	.word	0xffff8f8f
 8006760:	ffff80c0 	.word	0xffff80c0
 8006764:	ffff8fbf 	.word	0xffff8fbf
 8006768:	00000404 	.word	0x00000404
 800676c:	00000406 	.word	0x00000406
 8006770:	ffff8000 	.word	0xffff8000
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	221f      	movs	r2, #31
 8006782:	4013      	ands	r3, r2
 8006784:	d102      	bne.n	800678c <USB_ActivateEndpoint+0x2e4>
 8006786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006788:	3b01      	subs	r3, #1
 800678a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29a      	uxth	r2, r3
 8006792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29b      	uxth	r3, r3
 800679e:	4ab5      	ldr	r2, [pc, #724]	@ (8006a74 <USB_ActivateEndpoint+0x5cc>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	18d2      	adds	r2, r2, r3
 80067b2:	2122      	movs	r1, #34	@ 0x22
 80067b4:	187b      	adds	r3, r7, r1
 80067b6:	8812      	ldrh	r2, [r2, #0]
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	187b      	adds	r3, r7, r1
 80067bc:	881a      	ldrh	r2, [r3, #0]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	01db      	lsls	r3, r3, #7
 80067c2:	4013      	ands	r3, r2
 80067c4:	d016      	beq.n	80067f4 <USB_ActivateEndpoint+0x34c>
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	18d3      	adds	r3, r2, r3
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	2020      	movs	r0, #32
 80067d6:	183b      	adds	r3, r7, r0
 80067d8:	49a7      	ldr	r1, [pc, #668]	@ (8006a78 <USB_ActivateEndpoint+0x5d0>)
 80067da:	400a      	ands	r2, r1
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	18d3      	adds	r3, r2, r3
 80067e8:	183a      	adds	r2, r7, r0
 80067ea:	8812      	ldrh	r2, [r2, #0]
 80067ec:	49a3      	ldr	r1, [pc, #652]	@ (8006a7c <USB_ActivateEndpoint+0x5d4>)
 80067ee:	430a      	orrs	r2, r1
 80067f0:	b292      	uxth	r2, r2
 80067f2:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d125      	bne.n	8006848 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	18d3      	adds	r3, r2, r3
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29a      	uxth	r2, r3
 800680a:	201c      	movs	r0, #28
 800680c:	183b      	adds	r3, r7, r0
 800680e:	499c      	ldr	r1, [pc, #624]	@ (8006a80 <USB_ActivateEndpoint+0x5d8>)
 8006810:	400a      	ands	r2, r1
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	183b      	adds	r3, r7, r0
 8006816:	183a      	adds	r2, r7, r0
 8006818:	8812      	ldrh	r2, [r2, #0]
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	0149      	lsls	r1, r1, #5
 800681e:	404a      	eors	r2, r1
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	183b      	adds	r3, r7, r0
 8006824:	183a      	adds	r2, r7, r0
 8006826:	8812      	ldrh	r2, [r2, #0]
 8006828:	2180      	movs	r1, #128	@ 0x80
 800682a:	0189      	lsls	r1, r1, #6
 800682c:	404a      	eors	r2, r1
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	18d3      	adds	r3, r2, r3
 800683a:	183a      	adds	r2, r7, r0
 800683c:	8812      	ldrh	r2, [r2, #0]
 800683e:	4991      	ldr	r1, [pc, #580]	@ (8006a84 <USB_ActivateEndpoint+0x5dc>)
 8006840:	430a      	orrs	r2, r1
 8006842:	b292      	uxth	r2, r2
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e1c4      	b.n	8006bd2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	18d3      	adds	r3, r2, r3
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29a      	uxth	r2, r3
 8006856:	201e      	movs	r0, #30
 8006858:	183b      	adds	r3, r7, r0
 800685a:	4989      	ldr	r1, [pc, #548]	@ (8006a80 <USB_ActivateEndpoint+0x5d8>)
 800685c:	400a      	ands	r2, r1
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	183b      	adds	r3, r7, r0
 8006862:	183a      	adds	r2, r7, r0
 8006864:	8812      	ldrh	r2, [r2, #0]
 8006866:	2180      	movs	r1, #128	@ 0x80
 8006868:	0189      	lsls	r1, r1, #6
 800686a:	404a      	eors	r2, r1
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	18d3      	adds	r3, r2, r3
 8006878:	183a      	adds	r2, r7, r0
 800687a:	8812      	ldrh	r2, [r2, #0]
 800687c:	4981      	ldr	r1, [pc, #516]	@ (8006a84 <USB_ActivateEndpoint+0x5dc>)
 800687e:	430a      	orrs	r2, r1
 8006880:	b292      	uxth	r2, r2
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e1a5      	b.n	8006bd2 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	78db      	ldrb	r3, [r3, #3]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d117      	bne.n	80068be <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	18d3      	adds	r3, r2, r3
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29a      	uxth	r2, r3
 800689c:	2062      	movs	r0, #98	@ 0x62
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	4975      	ldr	r1, [pc, #468]	@ (8006a78 <USB_ActivateEndpoint+0x5d0>)
 80068a2:	400a      	ands	r2, r1
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	18d3      	adds	r3, r2, r3
 80068b0:	183a      	adds	r2, r7, r0
 80068b2:	8812      	ldrh	r2, [r2, #0]
 80068b4:	4974      	ldr	r1, [pc, #464]	@ (8006a88 <USB_ActivateEndpoint+0x5e0>)
 80068b6:	430a      	orrs	r2, r1
 80068b8:	b292      	uxth	r2, r2
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	e016      	b.n	80068ec <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	2064      	movs	r0, #100	@ 0x64
 80068ce:	183b      	adds	r3, r7, r0
 80068d0:	496e      	ldr	r1, [pc, #440]	@ (8006a8c <USB_ActivateEndpoint+0x5e4>)
 80068d2:	400a      	ands	r2, r1
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	18d3      	adds	r3, r2, r3
 80068e0:	183a      	adds	r2, r7, r0
 80068e2:	8812      	ldrh	r2, [r2, #0]
 80068e4:	4967      	ldr	r1, [pc, #412]	@ (8006a84 <USB_ActivateEndpoint+0x5dc>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	b292      	uxth	r2, r2
 80068ea:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2250      	movs	r2, #80	@ 0x50
 80068f4:	5a9b      	ldrh	r3, [r3, r2]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	001a      	movs	r2, r3
 80068fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	00da      	lsls	r2, r3, #3
 8006906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	2280      	movs	r2, #128	@ 0x80
 800690c:	00d2      	lsls	r2, r2, #3
 800690e:	4694      	mov	ip, r2
 8006910:	4463      	add	r3, ip
 8006912:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	891b      	ldrh	r3, [r3, #8]
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	b29b      	uxth	r3, r3
 800691c:	18db      	adds	r3, r3, r3
 800691e:	b29a      	uxth	r2, r3
 8006920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	657b      	str	r3, [r7, #84]	@ 0x54
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2250      	movs	r2, #80	@ 0x50
 800692c:	5a9b      	ldrh	r3, [r3, r2]
 800692e:	b29b      	uxth	r3, r3
 8006930:	001a      	movs	r2, r3
 8006932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006934:	189b      	adds	r3, r3, r2
 8006936:	657b      	str	r3, [r7, #84]	@ 0x54
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00da      	lsls	r2, r3, #3
 800693e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006940:	18d3      	adds	r3, r2, r3
 8006942:	4a53      	ldr	r2, [pc, #332]	@ (8006a90 <USB_ActivateEndpoint+0x5e8>)
 8006944:	4694      	mov	ip, r2
 8006946:	4463      	add	r3, ip
 8006948:	653b      	str	r3, [r7, #80]	@ 0x50
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	895b      	ldrh	r3, [r3, #10]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	b29b      	uxth	r3, r3
 8006952:	18db      	adds	r3, r3, r3
 8006954:	b29a      	uxth	r2, r3
 8006956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006958:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d000      	beq.n	8006964 <USB_ActivateEndpoint+0x4bc>
 8006962:	e09b      	b.n	8006a9c <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	18d2      	adds	r2, r2, r3
 800696e:	2140      	movs	r1, #64	@ 0x40
 8006970:	187b      	adds	r3, r7, r1
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	187b      	adds	r3, r7, r1
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	2380      	movs	r3, #128	@ 0x80
 800697c:	01db      	lsls	r3, r3, #7
 800697e:	4013      	ands	r3, r2
 8006980:	d016      	beq.n	80069b0 <USB_ActivateEndpoint+0x508>
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	18d3      	adds	r3, r2, r3
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29a      	uxth	r2, r3
 8006990:	203e      	movs	r0, #62	@ 0x3e
 8006992:	183b      	adds	r3, r7, r0
 8006994:	4938      	ldr	r1, [pc, #224]	@ (8006a78 <USB_ActivateEndpoint+0x5d0>)
 8006996:	400a      	ands	r2, r1
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	183a      	adds	r2, r7, r0
 80069a6:	8812      	ldrh	r2, [r2, #0]
 80069a8:	4934      	ldr	r1, [pc, #208]	@ (8006a7c <USB_ActivateEndpoint+0x5d4>)
 80069aa:	430a      	orrs	r2, r1
 80069ac:	b292      	uxth	r2, r2
 80069ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	18d2      	adds	r2, r2, r3
 80069ba:	213c      	movs	r1, #60	@ 0x3c
 80069bc:	187b      	adds	r3, r7, r1
 80069be:	8812      	ldrh	r2, [r2, #0]
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	187b      	adds	r3, r7, r1
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	2240      	movs	r2, #64	@ 0x40
 80069c8:	4013      	ands	r3, r2
 80069ca:	d016      	beq.n	80069fa <USB_ActivateEndpoint+0x552>
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	203a      	movs	r0, #58	@ 0x3a
 80069dc:	183b      	adds	r3, r7, r0
 80069de:	4926      	ldr	r1, [pc, #152]	@ (8006a78 <USB_ActivateEndpoint+0x5d0>)
 80069e0:	400a      	ands	r2, r1
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	18d3      	adds	r3, r2, r3
 80069ee:	183a      	adds	r2, r7, r0
 80069f0:	8812      	ldrh	r2, [r2, #0]
 80069f2:	4928      	ldr	r1, [pc, #160]	@ (8006a94 <USB_ActivateEndpoint+0x5ec>)
 80069f4:	430a      	orrs	r2, r1
 80069f6:	b292      	uxth	r2, r2
 80069f8:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	18d3      	adds	r3, r2, r3
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	2038      	movs	r0, #56	@ 0x38
 8006a0a:	183b      	adds	r3, r7, r0
 8006a0c:	491c      	ldr	r1, [pc, #112]	@ (8006a80 <USB_ActivateEndpoint+0x5d8>)
 8006a0e:	400a      	ands	r2, r1
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	183b      	adds	r3, r7, r0
 8006a14:	183a      	adds	r2, r7, r0
 8006a16:	8812      	ldrh	r2, [r2, #0]
 8006a18:	2180      	movs	r1, #128	@ 0x80
 8006a1a:	0149      	lsls	r1, r1, #5
 8006a1c:	404a      	eors	r2, r1
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	183b      	adds	r3, r7, r0
 8006a22:	183a      	adds	r2, r7, r0
 8006a24:	8812      	ldrh	r2, [r2, #0]
 8006a26:	2180      	movs	r1, #128	@ 0x80
 8006a28:	0189      	lsls	r1, r1, #6
 8006a2a:	404a      	eors	r2, r1
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	18d3      	adds	r3, r2, r3
 8006a38:	183a      	adds	r2, r7, r0
 8006a3a:	8812      	ldrh	r2, [r2, #0]
 8006a3c:	4911      	ldr	r1, [pc, #68]	@ (8006a84 <USB_ActivateEndpoint+0x5dc>)
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	b292      	uxth	r2, r2
 8006a42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	2036      	movs	r0, #54	@ 0x36
 8006a54:	183b      	adds	r3, r7, r0
 8006a56:	4910      	ldr	r1, [pc, #64]	@ (8006a98 <USB_ActivateEndpoint+0x5f0>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	18d3      	adds	r3, r2, r3
 8006a66:	183a      	adds	r2, r7, r0
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	4906      	ldr	r1, [pc, #24]	@ (8006a84 <USB_ActivateEndpoint+0x5dc>)
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e0ae      	b.n	8006bd2 <USB_ActivateEndpoint+0x72a>
 8006a74:	ffff8000 	.word	0xffff8000
 8006a78:	ffff8f8f 	.word	0xffff8f8f
 8006a7c:	ffffc080 	.word	0xffffc080
 8006a80:	ffffbf8f 	.word	0xffffbf8f
 8006a84:	ffff8080 	.word	0xffff8080
 8006a88:	ffff8180 	.word	0xffff8180
 8006a8c:	ffff8e8f 	.word	0xffff8e8f
 8006a90:	00000404 	.word	0x00000404
 8006a94:	ffff80c0 	.word	0xffff80c0
 8006a98:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	18d2      	adds	r2, r2, r3
 8006aa6:	214e      	movs	r1, #78	@ 0x4e
 8006aa8:	187b      	adds	r3, r7, r1
 8006aaa:	8812      	ldrh	r2, [r2, #0]
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	187b      	adds	r3, r7, r1
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	2380      	movs	r3, #128	@ 0x80
 8006ab4:	01db      	lsls	r3, r3, #7
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d016      	beq.n	8006ae8 <USB_ActivateEndpoint+0x640>
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	18d3      	adds	r3, r2, r3
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	204c      	movs	r0, #76	@ 0x4c
 8006aca:	183b      	adds	r3, r7, r0
 8006acc:	4944      	ldr	r1, [pc, #272]	@ (8006be0 <USB_ActivateEndpoint+0x738>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	183a      	adds	r2, r7, r0
 8006ade:	8812      	ldrh	r2, [r2, #0]
 8006ae0:	4940      	ldr	r1, [pc, #256]	@ (8006be4 <USB_ActivateEndpoint+0x73c>)
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	b292      	uxth	r2, r2
 8006ae6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	18d2      	adds	r2, r2, r3
 8006af2:	214a      	movs	r1, #74	@ 0x4a
 8006af4:	187b      	adds	r3, r7, r1
 8006af6:	8812      	ldrh	r2, [r2, #0]
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	187b      	adds	r3, r7, r1
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	2240      	movs	r2, #64	@ 0x40
 8006b00:	4013      	ands	r3, r2
 8006b02:	d016      	beq.n	8006b32 <USB_ActivateEndpoint+0x68a>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	18d3      	adds	r3, r2, r3
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	2048      	movs	r0, #72	@ 0x48
 8006b14:	183b      	adds	r3, r7, r0
 8006b16:	4932      	ldr	r1, [pc, #200]	@ (8006be0 <USB_ActivateEndpoint+0x738>)
 8006b18:	400a      	ands	r2, r1
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	18d3      	adds	r3, r2, r3
 8006b26:	183a      	adds	r2, r7, r0
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	492f      	ldr	r1, [pc, #188]	@ (8006be8 <USB_ActivateEndpoint+0x740>)
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	78db      	ldrb	r3, [r3, #3]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d01d      	beq.n	8006b76 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	18d3      	adds	r3, r2, r3
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	2044      	movs	r0, #68	@ 0x44
 8006b4a:	183b      	adds	r3, r7, r0
 8006b4c:	4927      	ldr	r1, [pc, #156]	@ (8006bec <USB_ActivateEndpoint+0x744>)
 8006b4e:	400a      	ands	r2, r1
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	183a      	adds	r2, r7, r0
 8006b56:	8812      	ldrh	r2, [r2, #0]
 8006b58:	2120      	movs	r1, #32
 8006b5a:	404a      	eors	r2, r1
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	18d3      	adds	r3, r2, r3
 8006b68:	183a      	adds	r2, r7, r0
 8006b6a:	8812      	ldrh	r2, [r2, #0]
 8006b6c:	4920      	ldr	r1, [pc, #128]	@ (8006bf0 <USB_ActivateEndpoint+0x748>)
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	b292      	uxth	r2, r2
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e016      	b.n	8006ba4 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	18d3      	adds	r3, r2, r3
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	2046      	movs	r0, #70	@ 0x46
 8006b86:	183b      	adds	r3, r7, r0
 8006b88:	4918      	ldr	r1, [pc, #96]	@ (8006bec <USB_ActivateEndpoint+0x744>)
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	18d3      	adds	r3, r2, r3
 8006b98:	183a      	adds	r2, r7, r0
 8006b9a:	8812      	ldrh	r2, [r2, #0]
 8006b9c:	4914      	ldr	r1, [pc, #80]	@ (8006bf0 <USB_ActivateEndpoint+0x748>)
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	b292      	uxth	r2, r2
 8006ba2:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	2042      	movs	r0, #66	@ 0x42
 8006bb4:	183b      	adds	r3, r7, r0
 8006bb6:	490f      	ldr	r1, [pc, #60]	@ (8006bf4 <USB_ActivateEndpoint+0x74c>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	18d3      	adds	r3, r2, r3
 8006bc6:	183a      	adds	r2, r7, r0
 8006bc8:	8812      	ldrh	r2, [r2, #0]
 8006bca:	4909      	ldr	r1, [pc, #36]	@ (8006bf0 <USB_ActivateEndpoint+0x748>)
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006bd2:	236f      	movs	r3, #111	@ 0x6f
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	781b      	ldrb	r3, [r3, #0]
}
 8006bd8:	0018      	movs	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b01c      	add	sp, #112	@ 0x70
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	ffff8f8f 	.word	0xffff8f8f
 8006be4:	ffffc080 	.word	0xffffc080
 8006be8:	ffff80c0 	.word	0xffff80c0
 8006bec:	ffff8fbf 	.word	0xffff8fbf
 8006bf0:	ffff8080 	.word	0xffff8080
 8006bf4:	ffffbf8f 	.word	0xffffbf8f

08006bf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08c      	sub	sp, #48	@ 0x30
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	7b1b      	ldrb	r3, [r3, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d000      	beq.n	8006c0c <USB_DeactivateEndpoint+0x14>
 8006c0a:	e07e      	b.n	8006d0a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d03c      	beq.n	8006c8e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	18d2      	adds	r2, r2, r3
 8006c1e:	210c      	movs	r1, #12
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	8812      	ldrh	r2, [r2, #0]
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	2240      	movs	r2, #64	@ 0x40
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d016      	beq.n	8006c5e <USB_DeactivateEndpoint+0x66>
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	18d3      	adds	r3, r2, r3
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	200a      	movs	r0, #10
 8006c40:	183b      	adds	r3, r7, r0
 8006c42:	49c7      	ldr	r1, [pc, #796]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006c44:	400a      	ands	r2, r1
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	18d3      	adds	r3, r2, r3
 8006c52:	183a      	adds	r2, r7, r0
 8006c54:	8812      	ldrh	r2, [r2, #0]
 8006c56:	49c3      	ldr	r1, [pc, #780]	@ (8006f64 <USB_DeactivateEndpoint+0x36c>)
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	b292      	uxth	r2, r2
 8006c5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	2008      	movs	r0, #8
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	49bd      	ldr	r1, [pc, #756]	@ (8006f68 <USB_DeactivateEndpoint+0x370>)
 8006c72:	400a      	ands	r2, r1
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	18d3      	adds	r3, r2, r3
 8006c80:	183a      	adds	r2, r7, r0
 8006c82:	8812      	ldrh	r2, [r2, #0]
 8006c84:	49b9      	ldr	r1, [pc, #740]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006c86:	430a      	orrs	r2, r1
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e163      	b.n	8006f56 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	18d2      	adds	r2, r2, r3
 8006c98:	2112      	movs	r1, #18
 8006c9a:	187b      	adds	r3, r7, r1
 8006c9c:	8812      	ldrh	r2, [r2, #0]
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	2380      	movs	r3, #128	@ 0x80
 8006ca6:	01db      	lsls	r3, r3, #7
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d016      	beq.n	8006cda <USB_DeactivateEndpoint+0xe2>
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18d3      	adds	r3, r2, r3
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	2010      	movs	r0, #16
 8006cbc:	183b      	adds	r3, r7, r0
 8006cbe:	49a8      	ldr	r1, [pc, #672]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	18d3      	adds	r3, r2, r3
 8006cce:	183a      	adds	r2, r7, r0
 8006cd0:	8812      	ldrh	r2, [r2, #0]
 8006cd2:	49a7      	ldr	r1, [pc, #668]	@ (8006f70 <USB_DeactivateEndpoint+0x378>)
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	18d3      	adds	r3, r2, r3
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	200e      	movs	r0, #14
 8006cea:	183b      	adds	r3, r7, r0
 8006cec:	49a1      	ldr	r1, [pc, #644]	@ (8006f74 <USB_DeactivateEndpoint+0x37c>)
 8006cee:	400a      	ands	r2, r1
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	18d3      	adds	r3, r2, r3
 8006cfc:	183a      	adds	r2, r7, r0
 8006cfe:	8812      	ldrh	r2, [r2, #0]
 8006d00:	499a      	ldr	r1, [pc, #616]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006d02:	430a      	orrs	r2, r1
 8006d04:	b292      	uxth	r2, r2
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	e125      	b.n	8006f56 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d000      	beq.n	8006d14 <USB_DeactivateEndpoint+0x11c>
 8006d12:	e090      	b.n	8006e36 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	18d2      	adds	r2, r2, r3
 8006d1e:	2120      	movs	r1, #32
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	8812      	ldrh	r2, [r2, #0]
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	2380      	movs	r3, #128	@ 0x80
 8006d2c:	01db      	lsls	r3, r3, #7
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d016      	beq.n	8006d60 <USB_DeactivateEndpoint+0x168>
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	18d3      	adds	r3, r2, r3
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	201e      	movs	r0, #30
 8006d42:	183b      	adds	r3, r7, r0
 8006d44:	4986      	ldr	r1, [pc, #536]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006d46:	400a      	ands	r2, r1
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	18d3      	adds	r3, r2, r3
 8006d54:	183a      	adds	r2, r7, r0
 8006d56:	8812      	ldrh	r2, [r2, #0]
 8006d58:	4985      	ldr	r1, [pc, #532]	@ (8006f70 <USB_DeactivateEndpoint+0x378>)
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d2      	adds	r2, r2, r3
 8006d6a:	211c      	movs	r1, #28
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	8812      	ldrh	r2, [r2, #0]
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	187b      	adds	r3, r7, r1
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	2240      	movs	r2, #64	@ 0x40
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d016      	beq.n	8006daa <USB_DeactivateEndpoint+0x1b2>
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	18d3      	adds	r3, r2, r3
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	201a      	movs	r0, #26
 8006d8c:	183b      	adds	r3, r7, r0
 8006d8e:	4974      	ldr	r1, [pc, #464]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	183a      	adds	r2, r7, r0
 8006da0:	8812      	ldrh	r2, [r2, #0]
 8006da2:	4970      	ldr	r1, [pc, #448]	@ (8006f64 <USB_DeactivateEndpoint+0x36c>)
 8006da4:	430a      	orrs	r2, r1
 8006da6:	b292      	uxth	r2, r2
 8006da8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	2018      	movs	r0, #24
 8006dba:	183b      	adds	r3, r7, r0
 8006dbc:	4968      	ldr	r1, [pc, #416]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006dbe:	400a      	ands	r2, r1
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	183a      	adds	r2, r7, r0
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	4964      	ldr	r1, [pc, #400]	@ (8006f64 <USB_DeactivateEndpoint+0x36c>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	18d3      	adds	r3, r2, r3
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	2016      	movs	r0, #22
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	4962      	ldr	r1, [pc, #392]	@ (8006f74 <USB_DeactivateEndpoint+0x37c>)
 8006dec:	400a      	ands	r2, r1
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	18d3      	adds	r3, r2, r3
 8006dfa:	183a      	adds	r2, r7, r0
 8006dfc:	8812      	ldrh	r2, [r2, #0]
 8006dfe:	495b      	ldr	r1, [pc, #364]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006e00:	430a      	orrs	r2, r1
 8006e02:	b292      	uxth	r2, r2
 8006e04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	18d3      	adds	r3, r2, r3
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	2014      	movs	r0, #20
 8006e16:	183b      	adds	r3, r7, r0
 8006e18:	4953      	ldr	r1, [pc, #332]	@ (8006f68 <USB_DeactivateEndpoint+0x370>)
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	18d3      	adds	r3, r2, r3
 8006e28:	183a      	adds	r2, r7, r0
 8006e2a:	8812      	ldrh	r2, [r2, #0]
 8006e2c:	494f      	ldr	r1, [pc, #316]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	b292      	uxth	r2, r2
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e08f      	b.n	8006f56 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	18d2      	adds	r2, r2, r3
 8006e40:	212e      	movs	r1, #46	@ 0x2e
 8006e42:	187b      	adds	r3, r7, r1
 8006e44:	8812      	ldrh	r2, [r2, #0]
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	2380      	movs	r3, #128	@ 0x80
 8006e4e:	01db      	lsls	r3, r3, #7
 8006e50:	4013      	ands	r3, r2
 8006e52:	d016      	beq.n	8006e82 <USB_DeactivateEndpoint+0x28a>
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	18d3      	adds	r3, r2, r3
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	202c      	movs	r0, #44	@ 0x2c
 8006e64:	183b      	adds	r3, r7, r0
 8006e66:	493e      	ldr	r1, [pc, #248]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006e68:	400a      	ands	r2, r1
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	18d3      	adds	r3, r2, r3
 8006e76:	183a      	adds	r2, r7, r0
 8006e78:	8812      	ldrh	r2, [r2, #0]
 8006e7a:	493d      	ldr	r1, [pc, #244]	@ (8006f70 <USB_DeactivateEndpoint+0x378>)
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	18d2      	adds	r2, r2, r3
 8006e8c:	212a      	movs	r1, #42	@ 0x2a
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	8812      	ldrh	r2, [r2, #0]
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	187b      	adds	r3, r7, r1
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	2240      	movs	r2, #64	@ 0x40
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d016      	beq.n	8006ecc <USB_DeactivateEndpoint+0x2d4>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	18d3      	adds	r3, r2, r3
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	2028      	movs	r0, #40	@ 0x28
 8006eae:	183b      	adds	r3, r7, r0
 8006eb0:	492b      	ldr	r1, [pc, #172]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006eb2:	400a      	ands	r2, r1
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	18d3      	adds	r3, r2, r3
 8006ec0:	183a      	adds	r2, r7, r0
 8006ec2:	8812      	ldrh	r2, [r2, #0]
 8006ec4:	4927      	ldr	r1, [pc, #156]	@ (8006f64 <USB_DeactivateEndpoint+0x36c>)
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	18d3      	adds	r3, r2, r3
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	2026      	movs	r0, #38	@ 0x26
 8006edc:	183b      	adds	r3, r7, r0
 8006ede:	4920      	ldr	r1, [pc, #128]	@ (8006f60 <USB_DeactivateEndpoint+0x368>)
 8006ee0:	400a      	ands	r2, r1
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	18d3      	adds	r3, r2, r3
 8006eee:	183a      	adds	r2, r7, r0
 8006ef0:	8812      	ldrh	r2, [r2, #0]
 8006ef2:	491f      	ldr	r1, [pc, #124]	@ (8006f70 <USB_DeactivateEndpoint+0x378>)
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	b292      	uxth	r2, r2
 8006ef8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	18d3      	adds	r3, r2, r3
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	2024      	movs	r0, #36	@ 0x24
 8006f0a:	183b      	adds	r3, r7, r0
 8006f0c:	4916      	ldr	r1, [pc, #88]	@ (8006f68 <USB_DeactivateEndpoint+0x370>)
 8006f0e:	400a      	ands	r2, r1
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	18d3      	adds	r3, r2, r3
 8006f1c:	183a      	adds	r2, r7, r0
 8006f1e:	8812      	ldrh	r2, [r2, #0]
 8006f20:	4912      	ldr	r1, [pc, #72]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006f22:	430a      	orrs	r2, r1
 8006f24:	b292      	uxth	r2, r2
 8006f26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	2022      	movs	r0, #34	@ 0x22
 8006f38:	183b      	adds	r3, r7, r0
 8006f3a:	490e      	ldr	r1, [pc, #56]	@ (8006f74 <USB_DeactivateEndpoint+0x37c>)
 8006f3c:	400a      	ands	r2, r1
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	183a      	adds	r2, r7, r0
 8006f4c:	8812      	ldrh	r2, [r2, #0]
 8006f4e:	4907      	ldr	r1, [pc, #28]	@ (8006f6c <USB_DeactivateEndpoint+0x374>)
 8006f50:	430a      	orrs	r2, r1
 8006f52:	b292      	uxth	r2, r2
 8006f54:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	0018      	movs	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b00c      	add	sp, #48	@ 0x30
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	ffff8f8f 	.word	0xffff8f8f
 8006f64:	ffff80c0 	.word	0xffff80c0
 8006f68:	ffff8fbf 	.word	0xffff8fbf
 8006f6c:	ffff8080 	.word	0xffff8080
 8006f70:	ffffc080 	.word	0xffffc080
 8006f74:	ffffbf8f 	.word	0xffffbf8f

08006f78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b0c3      	sub	sp, #268	@ 0x10c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <USB_EPStartXfer+0x16>
 8006f8a:	f000 fd2d 	bl	80079e8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d905      	bls.n	8006fa6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	1d7a      	adds	r2, r7, #5
 8006fa0:	32ff      	adds	r2, #255	@ 0xff
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	e004      	b.n	8006fb0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	1d7a      	adds	r2, r7, #5
 8006fac:	32ff      	adds	r2, #255	@ 0xff
 8006fae:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d125      	bne.n	8007004 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6959      	ldr	r1, [r3, #20]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88da      	ldrh	r2, [r3, #6]
 8006fc0:	1d7b      	adds	r3, r7, #5
 8006fc2:	33ff      	adds	r3, #255	@ 0xff
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fa3f 	bl	800844c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2250      	movs	r2, #80	@ 0x50
 8006fd6:	5a9b      	ldrh	r3, [r3, r2]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	001a      	movs	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	00da      	lsls	r2, r3, #3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	18d3      	adds	r3, r2, r3
 8006fec:	4ad7      	ldr	r2, [pc, #860]	@ (800734c <USB_EPStartXfer+0x3d4>)
 8006fee:	4694      	mov	ip, r2
 8006ff0:	4463      	add	r3, ip
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	1d7b      	adds	r3, r7, #5
 8006ff6:	33ff      	adds	r3, #255	@ 0xff
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	f000 fccd 	bl	800799e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	78db      	ldrb	r3, [r3, #3]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d000      	beq.n	800700e <USB_EPStartXfer+0x96>
 800700c:	e362      	b.n	80076d4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d800      	bhi.n	800701c <USB_EPStartXfer+0xa4>
 800701a:	e309      	b.n	8007630 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	18d3      	adds	r3, r2, r3
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29a      	uxth	r2, r3
 800702a:	2056      	movs	r0, #86	@ 0x56
 800702c:	183b      	adds	r3, r7, r0
 800702e:	49c8      	ldr	r1, [pc, #800]	@ (8007350 <USB_EPStartXfer+0x3d8>)
 8007030:	400a      	ands	r2, r1
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	18d3      	adds	r3, r2, r3
 800703e:	183a      	adds	r2, r7, r0
 8007040:	8812      	ldrh	r2, [r2, #0]
 8007042:	49c4      	ldr	r1, [pc, #784]	@ (8007354 <USB_EPStartXfer+0x3dc>)
 8007044:	430a      	orrs	r2, r1
 8007046:	b292      	uxth	r2, r2
 8007048:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	1d7b      	adds	r3, r7, #5
 8007050:	33ff      	adds	r3, #255	@ 0xff
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	18d3      	adds	r3, r2, r3
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	001a      	movs	r2, r3
 800706a:	2340      	movs	r3, #64	@ 0x40
 800706c:	4013      	ands	r3, r2
 800706e:	d100      	bne.n	8007072 <USB_EPStartXfer+0xfa>
 8007070:	e176      	b.n	8007360 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	633b      	str	r3, [r7, #48]	@ 0x30
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d000      	beq.n	8007080 <USB_EPStartXfer+0x108>
 800707e:	e074      	b.n	800716a <USB_EPStartXfer+0x1f2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2250      	movs	r2, #80	@ 0x50
 8007088:	5a9b      	ldrh	r3, [r3, r2]
 800708a:	b29b      	uxth	r3, r3
 800708c:	001a      	movs	r2, r3
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	189b      	adds	r3, r3, r2
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	00da      	lsls	r2, r3, #3
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	18d3      	adds	r3, r2, r3
 800709e:	4aae      	ldr	r2, [pc, #696]	@ (8007358 <USB_EPStartXfer+0x3e0>)
 80070a0:	4694      	mov	ip, r2
 80070a2:	4463      	add	r3, ip
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	059b      	lsls	r3, r3, #22
 80070ae:	0d9b      	lsrs	r3, r3, #22
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	1d7b      	adds	r3, r7, #5
 80070b8:	33ff      	adds	r3, #255	@ 0xff
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d108      	bne.n	80070d2 <USB_EPStartXfer+0x15a>
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4aa5      	ldr	r2, [pc, #660]	@ (800735c <USB_EPStartXfer+0x3e4>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	e066      	b.n	80071a0 <USB_EPStartXfer+0x228>
 80070d2:	1d7b      	adds	r3, r7, #5
 80070d4:	33ff      	adds	r3, #255	@ 0xff
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070da:	d821      	bhi.n	8007120 <USB_EPStartXfer+0x1a8>
 80070dc:	1d7b      	adds	r3, r7, #5
 80070de:	33ff      	adds	r3, #255	@ 0xff
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	1c7a      	adds	r2, r7, #1
 80070e6:	32ff      	adds	r2, #255	@ 0xff
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	1d7b      	adds	r3, r7, #5
 80070ec:	33ff      	adds	r3, #255	@ 0xff
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2201      	movs	r2, #1
 80070f2:	4013      	ands	r3, r2
 80070f4:	d006      	beq.n	8007104 <USB_EPStartXfer+0x18c>
 80070f6:	1c7b      	adds	r3, r7, #1
 80070f8:	33ff      	adds	r3, #255	@ 0xff
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	1c7a      	adds	r2, r7, #1
 8007100:	32ff      	adds	r2, #255	@ 0xff
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	33ff      	adds	r3, #255	@ 0xff
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	029b      	lsls	r3, r3, #10
 8007114:	b29b      	uxth	r3, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	b29a      	uxth	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e03f      	b.n	80071a0 <USB_EPStartXfer+0x228>
 8007120:	1d7b      	adds	r3, r7, #5
 8007122:	33ff      	adds	r3, #255	@ 0xff
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	1c7a      	adds	r2, r7, #1
 800712a:	32ff      	adds	r2, #255	@ 0xff
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	1d7b      	adds	r3, r7, #5
 8007130:	33ff      	adds	r3, #255	@ 0xff
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	221f      	movs	r2, #31
 8007136:	4013      	ands	r3, r2
 8007138:	d106      	bne.n	8007148 <USB_EPStartXfer+0x1d0>
 800713a:	1c7b      	adds	r3, r7, #1
 800713c:	33ff      	adds	r3, #255	@ 0xff
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3b01      	subs	r3, #1
 8007142:	1c7a      	adds	r2, r7, #1
 8007144:	32ff      	adds	r2, #255	@ 0xff
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	1c7b      	adds	r3, r7, #1
 8007150:	33ff      	adds	r3, #255	@ 0xff
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29b      	uxth	r3, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	b29b      	uxth	r3, r3
 800715e:	4a7f      	ldr	r2, [pc, #508]	@ (800735c <USB_EPStartXfer+0x3e4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	b29a      	uxth	r2, r3
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e01a      	b.n	80071a0 <USB_EPStartXfer+0x228>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d116      	bne.n	80071a0 <USB_EPStartXfer+0x228>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2250      	movs	r2, #80	@ 0x50
 8007176:	5a9b      	ldrh	r3, [r3, r2]
 8007178:	b29b      	uxth	r3, r3
 800717a:	001a      	movs	r2, r3
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	189b      	adds	r3, r3, r2
 8007180:	633b      	str	r3, [r7, #48]	@ 0x30
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	00da      	lsls	r2, r3, #3
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	18d3      	adds	r3, r2, r3
 800718c:	4a72      	ldr	r2, [pc, #456]	@ (8007358 <USB_EPStartXfer+0x3e0>)
 800718e:	4694      	mov	ip, r2
 8007190:	4463      	add	r3, ip
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007194:	1d7b      	adds	r3, r7, #5
 8007196:	33ff      	adds	r3, #255	@ 0xff
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b29a      	uxth	r2, r3
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071a0:	2076      	movs	r0, #118	@ 0x76
 80071a2:	183b      	adds	r3, r7, r0
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	8952      	ldrh	r2, [r2, #10]
 80071a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6959      	ldr	r1, [r3, #20]
 80071ae:	1d7b      	adds	r3, r7, #5
 80071b0:	33ff      	adds	r3, #255	@ 0xff
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b29c      	uxth	r4, r3
 80071b6:	183b      	adds	r3, r7, r0
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	0023      	movs	r3, r4
 80071be:	f001 f945 	bl	800844c <USB_WritePMA>
            ep->xfer_buff += len;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	1d7b      	adds	r3, r7, #5
 80071c8:	33ff      	adds	r3, #255	@ 0xff
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	18d2      	adds	r2, r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d908      	bls.n	80071f0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	1d7b      	adds	r3, r7, #5
 80071e4:	33ff      	adds	r3, #255	@ 0xff
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	1ad2      	subs	r2, r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	621a      	str	r2, [r3, #32]
 80071ee:	e007      	b.n	8007200 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	1d7a      	adds	r2, r7, #5
 80071f6:	32ff      	adds	r2, #255	@ 0xff
 80071f8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2200      	movs	r2, #0
 80071fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d000      	beq.n	800720a <USB_EPStartXfer+0x292>
 8007208:	e070      	b.n	80072ec <USB_EPStartXfer+0x374>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2250      	movs	r2, #80	@ 0x50
 8007212:	5a9b      	ldrh	r3, [r3, r2]
 8007214:	b29b      	uxth	r3, r3
 8007216:	001a      	movs	r2, r3
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	189b      	adds	r3, r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	00da      	lsls	r2, r3, #3
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	18d3      	adds	r3, r2, r3
 8007228:	4a48      	ldr	r2, [pc, #288]	@ (800734c <USB_EPStartXfer+0x3d4>)
 800722a:	4694      	mov	ip, r2
 800722c:	4463      	add	r3, ip
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	059b      	lsls	r3, r3, #22
 8007238:	0d9b      	lsrs	r3, r3, #22
 800723a:	b29a      	uxth	r2, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	801a      	strh	r2, [r3, #0]
 8007240:	1d7b      	adds	r3, r7, #5
 8007242:	33ff      	adds	r3, #255	@ 0xff
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d108      	bne.n	800725c <USB_EPStartXfer+0x2e4>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	4a42      	ldr	r2, [pc, #264]	@ (800735c <USB_EPStartXfer+0x3e4>)
 8007252:	4313      	orrs	r3, r2
 8007254:	b29a      	uxth	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e064      	b.n	8007326 <USB_EPStartXfer+0x3ae>
 800725c:	1d7b      	adds	r3, r7, #5
 800725e:	33ff      	adds	r3, #255	@ 0xff
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b3e      	cmp	r3, #62	@ 0x3e
 8007264:	d81f      	bhi.n	80072a6 <USB_EPStartXfer+0x32e>
 8007266:	1d7b      	adds	r3, r7, #5
 8007268:	33ff      	adds	r3, #255	@ 0xff
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	21fc      	movs	r1, #252	@ 0xfc
 8007270:	187a      	adds	r2, r7, r1
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	1d7b      	adds	r3, r7, #5
 8007276:	33ff      	adds	r3, #255	@ 0xff
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2201      	movs	r2, #1
 800727c:	4013      	ands	r3, r2
 800727e:	d004      	beq.n	800728a <USB_EPStartXfer+0x312>
 8007280:	187b      	adds	r3, r7, r1
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	187a      	adds	r2, r7, r1
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	23fc      	movs	r3, #252	@ 0xfc
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	b29b      	uxth	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b29a      	uxth	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e03f      	b.n	8007326 <USB_EPStartXfer+0x3ae>
 80072a6:	1d7b      	adds	r3, r7, #5
 80072a8:	33ff      	adds	r3, #255	@ 0xff
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	21fc      	movs	r1, #252	@ 0xfc
 80072b0:	187a      	adds	r2, r7, r1
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	1d7b      	adds	r3, r7, #5
 80072b6:	33ff      	adds	r3, #255	@ 0xff
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	221f      	movs	r2, #31
 80072bc:	4013      	ands	r3, r2
 80072be:	d104      	bne.n	80072ca <USB_EPStartXfer+0x352>
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	187a      	adds	r2, r7, r1
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	23fc      	movs	r3, #252	@ 0xfc
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	029b      	lsls	r3, r3, #10
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4313      	orrs	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <USB_EPStartXfer+0x3e4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e01c      	b.n	8007326 <USB_EPStartXfer+0x3ae>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d118      	bne.n	8007326 <USB_EPStartXfer+0x3ae>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	623b      	str	r3, [r7, #32]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2250      	movs	r2, #80	@ 0x50
 80072fc:	5a9b      	ldrh	r3, [r3, r2]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	001a      	movs	r2, r3
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	189b      	adds	r3, r3, r2
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	00da      	lsls	r2, r3, #3
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	18d3      	adds	r3, r2, r3
 8007312:	4a0e      	ldr	r2, [pc, #56]	@ (800734c <USB_EPStartXfer+0x3d4>)
 8007314:	4694      	mov	ip, r2
 8007316:	4463      	add	r3, ip
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	1d7b      	adds	r3, r7, #5
 800731c:	33ff      	adds	r3, #255	@ 0xff
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	b29a      	uxth	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007326:	2076      	movs	r0, #118	@ 0x76
 8007328:	183b      	adds	r3, r7, r0
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	8912      	ldrh	r2, [r2, #8]
 800732e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	1d7b      	adds	r3, r7, #5
 8007336:	33ff      	adds	r3, #255	@ 0xff
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	b29c      	uxth	r4, r3
 800733c:	183b      	adds	r3, r7, r0
 800733e:	881a      	ldrh	r2, [r3, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	0023      	movs	r3, r4
 8007344:	f001 f882 	bl	800844c <USB_WritePMA>
 8007348:	e329      	b.n	800799e <USB_EPStartXfer+0xa26>
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	00000402 	.word	0x00000402
 8007350:	ffff8f8f 	.word	0xffff8f8f
 8007354:	ffff8180 	.word	0xffff8180
 8007358:	00000406 	.word	0x00000406
 800735c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d000      	beq.n	800736a <USB_EPStartXfer+0x3f2>
 8007368:	e070      	b.n	800744c <USB_EPStartXfer+0x4d4>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2250      	movs	r2, #80	@ 0x50
 8007372:	5a9b      	ldrh	r3, [r3, r2]
 8007374:	b29b      	uxth	r3, r3
 8007376:	001a      	movs	r2, r3
 8007378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800737a:	189b      	adds	r3, r3, r2
 800737c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	00da      	lsls	r2, r3, #3
 8007384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007386:	18d3      	adds	r3, r2, r3
 8007388:	4acd      	ldr	r2, [pc, #820]	@ (80076c0 <USB_EPStartXfer+0x748>)
 800738a:	4694      	mov	ip, r2
 800738c:	4463      	add	r3, ip
 800738e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	059b      	lsls	r3, r3, #22
 8007398:	0d9b      	lsrs	r3, r3, #22
 800739a:	b29a      	uxth	r2, r3
 800739c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	1d7b      	adds	r3, r7, #5
 80073a2:	33ff      	adds	r3, #255	@ 0xff
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <USB_EPStartXfer+0x444>
 80073aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4ac4      	ldr	r2, [pc, #784]	@ (80076c4 <USB_EPStartXfer+0x74c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e064      	b.n	8007486 <USB_EPStartXfer+0x50e>
 80073bc:	1d7b      	adds	r3, r7, #5
 80073be:	33ff      	adds	r3, #255	@ 0xff
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80073c4:	d81f      	bhi.n	8007406 <USB_EPStartXfer+0x48e>
 80073c6:	1d7b      	adds	r3, r7, #5
 80073c8:	33ff      	adds	r3, #255	@ 0xff
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	21f8      	movs	r1, #248	@ 0xf8
 80073d0:	187a      	adds	r2, r7, r1
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	1d7b      	adds	r3, r7, #5
 80073d6:	33ff      	adds	r3, #255	@ 0xff
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2201      	movs	r2, #1
 80073dc:	4013      	ands	r3, r2
 80073de:	d004      	beq.n	80073ea <USB_EPStartXfer+0x472>
 80073e0:	187b      	adds	r3, r7, r1
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	187a      	adds	r2, r7, r1
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	23f8      	movs	r3, #248	@ 0xf8
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e03f      	b.n	8007486 <USB_EPStartXfer+0x50e>
 8007406:	1d7b      	adds	r3, r7, #5
 8007408:	33ff      	adds	r3, #255	@ 0xff
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	21f8      	movs	r1, #248	@ 0xf8
 8007410:	187a      	adds	r2, r7, r1
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	1d7b      	adds	r3, r7, #5
 8007416:	33ff      	adds	r3, #255	@ 0xff
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	221f      	movs	r2, #31
 800741c:	4013      	ands	r3, r2
 800741e:	d104      	bne.n	800742a <USB_EPStartXfer+0x4b2>
 8007420:	187b      	adds	r3, r7, r1
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	187a      	adds	r2, r7, r1
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	23f8      	movs	r3, #248	@ 0xf8
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	b29b      	uxth	r3, r3
 800743c:	4313      	orrs	r3, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	4aa0      	ldr	r2, [pc, #640]	@ (80076c4 <USB_EPStartXfer+0x74c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	b29a      	uxth	r2, r3
 8007446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e01c      	b.n	8007486 <USB_EPStartXfer+0x50e>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d118      	bne.n	8007486 <USB_EPStartXfer+0x50e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	653b      	str	r3, [r7, #80]	@ 0x50
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2250      	movs	r2, #80	@ 0x50
 800745c:	5a9b      	ldrh	r3, [r3, r2]
 800745e:	b29b      	uxth	r3, r3
 8007460:	001a      	movs	r2, r3
 8007462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007464:	189b      	adds	r3, r3, r2
 8007466:	653b      	str	r3, [r7, #80]	@ 0x50
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	00da      	lsls	r2, r3, #3
 800746e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007470:	18d3      	adds	r3, r2, r3
 8007472:	4a93      	ldr	r2, [pc, #588]	@ (80076c0 <USB_EPStartXfer+0x748>)
 8007474:	4694      	mov	ip, r2
 8007476:	4463      	add	r3, ip
 8007478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800747a:	1d7b      	adds	r3, r7, #5
 800747c:	33ff      	adds	r3, #255	@ 0xff
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	b29a      	uxth	r2, r3
 8007482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007484:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007486:	2076      	movs	r0, #118	@ 0x76
 8007488:	183b      	adds	r3, r7, r0
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	8912      	ldrh	r2, [r2, #8]
 800748e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6959      	ldr	r1, [r3, #20]
 8007494:	1d7b      	adds	r3, r7, #5
 8007496:	33ff      	adds	r3, #255	@ 0xff
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	b29c      	uxth	r4, r3
 800749c:	183b      	adds	r3, r7, r0
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	0023      	movs	r3, r4
 80074a4:	f000 ffd2 	bl	800844c <USB_WritePMA>
            ep->xfer_buff += len;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	1d7b      	adds	r3, r7, #5
 80074ae:	33ff      	adds	r3, #255	@ 0xff
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	18d2      	adds	r2, r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d908      	bls.n	80074d6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	1d7b      	adds	r3, r7, #5
 80074ca:	33ff      	adds	r3, #255	@ 0xff
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	621a      	str	r2, [r3, #32]
 80074d4:	e007      	b.n	80074e6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	1d7a      	adds	r2, r7, #5
 80074dc:	32ff      	adds	r2, #255	@ 0xff
 80074de:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d000      	beq.n	80074f4 <USB_EPStartXfer+0x57c>
 80074f2:	e070      	b.n	80075d6 <USB_EPStartXfer+0x65e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2250      	movs	r2, #80	@ 0x50
 80074fc:	5a9b      	ldrh	r3, [r3, r2]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	001a      	movs	r2, r3
 8007502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007504:	189b      	adds	r3, r3, r2
 8007506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	00da      	lsls	r2, r3, #3
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	4a6d      	ldr	r2, [pc, #436]	@ (80076c8 <USB_EPStartXfer+0x750>)
 8007514:	4694      	mov	ip, r2
 8007516:	4463      	add	r3, ip
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	059b      	lsls	r3, r3, #22
 8007522:	0d9b      	lsrs	r3, r3, #22
 8007524:	b29a      	uxth	r2, r3
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	1d7b      	adds	r3, r7, #5
 800752c:	33ff      	adds	r3, #255	@ 0xff
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <USB_EPStartXfer+0x5ce>
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	4a62      	ldr	r2, [pc, #392]	@ (80076c4 <USB_EPStartXfer+0x74c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	b29a      	uxth	r2, r3
 8007540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e062      	b.n	800760c <USB_EPStartXfer+0x694>
 8007546:	1d7b      	adds	r3, r7, #5
 8007548:	33ff      	adds	r3, #255	@ 0xff
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b3e      	cmp	r3, #62	@ 0x3e
 800754e:	d81f      	bhi.n	8007590 <USB_EPStartXfer+0x618>
 8007550:	1d7b      	adds	r3, r7, #5
 8007552:	33ff      	adds	r3, #255	@ 0xff
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	21f4      	movs	r1, #244	@ 0xf4
 800755a:	187a      	adds	r2, r7, r1
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	1d7b      	adds	r3, r7, #5
 8007560:	33ff      	adds	r3, #255	@ 0xff
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	4013      	ands	r3, r2
 8007568:	d004      	beq.n	8007574 <USB_EPStartXfer+0x5fc>
 800756a:	187b      	adds	r3, r7, r1
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	187a      	adds	r2, r7, r1
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	23f4      	movs	r3, #244	@ 0xf4
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	029b      	lsls	r3, r3, #10
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e03d      	b.n	800760c <USB_EPStartXfer+0x694>
 8007590:	1d7b      	adds	r3, r7, #5
 8007592:	33ff      	adds	r3, #255	@ 0xff
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	21f4      	movs	r1, #244	@ 0xf4
 800759a:	187a      	adds	r2, r7, r1
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	1d7b      	adds	r3, r7, #5
 80075a0:	33ff      	adds	r3, #255	@ 0xff
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	221f      	movs	r2, #31
 80075a6:	4013      	ands	r3, r2
 80075a8:	d104      	bne.n	80075b4 <USB_EPStartXfer+0x63c>
 80075aa:	187b      	adds	r3, r7, r1
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	187a      	adds	r2, r7, r1
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	23f4      	movs	r3, #244	@ 0xf4
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	4a3e      	ldr	r2, [pc, #248]	@ (80076c4 <USB_EPStartXfer+0x74c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e01a      	b.n	800760c <USB_EPStartXfer+0x694>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d116      	bne.n	800760c <USB_EPStartXfer+0x694>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2250      	movs	r2, #80	@ 0x50
 80075e2:	5a9b      	ldrh	r3, [r3, r2]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	001a      	movs	r2, r3
 80075e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ea:	189b      	adds	r3, r3, r2
 80075ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075f6:	18d3      	adds	r3, r2, r3
 80075f8:	4a33      	ldr	r2, [pc, #204]	@ (80076c8 <USB_EPStartXfer+0x750>)
 80075fa:	4694      	mov	ip, r2
 80075fc:	4463      	add	r3, ip
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007600:	1d7b      	adds	r3, r7, #5
 8007602:	33ff      	adds	r3, #255	@ 0xff
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	b29a      	uxth	r2, r3
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800760c:	2076      	movs	r0, #118	@ 0x76
 800760e:	183b      	adds	r3, r7, r0
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	8952      	ldrh	r2, [r2, #10]
 8007614:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	1d7b      	adds	r3, r7, #5
 800761c:	33ff      	adds	r3, #255	@ 0xff
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	b29c      	uxth	r4, r3
 8007622:	183b      	adds	r3, r7, r0
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	0023      	movs	r3, r4
 800762a:	f000 ff0f 	bl	800844c <USB_WritePMA>
 800762e:	e1b6      	b.n	800799e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	1d7a      	adds	r2, r7, #5
 8007636:	32ff      	adds	r2, #255	@ 0xff
 8007638:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	18d3      	adds	r3, r2, r3
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29a      	uxth	r2, r3
 8007648:	2062      	movs	r0, #98	@ 0x62
 800764a:	183b      	adds	r3, r7, r0
 800764c:	491f      	ldr	r1, [pc, #124]	@ (80076cc <USB_EPStartXfer+0x754>)
 800764e:	400a      	ands	r2, r1
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	18d3      	adds	r3, r2, r3
 800765c:	183a      	adds	r2, r7, r0
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	491b      	ldr	r1, [pc, #108]	@ (80076d0 <USB_EPStartXfer+0x758>)
 8007662:	430a      	orrs	r2, r1
 8007664:	b292      	uxth	r2, r2
 8007666:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2250      	movs	r2, #80	@ 0x50
 8007670:	5a9b      	ldrh	r3, [r3, r2]
 8007672:	b29b      	uxth	r3, r3
 8007674:	001a      	movs	r2, r3
 8007676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007678:	189b      	adds	r3, r3, r2
 800767a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00da      	lsls	r2, r3, #3
 8007682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007684:	18d3      	adds	r3, r2, r3
 8007686:	4a0e      	ldr	r2, [pc, #56]	@ (80076c0 <USB_EPStartXfer+0x748>)
 8007688:	4694      	mov	ip, r2
 800768a:	4463      	add	r3, ip
 800768c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800768e:	1d7b      	adds	r3, r7, #5
 8007690:	33ff      	adds	r3, #255	@ 0xff
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007698:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800769a:	2076      	movs	r0, #118	@ 0x76
 800769c:	183b      	adds	r3, r7, r0
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	8912      	ldrh	r2, [r2, #8]
 80076a2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6959      	ldr	r1, [r3, #20]
 80076a8:	1d7b      	adds	r3, r7, #5
 80076aa:	33ff      	adds	r3, #255	@ 0xff
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b29c      	uxth	r4, r3
 80076b0:	183b      	adds	r3, r7, r0
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	0023      	movs	r3, r4
 80076b8:	f000 fec8 	bl	800844c <USB_WritePMA>
 80076bc:	e16f      	b.n	800799e <USB_EPStartXfer+0xa26>
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	00000402 	.word	0x00000402
 80076c4:	ffff8000 	.word	0xffff8000
 80076c8:	00000406 	.word	0x00000406
 80076cc:	ffff8e8f 	.word	0xffff8e8f
 80076d0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	1d7b      	adds	r3, r7, #5
 80076da:	33ff      	adds	r3, #255	@ 0xff
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	001a      	movs	r2, r3
 80076f4:	2340      	movs	r3, #64	@ 0x40
 80076f6:	4013      	ands	r3, r2
 80076f8:	d100      	bne.n	80076fc <USB_EPStartXfer+0x784>
 80076fa:	e0a4      	b.n	8007846 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d000      	beq.n	800770a <USB_EPStartXfer+0x792>
 8007708:	e070      	b.n	80077ec <USB_EPStartXfer+0x874>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2250      	movs	r2, #80	@ 0x50
 8007712:	5a9b      	ldrh	r3, [r3, r2]
 8007714:	b29b      	uxth	r3, r3
 8007716:	001a      	movs	r2, r3
 8007718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800771a:	189b      	adds	r3, r3, r2
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	00da      	lsls	r2, r3, #3
 8007724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007726:	18d3      	adds	r3, r2, r3
 8007728:	4ada      	ldr	r2, [pc, #872]	@ (8007a94 <USB_EPStartXfer+0xb1c>)
 800772a:	4694      	mov	ip, r2
 800772c:	4463      	add	r3, ip
 800772e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	059b      	lsls	r3, r3, #22
 8007738:	0d9b      	lsrs	r3, r3, #22
 800773a:	b29a      	uxth	r2, r3
 800773c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	1d7b      	adds	r3, r7, #5
 8007742:	33ff      	adds	r3, #255	@ 0xff
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d108      	bne.n	800775c <USB_EPStartXfer+0x7e4>
 800774a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4ad1      	ldr	r2, [pc, #836]	@ (8007a98 <USB_EPStartXfer+0xb20>)
 8007752:	4313      	orrs	r3, r2
 8007754:	b29a      	uxth	r2, r3
 8007756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e062      	b.n	8007822 <USB_EPStartXfer+0x8aa>
 800775c:	1d7b      	adds	r3, r7, #5
 800775e:	33ff      	adds	r3, #255	@ 0xff
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b3e      	cmp	r3, #62	@ 0x3e
 8007764:	d81f      	bhi.n	80077a6 <USB_EPStartXfer+0x82e>
 8007766:	1d7b      	adds	r3, r7, #5
 8007768:	33ff      	adds	r3, #255	@ 0xff
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	21f0      	movs	r1, #240	@ 0xf0
 8007770:	187a      	adds	r2, r7, r1
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	1d7b      	adds	r3, r7, #5
 8007776:	33ff      	adds	r3, #255	@ 0xff
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d004      	beq.n	800778a <USB_EPStartXfer+0x812>
 8007780:	187b      	adds	r3, r7, r1
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	187a      	adds	r2, r7, r1
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29a      	uxth	r2, r3
 8007790:	23f0      	movs	r3, #240	@ 0xf0
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	029b      	lsls	r3, r3, #10
 800779a:	b29b      	uxth	r3, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e03d      	b.n	8007822 <USB_EPStartXfer+0x8aa>
 80077a6:	1d7b      	adds	r3, r7, #5
 80077a8:	33ff      	adds	r3, #255	@ 0xff
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	21f0      	movs	r1, #240	@ 0xf0
 80077b0:	187a      	adds	r2, r7, r1
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	1d7b      	adds	r3, r7, #5
 80077b6:	33ff      	adds	r3, #255	@ 0xff
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	221f      	movs	r2, #31
 80077bc:	4013      	ands	r3, r2
 80077be:	d104      	bne.n	80077ca <USB_EPStartXfer+0x852>
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	187a      	adds	r2, r7, r1
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	23f0      	movs	r3, #240	@ 0xf0
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4313      	orrs	r3, r2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4aad      	ldr	r2, [pc, #692]	@ (8007a98 <USB_EPStartXfer+0xb20>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e01a      	b.n	8007822 <USB_EPStartXfer+0x8aa>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d116      	bne.n	8007822 <USB_EPStartXfer+0x8aa>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2250      	movs	r2, #80	@ 0x50
 80077f8:	5a9b      	ldrh	r3, [r3, r2]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	001a      	movs	r2, r3
 80077fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007800:	189b      	adds	r3, r3, r2
 8007802:	673b      	str	r3, [r7, #112]	@ 0x70
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	00da      	lsls	r2, r3, #3
 800780a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800780c:	18d3      	adds	r3, r2, r3
 800780e:	4aa1      	ldr	r2, [pc, #644]	@ (8007a94 <USB_EPStartXfer+0xb1c>)
 8007810:	4694      	mov	ip, r2
 8007812:	4463      	add	r3, ip
 8007814:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007816:	1d7b      	adds	r3, r7, #5
 8007818:	33ff      	adds	r3, #255	@ 0xff
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007820:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007822:	2076      	movs	r0, #118	@ 0x76
 8007824:	183b      	adds	r3, r7, r0
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	8952      	ldrh	r2, [r2, #10]
 800782a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	6959      	ldr	r1, [r3, #20]
 8007830:	1d7b      	adds	r3, r7, #5
 8007832:	33ff      	adds	r3, #255	@ 0xff
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b29c      	uxth	r4, r3
 8007838:	183b      	adds	r3, r7, r0
 800783a:	881a      	ldrh	r2, [r3, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	0023      	movs	r3, r4
 8007840:	f000 fe04 	bl	800844c <USB_WritePMA>
 8007844:	e0ab      	b.n	800799e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d000      	beq.n	8007850 <USB_EPStartXfer+0x8d8>
 800784e:	e070      	b.n	8007932 <USB_EPStartXfer+0x9ba>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2250      	movs	r2, #80	@ 0x50
 8007858:	5a9b      	ldrh	r3, [r3, r2]
 800785a:	b29b      	uxth	r3, r3
 800785c:	001a      	movs	r2, r3
 800785e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007860:	189b      	adds	r3, r3, r2
 8007862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	00da      	lsls	r2, r3, #3
 800786a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800786c:	18d3      	adds	r3, r2, r3
 800786e:	4a8b      	ldr	r2, [pc, #556]	@ (8007a9c <USB_EPStartXfer+0xb24>)
 8007870:	4694      	mov	ip, r2
 8007872:	4463      	add	r3, ip
 8007874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	059b      	lsls	r3, r3, #22
 800787e:	0d9b      	lsrs	r3, r3, #22
 8007880:	b29a      	uxth	r2, r3
 8007882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	1d7b      	adds	r3, r7, #5
 8007888:	33ff      	adds	r3, #255	@ 0xff
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <USB_EPStartXfer+0x92a>
 8007890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	4a80      	ldr	r2, [pc, #512]	@ (8007a98 <USB_EPStartXfer+0xb20>)
 8007898:	4313      	orrs	r3, r2
 800789a:	b29a      	uxth	r2, r3
 800789c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	e06c      	b.n	800797c <USB_EPStartXfer+0xa04>
 80078a2:	1d7b      	adds	r3, r7, #5
 80078a4:	33ff      	adds	r3, #255	@ 0xff
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078aa:	d81f      	bhi.n	80078ec <USB_EPStartXfer+0x974>
 80078ac:	1d7b      	adds	r3, r7, #5
 80078ae:	33ff      	adds	r3, #255	@ 0xff
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	21ec      	movs	r1, #236	@ 0xec
 80078b6:	187a      	adds	r2, r7, r1
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	1d7b      	adds	r3, r7, #5
 80078bc:	33ff      	adds	r3, #255	@ 0xff
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4013      	ands	r3, r2
 80078c4:	d004      	beq.n	80078d0 <USB_EPStartXfer+0x958>
 80078c6:	187b      	adds	r3, r7, r1
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	187a      	adds	r2, r7, r1
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	23ec      	movs	r3, #236	@ 0xec
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e8:	801a      	strh	r2, [r3, #0]
 80078ea:	e047      	b.n	800797c <USB_EPStartXfer+0xa04>
 80078ec:	1d7b      	adds	r3, r7, #5
 80078ee:	33ff      	adds	r3, #255	@ 0xff
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	21ec      	movs	r1, #236	@ 0xec
 80078f6:	187a      	adds	r2, r7, r1
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	1d7b      	adds	r3, r7, #5
 80078fc:	33ff      	adds	r3, #255	@ 0xff
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	221f      	movs	r2, #31
 8007902:	4013      	ands	r3, r2
 8007904:	d104      	bne.n	8007910 <USB_EPStartXfer+0x998>
 8007906:	187b      	adds	r3, r7, r1
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3b01      	subs	r3, #1
 800790c:	187a      	adds	r2, r7, r1
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	23ec      	movs	r3, #236	@ 0xec
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	029b      	lsls	r3, r3, #10
 8007920:	b29b      	uxth	r3, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	4a5c      	ldr	r2, [pc, #368]	@ (8007a98 <USB_EPStartXfer+0xb20>)
 8007928:	4313      	orrs	r3, r2
 800792a:	b29a      	uxth	r2, r3
 800792c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e024      	b.n	800797c <USB_EPStartXfer+0xa04>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d120      	bne.n	800797c <USB_EPStartXfer+0xa04>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2184      	movs	r1, #132	@ 0x84
 800793e:	187a      	adds	r2, r7, r1
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2250      	movs	r2, #80	@ 0x50
 8007946:	5a9b      	ldrh	r3, [r3, r2]
 8007948:	b29b      	uxth	r3, r3
 800794a:	001a      	movs	r2, r3
 800794c:	187b      	adds	r3, r7, r1
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	189b      	adds	r3, r3, r2
 8007952:	187a      	adds	r2, r7, r1
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	00da      	lsls	r2, r3, #3
 800795c:	187b      	adds	r3, r7, r1
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	18d3      	adds	r3, r2, r3
 8007962:	4a4e      	ldr	r2, [pc, #312]	@ (8007a9c <USB_EPStartXfer+0xb24>)
 8007964:	4694      	mov	ip, r2
 8007966:	4463      	add	r3, ip
 8007968:	2180      	movs	r1, #128	@ 0x80
 800796a:	187a      	adds	r2, r7, r1
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	1d7b      	adds	r3, r7, #5
 8007970:	33ff      	adds	r3, #255	@ 0xff
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b29a      	uxth	r2, r3
 8007976:	187b      	adds	r3, r7, r1
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800797c:	2076      	movs	r0, #118	@ 0x76
 800797e:	183b      	adds	r3, r7, r0
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	8912      	ldrh	r2, [r2, #8]
 8007984:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6959      	ldr	r1, [r3, #20]
 800798a:	1d7b      	adds	r3, r7, #5
 800798c:	33ff      	adds	r3, #255	@ 0xff
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	b29c      	uxth	r4, r3
 8007992:	183b      	adds	r3, r7, r0
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	0023      	movs	r3, r4
 800799a:	f000 fd57 	bl	800844c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	18d3      	adds	r3, r2, r3
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	200a      	movs	r0, #10
 80079ae:	183b      	adds	r3, r7, r0
 80079b0:	493b      	ldr	r1, [pc, #236]	@ (8007aa0 <USB_EPStartXfer+0xb28>)
 80079b2:	400a      	ands	r2, r1
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	183b      	adds	r3, r7, r0
 80079b8:	183a      	adds	r2, r7, r0
 80079ba:	8812      	ldrh	r2, [r2, #0]
 80079bc:	2110      	movs	r1, #16
 80079be:	404a      	eors	r2, r1
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	183b      	adds	r3, r7, r0
 80079c4:	183a      	adds	r2, r7, r0
 80079c6:	8812      	ldrh	r2, [r2, #0]
 80079c8:	2120      	movs	r1, #32
 80079ca:	404a      	eors	r2, r1
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	18d3      	adds	r3, r2, r3
 80079d8:	183a      	adds	r2, r7, r0
 80079da:	8812      	ldrh	r2, [r2, #0]
 80079dc:	4931      	ldr	r1, [pc, #196]	@ (8007aa4 <USB_EPStartXfer+0xb2c>)
 80079de:	430a      	orrs	r2, r1
 80079e0:	b292      	uxth	r2, r2
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	f000 fbe9 	bl	80081ba <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	7b1b      	ldrb	r3, [r3, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d000      	beq.n	80079f2 <USB_EPStartXfer+0xa7a>
 80079f0:	e0a8      	b.n	8007b44 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d90d      	bls.n	8007a1a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	1d7a      	adds	r2, r7, #5
 8007a04:	32ff      	adds	r2, #255	@ 0xff
 8007a06:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	1d7b      	adds	r3, r7, #5
 8007a0e:	33ff      	adds	r3, #255	@ 0xff
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	619a      	str	r2, [r3, #24]
 8007a18:	e007      	b.n	8007a2a <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	1d7a      	adds	r2, r7, #5
 8007a20:	32ff      	adds	r2, #255	@ 0xff
 8007a22:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2190      	movs	r1, #144	@ 0x90
 8007a2e:	187a      	adds	r2, r7, r1
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2250      	movs	r2, #80	@ 0x50
 8007a36:	5a9b      	ldrh	r3, [r3, r2]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	001a      	movs	r2, r3
 8007a3c:	187b      	adds	r3, r7, r1
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	187a      	adds	r2, r7, r1
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	00da      	lsls	r2, r3, #3
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	18d3      	adds	r3, r2, r3
 8007a52:	4a10      	ldr	r2, [pc, #64]	@ (8007a94 <USB_EPStartXfer+0xb1c>)
 8007a54:	4694      	mov	ip, r2
 8007a56:	4463      	add	r3, ip
 8007a58:	218c      	movs	r1, #140	@ 0x8c
 8007a5a:	187a      	adds	r2, r7, r1
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	187b      	adds	r3, r7, r1
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	059b      	lsls	r3, r3, #22
 8007a68:	0d9b      	lsrs	r3, r3, #22
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	1d7b      	adds	r3, r7, #5
 8007a74:	33ff      	adds	r3, #255	@ 0xff
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d115      	bne.n	8007aa8 <USB_EPStartXfer+0xb30>
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4a04      	ldr	r2, [pc, #16]	@ (8007a98 <USB_EPStartXfer+0xb20>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e36e      	b.n	8008170 <USB_EPStartXfer+0x11f8>
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	00000406 	.word	0x00000406
 8007a98:	ffff8000 	.word	0xffff8000
 8007a9c:	00000402 	.word	0x00000402
 8007aa0:	ffff8fbf 	.word	0xffff8fbf
 8007aa4:	ffff8080 	.word	0xffff8080
 8007aa8:	1d7b      	adds	r3, r7, #5
 8007aaa:	33ff      	adds	r3, #255	@ 0xff
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ab0:	d822      	bhi.n	8007af8 <USB_EPStartXfer+0xb80>
 8007ab2:	1d7b      	adds	r3, r7, #5
 8007ab4:	33ff      	adds	r3, #255	@ 0xff
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	21e8      	movs	r1, #232	@ 0xe8
 8007abc:	187a      	adds	r2, r7, r1
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	1d7b      	adds	r3, r7, #5
 8007ac2:	33ff      	adds	r3, #255	@ 0xff
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4013      	ands	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <USB_EPStartXfer+0xb5e>
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	187a      	adds	r2, r7, r1
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	218c      	movs	r1, #140	@ 0x8c
 8007ad8:	187b      	adds	r3, r7, r1
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	23e8      	movs	r3, #232	@ 0xe8
 8007ae2:	18fb      	adds	r3, r7, r3
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	029b      	lsls	r3, r3, #10
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e33b      	b.n	8008170 <USB_EPStartXfer+0x11f8>
 8007af8:	1d7b      	adds	r3, r7, #5
 8007afa:	33ff      	adds	r3, #255	@ 0xff
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	21e8      	movs	r1, #232	@ 0xe8
 8007b02:	187a      	adds	r2, r7, r1
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	1d7b      	adds	r3, r7, #5
 8007b08:	33ff      	adds	r3, #255	@ 0xff
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	221f      	movs	r2, #31
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d104      	bne.n	8007b1c <USB_EPStartXfer+0xba4>
 8007b12:	187b      	adds	r3, r7, r1
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	187a      	adds	r2, r7, r1
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	218c      	movs	r1, #140	@ 0x8c
 8007b1e:	187b      	adds	r3, r7, r1
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	23e8      	movs	r3, #232	@ 0xe8
 8007b28:	18fb      	adds	r3, r7, r3
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4ad7      	ldr	r2, [pc, #860]	@ (8007e94 <USB_EPStartXfer+0xf1c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	e315      	b.n	8008170 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	78db      	ldrb	r3, [r3, #3]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d000      	beq.n	8007b4e <USB_EPStartXfer+0xbd6>
 8007b4c:	e189      	b.n	8007e62 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d000      	beq.n	8007b58 <USB_EPStartXfer+0xbe0>
 8007b56:	e07b      	b.n	8007c50 <USB_EPStartXfer+0xcd8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	21ac      	movs	r1, #172	@ 0xac
 8007b5c:	187a      	adds	r2, r7, r1
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2250      	movs	r2, #80	@ 0x50
 8007b64:	5a9b      	ldrh	r3, [r3, r2]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	001a      	movs	r2, r3
 8007b6a:	187b      	adds	r3, r7, r1
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	187a      	adds	r2, r7, r1
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	00da      	lsls	r2, r3, #3
 8007b7a:	187b      	adds	r3, r7, r1
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	18d3      	adds	r3, r2, r3
 8007b80:	4ac5      	ldr	r2, [pc, #788]	@ (8007e98 <USB_EPStartXfer+0xf20>)
 8007b82:	4694      	mov	ip, r2
 8007b84:	4463      	add	r3, ip
 8007b86:	21a8      	movs	r1, #168	@ 0xa8
 8007b88:	187a      	adds	r2, r7, r1
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	0d9b      	lsrs	r3, r3, #22
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <USB_EPStartXfer+0xc46>
 8007ba8:	187b      	adds	r3, r7, r1
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4ab8      	ldr	r2, [pc, #736]	@ (8007e94 <USB_EPStartXfer+0xf1c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e06c      	b.n	8007c98 <USB_EPStartXfer+0xd20>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bc4:	d820      	bhi.n	8007c08 <USB_EPStartXfer+0xc90>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	21e4      	movs	r1, #228	@ 0xe4
 8007bce:	187a      	adds	r2, r7, r1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d004      	beq.n	8007be6 <USB_EPStartXfer+0xc6e>
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	187a      	adds	r2, r7, r1
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	21a8      	movs	r1, #168	@ 0xa8
 8007be8:	187b      	adds	r3, r7, r1
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	23e4      	movs	r3, #228	@ 0xe4
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	029b      	lsls	r3, r3, #10
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	187b      	adds	r3, r7, r1
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	e047      	b.n	8007c98 <USB_EPStartXfer+0xd20>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	21e4      	movs	r1, #228	@ 0xe4
 8007c10:	187a      	adds	r2, r7, r1
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	221f      	movs	r2, #31
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	d104      	bne.n	8007c28 <USB_EPStartXfer+0xcb0>
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	187a      	adds	r2, r7, r1
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	21a8      	movs	r1, #168	@ 0xa8
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	23e4      	movs	r3, #228	@ 0xe4
 8007c34:	18fb      	adds	r3, r7, r3
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	029b      	lsls	r3, r3, #10
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4a94      	ldr	r2, [pc, #592]	@ (8007e94 <USB_EPStartXfer+0xf1c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	187b      	adds	r3, r7, r1
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	e023      	b.n	8007c98 <USB_EPStartXfer+0xd20>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d11f      	bne.n	8007c98 <USB_EPStartXfer+0xd20>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	21b4      	movs	r1, #180	@ 0xb4
 8007c5c:	187a      	adds	r2, r7, r1
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2250      	movs	r2, #80	@ 0x50
 8007c64:	5a9b      	ldrh	r3, [r3, r2]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	001a      	movs	r2, r3
 8007c6a:	187b      	adds	r3, r7, r1
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	187a      	adds	r2, r7, r1
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	00da      	lsls	r2, r3, #3
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	4a85      	ldr	r2, [pc, #532]	@ (8007e98 <USB_EPStartXfer+0xf20>)
 8007c82:	4694      	mov	ip, r2
 8007c84:	4463      	add	r3, ip
 8007c86:	21b0      	movs	r1, #176	@ 0xb0
 8007c88:	187a      	adds	r2, r7, r1
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	187b      	adds	r3, r7, r1
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	22a4      	movs	r2, #164	@ 0xa4
 8007c9c:	18ba      	adds	r2, r7, r2
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d000      	beq.n	8007caa <USB_EPStartXfer+0xd32>
 8007ca8:	e07b      	b.n	8007da2 <USB_EPStartXfer+0xe2a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	219c      	movs	r1, #156	@ 0x9c
 8007cae:	187a      	adds	r2, r7, r1
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2250      	movs	r2, #80	@ 0x50
 8007cb6:	5a9b      	ldrh	r3, [r3, r2]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	001a      	movs	r2, r3
 8007cbc:	187b      	adds	r3, r7, r1
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	189b      	adds	r3, r3, r2
 8007cc2:	187a      	adds	r2, r7, r1
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	00da      	lsls	r2, r3, #3
 8007ccc:	187b      	adds	r3, r7, r1
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	18d3      	adds	r3, r2, r3
 8007cd2:	4a72      	ldr	r2, [pc, #456]	@ (8007e9c <USB_EPStartXfer+0xf24>)
 8007cd4:	4694      	mov	ip, r2
 8007cd6:	4463      	add	r3, ip
 8007cd8:	2198      	movs	r1, #152	@ 0x98
 8007cda:	187a      	adds	r2, r7, r1
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	059b      	lsls	r3, r3, #22
 8007ce8:	0d9b      	lsrs	r3, r3, #22
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	801a      	strh	r2, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <USB_EPStartXfer+0xd98>
 8007cfa:	187b      	adds	r3, r7, r1
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4a64      	ldr	r2, [pc, #400]	@ (8007e94 <USB_EPStartXfer+0xf1c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	187b      	adds	r3, r7, r1
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e069      	b.n	8007de4 <USB_EPStartXfer+0xe6c>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d16:	d820      	bhi.n	8007d5a <USB_EPStartXfer+0xde2>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	21e0      	movs	r1, #224	@ 0xe0
 8007d20:	187a      	adds	r2, r7, r1
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	d004      	beq.n	8007d38 <USB_EPStartXfer+0xdc0>
 8007d2e:	187b      	adds	r3, r7, r1
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3301      	adds	r3, #1
 8007d34:	187a      	adds	r2, r7, r1
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	2198      	movs	r1, #152	@ 0x98
 8007d3a:	187b      	adds	r3, r7, r1
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	23e0      	movs	r3, #224	@ 0xe0
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e044      	b.n	8007de4 <USB_EPStartXfer+0xe6c>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	21e0      	movs	r1, #224	@ 0xe0
 8007d62:	187a      	adds	r2, r7, r1
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	221f      	movs	r2, #31
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	d104      	bne.n	8007d7a <USB_EPStartXfer+0xe02>
 8007d70:	187b      	adds	r3, r7, r1
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	187a      	adds	r2, r7, r1
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	2198      	movs	r1, #152	@ 0x98
 8007d7c:	187b      	adds	r3, r7, r1
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	23e0      	movs	r3, #224	@ 0xe0
 8007d86:	18fb      	adds	r3, r7, r3
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	029b      	lsls	r3, r3, #10
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	4a3f      	ldr	r2, [pc, #252]	@ (8007e94 <USB_EPStartXfer+0xf1c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	187b      	adds	r3, r7, r1
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e020      	b.n	8007de4 <USB_EPStartXfer+0xe6c>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d11c      	bne.n	8007de4 <USB_EPStartXfer+0xe6c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2250      	movs	r2, #80	@ 0x50
 8007dae:	5a9b      	ldrh	r3, [r3, r2]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	001a      	movs	r2, r3
 8007db4:	21a4      	movs	r1, #164	@ 0xa4
 8007db6:	187b      	adds	r3, r7, r1
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	187a      	adds	r2, r7, r1
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	00da      	lsls	r2, r3, #3
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	18d3      	adds	r3, r2, r3
 8007dcc:	4a33      	ldr	r2, [pc, #204]	@ (8007e9c <USB_EPStartXfer+0xf24>)
 8007dce:	4694      	mov	ip, r2
 8007dd0:	4463      	add	r3, ip
 8007dd2:	21a0      	movs	r1, #160	@ 0xa0
 8007dd4:	187a      	adds	r2, r7, r1
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d100      	bne.n	8007dee <USB_EPStartXfer+0xe76>
 8007dec:	e1c0      	b.n	8008170 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	18d2      	adds	r2, r2, r3
 8007df8:	2196      	movs	r1, #150	@ 0x96
 8007dfa:	187b      	adds	r3, r7, r1
 8007dfc:	8812      	ldrh	r2, [r2, #0]
 8007dfe:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e00:	187b      	adds	r3, r7, r1
 8007e02:	881a      	ldrh	r2, [r3, #0]
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	01db      	lsls	r3, r3, #7
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <USB_EPStartXfer+0xe9e>
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	2240      	movs	r2, #64	@ 0x40
 8007e12:	4013      	ands	r3, r2
 8007e14:	d10d      	bne.n	8007e32 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e16:	2196      	movs	r1, #150	@ 0x96
 8007e18:	187b      	adds	r3, r7, r1
 8007e1a:	881a      	ldrh	r2, [r3, #0]
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	01db      	lsls	r3, r3, #7
 8007e20:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e22:	d000      	beq.n	8007e26 <USB_EPStartXfer+0xeae>
 8007e24:	e1a4      	b.n	8008170 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e26:	187b      	adds	r3, r7, r1
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2240      	movs	r2, #64	@ 0x40
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d000      	beq.n	8007e32 <USB_EPStartXfer+0xeba>
 8007e30:	e19e      	b.n	8008170 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	18d3      	adds	r3, r2, r3
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	2094      	movs	r0, #148	@ 0x94
 8007e42:	183b      	adds	r3, r7, r0
 8007e44:	4916      	ldr	r1, [pc, #88]	@ (8007ea0 <USB_EPStartXfer+0xf28>)
 8007e46:	400a      	ands	r2, r1
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	18d3      	adds	r3, r2, r3
 8007e54:	183a      	adds	r2, r7, r0
 8007e56:	8812      	ldrh	r2, [r2, #0]
 8007e58:	4912      	ldr	r1, [pc, #72]	@ (8007ea4 <USB_EPStartXfer+0xf2c>)
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	b292      	uxth	r2, r2
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	e186      	b.n	8008170 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	78db      	ldrb	r3, [r3, #3]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d000      	beq.n	8007e6c <USB_EPStartXfer+0xef4>
 8007e6a:	e17f      	b.n	800816c <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d917      	bls.n	8007ea8 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	1d7a      	adds	r2, r7, #5
 8007e7e:	32ff      	adds	r2, #255	@ 0xff
 8007e80:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	1d7b      	adds	r3, r7, #5
 8007e88:	33ff      	adds	r3, #255	@ 0xff
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	1ad2      	subs	r2, r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	619a      	str	r2, [r3, #24]
 8007e92:	e011      	b.n	8007eb8 <USB_EPStartXfer+0xf40>
 8007e94:	ffff8000 	.word	0xffff8000
 8007e98:	00000402 	.word	0x00000402
 8007e9c:	00000406 	.word	0x00000406
 8007ea0:	ffff8f8f 	.word	0xffff8f8f
 8007ea4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	1d7a      	adds	r2, r7, #5
 8007eae:	32ff      	adds	r2, #255	@ 0xff
 8007eb0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d000      	beq.n	8007ec2 <USB_EPStartXfer+0xf4a>
 8007ec0:	e081      	b.n	8007fc6 <USB_EPStartXfer+0x104e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	21cc      	movs	r1, #204	@ 0xcc
 8007ec6:	187a      	adds	r2, r7, r1
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2250      	movs	r2, #80	@ 0x50
 8007ece:	5a9b      	ldrh	r3, [r3, r2]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	187a      	adds	r2, r7, r1
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	00da      	lsls	r2, r3, #3
 8007ee4:	187b      	adds	r3, r7, r1
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	18d3      	adds	r3, r2, r3
 8007eea:	4ab6      	ldr	r2, [pc, #728]	@ (80081c4 <USB_EPStartXfer+0x124c>)
 8007eec:	4694      	mov	ip, r2
 8007eee:	4463      	add	r3, ip
 8007ef0:	21c8      	movs	r1, #200	@ 0xc8
 8007ef2:	187a      	adds	r2, r7, r1
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	187b      	adds	r3, r7, r1
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	059b      	lsls	r3, r3, #22
 8007f00:	0d9b      	lsrs	r3, r3, #22
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	187b      	adds	r3, r7, r1
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	1d7b      	adds	r3, r7, #5
 8007f0c:	33ff      	adds	r3, #255	@ 0xff
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <USB_EPStartXfer+0xfb2>
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4aaa      	ldr	r2, [pc, #680]	@ (80081c8 <USB_EPStartXfer+0x1250>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	187b      	adds	r3, r7, r1
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e072      	b.n	8008010 <USB_EPStartXfer+0x1098>
 8007f2a:	1d7b      	adds	r3, r7, #5
 8007f2c:	33ff      	adds	r3, #255	@ 0xff
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f32:	d822      	bhi.n	8007f7a <USB_EPStartXfer+0x1002>
 8007f34:	1d7b      	adds	r3, r7, #5
 8007f36:	33ff      	adds	r3, #255	@ 0xff
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	21dc      	movs	r1, #220	@ 0xdc
 8007f3e:	187a      	adds	r2, r7, r1
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	1d7b      	adds	r3, r7, #5
 8007f44:	33ff      	adds	r3, #255	@ 0xff
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <USB_EPStartXfer+0xfe0>
 8007f4e:	187b      	adds	r3, r7, r1
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	187a      	adds	r2, r7, r1
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	21c8      	movs	r1, #200	@ 0xc8
 8007f5a:	187b      	adds	r3, r7, r1
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	23dc      	movs	r3, #220	@ 0xdc
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	e04a      	b.n	8008010 <USB_EPStartXfer+0x1098>
 8007f7a:	1d7b      	adds	r3, r7, #5
 8007f7c:	33ff      	adds	r3, #255	@ 0xff
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	21dc      	movs	r1, #220	@ 0xdc
 8007f84:	187a      	adds	r2, r7, r1
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	1d7b      	adds	r3, r7, #5
 8007f8a:	33ff      	adds	r3, #255	@ 0xff
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	221f      	movs	r2, #31
 8007f90:	4013      	ands	r3, r2
 8007f92:	d104      	bne.n	8007f9e <USB_EPStartXfer+0x1026>
 8007f94:	187b      	adds	r3, r7, r1
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	187a      	adds	r2, r7, r1
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	21c8      	movs	r1, #200	@ 0xc8
 8007fa0:	187b      	adds	r3, r7, r1
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	23dc      	movs	r3, #220	@ 0xdc
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4a83      	ldr	r2, [pc, #524]	@ (80081c8 <USB_EPStartXfer+0x1250>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	187b      	adds	r3, r7, r1
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	801a      	strh	r2, [r3, #0]
 8007fc4:	e024      	b.n	8008010 <USB_EPStartXfer+0x1098>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d120      	bne.n	8008010 <USB_EPStartXfer+0x1098>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	21d4      	movs	r1, #212	@ 0xd4
 8007fd2:	187a      	adds	r2, r7, r1
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2250      	movs	r2, #80	@ 0x50
 8007fda:	5a9b      	ldrh	r3, [r3, r2]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	001a      	movs	r2, r3
 8007fe0:	187b      	adds	r3, r7, r1
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	189b      	adds	r3, r3, r2
 8007fe6:	187a      	adds	r2, r7, r1
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	00da      	lsls	r2, r3, #3
 8007ff0:	187b      	adds	r3, r7, r1
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	18d3      	adds	r3, r2, r3
 8007ff6:	4a73      	ldr	r2, [pc, #460]	@ (80081c4 <USB_EPStartXfer+0x124c>)
 8007ff8:	4694      	mov	ip, r2
 8007ffa:	4463      	add	r3, ip
 8007ffc:	21d0      	movs	r1, #208	@ 0xd0
 8007ffe:	187a      	adds	r2, r7, r1
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	1d7b      	adds	r3, r7, #5
 8008004:	33ff      	adds	r3, #255	@ 0xff
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b29a      	uxth	r2, r3
 800800a:	187b      	adds	r3, r7, r1
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	22c4      	movs	r2, #196	@ 0xc4
 8008014:	18ba      	adds	r2, r7, r2
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d000      	beq.n	8008022 <USB_EPStartXfer+0x10aa>
 8008020:	e081      	b.n	8008126 <USB_EPStartXfer+0x11ae>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	21bc      	movs	r1, #188	@ 0xbc
 8008026:	187a      	adds	r2, r7, r1
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2250      	movs	r2, #80	@ 0x50
 800802e:	5a9b      	ldrh	r3, [r3, r2]
 8008030:	b29b      	uxth	r3, r3
 8008032:	001a      	movs	r2, r3
 8008034:	187b      	adds	r3, r7, r1
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	189b      	adds	r3, r3, r2
 800803a:	187a      	adds	r2, r7, r1
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	00da      	lsls	r2, r3, #3
 8008044:	187b      	adds	r3, r7, r1
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	4a60      	ldr	r2, [pc, #384]	@ (80081cc <USB_EPStartXfer+0x1254>)
 800804c:	4694      	mov	ip, r2
 800804e:	4463      	add	r3, ip
 8008050:	21b8      	movs	r1, #184	@ 0xb8
 8008052:	187a      	adds	r2, r7, r1
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	187b      	adds	r3, r7, r1
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	059b      	lsls	r3, r3, #22
 8008060:	0d9b      	lsrs	r3, r3, #22
 8008062:	b29a      	uxth	r2, r3
 8008064:	187b      	adds	r3, r7, r1
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	1d7b      	adds	r3, r7, #5
 800806c:	33ff      	adds	r3, #255	@ 0xff
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <USB_EPStartXfer+0x1112>
 8008074:	187b      	adds	r3, r7, r1
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4a52      	ldr	r2, [pc, #328]	@ (80081c8 <USB_EPStartXfer+0x1250>)
 800807e:	4313      	orrs	r3, r2
 8008080:	b29a      	uxth	r2, r3
 8008082:	187b      	adds	r3, r7, r1
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	e072      	b.n	8008170 <USB_EPStartXfer+0x11f8>
 800808a:	1d7b      	adds	r3, r7, #5
 800808c:	33ff      	adds	r3, #255	@ 0xff
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b3e      	cmp	r3, #62	@ 0x3e
 8008092:	d822      	bhi.n	80080da <USB_EPStartXfer+0x1162>
 8008094:	1d7b      	adds	r3, r7, #5
 8008096:	33ff      	adds	r3, #255	@ 0xff
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	21d8      	movs	r1, #216	@ 0xd8
 800809e:	187a      	adds	r2, r7, r1
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	1d7b      	adds	r3, r7, #5
 80080a4:	33ff      	adds	r3, #255	@ 0xff
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	4013      	ands	r3, r2
 80080ac:	d004      	beq.n	80080b8 <USB_EPStartXfer+0x1140>
 80080ae:	187b      	adds	r3, r7, r1
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	187a      	adds	r2, r7, r1
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	21b8      	movs	r1, #184	@ 0xb8
 80080ba:	187b      	adds	r3, r7, r1
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	23d8      	movs	r3, #216	@ 0xd8
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	029b      	lsls	r3, r3, #10
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	187b      	adds	r3, r7, r1
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e04a      	b.n	8008170 <USB_EPStartXfer+0x11f8>
 80080da:	1d7b      	adds	r3, r7, #5
 80080dc:	33ff      	adds	r3, #255	@ 0xff
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	21d8      	movs	r1, #216	@ 0xd8
 80080e4:	187a      	adds	r2, r7, r1
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	1d7b      	adds	r3, r7, #5
 80080ea:	33ff      	adds	r3, #255	@ 0xff
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	221f      	movs	r2, #31
 80080f0:	4013      	ands	r3, r2
 80080f2:	d104      	bne.n	80080fe <USB_EPStartXfer+0x1186>
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	187a      	adds	r2, r7, r1
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	21b8      	movs	r1, #184	@ 0xb8
 8008100:	187b      	adds	r3, r7, r1
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	23d8      	movs	r3, #216	@ 0xd8
 800810a:	18fb      	adds	r3, r7, r3
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29b      	uxth	r3, r3
 8008118:	4a2b      	ldr	r2, [pc, #172]	@ (80081c8 <USB_EPStartXfer+0x1250>)
 800811a:	4313      	orrs	r3, r2
 800811c:	b29a      	uxth	r2, r3
 800811e:	187b      	adds	r3, r7, r1
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	e024      	b.n	8008170 <USB_EPStartXfer+0x11f8>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d120      	bne.n	8008170 <USB_EPStartXfer+0x11f8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2250      	movs	r2, #80	@ 0x50
 8008132:	5a9b      	ldrh	r3, [r3, r2]
 8008134:	b29b      	uxth	r3, r3
 8008136:	001a      	movs	r2, r3
 8008138:	21c4      	movs	r1, #196	@ 0xc4
 800813a:	187b      	adds	r3, r7, r1
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	189b      	adds	r3, r3, r2
 8008140:	187a      	adds	r2, r7, r1
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	00da      	lsls	r2, r3, #3
 800814a:	187b      	adds	r3, r7, r1
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	18d3      	adds	r3, r2, r3
 8008150:	4a1e      	ldr	r2, [pc, #120]	@ (80081cc <USB_EPStartXfer+0x1254>)
 8008152:	4694      	mov	ip, r2
 8008154:	4463      	add	r3, ip
 8008156:	21c0      	movs	r1, #192	@ 0xc0
 8008158:	187a      	adds	r2, r7, r1
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	1d7b      	adds	r3, r7, #5
 800815e:	33ff      	adds	r3, #255	@ 0xff
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	187b      	adds	r3, r7, r1
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	e001      	b.n	8008170 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e025      	b.n	80081bc <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	18d3      	adds	r3, r2, r3
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	208a      	movs	r0, #138	@ 0x8a
 8008180:	183b      	adds	r3, r7, r0
 8008182:	4913      	ldr	r1, [pc, #76]	@ (80081d0 <USB_EPStartXfer+0x1258>)
 8008184:	400a      	ands	r2, r1
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	183b      	adds	r3, r7, r0
 800818a:	183a      	adds	r2, r7, r0
 800818c:	8812      	ldrh	r2, [r2, #0]
 800818e:	2180      	movs	r1, #128	@ 0x80
 8008190:	0149      	lsls	r1, r1, #5
 8008192:	404a      	eors	r2, r1
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	183b      	adds	r3, r7, r0
 8008198:	183a      	adds	r2, r7, r0
 800819a:	8812      	ldrh	r2, [r2, #0]
 800819c:	2180      	movs	r1, #128	@ 0x80
 800819e:	0189      	lsls	r1, r1, #6
 80081a0:	404a      	eors	r2, r1
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	18d3      	adds	r3, r2, r3
 80081ae:	183a      	adds	r2, r7, r0
 80081b0:	8812      	ldrh	r2, [r2, #0]
 80081b2:	4908      	ldr	r1, [pc, #32]	@ (80081d4 <USB_EPStartXfer+0x125c>)
 80081b4:	430a      	orrs	r2, r1
 80081b6:	b292      	uxth	r2, r2
 80081b8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b043      	add	sp, #268	@ 0x10c
 80081c2:	bd90      	pop	{r4, r7, pc}
 80081c4:	00000402 	.word	0x00000402
 80081c8:	ffff8000 	.word	0xffff8000
 80081cc:	00000406 	.word	0x00000406
 80081d0:	ffffbf8f 	.word	0xffffbf8f
 80081d4:	ffff8080 	.word	0xffff8080

080081d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01d      	beq.n	8008226 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	18d3      	adds	r3, r2, r3
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	200c      	movs	r0, #12
 80081fa:	183b      	adds	r3, r7, r0
 80081fc:	491b      	ldr	r1, [pc, #108]	@ (800826c <USB_EPSetStall+0x94>)
 80081fe:	400a      	ands	r2, r1
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	183b      	adds	r3, r7, r0
 8008204:	183a      	adds	r2, r7, r0
 8008206:	8812      	ldrh	r2, [r2, #0]
 8008208:	2110      	movs	r1, #16
 800820a:	404a      	eors	r2, r1
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	18d3      	adds	r3, r2, r3
 8008218:	183a      	adds	r2, r7, r0
 800821a:	8812      	ldrh	r2, [r2, #0]
 800821c:	4914      	ldr	r1, [pc, #80]	@ (8008270 <USB_EPSetStall+0x98>)
 800821e:	430a      	orrs	r2, r1
 8008220:	b292      	uxth	r2, r2
 8008222:	801a      	strh	r2, [r3, #0]
 8008224:	e01d      	b.n	8008262 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	18d3      	adds	r3, r2, r3
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29a      	uxth	r2, r3
 8008234:	200e      	movs	r0, #14
 8008236:	183b      	adds	r3, r7, r0
 8008238:	490e      	ldr	r1, [pc, #56]	@ (8008274 <USB_EPSetStall+0x9c>)
 800823a:	400a      	ands	r2, r1
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	183b      	adds	r3, r7, r0
 8008240:	183a      	adds	r2, r7, r0
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	2180      	movs	r1, #128	@ 0x80
 8008246:	0149      	lsls	r1, r1, #5
 8008248:	404a      	eors	r2, r1
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	18d3      	adds	r3, r2, r3
 8008256:	183a      	adds	r2, r7, r0
 8008258:	8812      	ldrh	r2, [r2, #0]
 800825a:	4905      	ldr	r1, [pc, #20]	@ (8008270 <USB_EPSetStall+0x98>)
 800825c:	430a      	orrs	r2, r1
 800825e:	b292      	uxth	r2, r2
 8008260:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	0018      	movs	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	b004      	add	sp, #16
 800826a:	bd80      	pop	{r7, pc}
 800826c:	ffff8fbf 	.word	0xffff8fbf
 8008270:	ffff8080 	.word	0xffff8080
 8008274:	ffffbf8f 	.word	0xffffbf8f

08008278 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	7b1b      	ldrb	r3, [r3, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d000      	beq.n	800828c <USB_EPClearStall+0x14>
 800828a:	e095      	b.n	80083b8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d046      	beq.n	8008322 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	18d2      	adds	r2, r2, r3
 800829e:	2110      	movs	r1, #16
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	187b      	adds	r3, r7, r1
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	2240      	movs	r2, #64	@ 0x40
 80082ac:	4013      	ands	r3, r2
 80082ae:	d016      	beq.n	80082de <USB_EPClearStall+0x66>
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	18d3      	adds	r3, r2, r3
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29a      	uxth	r2, r3
 80082be:	200e      	movs	r0, #14
 80082c0:	183b      	adds	r3, r7, r0
 80082c2:	4940      	ldr	r1, [pc, #256]	@ (80083c4 <USB_EPClearStall+0x14c>)
 80082c4:	400a      	ands	r2, r1
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18d3      	adds	r3, r2, r3
 80082d2:	183a      	adds	r2, r7, r0
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	493c      	ldr	r1, [pc, #240]	@ (80083c8 <USB_EPClearStall+0x150>)
 80082d8:	430a      	orrs	r2, r1
 80082da:	b292      	uxth	r2, r2
 80082dc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	78db      	ldrb	r3, [r3, #3]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d068      	beq.n	80083b8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	18d3      	adds	r3, r2, r3
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	200c      	movs	r0, #12
 80082f6:	183b      	adds	r3, r7, r0
 80082f8:	4934      	ldr	r1, [pc, #208]	@ (80083cc <USB_EPClearStall+0x154>)
 80082fa:	400a      	ands	r2, r1
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	183b      	adds	r3, r7, r0
 8008300:	183a      	adds	r2, r7, r0
 8008302:	8812      	ldrh	r2, [r2, #0]
 8008304:	2120      	movs	r1, #32
 8008306:	404a      	eors	r2, r1
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	183a      	adds	r2, r7, r0
 8008316:	8812      	ldrh	r2, [r2, #0]
 8008318:	492d      	ldr	r1, [pc, #180]	@ (80083d0 <USB_EPClearStall+0x158>)
 800831a:	430a      	orrs	r2, r1
 800831c:	b292      	uxth	r2, r2
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	e04a      	b.n	80083b8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	18d2      	adds	r2, r2, r3
 800832c:	2116      	movs	r1, #22
 800832e:	187b      	adds	r3, r7, r1
 8008330:	8812      	ldrh	r2, [r2, #0]
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	187b      	adds	r3, r7, r1
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	2380      	movs	r3, #128	@ 0x80
 800833a:	01db      	lsls	r3, r3, #7
 800833c:	4013      	ands	r3, r2
 800833e:	d016      	beq.n	800836e <USB_EPClearStall+0xf6>
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	18d3      	adds	r3, r2, r3
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29a      	uxth	r2, r3
 800834e:	2014      	movs	r0, #20
 8008350:	183b      	adds	r3, r7, r0
 8008352:	491c      	ldr	r1, [pc, #112]	@ (80083c4 <USB_EPClearStall+0x14c>)
 8008354:	400a      	ands	r2, r1
 8008356:	801a      	strh	r2, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	18d3      	adds	r3, r2, r3
 8008362:	183a      	adds	r2, r7, r0
 8008364:	8812      	ldrh	r2, [r2, #0]
 8008366:	491b      	ldr	r1, [pc, #108]	@ (80083d4 <USB_EPClearStall+0x15c>)
 8008368:	430a      	orrs	r2, r1
 800836a:	b292      	uxth	r2, r2
 800836c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	18d3      	adds	r3, r2, r3
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	2012      	movs	r0, #18
 800837e:	183b      	adds	r3, r7, r0
 8008380:	4915      	ldr	r1, [pc, #84]	@ (80083d8 <USB_EPClearStall+0x160>)
 8008382:	400a      	ands	r2, r1
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	183b      	adds	r3, r7, r0
 8008388:	183a      	adds	r2, r7, r0
 800838a:	8812      	ldrh	r2, [r2, #0]
 800838c:	2180      	movs	r1, #128	@ 0x80
 800838e:	0149      	lsls	r1, r1, #5
 8008390:	404a      	eors	r2, r1
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	183b      	adds	r3, r7, r0
 8008396:	183a      	adds	r2, r7, r0
 8008398:	8812      	ldrh	r2, [r2, #0]
 800839a:	2180      	movs	r1, #128	@ 0x80
 800839c:	0189      	lsls	r1, r1, #6
 800839e:	404a      	eors	r2, r1
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	18d3      	adds	r3, r2, r3
 80083ac:	183a      	adds	r2, r7, r0
 80083ae:	8812      	ldrh	r2, [r2, #0]
 80083b0:	4907      	ldr	r1, [pc, #28]	@ (80083d0 <USB_EPClearStall+0x158>)
 80083b2:	430a      	orrs	r2, r1
 80083b4:	b292      	uxth	r2, r2
 80083b6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	0018      	movs	r0, r3
 80083bc:	46bd      	mov	sp, r7
 80083be:	b006      	add	sp, #24
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			@ (mov r8, r8)
 80083c4:	ffff8f8f 	.word	0xffff8f8f
 80083c8:	ffff80c0 	.word	0xffff80c0
 80083cc:	ffff8fbf 	.word	0xffff8fbf
 80083d0:	ffff8080 	.word	0xffff8080
 80083d4:	ffffc080 	.word	0xffffc080
 80083d8:	ffffbf8f 	.word	0xffffbf8f

080083dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	000a      	movs	r2, r1
 80083e6:	1cfb      	adds	r3, r7, #3
 80083e8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80083ea:	1cfb      	adds	r3, r7, #3
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	224c      	movs	r2, #76	@ 0x4c
 80083f6:	2180      	movs	r1, #128	@ 0x80
 80083f8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b002      	add	sp, #8
 8008402:	bd80      	pop	{r7, pc}

08008404 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2258      	movs	r2, #88	@ 0x58
 8008410:	5a9b      	ldrh	r3, [r3, r2]
 8008412:	b29b      	uxth	r3, r3
 8008414:	4a05      	ldr	r2, [pc, #20]	@ (800842c <USB_DevConnect+0x28>)
 8008416:	4313      	orrs	r3, r2
 8008418:	b299      	uxth	r1, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2258      	movs	r2, #88	@ 0x58
 800841e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	0018      	movs	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	b002      	add	sp, #8
 8008428:	bd80      	pop	{r7, pc}
 800842a:	46c0      	nop			@ (mov r8, r8)
 800842c:	ffff8000 	.word	0xffff8000

08008430 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2244      	movs	r2, #68	@ 0x44
 800843c:	5a9b      	ldrh	r3, [r3, r2]
 800843e:	b29b      	uxth	r3, r3
 8008440:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	0018      	movs	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	b004      	add	sp, #16
 800844a:	bd80      	pop	{r7, pc}

0800844c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08a      	sub	sp, #40	@ 0x28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	0019      	movs	r1, r3
 8008458:	1dbb      	adds	r3, r7, #6
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	1d3b      	adds	r3, r7, #4
 800845e:	1c0a      	adds	r2, r1, #0
 8008460:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008462:	1d3b      	adds	r3, r7, #4
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	085b      	lsrs	r3, r3, #1
 800846a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008474:	1dbb      	adds	r3, r7, #6
 8008476:	881a      	ldrh	r2, [r3, #0]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	18d3      	adds	r3, r2, r3
 800847c:	2280      	movs	r2, #128	@ 0x80
 800847e:	00d2      	lsls	r2, r2, #3
 8008480:	4694      	mov	ip, r2
 8008482:	4463      	add	r3, ip
 8008484:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
 800848a:	e021      	b.n	80084d0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	2112      	movs	r1, #18
 8008492:	187b      	adds	r3, r7, r1
 8008494:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3301      	adds	r3, #1
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b21b      	sxth	r3, r3
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	b21a      	sxth	r2, r3
 80084a2:	187b      	adds	r3, r7, r1
 80084a4:	2000      	movs	r0, #0
 80084a6:	5e1b      	ldrsh	r3, [r3, r0]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b21a      	sxth	r2, r3
 80084ac:	187b      	adds	r3, r7, r1
 80084ae:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	187a      	adds	r2, r7, r1
 80084b4:	8812      	ldrh	r2, [r2, #0]
 80084b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	3302      	adds	r3, #2
 80084bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	3301      	adds	r3, #1
 80084c2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	3b01      	subs	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1da      	bne.n	800848c <USB_WritePMA+0x40>
  }
}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b00a      	add	sp, #40	@ 0x28
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	@ 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	0019      	movs	r1, r3
 80084ec:	1dbb      	adds	r3, r7, #6
 80084ee:	801a      	strh	r2, [r3, #0]
 80084f0:	1d3b      	adds	r3, r7, #4
 80084f2:	1c0a      	adds	r2, r1, #0
 80084f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008508:	1dbb      	adds	r3, r7, #6
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	18d3      	adds	r3, r2, r3
 8008510:	2280      	movs	r2, #128	@ 0x80
 8008512:	00d2      	lsls	r2, r2, #3
 8008514:	4694      	mov	ip, r2
 8008516:	4463      	add	r3, ip
 8008518:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
 800851e:	e018      	b.n	8008552 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	3302      	adds	r3, #2
 800852c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	b2da      	uxtb	r2, r3
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	3301      	adds	r3, #1
 800853a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b2da      	uxtb	r2, r3
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	3b01      	subs	r3, #1
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e3      	bne.n	8008520 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	4013      	ands	r3, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d007      	beq.n	8008576 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	701a      	strb	r2, [r3, #0]
  }
}
 8008576:	46c0      	nop			@ (mov r8, r8)
 8008578:	46bd      	mov	sp, r7
 800857a:	b00a      	add	sp, #40	@ 0x28
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	000a      	movs	r2, r1
 8008588:	1cfb      	adds	r3, r7, #3
 800858a:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	2304      	movs	r3, #4
 8008590:	2203      	movs	r2, #3
 8008592:	2181      	movs	r1, #129	@ 0x81
 8008594:	f001 fe5f 	bl	800a256 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800859e:	2010      	movs	r0, #16
 80085a0:	f001 ffda 	bl	800a558 <USBD_static_malloc>
 80085a4:	0001      	movs	r1, r0
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	23ae      	movs	r3, #174	@ 0xae
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	23ae      	movs	r3, #174	@ 0xae
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	58d3      	ldr	r3, [r2, r3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80085ba:	2302      	movs	r3, #2
 80085bc:	e006      	b.n	80085cc <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	23ae      	movs	r3, #174	@ 0xae
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	58d3      	ldr	r3, [r2, r3]
 80085c6:	2200      	movs	r2, #0
 80085c8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	0018      	movs	r0, r3
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b002      	add	sp, #8
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	000a      	movs	r2, r1
 80085de:	1cfb      	adds	r3, r7, #3
 80085e0:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2181      	movs	r1, #129	@ 0x81
 80085e6:	0018      	movs	r0, r3
 80085e8:	f001 fe6c 	bl	800a2c4 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	23ae      	movs	r3, #174	@ 0xae
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	58d3      	ldr	r3, [r2, r3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	23ae      	movs	r3, #174	@ 0xae
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	58d3      	ldr	r3, [r2, r3]
 8008606:	0018      	movs	r0, r3
 8008608:	f001 ffb2 	bl	800a570 <USBD_static_free>
    pdev->pClassData = NULL;
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	23ae      	movs	r3, #174	@ 0xae
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	2100      	movs	r1, #0
 8008614:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	0018      	movs	r0, r3
 800861a:	46bd      	mov	sp, r7
 800861c:	b002      	add	sp, #8
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	23ae      	movs	r3, #174	@ 0xae
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	58d3      	ldr	r3, [r2, r3]
 8008632:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008634:	231e      	movs	r3, #30
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	2200      	movs	r2, #0
 800863a:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800863c:	2300      	movs	r3, #0
 800863e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008640:	230e      	movs	r3, #14
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	2200      	movs	r2, #0
 8008646:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008648:	2317      	movs	r3, #23
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	001a      	movs	r2, r3
 8008656:	2360      	movs	r3, #96	@ 0x60
 8008658:	4013      	ands	r3, r2
 800865a:	d03a      	beq.n	80086d2 <USBD_HID_Setup+0xb2>
 800865c:	2b20      	cmp	r3, #32
 800865e:	d000      	beq.n	8008662 <USBD_HID_Setup+0x42>
 8008660:	e0d6      	b.n	8008810 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b0b      	cmp	r3, #11
 8008668:	d008      	beq.n	800867c <USBD_HID_Setup+0x5c>
 800866a:	dc26      	bgt.n	80086ba <USBD_HID_Setup+0x9a>
 800866c:	2b0a      	cmp	r3, #10
 800866e:	d013      	beq.n	8008698 <USBD_HID_Setup+0x78>
 8008670:	dc23      	bgt.n	80086ba <USBD_HID_Setup+0x9a>
 8008672:	2b02      	cmp	r3, #2
 8008674:	d019      	beq.n	80086aa <USBD_HID_Setup+0x8a>
 8008676:	2b03      	cmp	r3, #3
 8008678:	d007      	beq.n	800868a <USBD_HID_Setup+0x6a>
 800867a:	e01e      	b.n	80086ba <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	885b      	ldrh	r3, [r3, #2]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	001a      	movs	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	601a      	str	r2, [r3, #0]
          break;
 8008688:	e022      	b.n	80086d0 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	0018      	movs	r0, r3
 8008692:	f001 fabc 	bl	8009c0e <USBD_CtlSendData>
          break;
 8008696:	e01b      	b.n	80086d0 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	b29b      	uxth	r3, r3
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	001a      	movs	r2, r3
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	605a      	str	r2, [r3, #4]
          break;
 80086a8:	e012      	b.n	80086d0 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1d19      	adds	r1, r3, #4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	0018      	movs	r0, r3
 80086b4:	f001 faab 	bl	8009c0e <USBD_CtlSendData>
          break;
 80086b8:	e00a      	b.n	80086d0 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f001 fa26 	bl	8009b12 <USBD_CtlError>
          ret = USBD_FAIL;
 80086c6:	2317      	movs	r3, #23
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	2202      	movs	r2, #2
 80086cc:	701a      	strb	r2, [r3, #0]
          break;
 80086ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80086d0:	e0a9      	b.n	8008826 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b0b      	cmp	r3, #11
 80086d8:	d100      	bne.n	80086dc <USBD_HID_Setup+0xbc>
 80086da:	e075      	b.n	80087c8 <USBD_HID_Setup+0x1a8>
 80086dc:	dd00      	ble.n	80086e0 <USBD_HID_Setup+0xc0>
 80086de:	e08b      	b.n	80087f8 <USBD_HID_Setup+0x1d8>
 80086e0:	2b0a      	cmp	r3, #10
 80086e2:	d057      	beq.n	8008794 <USBD_HID_Setup+0x174>
 80086e4:	dd00      	ble.n	80086e8 <USBD_HID_Setup+0xc8>
 80086e6:	e087      	b.n	80087f8 <USBD_HID_Setup+0x1d8>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <USBD_HID_Setup+0xd2>
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d019      	beq.n	8008724 <USBD_HID_Setup+0x104>
 80086f0:	e082      	b.n	80087f8 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	23a7      	movs	r3, #167	@ 0xa7
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	5cd3      	ldrb	r3, [r2, r3]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d107      	bne.n	800870e <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80086fe:	230e      	movs	r3, #14
 8008700:	18f9      	adds	r1, r7, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	0018      	movs	r0, r3
 8008708:	f001 fa81 	bl	8009c0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870c:	e07f      	b.n	800880e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f001 f9fc 	bl	8009b12 <USBD_CtlError>
            ret = USBD_FAIL;
 800871a:	2317      	movs	r3, #23
 800871c:	18fb      	adds	r3, r7, r3
 800871e:	2202      	movs	r2, #2
 8008720:	701a      	strb	r2, [r3, #0]
          break;
 8008722:	e074      	b.n	800880e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	b29b      	uxth	r3, r3
 800872c:	2b22      	cmp	r3, #34	@ 0x22
 800872e:	d10b      	bne.n	8008748 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	221e      	movs	r2, #30
 8008736:	18ba      	adds	r2, r7, r2
 8008738:	b299      	uxth	r1, r3
 800873a:	2971      	cmp	r1, #113	@ 0x71
 800873c:	d900      	bls.n	8008740 <USBD_HID_Setup+0x120>
 800873e:	2371      	movs	r3, #113	@ 0x71
 8008740:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8008742:	4b3c      	ldr	r3, [pc, #240]	@ (8008834 <USBD_HID_Setup+0x214>)
 8008744:	61bb      	str	r3, [r7, #24]
 8008746:	e01c      	b.n	8008782 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	885b      	ldrh	r3, [r3, #2]
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b21      	cmp	r3, #33	@ 0x21
 8008752:	d10b      	bne.n	800876c <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8008754:	4b38      	ldr	r3, [pc, #224]	@ (8008838 <USBD_HID_Setup+0x218>)
 8008756:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	88db      	ldrh	r3, [r3, #6]
 800875c:	221e      	movs	r2, #30
 800875e:	18ba      	adds	r2, r7, r2
 8008760:	b299      	uxth	r1, r3
 8008762:	2909      	cmp	r1, #9
 8008764:	d900      	bls.n	8008768 <USBD_HID_Setup+0x148>
 8008766:	2309      	movs	r3, #9
 8008768:	8013      	strh	r3, [r2, #0]
 800876a:	e00a      	b.n	8008782 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f001 f9cd 	bl	8009b12 <USBD_CtlError>
            ret = USBD_FAIL;
 8008778:	2317      	movs	r3, #23
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	2202      	movs	r2, #2
 800877e:	701a      	strb	r2, [r3, #0]
            break;
 8008780:	e045      	b.n	800880e <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008782:	231e      	movs	r3, #30
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	881a      	ldrh	r2, [r3, #0]
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	0018      	movs	r0, r3
 800878e:	f001 fa3e 	bl	8009c0e <USBD_CtlSendData>
          break;
 8008792:	e03c      	b.n	800880e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	23a7      	movs	r3, #167	@ 0xa7
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	5cd3      	ldrb	r3, [r2, r3]
 800879c:	2b03      	cmp	r3, #3
 800879e:	d108      	bne.n	80087b2 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	3308      	adds	r3, #8
 80087a4:	0019      	movs	r1, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	0018      	movs	r0, r3
 80087ac:	f001 fa2f 	bl	8009c0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087b0:	e02d      	b.n	800880e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	0011      	movs	r1, r2
 80087b8:	0018      	movs	r0, r3
 80087ba:	f001 f9aa 	bl	8009b12 <USBD_CtlError>
            ret = USBD_FAIL;
 80087be:	2317      	movs	r3, #23
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	2202      	movs	r2, #2
 80087c4:	701a      	strb	r2, [r3, #0]
          break;
 80087c6:	e022      	b.n	800880e <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	23a7      	movs	r3, #167	@ 0xa7
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	5cd3      	ldrb	r3, [r2, r3]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d106      	bne.n	80087e2 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	001a      	movs	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087e0:	e015      	b.n	800880e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	0011      	movs	r1, r2
 80087e8:	0018      	movs	r0, r3
 80087ea:	f001 f992 	bl	8009b12 <USBD_CtlError>
            ret = USBD_FAIL;
 80087ee:	2317      	movs	r3, #23
 80087f0:	18fb      	adds	r3, r7, r3
 80087f2:	2202      	movs	r2, #2
 80087f4:	701a      	strb	r2, [r3, #0]
          break;
 80087f6:	e00a      	b.n	800880e <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	0011      	movs	r1, r2
 80087fe:	0018      	movs	r0, r3
 8008800:	f001 f987 	bl	8009b12 <USBD_CtlError>
          ret = USBD_FAIL;
 8008804:	2317      	movs	r3, #23
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	2202      	movs	r2, #2
 800880a:	701a      	strb	r2, [r3, #0]
          break;
 800880c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800880e:	e00a      	b.n	8008826 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	0011      	movs	r1, r2
 8008816:	0018      	movs	r0, r3
 8008818:	f001 f97b 	bl	8009b12 <USBD_CtlError>
      ret = USBD_FAIL;
 800881c:	2317      	movs	r3, #23
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	2202      	movs	r2, #2
 8008822:	701a      	strb	r2, [r3, #0]
      break;
 8008824:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008826:	2317      	movs	r3, #23
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	781b      	ldrb	r3, [r3, #0]
}
 800882c:	0018      	movs	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	b008      	add	sp, #32
 8008832:	bd80      	pop	{r7, pc}
 8008834:	200002e4 	.word	0x200002e4
 8008838:	200002cc 	.word	0x200002cc

0800883c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	1dbb      	adds	r3, r7, #6
 8008848:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	23ae      	movs	r3, #174	@ 0xae
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	58d3      	ldr	r3, [r2, r3]
 8008852:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	23a7      	movs	r3, #167	@ 0xa7
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	5cd3      	ldrb	r3, [r2, r3]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d10d      	bne.n	800887c <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	7b1b      	ldrb	r3, [r3, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2201      	movs	r2, #1
 800886c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800886e:	1dbb      	adds	r3, r7, #6
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	2181      	movs	r1, #129	@ 0x81
 8008878:	f001 fe00 	bl	800a47c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b006      	add	sp, #24
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2222      	movs	r2, #34	@ 0x22
 8008894:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008896:	4b02      	ldr	r3, [pc, #8]	@ (80088a0 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8008898:	0018      	movs	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000260 	.word	0x20000260

080088a4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2222      	movs	r2, #34	@ 0x22
 80088b0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80088b2:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <USBD_HID_GetHSCfgDesc+0x18>)
}
 80088b4:	0018      	movs	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b002      	add	sp, #8
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000284 	.word	0x20000284

080088c0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2222      	movs	r2, #34	@ 0x22
 80088cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80088ce:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80088d0:	0018      	movs	r0, r3
 80088d2:	46bd      	mov	sp, r7
 80088d4:	b002      	add	sp, #8
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	200002a8 	.word	0x200002a8

080088dc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	000a      	movs	r2, r1
 80088e6:	1cfb      	adds	r3, r7, #3
 80088e8:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	23ae      	movs	r3, #174	@ 0xae
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	58d3      	ldr	r3, [r2, r3]
 80088f2:	2200      	movs	r2, #0
 80088f4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	0018      	movs	r0, r3
 80088fa:	46bd      	mov	sp, r7
 80088fc:	b002      	add	sp, #8
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	220a      	movs	r2, #10
 800890c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800890e:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8008910:	0018      	movs	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bd80      	pop	{r7, pc}
 8008918:	200002d8 	.word	0x200002d8

0800891c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	1dfb      	adds	r3, r7, #7
 8008928:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	e020      	b.n	8008976 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	23ad      	movs	r3, #173	@ 0xad
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	58d3      	ldr	r3, [r2, r3]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	23ad      	movs	r3, #173	@ 0xad
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	2100      	movs	r1, #0
 8008948:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	23ac      	movs	r3, #172	@ 0xac
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	23a7      	movs	r3, #167	@ 0xa7
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	2101      	movs	r1, #1
 8008962:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	1dfa      	adds	r2, r7, #7
 8008968:	7812      	ldrb	r2, [r2, #0]
 800896a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	0018      	movs	r0, r3
 8008970:	f001 fbfc 	bl	800a16c <USBD_LL_Init>

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b004      	add	sp, #16
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008988:	200f      	movs	r0, #15
 800898a:	183b      	adds	r3, r7, r0
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d008      	beq.n	80089a8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	23ad      	movs	r3, #173	@ 0xad
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80089a0:	183b      	adds	r3, r7, r0
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	e003      	b.n	80089b0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80089a8:	230f      	movs	r3, #15
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	2202      	movs	r2, #2
 80089ae:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80089b0:	230f      	movs	r3, #15
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	781b      	ldrb	r3, [r3, #0]
}
 80089b6:	0018      	movs	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	b004      	add	sp, #16
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f001 fc1f 	bl	800a20c <USBD_LL_Start>

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	0018      	movs	r0, r3
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b002      	add	sp, #8
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089ea:	b590      	push	{r4, r7, lr}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	000a      	movs	r2, r1
 80089f4:	1cfb      	adds	r3, r7, #3
 80089f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089f8:	240f      	movs	r4, #15
 80089fa:	193b      	adds	r3, r7, r4
 80089fc:	2202      	movs	r2, #2
 80089fe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	23ad      	movs	r3, #173	@ 0xad
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	58d3      	ldr	r3, [r2, r3]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00e      	beq.n	8008a2a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	23ad      	movs	r3, #173	@ 0xad
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	58d3      	ldr	r3, [r2, r3]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	1cfa      	adds	r2, r7, #3
 8008a18:	7811      	ldrb	r1, [r2, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	0010      	movs	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	1e03      	subs	r3, r0, #0
 8008a22:	d102      	bne.n	8008a2a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8008a24:	193b      	adds	r3, r7, r4
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8008a2a:	230f      	movs	r3, #15
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
}
 8008a30:	0018      	movs	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b005      	add	sp, #20
 8008a36:	bd90      	pop	{r4, r7, pc}

08008a38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	000a      	movs	r2, r1
 8008a42:	1cfb      	adds	r3, r7, #3
 8008a44:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	23ad      	movs	r3, #173	@ 0xad
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	58d3      	ldr	r3, [r2, r3]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	1cfa      	adds	r2, r7, #3
 8008a52:	7811      	ldrb	r1, [r2, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	0010      	movs	r0, r2
 8008a58:	4798      	blx	r3

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b002      	add	sp, #8
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	22aa      	movs	r2, #170	@ 0xaa
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	4694      	mov	ip, r2
 8008a76:	4463      	add	r3, ip
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	0011      	movs	r1, r2
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f001 f810 	bl	8009aa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	23a5      	movs	r3, #165	@ 0xa5
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	2101      	movs	r1, #1
 8008a8a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a23      	ldr	r2, [pc, #140]	@ (8008b1c <USBD_LL_SetupStage+0xb8>)
 8008a90:	5a9b      	ldrh	r3, [r3, r2]
 8008a92:	0019      	movs	r1, r3
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	23a6      	movs	r3, #166	@ 0xa6
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	23aa      	movs	r3, #170	@ 0xaa
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	5cd3      	ldrb	r3, [r2, r3]
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	231f      	movs	r3, #31
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d019      	beq.n	8008ae2 <USBD_LL_SetupStage+0x7e>
 8008aae:	d822      	bhi.n	8008af6 <USBD_LL_SetupStage+0x92>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <USBD_LL_SetupStage+0x56>
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d00a      	beq.n	8008ace <USBD_LL_SetupStage+0x6a>
 8008ab8:	e01d      	b.n	8008af6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	22aa      	movs	r2, #170	@ 0xaa
 8008abe:	0092      	lsls	r2, r2, #2
 8008ac0:	189a      	adds	r2, r3, r2
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	0011      	movs	r1, r2
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f000 fa10 	bl	8008eec <USBD_StdDevReq>
      break;
 8008acc:	e020      	b.n	8008b10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	22aa      	movs	r2, #170	@ 0xaa
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	189a      	adds	r2, r3, r2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	0011      	movs	r1, r2
 8008ada:	0018      	movs	r0, r3
 8008adc:	f000 fa78 	bl	8008fd0 <USBD_StdItfReq>
      break;
 8008ae0:	e016      	b.n	8008b10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	22aa      	movs	r2, #170	@ 0xaa
 8008ae6:	0092      	lsls	r2, r2, #2
 8008ae8:	189a      	adds	r2, r3, r2
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0011      	movs	r1, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f000 fac5 	bl	800907e <USBD_StdEPReq>
      break;
 8008af4:	e00c      	b.n	8008b10 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	23aa      	movs	r3, #170	@ 0xaa
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	5cd3      	ldrb	r3, [r2, r3]
 8008afe:	227f      	movs	r2, #127	@ 0x7f
 8008b00:	4393      	bics	r3, r2
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0011      	movs	r1, r2
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f001 fc06 	bl	800a31a <USBD_LL_StallEP>
      break;
 8008b0e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	0018      	movs	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b002      	add	sp, #8
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	000002ae 	.word	0x000002ae

08008b20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	200b      	movs	r0, #11
 8008b2c:	183b      	adds	r3, r7, r0
 8008b2e:	1c0a      	adds	r2, r1, #0
 8008b30:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b32:	183b      	adds	r3, r7, r0
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d154      	bne.n	8008be4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3355      	adds	r3, #85	@ 0x55
 8008b3e:	33ff      	adds	r3, #255	@ 0xff
 8008b40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	23a5      	movs	r3, #165	@ 0xa5
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	58d3      	ldr	r3, [r2, r3]
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d139      	bne.n	8008bc2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d919      	bls.n	8008b8e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	1ad2      	subs	r2, r2, r3
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d203      	bcs.n	8008b7c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	e002      	b.n	8008b82 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	001a      	movs	r2, r3
 8008b88:	f001 f874 	bl	8009c74 <USBD_CtlContinueRx>
 8008b8c:	e045      	b.n	8008c1a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	23ad      	movs	r3, #173	@ 0xad
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	58d3      	ldr	r3, [r2, r3]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00d      	beq.n	8008bb8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	23a7      	movs	r3, #167	@ 0xa7
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d107      	bne.n	8008bb8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	23ad      	movs	r3, #173	@ 0xad
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	58d3      	ldr	r3, [r2, r3]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	0010      	movs	r0, r2
 8008bb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f001 f86d 	bl	8009c9a <USBD_CtlSendStatus>
 8008bc0:	e02b      	b.n	8008c1a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	23a5      	movs	r3, #165	@ 0xa5
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	58d3      	ldr	r3, [r2, r3]
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d125      	bne.n	8008c1a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	23a5      	movs	r3, #165	@ 0xa5
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2100      	movs	r1, #0
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f001 fb9c 	bl	800a31a <USBD_LL_StallEP>
 8008be2:	e01a      	b.n	8008c1a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	23ad      	movs	r3, #173	@ 0xad
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	58d3      	ldr	r3, [r2, r3]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d011      	beq.n	8008c16 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	23a7      	movs	r3, #167	@ 0xa7
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d10b      	bne.n	8008c16 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	23ad      	movs	r3, #173	@ 0xad
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	58d3      	ldr	r3, [r2, r3]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	220b      	movs	r2, #11
 8008c0a:	18ba      	adds	r2, r7, r2
 8008c0c:	7811      	ldrb	r1, [r2, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	0010      	movs	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	e001      	b.n	8008c1a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c16:	2302      	movs	r3, #2
 8008c18:	e000      	b.n	8008c1c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b006      	add	sp, #24
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	200b      	movs	r0, #11
 8008c30:	183b      	adds	r3, r7, r0
 8008c32:	1c0a      	adds	r2, r1, #0
 8008c34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c36:	183b      	adds	r3, r7, r0
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d000      	beq.n	8008c40 <USBD_LL_DataInStage+0x1c>
 8008c3e:	e08e      	b.n	8008d5e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3314      	adds	r3, #20
 8008c44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	23a5      	movs	r3, #165	@ 0xa5
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	58d3      	ldr	r3, [r2, r3]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d164      	bne.n	8008d1c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d915      	bls.n	8008c8a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0018      	movs	r0, r3
 8008c78:	f000 ffe9 	bl	8009c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	f001 fc31 	bl	800a4ea <USBD_LL_PrepareReceive>
 8008c88:	e059      	b.n	8008d3e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	0019      	movs	r1, r3
 8008c94:	0010      	movs	r0, r2
 8008c96:	f7f7 fabd 	bl	8000214 <__aeabi_uidivmod>
 8008c9a:	1e0b      	subs	r3, r1, #0
 8008c9c:	d11f      	bne.n	8008cde <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d319      	bcc.n	8008cde <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	23a6      	movs	r3, #166	@ 0xa6
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d211      	bcs.n	8008cde <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f000 ffc4 	bl	8009c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	23a6      	movs	r3, #166	@ 0xa6
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	2100      	movs	r1, #0
 8008cce:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	f001 fc07 	bl	800a4ea <USBD_LL_PrepareReceive>
 8008cdc:	e02f      	b.n	8008d3e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	23ad      	movs	r3, #173	@ 0xad
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	58d3      	ldr	r3, [r2, r3]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00d      	beq.n	8008d08 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	23a7      	movs	r3, #167	@ 0xa7
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d107      	bne.n	8008d08 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	23ad      	movs	r3, #173	@ 0xad
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	58d3      	ldr	r3, [r2, r3]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	0010      	movs	r0, r2
 8008d06:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2180      	movs	r1, #128	@ 0x80
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f001 fb04 	bl	800a31a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	0018      	movs	r0, r3
 8008d16:	f000 ffd4 	bl	8009cc2 <USBD_CtlReceiveStatus>
 8008d1a:	e010      	b.n	8008d3e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	23a5      	movs	r3, #165	@ 0xa5
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	58d3      	ldr	r3, [r2, r3]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d005      	beq.n	8008d34 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	23a5      	movs	r3, #165	@ 0xa5
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2180      	movs	r1, #128	@ 0x80
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f001 faee 	bl	800a31a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	23a8      	movs	r3, #168	@ 0xa8
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	5cd3      	ldrb	r3, [r2, r3]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d124      	bne.n	8008d94 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7ff fe43 	bl	80089d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	23a8      	movs	r3, #168	@ 0xa8
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	2100      	movs	r1, #0
 8008d5a:	54d1      	strb	r1, [r2, r3]
 8008d5c:	e01a      	b.n	8008d94 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	23ad      	movs	r3, #173	@ 0xad
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	58d3      	ldr	r3, [r2, r3]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d011      	beq.n	8008d90 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	23a7      	movs	r3, #167	@ 0xa7
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d10b      	bne.n	8008d90 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	23ad      	movs	r3, #173	@ 0xad
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	58d3      	ldr	r3, [r2, r3]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	220b      	movs	r2, #11
 8008d84:	18ba      	adds	r2, r7, r2
 8008d86:	7811      	ldrb	r1, [r2, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	0010      	movs	r0, r2
 8008d8c:	4798      	blx	r3
 8008d8e:	e001      	b.n	8008d94 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d90:	2302      	movs	r3, #2
 8008d92:	e000      	b.n	8008d96 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b006      	add	sp, #24
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	f001 fa52 	bl	800a256 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	23ac      	movs	r3, #172	@ 0xac
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	2101      	movs	r1, #1
 8008dba:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	23b2      	movs	r3, #178	@ 0xb2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	2140      	movs	r1, #64	@ 0x40
 8008dc4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	2340      	movs	r3, #64	@ 0x40
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2180      	movs	r1, #128	@ 0x80
 8008dce:	f001 fa42 	bl	800a256 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2240      	movs	r2, #64	@ 0x40
 8008ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	23a7      	movs	r3, #167	@ 0xa7
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	2101      	movs	r1, #1
 8008de6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	23a5      	movs	r3, #165	@ 0xa5
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	2100      	movs	r1, #0
 8008df0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	23a9      	movs	r3, #169	@ 0xa9
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	2100      	movs	r1, #0
 8008e00:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	23ae      	movs	r3, #174	@ 0xae
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	58d3      	ldr	r3, [r2, r3]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	23ad      	movs	r3, #173	@ 0xad
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	58d3      	ldr	r3, [r2, r3]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	b2d9      	uxtb	r1, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	0018      	movs	r0, r3
 8008e22:	4790      	blx	r2
  }

  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	0018      	movs	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b002      	add	sp, #8
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	000a      	movs	r2, r1
 8008e38:	1cfb      	adds	r3, r7, #3
 8008e3a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1cfa      	adds	r2, r7, #3
 8008e40:	7812      	ldrb	r2, [r2, #0]
 8008e42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	0018      	movs	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b002      	add	sp, #8
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	23a7      	movs	r3, #167	@ 0xa7
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	5cd1      	ldrb	r1, [r2, r3]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a06      	ldr	r2, [pc, #24]	@ (8008e7c <USBD_LL_Suspend+0x2c>)
 8008e64:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	23a7      	movs	r3, #167	@ 0xa7
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	0018      	movs	r0, r3
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b002      	add	sp, #8
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	0000029d 	.word	0x0000029d

08008e80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	23a7      	movs	r3, #167	@ 0xa7
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	5cd3      	ldrb	r3, [r2, r3]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d106      	bne.n	8008ea2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a05      	ldr	r2, [pc, #20]	@ (8008eac <USBD_LL_Resume+0x2c>)
 8008e98:	5c99      	ldrb	r1, [r3, r2]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	23a7      	movs	r3, #167	@ 0xa7
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b002      	add	sp, #8
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	0000029d 	.word	0x0000029d

08008eb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	23a7      	movs	r3, #167	@ 0xa7
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	5cd3      	ldrb	r3, [r2, r3]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d10e      	bne.n	8008ee2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	23ad      	movs	r3, #173	@ 0xad
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	58d3      	ldr	r3, [r2, r3]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	23ad      	movs	r3, #173	@ 0xad
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	58d3      	ldr	r3, [r2, r3]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	0010      	movs	r0, r2
 8008ee0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b002      	add	sp, #8
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef6:	230f      	movs	r3, #15
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	001a      	movs	r2, r3
 8008f04:	2360      	movs	r3, #96	@ 0x60
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b40      	cmp	r3, #64	@ 0x40
 8008f0a:	d004      	beq.n	8008f16 <USBD_StdDevReq+0x2a>
 8008f0c:	d84f      	bhi.n	8008fae <USBD_StdDevReq+0xc2>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <USBD_StdDevReq+0x3e>
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	d14b      	bne.n	8008fae <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	23ad      	movs	r3, #173	@ 0xad
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	58d3      	ldr	r3, [r2, r3]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	0010      	movs	r0, r2
 8008f26:	4798      	blx	r3
      break;
 8008f28:	e048      	b.n	8008fbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b09      	cmp	r3, #9
 8008f30:	d835      	bhi.n	8008f9e <USBD_StdDevReq+0xb2>
 8008f32:	009a      	lsls	r2, r3, #2
 8008f34:	4b25      	ldr	r3, [pc, #148]	@ (8008fcc <USBD_StdDevReq+0xe0>)
 8008f36:	18d3      	adds	r3, r2, r3
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	0011      	movs	r1, r2
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 fa52 	bl	80093ec <USBD_GetDescriptor>
          break;
 8008f48:	e030      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f000 fbfd 	bl	8009750 <USBD_SetAddress>
          break;
 8008f56:	e029      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	0011      	movs	r1, r2
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f000 fc4a 	bl	80097f8 <USBD_SetConfig>
          break;
 8008f64:	e022      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f000 fce7 	bl	8009940 <USBD_GetConfig>
          break;
 8008f72:	e01b      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	0011      	movs	r1, r2
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f000 fd1b 	bl	80099b6 <USBD_GetStatus>
          break;
 8008f80:	e014      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	0011      	movs	r1, r2
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 fd4e 	bl	8009a2a <USBD_SetFeature>
          break;
 8008f8e:	e00d      	b.n	8008fac <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	0011      	movs	r1, r2
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 fd5d 	bl	8009a56 <USBD_ClrFeature>
          break;
 8008f9c:	e006      	b.n	8008fac <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	0011      	movs	r1, r2
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f000 fdb4 	bl	8009b12 <USBD_CtlError>
          break;
 8008faa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008fac:	e006      	b.n	8008fbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	0011      	movs	r1, r2
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f000 fdac 	bl	8009b12 <USBD_CtlError>
      break;
 8008fba:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008fbc:	230f      	movs	r3, #15
 8008fbe:	18fb      	adds	r3, r7, r3
 8008fc0:	781b      	ldrb	r3, [r3, #0]
}
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	b004      	add	sp, #16
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	46c0      	nop			@ (mov r8, r8)
 8008fcc:	0800a778 	.word	0x0800a778

08008fd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008fd0:	b5b0      	push	{r4, r5, r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fda:	230f      	movs	r3, #15
 8008fdc:	18fb      	adds	r3, r7, r3
 8008fde:	2200      	movs	r2, #0
 8008fe0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	001a      	movs	r2, r3
 8008fe8:	2360      	movs	r3, #96	@ 0x60
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b40      	cmp	r3, #64	@ 0x40
 8008fee:	d004      	beq.n	8008ffa <USBD_StdItfReq+0x2a>
 8008ff0:	d839      	bhi.n	8009066 <USBD_StdItfReq+0x96>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <USBD_StdItfReq+0x2a>
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d135      	bne.n	8009066 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	23a7      	movs	r3, #167	@ 0xa7
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	5cd3      	ldrb	r3, [r2, r3]
 8009002:	3b01      	subs	r3, #1
 8009004:	2b02      	cmp	r3, #2
 8009006:	d825      	bhi.n	8009054 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	889b      	ldrh	r3, [r3, #4]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b01      	cmp	r3, #1
 8009010:	d819      	bhi.n	8009046 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	23ad      	movs	r3, #173	@ 0xad
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	58d3      	ldr	r3, [r2, r3]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	250f      	movs	r5, #15
 800901e:	197c      	adds	r4, r7, r5
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	0010      	movs	r0, r2
 8009026:	4798      	blx	r3
 8009028:	0003      	movs	r3, r0
 800902a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d116      	bne.n	8009062 <USBD_StdItfReq+0x92>
 8009034:	197b      	adds	r3, r7, r5
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d112      	bne.n	8009062 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0018      	movs	r0, r3
 8009040:	f000 fe2b 	bl	8009c9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009044:	e00d      	b.n	8009062 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f000 fd60 	bl	8009b12 <USBD_CtlError>
          break;
 8009052:	e006      	b.n	8009062 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	0011      	movs	r1, r2
 800905a:	0018      	movs	r0, r3
 800905c:	f000 fd59 	bl	8009b12 <USBD_CtlError>
          break;
 8009060:	e000      	b.n	8009064 <USBD_StdItfReq+0x94>
          break;
 8009062:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009064:	e006      	b.n	8009074 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	0011      	movs	r1, r2
 800906c:	0018      	movs	r0, r3
 800906e:	f000 fd50 	bl	8009b12 <USBD_CtlError>
      break;
 8009072:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b004      	add	sp, #16
 800907c:	bdb0      	pop	{r4, r5, r7, pc}

0800907e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800907e:	b5b0      	push	{r4, r5, r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009088:	230f      	movs	r3, #15
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	889a      	ldrh	r2, [r3, #4]
 8009094:	230e      	movs	r3, #14
 8009096:	18fb      	adds	r3, r7, r3
 8009098:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	001a      	movs	r2, r3
 80090a0:	2360      	movs	r3, #96	@ 0x60
 80090a2:	4013      	ands	r3, r2
 80090a4:	2b40      	cmp	r3, #64	@ 0x40
 80090a6:	d006      	beq.n	80090b6 <USBD_StdEPReq+0x38>
 80090a8:	d900      	bls.n	80090ac <USBD_StdEPReq+0x2e>
 80090aa:	e190      	b.n	80093ce <USBD_StdEPReq+0x350>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <USBD_StdEPReq+0x4c>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d000      	beq.n	80090b6 <USBD_StdEPReq+0x38>
 80090b4:	e18b      	b.n	80093ce <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	23ad      	movs	r3, #173	@ 0xad
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	58d3      	ldr	r3, [r2, r3]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	0010      	movs	r0, r2
 80090c6:	4798      	blx	r3
      break;
 80090c8:	e188      	b.n	80093dc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	001a      	movs	r2, r3
 80090d0:	2360      	movs	r3, #96	@ 0x60
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d10f      	bne.n	80090f8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	23ad      	movs	r3, #173	@ 0xad
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	58d3      	ldr	r3, [r2, r3]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	250f      	movs	r5, #15
 80090e4:	197c      	adds	r4, r7, r5
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	0010      	movs	r0, r2
 80090ec:	4798      	blx	r3
 80090ee:	0003      	movs	r3, r0
 80090f0:	7023      	strb	r3, [r4, #0]

        return ret;
 80090f2:	197b      	adds	r3, r7, r5
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	e174      	b.n	80093e2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d007      	beq.n	8009110 <USBD_StdEPReq+0x92>
 8009100:	dd00      	ble.n	8009104 <USBD_StdEPReq+0x86>
 8009102:	e15c      	b.n	80093be <USBD_StdEPReq+0x340>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d100      	bne.n	800910a <USBD_StdEPReq+0x8c>
 8009108:	e092      	b.n	8009230 <USBD_StdEPReq+0x1b2>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d04b      	beq.n	80091a6 <USBD_StdEPReq+0x128>
 800910e:	e156      	b.n	80093be <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	23a7      	movs	r3, #167	@ 0xa7
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	5cd3      	ldrb	r3, [r2, r3]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d002      	beq.n	8009122 <USBD_StdEPReq+0xa4>
 800911c:	2b03      	cmp	r3, #3
 800911e:	d01d      	beq.n	800915c <USBD_StdEPReq+0xde>
 8009120:	e039      	b.n	8009196 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009122:	220e      	movs	r2, #14
 8009124:	18bb      	adds	r3, r7, r2
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d010      	beq.n	800914e <USBD_StdEPReq+0xd0>
 800912c:	18bb      	adds	r3, r7, r2
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b80      	cmp	r3, #128	@ 0x80
 8009132:	d00c      	beq.n	800914e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009134:	18bb      	adds	r3, r7, r2
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	0011      	movs	r1, r2
 800913c:	0018      	movs	r0, r3
 800913e:	f001 f8ec 	bl	800a31a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2180      	movs	r1, #128	@ 0x80
 8009146:	0018      	movs	r0, r3
 8009148:	f001 f8e7 	bl	800a31a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800914c:	e02a      	b.n	80091a4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	0011      	movs	r1, r2
 8009154:	0018      	movs	r0, r3
 8009156:	f000 fcdc 	bl	8009b12 <USBD_CtlError>
              break;
 800915a:	e023      	b.n	80091a4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d113      	bne.n	800918c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009164:	220e      	movs	r2, #14
 8009166:	18bb      	adds	r3, r7, r2
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <USBD_StdEPReq+0x10e>
 800916e:	18bb      	adds	r3, r7, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b80      	cmp	r3, #128	@ 0x80
 8009174:	d00a      	beq.n	800918c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	88db      	ldrh	r3, [r3, #6]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800917e:	18bb      	adds	r3, r7, r2
 8009180:	781a      	ldrb	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	0011      	movs	r1, r2
 8009186:	0018      	movs	r0, r3
 8009188:	f001 f8c7 	bl	800a31a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	0018      	movs	r0, r3
 8009190:	f000 fd83 	bl	8009c9a <USBD_CtlSendStatus>

              break;
 8009194:	e006      	b.n	80091a4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	0011      	movs	r1, r2
 800919c:	0018      	movs	r0, r3
 800919e:	f000 fcb8 	bl	8009b12 <USBD_CtlError>
              break;
 80091a2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80091a4:	e112      	b.n	80093cc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	23a7      	movs	r3, #167	@ 0xa7
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	5cd3      	ldrb	r3, [r2, r3]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d002      	beq.n	80091b8 <USBD_StdEPReq+0x13a>
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d01d      	beq.n	80091f2 <USBD_StdEPReq+0x174>
 80091b6:	e032      	b.n	800921e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091b8:	220e      	movs	r2, #14
 80091ba:	18bb      	adds	r3, r7, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <USBD_StdEPReq+0x166>
 80091c2:	18bb      	adds	r3, r7, r2
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b80      	cmp	r3, #128	@ 0x80
 80091c8:	d00c      	beq.n	80091e4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091ca:	18bb      	adds	r3, r7, r2
 80091cc:	781a      	ldrb	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	0011      	movs	r1, r2
 80091d2:	0018      	movs	r0, r3
 80091d4:	f001 f8a1 	bl	800a31a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2180      	movs	r1, #128	@ 0x80
 80091dc:	0018      	movs	r0, r3
 80091de:	f001 f89c 	bl	800a31a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091e2:	e024      	b.n	800922e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	0011      	movs	r1, r2
 80091ea:	0018      	movs	r0, r3
 80091ec:	f000 fc91 	bl	8009b12 <USBD_CtlError>
              break;
 80091f0:	e01d      	b.n	800922e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	885b      	ldrh	r3, [r3, #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d118      	bne.n	800922c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091fa:	210e      	movs	r1, #14
 80091fc:	187b      	adds	r3, r7, r1
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	227f      	movs	r2, #127	@ 0x7f
 8009202:	4013      	ands	r3, r2
 8009204:	d006      	beq.n	8009214 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009206:	187b      	adds	r3, r7, r1
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	0011      	movs	r1, r2
 800920e:	0018      	movs	r0, r3
 8009210:	f001 f8ae 	bl	800a370 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0018      	movs	r0, r3
 8009218:	f000 fd3f 	bl	8009c9a <USBD_CtlSendStatus>
              }
              break;
 800921c:	e006      	b.n	800922c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	0011      	movs	r1, r2
 8009224:	0018      	movs	r0, r3
 8009226:	f000 fc74 	bl	8009b12 <USBD_CtlError>
              break;
 800922a:	e000      	b.n	800922e <USBD_StdEPReq+0x1b0>
              break;
 800922c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800922e:	e0cd      	b.n	80093cc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	23a7      	movs	r3, #167	@ 0xa7
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	5cd3      	ldrb	r3, [r2, r3]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d002      	beq.n	8009242 <USBD_StdEPReq+0x1c4>
 800923c:	2b03      	cmp	r3, #3
 800923e:	d03c      	beq.n	80092ba <USBD_StdEPReq+0x23c>
 8009240:	e0b5      	b.n	80093ae <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009242:	220e      	movs	r2, #14
 8009244:	18bb      	adds	r3, r7, r2
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <USBD_StdEPReq+0x1e4>
 800924c:	18bb      	adds	r3, r7, r2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b80      	cmp	r3, #128	@ 0x80
 8009252:	d006      	beq.n	8009262 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	0011      	movs	r1, r2
 800925a:	0018      	movs	r0, r3
 800925c:	f000 fc59 	bl	8009b12 <USBD_CtlError>
                break;
 8009260:	e0ac      	b.n	80093bc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009262:	220e      	movs	r2, #14
 8009264:	18bb      	adds	r3, r7, r2
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	b25b      	sxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	da0c      	bge.n	8009288 <USBD_StdEPReq+0x20a>
 800926e:	18bb      	adds	r3, r7, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	227f      	movs	r2, #127	@ 0x7f
 8009274:	401a      	ands	r2, r3
 8009276:	0013      	movs	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	189b      	adds	r3, r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	3310      	adds	r3, #16
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	18d3      	adds	r3, r2, r3
 8009284:	3304      	adds	r3, #4
 8009286:	e00d      	b.n	80092a4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009288:	230e      	movs	r3, #14
 800928a:	18fb      	adds	r3, r7, r3
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	227f      	movs	r2, #127	@ 0x7f
 8009290:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009292:	0013      	movs	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	189b      	adds	r3, r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	3351      	adds	r3, #81	@ 0x51
 800929c:	33ff      	adds	r3, #255	@ 0xff
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	18d3      	adds	r3, r2, r3
 80092a2:	3304      	adds	r3, #4
 80092a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 fcab 	bl	8009c0e <USBD_CtlSendData>
              break;
 80092b8:	e080      	b.n	80093bc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092ba:	220e      	movs	r2, #14
 80092bc:	18bb      	adds	r3, r7, r2
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b25b      	sxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da14      	bge.n	80092f0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092c6:	18bb      	adds	r3, r7, r2
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	220f      	movs	r2, #15
 80092cc:	401a      	ands	r2, r3
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	0013      	movs	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	189b      	adds	r3, r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	18cb      	adds	r3, r1, r3
 80092da:	3318      	adds	r3, #24
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11e      	bne.n	8009320 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	0011      	movs	r1, r2
 80092e8:	0018      	movs	r0, r3
 80092ea:	f000 fc12 	bl	8009b12 <USBD_CtlError>
                  break;
 80092ee:	e065      	b.n	80093bc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092f0:	230e      	movs	r3, #14
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	220f      	movs	r2, #15
 80092f8:	401a      	ands	r2, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	23ac      	movs	r3, #172	@ 0xac
 80092fe:	0059      	lsls	r1, r3, #1
 8009300:	0013      	movs	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	189b      	adds	r3, r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	18c3      	adds	r3, r0, r3
 800930a:	185b      	adds	r3, r3, r1
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f000 fbfa 	bl	8009b12 <USBD_CtlError>
                  break;
 800931e:	e04d      	b.n	80093bc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009320:	220e      	movs	r2, #14
 8009322:	18bb      	adds	r3, r7, r2
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	b25b      	sxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	da0c      	bge.n	8009346 <USBD_StdEPReq+0x2c8>
 800932c:	18bb      	adds	r3, r7, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	227f      	movs	r2, #127	@ 0x7f
 8009332:	401a      	ands	r2, r3
 8009334:	0013      	movs	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	189b      	adds	r3, r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	3310      	adds	r3, #16
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	18d3      	adds	r3, r2, r3
 8009342:	3304      	adds	r3, #4
 8009344:	e00d      	b.n	8009362 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009346:	230e      	movs	r3, #14
 8009348:	18fb      	adds	r3, r7, r3
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	227f      	movs	r2, #127	@ 0x7f
 800934e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009350:	0013      	movs	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	189b      	adds	r3, r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	3351      	adds	r3, #81	@ 0x51
 800935a:	33ff      	adds	r3, #255	@ 0xff
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	18d3      	adds	r3, r2, r3
 8009360:	3304      	adds	r3, #4
 8009362:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009364:	220e      	movs	r2, #14
 8009366:	18bb      	adds	r3, r7, r2
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <USBD_StdEPReq+0x2f8>
 800936e:	18bb      	adds	r3, r7, r2
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b80      	cmp	r3, #128	@ 0x80
 8009374:	d103      	bne.n	800937e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e010      	b.n	80093a0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800937e:	230e      	movs	r3, #14
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	0011      	movs	r1, r2
 8009388:	0018      	movs	r0, r3
 800938a:	f001 f81c 	bl	800a3c6 <USBD_LL_IsStallEP>
 800938e:	1e03      	subs	r3, r0, #0
 8009390:	d003      	beq.n	800939a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2201      	movs	r2, #1
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	e002      	b.n	80093a0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093a0:	68b9      	ldr	r1, [r7, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	0018      	movs	r0, r3
 80093a8:	f000 fc31 	bl	8009c0e <USBD_CtlSendData>
              break;
 80093ac:	e006      	b.n	80093bc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	0011      	movs	r1, r2
 80093b4:	0018      	movs	r0, r3
 80093b6:	f000 fbac 	bl	8009b12 <USBD_CtlError>
              break;
 80093ba:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80093bc:	e006      	b.n	80093cc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	0011      	movs	r1, r2
 80093c4:	0018      	movs	r0, r3
 80093c6:	f000 fba4 	bl	8009b12 <USBD_CtlError>
          break;
 80093ca:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80093cc:	e006      	b.n	80093dc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	0011      	movs	r1, r2
 80093d4:	0018      	movs	r0, r3
 80093d6:	f000 fb9c 	bl	8009b12 <USBD_CtlError>
      break;
 80093da:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80093dc:	230f      	movs	r3, #15
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	781b      	ldrb	r3, [r3, #0]
}
 80093e2:	0018      	movs	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b004      	add	sp, #16
 80093e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080093ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093f6:	2308      	movs	r3, #8
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	2200      	movs	r2, #0
 80093fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009402:	230b      	movs	r3, #11
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b07      	cmp	r3, #7
 8009414:	d900      	bls.n	8009418 <USBD_GetDescriptor+0x2c>
 8009416:	e159      	b.n	80096cc <USBD_GetDescriptor+0x2e0>
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	4bcb      	ldr	r3, [pc, #812]	@ (8009748 <USBD_GetDescriptor+0x35c>)
 800941c:	18d3      	adds	r3, r2, r3
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	23ac      	movs	r3, #172	@ 0xac
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	58d3      	ldr	r3, [r2, r3]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	2108      	movs	r1, #8
 8009432:	1879      	adds	r1, r7, r1
 8009434:	0010      	movs	r0, r2
 8009436:	4798      	blx	r3
 8009438:	0003      	movs	r3, r0
 800943a:	60fb      	str	r3, [r7, #12]
      break;
 800943c:	e153      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7c1b      	ldrb	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10f      	bne.n	8009466 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	23ad      	movs	r3, #173	@ 0xad
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	58d3      	ldr	r3, [r2, r3]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	2208      	movs	r2, #8
 8009452:	18ba      	adds	r2, r7, r2
 8009454:	0010      	movs	r0, r2
 8009456:	4798      	blx	r3
 8009458:	0003      	movs	r3, r0
 800945a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	2202      	movs	r2, #2
 8009462:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009464:	e13f      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	23ad      	movs	r3, #173	@ 0xad
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	58d3      	ldr	r3, [r2, r3]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	2208      	movs	r2, #8
 8009472:	18ba      	adds	r2, r7, r2
 8009474:	0010      	movs	r0, r2
 8009476:	4798      	blx	r3
 8009478:	0003      	movs	r3, r0
 800947a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3301      	adds	r3, #1
 8009480:	2202      	movs	r2, #2
 8009482:	701a      	strb	r2, [r3, #0]
      break;
 8009484:	e12f      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b05      	cmp	r3, #5
 800948e:	d900      	bls.n	8009492 <USBD_GetDescriptor+0xa6>
 8009490:	e0d0      	b.n	8009634 <USBD_GetDescriptor+0x248>
 8009492:	009a      	lsls	r2, r3, #2
 8009494:	4bad      	ldr	r3, [pc, #692]	@ (800974c <USBD_GetDescriptor+0x360>)
 8009496:	18d3      	adds	r3, r2, r3
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	23ac      	movs	r3, #172	@ 0xac
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	58d3      	ldr	r3, [r2, r3]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00d      	beq.n	80094c6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	23ac      	movs	r3, #172	@ 0xac
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	58d3      	ldr	r3, [r2, r3]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	7c12      	ldrb	r2, [r2, #16]
 80094b8:	2108      	movs	r1, #8
 80094ba:	1879      	adds	r1, r7, r1
 80094bc:	0010      	movs	r0, r2
 80094be:	4798      	blx	r3
 80094c0:	0003      	movs	r3, r0
 80094c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094c4:	e0c3      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	0011      	movs	r1, r2
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 fb20 	bl	8009b12 <USBD_CtlError>
            err++;
 80094d2:	210b      	movs	r1, #11
 80094d4:	187b      	adds	r3, r7, r1
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	187b      	adds	r3, r7, r1
 80094da:	3201      	adds	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
          break;
 80094de:	e0b6      	b.n	800964e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	23ac      	movs	r3, #172	@ 0xac
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	58d3      	ldr	r3, [r2, r3]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00d      	beq.n	800950a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	23ac      	movs	r3, #172	@ 0xac
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	58d3      	ldr	r3, [r2, r3]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	2108      	movs	r1, #8
 80094fe:	1879      	adds	r1, r7, r1
 8009500:	0010      	movs	r0, r2
 8009502:	4798      	blx	r3
 8009504:	0003      	movs	r3, r0
 8009506:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009508:	e0a1      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	0011      	movs	r1, r2
 8009510:	0018      	movs	r0, r3
 8009512:	f000 fafe 	bl	8009b12 <USBD_CtlError>
            err++;
 8009516:	210b      	movs	r1, #11
 8009518:	187b      	adds	r3, r7, r1
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	187b      	adds	r3, r7, r1
 800951e:	3201      	adds	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
          break;
 8009522:	e094      	b.n	800964e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	23ac      	movs	r3, #172	@ 0xac
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	58d3      	ldr	r3, [r2, r3]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	23ac      	movs	r3, #172	@ 0xac
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	58d3      	ldr	r3, [r2, r3]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	7c12      	ldrb	r2, [r2, #16]
 8009540:	2108      	movs	r1, #8
 8009542:	1879      	adds	r1, r7, r1
 8009544:	0010      	movs	r0, r2
 8009546:	4798      	blx	r3
 8009548:	0003      	movs	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800954c:	e07f      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	0011      	movs	r1, r2
 8009554:	0018      	movs	r0, r3
 8009556:	f000 fadc 	bl	8009b12 <USBD_CtlError>
            err++;
 800955a:	210b      	movs	r1, #11
 800955c:	187b      	adds	r3, r7, r1
 800955e:	781a      	ldrb	r2, [r3, #0]
 8009560:	187b      	adds	r3, r7, r1
 8009562:	3201      	adds	r2, #1
 8009564:	701a      	strb	r2, [r3, #0]
          break;
 8009566:	e072      	b.n	800964e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	23ac      	movs	r3, #172	@ 0xac
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	58d3      	ldr	r3, [r2, r3]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00d      	beq.n	8009592 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	23ac      	movs	r3, #172	@ 0xac
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	58d3      	ldr	r3, [r2, r3]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	7c12      	ldrb	r2, [r2, #16]
 8009584:	2108      	movs	r1, #8
 8009586:	1879      	adds	r1, r7, r1
 8009588:	0010      	movs	r0, r2
 800958a:	4798      	blx	r3
 800958c:	0003      	movs	r3, r0
 800958e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009590:	e05d      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	0011      	movs	r1, r2
 8009598:	0018      	movs	r0, r3
 800959a:	f000 faba 	bl	8009b12 <USBD_CtlError>
            err++;
 800959e:	210b      	movs	r1, #11
 80095a0:	187b      	adds	r3, r7, r1
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	187b      	adds	r3, r7, r1
 80095a6:	3201      	adds	r2, #1
 80095a8:	701a      	strb	r2, [r3, #0]
          break;
 80095aa:	e050      	b.n	800964e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	23ac      	movs	r3, #172	@ 0xac
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	58d3      	ldr	r3, [r2, r3]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00d      	beq.n	80095d6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	23ac      	movs	r3, #172	@ 0xac
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	58d3      	ldr	r3, [r2, r3]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7c12      	ldrb	r2, [r2, #16]
 80095c8:	2108      	movs	r1, #8
 80095ca:	1879      	adds	r1, r7, r1
 80095cc:	0010      	movs	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	0003      	movs	r3, r0
 80095d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d4:	e03b      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0011      	movs	r1, r2
 80095dc:	0018      	movs	r0, r3
 80095de:	f000 fa98 	bl	8009b12 <USBD_CtlError>
            err++;
 80095e2:	210b      	movs	r1, #11
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	781a      	ldrb	r2, [r3, #0]
 80095e8:	187b      	adds	r3, r7, r1
 80095ea:	3201      	adds	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
          break;
 80095ee:	e02e      	b.n	800964e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	23ac      	movs	r3, #172	@ 0xac
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	58d3      	ldr	r3, [r2, r3]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	23ac      	movs	r3, #172	@ 0xac
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	58d3      	ldr	r3, [r2, r3]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	7c12      	ldrb	r2, [r2, #16]
 800960c:	2108      	movs	r1, #8
 800960e:	1879      	adds	r1, r7, r1
 8009610:	0010      	movs	r0, r2
 8009612:	4798      	blx	r3
 8009614:	0003      	movs	r3, r0
 8009616:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009618:	e019      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	0011      	movs	r1, r2
 8009620:	0018      	movs	r0, r3
 8009622:	f000 fa76 	bl	8009b12 <USBD_CtlError>
            err++;
 8009626:	210b      	movs	r1, #11
 8009628:	187b      	adds	r3, r7, r1
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	187b      	adds	r3, r7, r1
 800962e:	3201      	adds	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
          break;
 8009632:	e00c      	b.n	800964e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	0011      	movs	r1, r2
 800963a:	0018      	movs	r0, r3
 800963c:	f000 fa69 	bl	8009b12 <USBD_CtlError>
          err++;
 8009640:	210b      	movs	r1, #11
 8009642:	187b      	adds	r3, r7, r1
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	187b      	adds	r3, r7, r1
 8009648:	3201      	adds	r2, #1
 800964a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800964c:	e04b      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>
 800964e:	e04a      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	23ad      	movs	r3, #173	@ 0xad
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	58d3      	ldr	r3, [r2, r3]
 8009660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009662:	2208      	movs	r2, #8
 8009664:	18ba      	adds	r2, r7, r2
 8009666:	0010      	movs	r0, r2
 8009668:	4798      	blx	r3
 800966a:	0003      	movs	r3, r0
 800966c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800966e:	e03a      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	0011      	movs	r1, r2
 8009676:	0018      	movs	r0, r3
 8009678:	f000 fa4b 	bl	8009b12 <USBD_CtlError>
        err++;
 800967c:	210b      	movs	r1, #11
 800967e:	187b      	adds	r3, r7, r1
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	187b      	adds	r3, r7, r1
 8009684:	3201      	adds	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
      break;
 8009688:	e02d      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	7c1b      	ldrb	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10f      	bne.n	80096b2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	23ad      	movs	r3, #173	@ 0xad
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	58d3      	ldr	r3, [r2, r3]
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	2208      	movs	r2, #8
 800969e:	18ba      	adds	r2, r7, r2
 80096a0:	0010      	movs	r0, r2
 80096a2:	4798      	blx	r3
 80096a4:	0003      	movs	r3, r0
 80096a6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3301      	adds	r3, #1
 80096ac:	2207      	movs	r2, #7
 80096ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096b0:	e019      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	0011      	movs	r1, r2
 80096b8:	0018      	movs	r0, r3
 80096ba:	f000 fa2a 	bl	8009b12 <USBD_CtlError>
        err++;
 80096be:	210b      	movs	r1, #11
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	3201      	adds	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
      break;
 80096ca:	e00c      	b.n	80096e6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	0011      	movs	r1, r2
 80096d2:	0018      	movs	r0, r3
 80096d4:	f000 fa1d 	bl	8009b12 <USBD_CtlError>
      err++;
 80096d8:	210b      	movs	r1, #11
 80096da:	187b      	adds	r3, r7, r1
 80096dc:	781a      	ldrb	r2, [r3, #0]
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	3201      	adds	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
      break;
 80096e4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80096e6:	230b      	movs	r3, #11
 80096e8:	18fb      	adds	r3, r7, r3
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d127      	bne.n	8009740 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80096f0:	2108      	movs	r1, #8
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d019      	beq.n	800972e <USBD_GetDescriptor+0x342>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	88db      	ldrh	r3, [r3, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d015      	beq.n	800972e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88da      	ldrh	r2, [r3, #6]
 8009706:	187b      	adds	r3, r7, r1
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	1c18      	adds	r0, r3, #0
 800970c:	1c11      	adds	r1, r2, #0
 800970e:	b28a      	uxth	r2, r1
 8009710:	b283      	uxth	r3, r0
 8009712:	429a      	cmp	r2, r3
 8009714:	d900      	bls.n	8009718 <USBD_GetDescriptor+0x32c>
 8009716:	1c01      	adds	r1, r0, #0
 8009718:	b28a      	uxth	r2, r1
 800971a:	2108      	movs	r1, #8
 800971c:	187b      	adds	r3, r7, r1
 800971e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009720:	187b      	adds	r3, r7, r1
 8009722:	881a      	ldrh	r2, [r3, #0]
 8009724:	68f9      	ldr	r1, [r7, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	0018      	movs	r0, r3
 800972a:	f000 fa70 	bl	8009c0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	88db      	ldrh	r3, [r3, #6]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	0018      	movs	r0, r3
 800973a:	f000 faae 	bl	8009c9a <USBD_CtlSendStatus>
 800973e:	e000      	b.n	8009742 <USBD_GetDescriptor+0x356>
    return;
 8009740:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8009742:	46bd      	mov	sp, r7
 8009744:	b004      	add	sp, #16
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0800a7a0 	.word	0x0800a7a0
 800974c:	0800a7c0 	.word	0x0800a7c0

08009750 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	889b      	ldrh	r3, [r3, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d13d      	bne.n	80097de <USBD_SetAddress+0x8e>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88db      	ldrh	r3, [r3, #6]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d139      	bne.n	80097de <USBD_SetAddress+0x8e>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	885b      	ldrh	r3, [r3, #2]
 800976e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009770:	d835      	bhi.n	80097de <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	b2da      	uxtb	r2, r3
 8009778:	230f      	movs	r3, #15
 800977a:	18fb      	adds	r3, r7, r3
 800977c:	217f      	movs	r1, #127	@ 0x7f
 800977e:	400a      	ands	r2, r1
 8009780:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	23a7      	movs	r3, #167	@ 0xa7
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	5cd3      	ldrb	r3, [r2, r3]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d106      	bne.n	800979c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	0011      	movs	r1, r2
 8009794:	0018      	movs	r0, r3
 8009796:	f000 f9bc 	bl	8009b12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979a:	e027      	b.n	80097ec <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	240f      	movs	r4, #15
 80097a0:	193a      	adds	r2, r7, r4
 80097a2:	4914      	ldr	r1, [pc, #80]	@ (80097f4 <USBD_SetAddress+0xa4>)
 80097a4:	7812      	ldrb	r2, [r2, #0]
 80097a6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097a8:	193b      	adds	r3, r7, r4
 80097aa:	781a      	ldrb	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	0011      	movs	r1, r2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f000 fe38 	bl	800a426 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	0018      	movs	r0, r3
 80097ba:	f000 fa6e 	bl	8009c9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097be:	193b      	adds	r3, r7, r4
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	23a7      	movs	r3, #167	@ 0xa7
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	2102      	movs	r1, #2
 80097ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d0:	e00c      	b.n	80097ec <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	23a7      	movs	r3, #167	@ 0xa7
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	2101      	movs	r1, #1
 80097da:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097dc:	e006      	b.n	80097ec <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	0011      	movs	r1, r2
 80097e4:	0018      	movs	r0, r3
 80097e6:	f000 f994 	bl	8009b12 <USBD_CtlError>
  }
}
 80097ea:	46c0      	nop			@ (mov r8, r8)
 80097ec:	46c0      	nop			@ (mov r8, r8)
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b005      	add	sp, #20
 80097f2:	bd90      	pop	{r4, r7, pc}
 80097f4:	0000029e 	.word	0x0000029e

080097f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	4b4c      	ldr	r3, [pc, #304]	@ (800993c <USBD_SetConfig+0x144>)
 800980a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800980c:	4b4b      	ldr	r3, [pc, #300]	@ (800993c <USBD_SetConfig+0x144>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d906      	bls.n	8009822 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	0011      	movs	r1, r2
 800981a:	0018      	movs	r0, r3
 800981c:	f000 f979 	bl	8009b12 <USBD_CtlError>
 8009820:	e088      	b.n	8009934 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	23a7      	movs	r3, #167	@ 0xa7
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	5cd3      	ldrb	r3, [r2, r3]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d002      	beq.n	8009834 <USBD_SetConfig+0x3c>
 800982e:	2b03      	cmp	r3, #3
 8009830:	d029      	beq.n	8009886 <USBD_SetConfig+0x8e>
 8009832:	e071      	b.n	8009918 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009834:	4b41      	ldr	r3, [pc, #260]	@ (800993c <USBD_SetConfig+0x144>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01f      	beq.n	800987c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800983c:	4b3f      	ldr	r3, [pc, #252]	@ (800993c <USBD_SetConfig+0x144>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	001a      	movs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	23a7      	movs	r3, #167	@ 0xa7
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	2103      	movs	r1, #3
 800984e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009850:	4b3a      	ldr	r3, [pc, #232]	@ (800993c <USBD_SetConfig+0x144>)
 8009852:	781a      	ldrb	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	0011      	movs	r1, r2
 8009858:	0018      	movs	r0, r3
 800985a:	f7ff f8c6 	bl	80089ea <USBD_SetClassConfig>
 800985e:	0003      	movs	r3, r0
 8009860:	2b02      	cmp	r3, #2
 8009862:	d106      	bne.n	8009872 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	0011      	movs	r1, r2
 800986a:	0018      	movs	r0, r3
 800986c:	f000 f951 	bl	8009b12 <USBD_CtlError>
            return;
 8009870:	e060      	b.n	8009934 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	0018      	movs	r0, r3
 8009876:	f000 fa10 	bl	8009c9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800987a:	e05b      	b.n	8009934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	0018      	movs	r0, r3
 8009880:	f000 fa0b 	bl	8009c9a <USBD_CtlSendStatus>
        break;
 8009884:	e056      	b.n	8009934 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009886:	4b2d      	ldr	r3, [pc, #180]	@ (800993c <USBD_SetConfig+0x144>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d115      	bne.n	80098ba <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	23a7      	movs	r3, #167	@ 0xa7
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	2102      	movs	r1, #2
 8009896:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009898:	4b28      	ldr	r3, [pc, #160]	@ (800993c <USBD_SetConfig+0x144>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	001a      	movs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80098a2:	4b26      	ldr	r3, [pc, #152]	@ (800993c <USBD_SetConfig+0x144>)
 80098a4:	781a      	ldrb	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0011      	movs	r1, r2
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7ff f8c4 	bl	8008a38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 f9f1 	bl	8009c9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098b8:	e03c      	b.n	8009934 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80098ba:	4b20      	ldr	r3, [pc, #128]	@ (800993c <USBD_SetConfig+0x144>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	001a      	movs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d022      	beq.n	800990e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7ff f8b0 	bl	8008a38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80098d8:	4b18      	ldr	r3, [pc, #96]	@ (800993c <USBD_SetConfig+0x144>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	001a      	movs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098e2:	4b16      	ldr	r3, [pc, #88]	@ (800993c <USBD_SetConfig+0x144>)
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0011      	movs	r1, r2
 80098ea:	0018      	movs	r0, r3
 80098ec:	f7ff f87d 	bl	80089ea <USBD_SetClassConfig>
 80098f0:	0003      	movs	r3, r0
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d106      	bne.n	8009904 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	0011      	movs	r1, r2
 80098fc:	0018      	movs	r0, r3
 80098fe:	f000 f908 	bl	8009b12 <USBD_CtlError>
            return;
 8009902:	e017      	b.n	8009934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	0018      	movs	r0, r3
 8009908:	f000 f9c7 	bl	8009c9a <USBD_CtlSendStatus>
        break;
 800990c:	e012      	b.n	8009934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0018      	movs	r0, r3
 8009912:	f000 f9c2 	bl	8009c9a <USBD_CtlSendStatus>
        break;
 8009916:	e00d      	b.n	8009934 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0011      	movs	r1, r2
 800991e:	0018      	movs	r0, r3
 8009920:	f000 f8f7 	bl	8009b12 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009924:	4b05      	ldr	r3, [pc, #20]	@ (800993c <USBD_SetConfig+0x144>)
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	0011      	movs	r1, r2
 800992c:	0018      	movs	r0, r3
 800992e:	f7ff f883 	bl	8008a38 <USBD_ClrClassConfig>
        break;
 8009932:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8009934:	46bd      	mov	sp, r7
 8009936:	b002      	add	sp, #8
 8009938:	bd80      	pop	{r7, pc}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	20000728 	.word	0x20000728

08009940 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	88db      	ldrh	r3, [r3, #6]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d006      	beq.n	8009960 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	0011      	movs	r1, r2
 8009958:	0018      	movs	r0, r3
 800995a:	f000 f8da 	bl	8009b12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800995e:	e026      	b.n	80099ae <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	23a7      	movs	r3, #167	@ 0xa7
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	5cd3      	ldrb	r3, [r2, r3]
 8009968:	2b02      	cmp	r3, #2
 800996a:	dc02      	bgt.n	8009972 <USBD_GetConfig+0x32>
 800996c:	2b00      	cmp	r3, #0
 800996e:	dc03      	bgt.n	8009978 <USBD_GetConfig+0x38>
 8009970:	e016      	b.n	80099a0 <USBD_GetConfig+0x60>
 8009972:	2b03      	cmp	r3, #3
 8009974:	d00c      	beq.n	8009990 <USBD_GetConfig+0x50>
 8009976:	e013      	b.n	80099a0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3308      	adds	r3, #8
 8009982:	0019      	movs	r1, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	0018      	movs	r0, r3
 800998a:	f000 f940 	bl	8009c0e <USBD_CtlSendData>
        break;
 800998e:	e00e      	b.n	80099ae <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	1d19      	adds	r1, r3, #4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	0018      	movs	r0, r3
 800999a:	f000 f938 	bl	8009c0e <USBD_CtlSendData>
        break;
 800999e:	e006      	b.n	80099ae <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	0011      	movs	r1, r2
 80099a6:	0018      	movs	r0, r3
 80099a8:	f000 f8b3 	bl	8009b12 <USBD_CtlError>
        break;
 80099ac:	46c0      	nop			@ (mov r8, r8)
}
 80099ae:	46c0      	nop			@ (mov r8, r8)
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b002      	add	sp, #8
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	23a7      	movs	r3, #167	@ 0xa7
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	5cd3      	ldrb	r3, [r2, r3]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d822      	bhi.n	8009a14 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d006      	beq.n	80099e4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	0011      	movs	r1, r2
 80099dc:	0018      	movs	r0, r3
 80099de:	f000 f898 	bl	8009b12 <USBD_CtlError>
        break;
 80099e2:	e01e      	b.n	8009a22 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	23a9      	movs	r3, #169	@ 0xa9
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	58d3      	ldr	r3, [r2, r3]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2202      	movs	r2, #2
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	330c      	adds	r3, #12
 8009a06:	0019      	movs	r1, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f000 f8fe 	bl	8009c0e <USBD_CtlSendData>
      break;
 8009a12:	e006      	b.n	8009a22 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	0011      	movs	r1, r2
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f000 f879 	bl	8009b12 <USBD_CtlError>
      break;
 8009a20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009a22:	46c0      	nop			@ (mov r8, r8)
 8009a24:	46bd      	mov	sp, r7
 8009a26:	b002      	add	sp, #8
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	885b      	ldrh	r3, [r3, #2]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d108      	bne.n	8009a4e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	23a9      	movs	r3, #169	@ 0xa9
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	2101      	movs	r1, #1
 8009a44:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f000 f926 	bl	8009c9a <USBD_CtlSendStatus>
  }
}
 8009a4e:	46c0      	nop			@ (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	23a7      	movs	r3, #167	@ 0xa7
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	5cd3      	ldrb	r3, [r2, r3]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d80d      	bhi.n	8009a8a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d110      	bne.n	8009a98 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	23a9      	movs	r3, #169	@ 0xa9
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	0018      	movs	r0, r3
 8009a84:	f000 f909 	bl	8009c9a <USBD_CtlSendStatus>
      }
      break;
 8009a88:	e006      	b.n	8009a98 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	0011      	movs	r1, r2
 8009a90:	0018      	movs	r0, r3
 8009a92:	f000 f83e 	bl	8009b12 <USBD_CtlError>
      break;
 8009a96:	e000      	b.n	8009a9a <USBD_ClrFeature+0x44>
      break;
 8009a98:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009a9a:	46c0      	nop			@ (mov r8, r8)
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	b002      	add	sp, #8
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781a      	ldrb	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	785a      	ldrb	r2, [r3, #1]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	3302      	adds	r3, #2
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	001a      	movs	r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	3303      	adds	r3, #3
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	18d3      	adds	r3, r2, r3
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	001a      	movs	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	3305      	adds	r3, #5
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	18d3      	adds	r3, r2, r3
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	3306      	adds	r3, #6
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	001a      	movs	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	3307      	adds	r3, #7
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	18d3      	adds	r3, r2, r3
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	80da      	strh	r2, [r3, #6]

}
 8009b0a:	46c0      	nop			@ (mov r8, r8)
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	b002      	add	sp, #8
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2180      	movs	r1, #128	@ 0x80
 8009b20:	0018      	movs	r0, r3
 8009b22:	f000 fbfa 	bl	800a31a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f000 fbf5 	bl	800a31a <USBD_LL_StallEP>
}
 8009b30:	46c0      	nop			@ (mov r8, r8)
 8009b32:	46bd      	mov	sp, r7
 8009b34:	b002      	add	sp, #8
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b38:	b590      	push	{r4, r7, lr}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b44:	2417      	movs	r4, #23
 8009b46:	193b      	adds	r3, r7, r4
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d03c      	beq.n	8009bcc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	0018      	movs	r0, r3
 8009b56:	f000 f83d 	bl	8009bd4 <USBD_GetLen>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	18db      	adds	r3, r3, r3
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b68:	193b      	adds	r3, r7, r4
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	193a      	adds	r2, r7, r4
 8009b6e:	1c59      	adds	r1, r3, #1
 8009b70:	7011      	strb	r1, [r2, #0]
 8009b72:	001a      	movs	r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	189b      	adds	r3, r3, r2
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7812      	ldrb	r2, [r2, #0]
 8009b7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b7e:	193b      	adds	r3, r7, r4
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	193a      	adds	r2, r7, r4
 8009b84:	1c59      	adds	r1, r3, #1
 8009b86:	7011      	strb	r1, [r2, #0]
 8009b88:	001a      	movs	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	2203      	movs	r2, #3
 8009b90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b92:	e017      	b.n	8009bc4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	60fa      	str	r2, [r7, #12]
 8009b9a:	2417      	movs	r4, #23
 8009b9c:	193a      	adds	r2, r7, r4
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	1939      	adds	r1, r7, r4
 8009ba2:	1c50      	adds	r0, r2, #1
 8009ba4:	7008      	strb	r0, [r1, #0]
 8009ba6:	0011      	movs	r1, r2
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	1852      	adds	r2, r2, r1
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bb0:	193b      	adds	r3, r7, r4
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	193a      	adds	r2, r7, r4
 8009bb6:	1c59      	adds	r1, r3, #1
 8009bb8:	7011      	strb	r1, [r2, #0]
 8009bba:	001a      	movs	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e3      	bne.n	8009b94 <USBD_GetString+0x5c>
    }
  }
}
 8009bcc:	46c0      	nop			@ (mov r8, r8)
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b007      	add	sp, #28
 8009bd2:	bd90      	pop	{r4, r7, pc}

08009bd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bdc:	230f      	movs	r3, #15
 8009bde:	18fb      	adds	r3, r7, r3
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8009be4:	e008      	b.n	8009bf8 <USBD_GetLen+0x24>
  {
    len++;
 8009be6:	210f      	movs	r1, #15
 8009be8:	187b      	adds	r3, r7, r1
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	187b      	adds	r3, r7, r1
 8009bee:	3201      	adds	r2, #1
 8009bf0:	701a      	strb	r2, [r3, #0]
    buf++;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1f2      	bne.n	8009be6 <USBD_GetLen+0x12>
  }

  return len;
 8009c00:	230f      	movs	r3, #15
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	781b      	ldrb	r3, [r3, #0]
}
 8009c06:	0018      	movs	r0, r3
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	b004      	add	sp, #16
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	1dbb      	adds	r3, r7, #6
 8009c1a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	23a5      	movs	r3, #165	@ 0xa5
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	2102      	movs	r1, #2
 8009c24:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8009c26:	1dbb      	adds	r3, r7, #6
 8009c28:	881a      	ldrh	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c2e:	1dbb      	adds	r3, r7, #6
 8009c30:	881a      	ldrh	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c36:	1dbb      	adds	r3, r7, #6
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	2100      	movs	r1, #0
 8009c40:	f000 fc1c 	bl	800a47c <USBD_LL_Transmit>

  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	0018      	movs	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	b004      	add	sp, #16
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	1dbb      	adds	r3, r7, #6
 8009c5a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c5c:	1dbb      	adds	r3, r7, #6
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	2100      	movs	r1, #0
 8009c66:	f000 fc09 	bl	800a47c <USBD_LL_Transmit>

  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	b004      	add	sp, #16
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	1dbb      	adds	r3, r7, #6
 8009c80:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c82:	1dbb      	adds	r3, r7, #6
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	f000 fc2d 	bl	800a4ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	0018      	movs	r0, r3
 8009c94:	46bd      	mov	sp, r7
 8009c96:	b004      	add	sp, #16
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	23a5      	movs	r3, #165	@ 0xa5
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	2104      	movs	r1, #4
 8009caa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	f000 fbe2 	bl	800a47c <USBD_LL_Transmit>

  return USBD_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b002      	add	sp, #8
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	23a5      	movs	r3, #165	@ 0xa5
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	2105      	movs	r1, #5
 8009cd2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	f000 fc05 	bl	800a4ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b002      	add	sp, #8
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cf0:	490f      	ldr	r1, [pc, #60]	@ (8009d30 <MX_USB_DEVICE_Init+0x44>)
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <MX_USB_DEVICE_Init+0x48>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7fe fe10 	bl	800891c <USBD_Init>
 8009cfc:	1e03      	subs	r3, r0, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d00:	f7f7 fbf0 	bl	80014e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009d04:	4a0c      	ldr	r2, [pc, #48]	@ (8009d38 <MX_USB_DEVICE_Init+0x4c>)
 8009d06:	4b0b      	ldr	r3, [pc, #44]	@ (8009d34 <MX_USB_DEVICE_Init+0x48>)
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7fe fe37 	bl	800897e <USBD_RegisterClass>
 8009d10:	1e03      	subs	r3, r0, #0
 8009d12:	d001      	beq.n	8009d18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009d14:	f7f7 fbe6 	bl	80014e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <MX_USB_DEVICE_Init+0x48>)
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f7fe fe4f 	bl	80089be <USBD_Start>
 8009d20:	1e03      	subs	r3, r0, #0
 8009d22:	d001      	beq.n	8009d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d24:	f7f7 fbde 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d28:	46c0      	nop			@ (mov r8, r8)
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	46c0      	nop			@ (mov r8, r8)
 8009d30:	20000358 	.word	0x20000358
 8009d34:	2000072c 	.word	0x2000072c
 8009d38:	20000228 	.word	0x20000228

08009d3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	0002      	movs	r2, r0
 8009d44:	6039      	str	r1, [r7, #0]
 8009d46:	1dfb      	adds	r3, r7, #7
 8009d48:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2212      	movs	r2, #18
 8009d4e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d52:	0018      	movs	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b002      	add	sp, #8
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	46c0      	nop			@ (mov r8, r8)
 8009d5c:	20000374 	.word	0x20000374

08009d60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	0002      	movs	r2, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	1dfb      	adds	r3, r7, #7
 8009d6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2204      	movs	r2, #4
 8009d72:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b002      	add	sp, #8
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	46c0      	nop			@ (mov r8, r8)
 8009d80:	20000388 	.word	0x20000388

08009d84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	0002      	movs	r2, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	1dfb      	adds	r3, r7, #7
 8009d90:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009d92:	1dfb      	adds	r3, r7, #7
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	4908      	ldr	r1, [pc, #32]	@ (8009dc0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009d9e:	4b09      	ldr	r3, [pc, #36]	@ (8009dc4 <USBD_FS_ProductStrDescriptor+0x40>)
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7ff fec9 	bl	8009b38 <USBD_GetString>
 8009da6:	e005      	b.n	8009db4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	4905      	ldr	r1, [pc, #20]	@ (8009dc0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <USBD_FS_ProductStrDescriptor+0x40>)
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7ff fec2 	bl	8009b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db4:	4b02      	ldr	r3, [pc, #8]	@ (8009dc0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009db6:	0018      	movs	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	b002      	add	sp, #8
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	46c0      	nop			@ (mov r8, r8)
 8009dc0:	200009f0 	.word	0x200009f0
 8009dc4:	0800a680 	.word	0x0800a680

08009dc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	0002      	movs	r2, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	1dfb      	adds	r3, r7, #7
 8009dd4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	4904      	ldr	r1, [pc, #16]	@ (8009dec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009dda:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f7ff feab 	bl	8009b38 <USBD_GetString>
  return USBD_StrDesc;
 8009de2:	4b02      	ldr	r3, [pc, #8]	@ (8009dec <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b002      	add	sp, #8
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200009f0 	.word	0x200009f0
 8009df0:	0800a690 	.word	0x0800a690

08009df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	0002      	movs	r2, r0
 8009dfc:	6039      	str	r1, [r7, #0]
 8009dfe:	1dfb      	adds	r3, r7, #7
 8009e00:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	221a      	movs	r2, #26
 8009e06:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e08:	f000 f84c 	bl	8009ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	@ (8009e18 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009e0e:	0018      	movs	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b002      	add	sp, #8
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	46c0      	nop			@ (mov r8, r8)
 8009e18:	2000038c 	.word	0x2000038c

08009e1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	0002      	movs	r2, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	1dfb      	adds	r3, r7, #7
 8009e28:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009e2a:	1dfb      	adds	r3, r7, #7
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	4908      	ldr	r1, [pc, #32]	@ (8009e58 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009e36:	4b09      	ldr	r3, [pc, #36]	@ (8009e5c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f7ff fe7d 	bl	8009b38 <USBD_GetString>
 8009e3e:	e005      	b.n	8009e4c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	4905      	ldr	r1, [pc, #20]	@ (8009e58 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009e44:	4b05      	ldr	r3, [pc, #20]	@ (8009e5c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009e46:	0018      	movs	r0, r3
 8009e48:	f7ff fe76 	bl	8009b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e4c:	4b02      	ldr	r3, [pc, #8]	@ (8009e58 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	46c0      	nop			@ (mov r8, r8)
 8009e58:	200009f0 	.word	0x200009f0
 8009e5c:	0800a69c 	.word	0x0800a69c

08009e60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	0002      	movs	r2, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	1dfb      	adds	r3, r7, #7
 8009e6c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009e6e:	1dfb      	adds	r3, r7, #7
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4908      	ldr	r1, [pc, #32]	@ (8009e9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009e7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f7ff fe5b 	bl	8009b38 <USBD_GetString>
 8009e82:	e005      	b.n	8009e90 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	4905      	ldr	r1, [pc, #20]	@ (8009e9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	f7ff fe54 	bl	8009b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e90:	4b02      	ldr	r3, [pc, #8]	@ (8009e9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009e92:	0018      	movs	r0, r3
 8009e94:	46bd      	mov	sp, r7
 8009e96:	b002      	add	sp, #8
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	46c0      	nop			@ (mov r8, r8)
 8009e9c:	200009f0 	.word	0x200009f0
 8009ea0:	0800a6a8 	.word	0x0800a6a8

08009ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eaa:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <Get_SerialNum+0x48>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef0 <Get_SerialNum+0x4c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <Get_SerialNum+0x50>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	18d3      	adds	r3, r2, r3
 8009ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eca:	490b      	ldr	r1, [pc, #44]	@ (8009ef8 <Get_SerialNum+0x54>)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2208      	movs	r2, #8
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f000 f815 	bl	8009f00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ed6:	4909      	ldr	r1, [pc, #36]	@ (8009efc <Get_SerialNum+0x58>)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2204      	movs	r2, #4
 8009edc:	0018      	movs	r0, r3
 8009ede:	f000 f80f 	bl	8009f00 <IntToUnicode>
  }
}
 8009ee2:	46c0      	nop			@ (mov r8, r8)
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b004      	add	sp, #16
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	46c0      	nop			@ (mov r8, r8)
 8009eec:	1ffff7ac 	.word	0x1ffff7ac
 8009ef0:	1ffff7b0 	.word	0x1ffff7b0
 8009ef4:	1ffff7b4 	.word	0x1ffff7b4
 8009ef8:	2000038e 	.word	0x2000038e
 8009efc:	2000039e 	.word	0x2000039e

08009f00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	1dfb      	adds	r3, r7, #7
 8009f0c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009f0e:	2117      	movs	r1, #23
 8009f10:	187b      	adds	r3, r7, r1
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009f16:	187b      	adds	r3, r7, r1
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
 8009f1c:	e02f      	b.n	8009f7e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	0f1b      	lsrs	r3, r3, #28
 8009f22:	2b09      	cmp	r3, #9
 8009f24:	d80d      	bhi.n	8009f42 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	0f1b      	lsrs	r3, r3, #28
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	2317      	movs	r3, #23
 8009f2e:	18fb      	adds	r3, r7, r3
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	0019      	movs	r1, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	185b      	adds	r3, r3, r1
 8009f3a:	3230      	adds	r2, #48	@ 0x30
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e00c      	b.n	8009f5c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	0f1b      	lsrs	r3, r3, #28
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	2317      	movs	r3, #23
 8009f4a:	18fb      	adds	r3, r7, r3
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	0019      	movs	r1, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	185b      	adds	r3, r3, r1
 8009f56:	3237      	adds	r2, #55	@ 0x37
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f62:	2117      	movs	r1, #23
 8009f64:	187b      	adds	r3, r7, r1
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	18d3      	adds	r3, r2, r3
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f74:	187b      	adds	r3, r7, r1
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	187b      	adds	r3, r7, r1
 8009f7a:	3201      	adds	r2, #1
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	2317      	movs	r3, #23
 8009f80:	18fa      	adds	r2, r7, r3
 8009f82:	1dfb      	adds	r3, r7, #7
 8009f84:	7812      	ldrb	r2, [r2, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d3c8      	bcc.n	8009f1e <IntToUnicode+0x1e>
  }
}
 8009f8c:	46c0      	nop			@ (mov r8, r8)
 8009f8e:	46c0      	nop			@ (mov r8, r8)
 8009f90:	46bd      	mov	sp, r7
 8009f92:	b006      	add	sp, #24
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe0 <HAL_PCD_MspInit+0x48>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d115      	bne.n	8009fd6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009faa:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe4 <HAL_PCD_MspInit+0x4c>)
 8009fac:	69da      	ldr	r2, [r3, #28]
 8009fae:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <HAL_PCD_MspInit+0x4c>)
 8009fb0:	2180      	movs	r1, #128	@ 0x80
 8009fb2:	0409      	lsls	r1, r1, #16
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	61da      	str	r2, [r3, #28]
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe4 <HAL_PCD_MspInit+0x4c>)
 8009fba:	69da      	ldr	r2, [r3, #28]
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2100      	movs	r1, #0
 8009fca:	201f      	movs	r0, #31
 8009fcc:	f7f7 ffa2 	bl	8001f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009fd0:	201f      	movs	r0, #31
 8009fd2:	f7f7 ffb4 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fd6:	46c0      	nop			@ (mov r8, r8)
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	b004      	add	sp, #16
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	46c0      	nop			@ (mov r8, r8)
 8009fe0:	40005c00 	.word	0x40005c00
 8009fe4:	40021000 	.word	0x40021000

08009fe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	23b6      	movs	r3, #182	@ 0xb6
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	58d2      	ldr	r2, [r2, r3]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	21a6      	movs	r1, #166	@ 0xa6
 8009ffc:	0089      	lsls	r1, r1, #2
 8009ffe:	468c      	mov	ip, r1
 800a000:	4463      	add	r3, ip
 800a002:	0019      	movs	r1, r3
 800a004:	0010      	movs	r0, r2
 800a006:	f7fe fd2d 	bl	8008a64 <USBD_LL_SetupStage>
}
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	46bd      	mov	sp, r7
 800a00e:	b002      	add	sp, #8
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a012:	b590      	push	{r4, r7, lr}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	000a      	movs	r2, r1
 800a01c:	1cfb      	adds	r3, r7, #3
 800a01e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	23b6      	movs	r3, #182	@ 0xb6
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	58d4      	ldr	r4, [r2, r3]
 800a028:	1cfb      	adds	r3, r7, #3
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	23b2      	movs	r3, #178	@ 0xb2
 800a030:	0059      	lsls	r1, r3, #1
 800a032:	0013      	movs	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	189b      	adds	r3, r3, r2
 800a038:	00db      	lsls	r3, r3, #3
 800a03a:	18c3      	adds	r3, r0, r3
 800a03c:	185b      	adds	r3, r3, r1
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	1cfb      	adds	r3, r7, #3
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	0019      	movs	r1, r3
 800a046:	0020      	movs	r0, r4
 800a048:	f7fe fd6a 	bl	8008b20 <USBD_LL_DataOutStage>
}
 800a04c:	46c0      	nop			@ (mov r8, r8)
 800a04e:	46bd      	mov	sp, r7
 800a050:	b003      	add	sp, #12
 800a052:	bd90      	pop	{r4, r7, pc}

0800a054 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	000a      	movs	r2, r1
 800a05e:	1cfb      	adds	r3, r7, #3
 800a060:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	23b6      	movs	r3, #182	@ 0xb6
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	58d0      	ldr	r0, [r2, r3]
 800a06a:	1cfb      	adds	r3, r7, #3
 800a06c:	781a      	ldrb	r2, [r3, #0]
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	0013      	movs	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	189b      	adds	r3, r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	18cb      	adds	r3, r1, r3
 800a07a:	3324      	adds	r3, #36	@ 0x24
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	1cfb      	adds	r3, r7, #3
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	0019      	movs	r1, r3
 800a084:	f7fe fdce 	bl	8008c24 <USBD_LL_DataInStage>
}
 800a088:	46c0      	nop			@ (mov r8, r8)
 800a08a:	46bd      	mov	sp, r7
 800a08c:	b002      	add	sp, #8
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	23b6      	movs	r3, #182	@ 0xb6
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	58d3      	ldr	r3, [r2, r3]
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7fe ff05 	bl	8008eb0 <USBD_LL_SOF>
}
 800a0a6:	46c0      	nop			@ (mov r8, r8)
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b002      	add	sp, #8
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0b6:	230f      	movs	r3, #15
 800a0b8:	18fb      	adds	r3, r7, r3
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	795b      	ldrb	r3, [r3, #5]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d001      	beq.n	800a0ca <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a0c6:	f7f7 fa0d 	bl	80014e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	23b6      	movs	r3, #182	@ 0xb6
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	58d2      	ldr	r2, [r2, r3]
 800a0d2:	230f      	movs	r3, #15
 800a0d4:	18fb      	adds	r3, r7, r3
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	0019      	movs	r1, r3
 800a0da:	0010      	movs	r0, r2
 800a0dc:	f7fe fea7 	bl	8008e2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	23b6      	movs	r3, #182	@ 0xb6
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	58d3      	ldr	r3, [r2, r3]
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f7fe fe58 	bl	8008d9e <USBD_LL_Reset>
}
 800a0ee:	46c0      	nop			@ (mov r8, r8)
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b004      	add	sp, #16
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	23b6      	movs	r3, #182	@ 0xb6
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	58d3      	ldr	r3, [r2, r3]
 800a108:	0018      	movs	r0, r3
 800a10a:	f7fe fea1 	bl	8008e50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7a5b      	ldrb	r3, [r3, #9]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a116:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <HAL_PCD_SuspendCallback+0x34>)
 800a118:	691a      	ldr	r2, [r3, #16]
 800a11a:	4b04      	ldr	r3, [pc, #16]	@ (800a12c <HAL_PCD_SuspendCallback+0x34>)
 800a11c:	2106      	movs	r1, #6
 800a11e:	430a      	orrs	r2, r1
 800a120:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a122:	46c0      	nop			@ (mov r8, r8)
 800a124:	46bd      	mov	sp, r7
 800a126:	b002      	add	sp, #8
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	e000ed00 	.word	0xe000ed00

0800a130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7a5b      	ldrb	r3, [r3, #9]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a140:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <HAL_PCD_ResumeCallback+0x38>)
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	4b08      	ldr	r3, [pc, #32]	@ (800a168 <HAL_PCD_ResumeCallback+0x38>)
 800a146:	2106      	movs	r1, #6
 800a148:	438a      	bics	r2, r1
 800a14a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a14c:	f000 fa18 	bl	800a580 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	23b6      	movs	r3, #182	@ 0xb6
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	58d3      	ldr	r3, [r2, r3]
 800a158:	0018      	movs	r0, r3
 800a15a:	f7fe fe91 	bl	8008e80 <USBD_LL_Resume>
}
 800a15e:	46c0      	nop			@ (mov r8, r8)
 800a160:	46bd      	mov	sp, r7
 800a162:	b002      	add	sp, #8
 800a164:	bd80      	pop	{r7, pc}
 800a166:	46c0      	nop			@ (mov r8, r8)
 800a168:	e000ed00 	.word	0xe000ed00

0800a16c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a174:	4a23      	ldr	r2, [pc, #140]	@ (800a204 <USBD_LL_Init+0x98>)
 800a176:	23b6      	movs	r3, #182	@ 0xb6
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	6879      	ldr	r1, [r7, #4]
 800a17c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	23b0      	movs	r3, #176	@ 0xb0
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	491f      	ldr	r1, [pc, #124]	@ (800a204 <USBD_LL_Init+0x98>)
 800a186:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a188:	4b1e      	ldr	r3, [pc, #120]	@ (800a204 <USBD_LL_Init+0x98>)
 800a18a:	4a1f      	ldr	r2, [pc, #124]	@ (800a208 <USBD_LL_Init+0x9c>)
 800a18c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a18e:	4b1d      	ldr	r3, [pc, #116]	@ (800a204 <USBD_LL_Init+0x98>)
 800a190:	2208      	movs	r2, #8
 800a192:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a194:	4b1b      	ldr	r3, [pc, #108]	@ (800a204 <USBD_LL_Init+0x98>)
 800a196:	2202      	movs	r2, #2
 800a198:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a19a:	4b1a      	ldr	r3, [pc, #104]	@ (800a204 <USBD_LL_Init+0x98>)
 800a19c:	2202      	movs	r2, #2
 800a19e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1a0:	4b18      	ldr	r3, [pc, #96]	@ (800a204 <USBD_LL_Init+0x98>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1a6:	4b17      	ldr	r3, [pc, #92]	@ (800a204 <USBD_LL_Init+0x98>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1ac:	4b15      	ldr	r3, [pc, #84]	@ (800a204 <USBD_LL_Init+0x98>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1b2:	4b14      	ldr	r3, [pc, #80]	@ (800a204 <USBD_LL_Init+0x98>)
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f7f8 fa6f 	bl	8002698 <HAL_PCD_Init>
 800a1ba:	1e03      	subs	r3, r0, #0
 800a1bc:	d001      	beq.n	800a1c2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800a1be:	f7f7 f991 	bl	80014e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	23b0      	movs	r3, #176	@ 0xb0
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	58d0      	ldr	r0, [r2, r3]
 800a1ca:	2318      	movs	r3, #24
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	f7fa f808 	bl	80041e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	23b0      	movs	r3, #176	@ 0xb0
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	58d0      	ldr	r0, [r2, r3]
 800a1dc:	2358      	movs	r3, #88	@ 0x58
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2180      	movs	r1, #128	@ 0x80
 800a1e2:	f7f9 ffff 	bl	80041e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	23b0      	movs	r3, #176	@ 0xb0
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	58d0      	ldr	r0, [r2, r3]
 800a1ee:	2380      	movs	r3, #128	@ 0x80
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2181      	movs	r1, #129	@ 0x81
 800a1f6:	f7f9 fff5 	bl	80041e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b002      	add	sp, #8
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000bf0 	.word	0x20000bf0
 800a208:	40005c00 	.word	0x40005c00

0800a20c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a214:	210f      	movs	r1, #15
 800a216:	187b      	adds	r3, r7, r1
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21c:	260e      	movs	r6, #14
 800a21e:	19bb      	adds	r3, r7, r6
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	23b0      	movs	r3, #176	@ 0xb0
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	58d3      	ldr	r3, [r2, r3]
 800a22c:	000d      	movs	r5, r1
 800a22e:	187c      	adds	r4, r7, r1
 800a230:	0018      	movs	r0, r3
 800a232:	f7f8 fb25 	bl	8002880 <HAL_PCD_Start>
 800a236:	0003      	movs	r3, r0
 800a238:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23a:	19bc      	adds	r4, r7, r6
 800a23c:	197b      	adds	r3, r7, r5
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	0018      	movs	r0, r3
 800a242:	f000 f9a4 	bl	800a58e <USBD_Get_USB_Status>
 800a246:	0003      	movs	r3, r0
 800a248:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a24a:	19bb      	adds	r3, r7, r6
 800a24c:	781b      	ldrb	r3, [r3, #0]
}
 800a24e:	0018      	movs	r0, r3
 800a250:	46bd      	mov	sp, r7
 800a252:	b005      	add	sp, #20
 800a254:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a256 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a256:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	000c      	movs	r4, r1
 800a260:	0010      	movs	r0, r2
 800a262:	0019      	movs	r1, r3
 800a264:	1cfb      	adds	r3, r7, #3
 800a266:	1c22      	adds	r2, r4, #0
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	1cbb      	adds	r3, r7, #2
 800a26c:	1c02      	adds	r2, r0, #0
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	003b      	movs	r3, r7
 800a272:	1c0a      	adds	r2, r1, #0
 800a274:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a276:	260f      	movs	r6, #15
 800a278:	19bb      	adds	r3, r7, r6
 800a27a:	2200      	movs	r2, #0
 800a27c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	250e      	movs	r5, #14
 800a280:	197b      	adds	r3, r7, r5
 800a282:	2200      	movs	r2, #0
 800a284:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	23b0      	movs	r3, #176	@ 0xb0
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	58d0      	ldr	r0, [r2, r3]
 800a28e:	19bc      	adds	r4, r7, r6
 800a290:	1cbb      	adds	r3, r7, #2
 800a292:	781d      	ldrb	r5, [r3, #0]
 800a294:	003b      	movs	r3, r7
 800a296:	881a      	ldrh	r2, [r3, #0]
 800a298:	1cfb      	adds	r3, r7, #3
 800a29a:	7819      	ldrb	r1, [r3, #0]
 800a29c:	002b      	movs	r3, r5
 800a29e:	f7f8 fc83 	bl	8002ba8 <HAL_PCD_EP_Open>
 800a2a2:	0003      	movs	r3, r0
 800a2a4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a6:	250e      	movs	r5, #14
 800a2a8:	197c      	adds	r4, r7, r5
 800a2aa:	19bb      	adds	r3, r7, r6
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f000 f96d 	bl	800a58e <USBD_Get_USB_Status>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a2b8:	197b      	adds	r3, r7, r5
 800a2ba:	781b      	ldrb	r3, [r3, #0]
}
 800a2bc:	0018      	movs	r0, r3
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	b005      	add	sp, #20
 800a2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	000a      	movs	r2, r1
 800a2ce:	1cfb      	adds	r3, r7, #3
 800a2d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d2:	210f      	movs	r1, #15
 800a2d4:	187b      	adds	r3, r7, r1
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	260e      	movs	r6, #14
 800a2dc:	19bb      	adds	r3, r7, r6
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	23b0      	movs	r3, #176	@ 0xb0
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	58d2      	ldr	r2, [r2, r3]
 800a2ea:	000d      	movs	r5, r1
 800a2ec:	187c      	adds	r4, r7, r1
 800a2ee:	1cfb      	adds	r3, r7, #3
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	0019      	movs	r1, r3
 800a2f4:	0010      	movs	r0, r2
 800a2f6:	f7f8 fcc6 	bl	8002c86 <HAL_PCD_EP_Close>
 800a2fa:	0003      	movs	r3, r0
 800a2fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2fe:	19bc      	adds	r4, r7, r6
 800a300:	197b      	adds	r3, r7, r5
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	0018      	movs	r0, r3
 800a306:	f000 f942 	bl	800a58e <USBD_Get_USB_Status>
 800a30a:	0003      	movs	r3, r0
 800a30c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a30e:	19bb      	adds	r3, r7, r6
 800a310:	781b      	ldrb	r3, [r3, #0]
}
 800a312:	0018      	movs	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	b005      	add	sp, #20
 800a318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a31a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a31a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	000a      	movs	r2, r1
 800a324:	1cfb      	adds	r3, r7, #3
 800a326:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	210f      	movs	r1, #15
 800a32a:	187b      	adds	r3, r7, r1
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a330:	260e      	movs	r6, #14
 800a332:	19bb      	adds	r3, r7, r6
 800a334:	2200      	movs	r2, #0
 800a336:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	23b0      	movs	r3, #176	@ 0xb0
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	58d2      	ldr	r2, [r2, r3]
 800a340:	000d      	movs	r5, r1
 800a342:	187c      	adds	r4, r7, r1
 800a344:	1cfb      	adds	r3, r7, #3
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	0019      	movs	r1, r3
 800a34a:	0010      	movs	r0, r2
 800a34c:	f7f8 fd5f 	bl	8002e0e <HAL_PCD_EP_SetStall>
 800a350:	0003      	movs	r3, r0
 800a352:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a354:	19bc      	adds	r4, r7, r6
 800a356:	197b      	adds	r3, r7, r5
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	0018      	movs	r0, r3
 800a35c:	f000 f917 	bl	800a58e <USBD_Get_USB_Status>
 800a360:	0003      	movs	r3, r0
 800a362:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a364:	19bb      	adds	r3, r7, r6
 800a366:	781b      	ldrb	r3, [r3, #0]
}
 800a368:	0018      	movs	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	b005      	add	sp, #20
 800a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a370 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	000a      	movs	r2, r1
 800a37a:	1cfb      	adds	r3, r7, #3
 800a37c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37e:	210f      	movs	r1, #15
 800a380:	187b      	adds	r3, r7, r1
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	260e      	movs	r6, #14
 800a388:	19bb      	adds	r3, r7, r6
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	23b0      	movs	r3, #176	@ 0xb0
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	58d2      	ldr	r2, [r2, r3]
 800a396:	000d      	movs	r5, r1
 800a398:	187c      	adds	r4, r7, r1
 800a39a:	1cfb      	adds	r3, r7, #3
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	0019      	movs	r1, r3
 800a3a0:	0010      	movs	r0, r2
 800a3a2:	f7f8 fd90 	bl	8002ec6 <HAL_PCD_EP_ClrStall>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3aa:	19bc      	adds	r4, r7, r6
 800a3ac:	197b      	adds	r3, r7, r5
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f000 f8ec 	bl	800a58e <USBD_Get_USB_Status>
 800a3b6:	0003      	movs	r3, r0
 800a3b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a3ba:	19bb      	adds	r3, r7, r6
 800a3bc:	781b      	ldrb	r3, [r3, #0]
}
 800a3be:	0018      	movs	r0, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b005      	add	sp, #20
 800a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	000a      	movs	r2, r1
 800a3d0:	1cfb      	adds	r3, r7, #3
 800a3d2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	23b0      	movs	r3, #176	@ 0xb0
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	58d3      	ldr	r3, [r2, r3]
 800a3dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3de:	1cfb      	adds	r3, r7, #3
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	b25b      	sxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da0c      	bge.n	800a402 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3e8:	1cfb      	adds	r3, r7, #3
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	227f      	movs	r2, #127	@ 0x7f
 800a3ee:	401a      	ands	r2, r3
 800a3f0:	68f9      	ldr	r1, [r7, #12]
 800a3f2:	0013      	movs	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	189b      	adds	r3, r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	18cb      	adds	r3, r1, r3
 800a3fc:	3312      	adds	r3, #18
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	e00d      	b.n	800a41e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a402:	1cfb      	adds	r3, r7, #3
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	227f      	movs	r2, #127	@ 0x7f
 800a408:	401a      	ands	r2, r3
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	23a9      	movs	r3, #169	@ 0xa9
 800a40e:	0059      	lsls	r1, r3, #1
 800a410:	0013      	movs	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	189b      	adds	r3, r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	18c3      	adds	r3, r0, r3
 800a41a:	185b      	adds	r3, r3, r1
 800a41c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b004      	add	sp, #16
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a426:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	000a      	movs	r2, r1
 800a430:	1cfb      	adds	r3, r7, #3
 800a432:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a434:	210f      	movs	r1, #15
 800a436:	187b      	adds	r3, r7, r1
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a43c:	260e      	movs	r6, #14
 800a43e:	19bb      	adds	r3, r7, r6
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	23b0      	movs	r3, #176	@ 0xb0
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	58d2      	ldr	r2, [r2, r3]
 800a44c:	000d      	movs	r5, r1
 800a44e:	187c      	adds	r4, r7, r1
 800a450:	1cfb      	adds	r3, r7, #3
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	0019      	movs	r1, r3
 800a456:	0010      	movs	r0, r2
 800a458:	f7f8 fb7c 	bl	8002b54 <HAL_PCD_SetAddress>
 800a45c:	0003      	movs	r3, r0
 800a45e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a460:	19bc      	adds	r4, r7, r6
 800a462:	197b      	adds	r3, r7, r5
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	0018      	movs	r0, r3
 800a468:	f000 f891 	bl	800a58e <USBD_Get_USB_Status>
 800a46c:	0003      	movs	r3, r0
 800a46e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a470:	19bb      	adds	r3, r7, r6
 800a472:	781b      	ldrb	r3, [r3, #0]
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b005      	add	sp, #20
 800a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a47c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	0008      	movs	r0, r1
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	0019      	movs	r1, r3
 800a48a:	230b      	movs	r3, #11
 800a48c:	18fb      	adds	r3, r7, r3
 800a48e:	1c02      	adds	r2, r0, #0
 800a490:	701a      	strb	r2, [r3, #0]
 800a492:	2408      	movs	r4, #8
 800a494:	193b      	adds	r3, r7, r4
 800a496:	1c0a      	adds	r2, r1, #0
 800a498:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a49a:	2117      	movs	r1, #23
 800a49c:	187b      	adds	r3, r7, r1
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a2:	2516      	movs	r5, #22
 800a4a4:	197b      	adds	r3, r7, r5
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	23b0      	movs	r3, #176	@ 0xb0
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	58d0      	ldr	r0, [r2, r3]
 800a4b2:	193b      	adds	r3, r7, r4
 800a4b4:	881d      	ldrh	r5, [r3, #0]
 800a4b6:	000e      	movs	r6, r1
 800a4b8:	187c      	adds	r4, r7, r1
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	230b      	movs	r3, #11
 800a4be:	18fb      	adds	r3, r7, r3
 800a4c0:	7819      	ldrb	r1, [r3, #0]
 800a4c2:	002b      	movs	r3, r5
 800a4c4:	f7f8 fc67 	bl	8002d96 <HAL_PCD_EP_Transmit>
 800a4c8:	0003      	movs	r3, r0
 800a4ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4cc:	2516      	movs	r5, #22
 800a4ce:	197c      	adds	r4, r7, r5
 800a4d0:	19bb      	adds	r3, r7, r6
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f000 f85a 	bl	800a58e <USBD_Get_USB_Status>
 800a4da:	0003      	movs	r3, r0
 800a4dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a4de:	197b      	adds	r3, r7, r5
 800a4e0:	781b      	ldrb	r3, [r3, #0]
}
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b007      	add	sp, #28
 800a4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ec:	b087      	sub	sp, #28
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	0008      	movs	r0, r1
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	0019      	movs	r1, r3
 800a4f8:	230b      	movs	r3, #11
 800a4fa:	18fb      	adds	r3, r7, r3
 800a4fc:	1c02      	adds	r2, r0, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	2408      	movs	r4, #8
 800a502:	193b      	adds	r3, r7, r4
 800a504:	1c0a      	adds	r2, r1, #0
 800a506:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a508:	2117      	movs	r1, #23
 800a50a:	187b      	adds	r3, r7, r1
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2516      	movs	r5, #22
 800a512:	197b      	adds	r3, r7, r5
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	23b0      	movs	r3, #176	@ 0xb0
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	58d0      	ldr	r0, [r2, r3]
 800a520:	193b      	adds	r3, r7, r4
 800a522:	881d      	ldrh	r5, [r3, #0]
 800a524:	000e      	movs	r6, r1
 800a526:	187c      	adds	r4, r7, r1
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	230b      	movs	r3, #11
 800a52c:	18fb      	adds	r3, r7, r3
 800a52e:	7819      	ldrb	r1, [r3, #0]
 800a530:	002b      	movs	r3, r5
 800a532:	f7f8 fbf9 	bl	8002d28 <HAL_PCD_EP_Receive>
 800a536:	0003      	movs	r3, r0
 800a538:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53a:	2516      	movs	r5, #22
 800a53c:	197c      	adds	r4, r7, r5
 800a53e:	19bb      	adds	r3, r7, r6
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	0018      	movs	r0, r3
 800a544:	f000 f823 	bl	800a58e <USBD_Get_USB_Status>
 800a548:	0003      	movs	r3, r0
 800a54a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a54c:	197b      	adds	r3, r7, r5
 800a54e:	781b      	ldrb	r3, [r3, #0]
}
 800a550:	0018      	movs	r0, r3
 800a552:	46bd      	mov	sp, r7
 800a554:	b007      	add	sp, #28
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a558 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a560:	4b02      	ldr	r3, [pc, #8]	@ (800a56c <USBD_static_malloc+0x14>)
}
 800a562:	0018      	movs	r0, r3
 800a564:	46bd      	mov	sp, r7
 800a566:	b002      	add	sp, #8
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	46c0      	nop			@ (mov r8, r8)
 800a56c:	20000ecc 	.word	0x20000ecc

0800a570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]

}
 800a578:	46c0      	nop			@ (mov r8, r8)
 800a57a:	46bd      	mov	sp, r7
 800a57c:	b002      	add	sp, #8
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a584:	f7f6 fe15 	bl	80011b2 <SystemClock_Config>
}
 800a588:	46c0      	nop			@ (mov r8, r8)
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	0002      	movs	r2, r0
 800a596:	1dfb      	adds	r3, r7, #7
 800a598:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59a:	230f      	movs	r3, #15
 800a59c:	18fb      	adds	r3, r7, r3
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a5a2:	1dfb      	adds	r3, r7, #7
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d017      	beq.n	800a5da <USBD_Get_USB_Status+0x4c>
 800a5aa:	dc1b      	bgt.n	800a5e4 <USBD_Get_USB_Status+0x56>
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d00f      	beq.n	800a5d0 <USBD_Get_USB_Status+0x42>
 800a5b0:	dc18      	bgt.n	800a5e4 <USBD_Get_USB_Status+0x56>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <USBD_Get_USB_Status+0x2e>
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d005      	beq.n	800a5c6 <USBD_Get_USB_Status+0x38>
 800a5ba:	e013      	b.n	800a5e4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5bc:	230f      	movs	r3, #15
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
    break;
 800a5c4:	e013      	b.n	800a5ee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5c6:	230f      	movs	r3, #15
 800a5c8:	18fb      	adds	r3, r7, r3
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	701a      	strb	r2, [r3, #0]
    break;
 800a5ce:	e00e      	b.n	800a5ee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5d0:	230f      	movs	r3, #15
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]
    break;
 800a5d8:	e009      	b.n	800a5ee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5da:	230f      	movs	r3, #15
 800a5dc:	18fb      	adds	r3, r7, r3
 800a5de:	2202      	movs	r2, #2
 800a5e0:	701a      	strb	r2, [r3, #0]
    break;
 800a5e2:	e004      	b.n	800a5ee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a5e4:	230f      	movs	r3, #15
 800a5e6:	18fb      	adds	r3, r7, r3
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	701a      	strb	r2, [r3, #0]
    break;
 800a5ec:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800a5ee:	230f      	movs	r3, #15
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	781b      	ldrb	r3, [r3, #0]
}
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	b004      	add	sp, #16
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <memset>:
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	1882      	adds	r2, r0, r2
 800a600:	4293      	cmp	r3, r2
 800a602:	d100      	bne.n	800a606 <memset+0xa>
 800a604:	4770      	bx	lr
 800a606:	7019      	strb	r1, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	e7f9      	b.n	800a600 <memset+0x4>

0800a60c <__libc_init_array>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	2600      	movs	r6, #0
 800a610:	4c0c      	ldr	r4, [pc, #48]	@ (800a644 <__libc_init_array+0x38>)
 800a612:	4d0d      	ldr	r5, [pc, #52]	@ (800a648 <__libc_init_array+0x3c>)
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	42a6      	cmp	r6, r4
 800a61a:	d109      	bne.n	800a630 <__libc_init_array+0x24>
 800a61c:	2600      	movs	r6, #0
 800a61e:	f000 f823 	bl	800a668 <_init>
 800a622:	4c0a      	ldr	r4, [pc, #40]	@ (800a64c <__libc_init_array+0x40>)
 800a624:	4d0a      	ldr	r5, [pc, #40]	@ (800a650 <__libc_init_array+0x44>)
 800a626:	1b64      	subs	r4, r4, r5
 800a628:	10a4      	asrs	r4, r4, #2
 800a62a:	42a6      	cmp	r6, r4
 800a62c:	d105      	bne.n	800a63a <__libc_init_array+0x2e>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	00b3      	lsls	r3, r6, #2
 800a632:	58eb      	ldr	r3, [r5, r3]
 800a634:	4798      	blx	r3
 800a636:	3601      	adds	r6, #1
 800a638:	e7ee      	b.n	800a618 <__libc_init_array+0xc>
 800a63a:	00b3      	lsls	r3, r6, #2
 800a63c:	58eb      	ldr	r3, [r5, r3]
 800a63e:	4798      	blx	r3
 800a640:	3601      	adds	r6, #1
 800a642:	e7f2      	b.n	800a62a <__libc_init_array+0x1e>
 800a644:	0800a7d8 	.word	0x0800a7d8
 800a648:	0800a7d8 	.word	0x0800a7d8
 800a64c:	0800a7dc 	.word	0x0800a7dc
 800a650:	0800a7d8 	.word	0x0800a7d8

0800a654 <memcpy>:
 800a654:	2300      	movs	r3, #0
 800a656:	b510      	push	{r4, lr}
 800a658:	429a      	cmp	r2, r3
 800a65a:	d100      	bne.n	800a65e <memcpy+0xa>
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	5ccc      	ldrb	r4, [r1, r3]
 800a660:	54c4      	strb	r4, [r0, r3]
 800a662:	3301      	adds	r3, #1
 800a664:	e7f8      	b.n	800a658 <memcpy+0x4>
	...

0800a668 <_init>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	46c0      	nop			@ (mov r8, r8)
 800a66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66e:	bc08      	pop	{r3}
 800a670:	469e      	mov	lr, r3
 800a672:	4770      	bx	lr

0800a674 <_fini>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	46c0      	nop			@ (mov r8, r8)
 800a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67a:	bc08      	pop	{r3}
 800a67c:	469e      	mov	lr, r3
 800a67e:	4770      	bx	lr
