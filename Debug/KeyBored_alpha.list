
KeyBored_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800b05c  0800b05c  0000c05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f4  0800b1f4  0000d59c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b1f4  0800b1f4  0000d59c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b1f4  0800b1f4  0000d59c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f4  0800b1f4  0000c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1f8  0800b1f8  0000c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000059c  20000000  0800b1fc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be4  200005a0  0800b798  0000d5a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  0800b798  0000e184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d59c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b32  00000000  00000000  0000d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f5  00000000  00000000  000220f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecd  00000000  00000000  00027da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8cb  00000000  00000000  00028c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d4  00000000  00000000  00047540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b32d  00000000  00000000  00063a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fed41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  000fed84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00103044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200005a0 	.word	0x200005a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b044 	.word	0x0800b044

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200005a4 	.word	0x200005a4
 8000104:	0800b044 	.word	0x0800b044

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ProcessusKeys_Init>:

//Fonctions privees
void Process_KEYS(void);

void ProcessusKeys_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[PROCESSUS_KEYS_PHASE] = Process_KEYS;
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <ProcessusKeys_Init+0x10>)
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <ProcessusKeys_Init+0x14>)
 8000228:	609a      	str	r2, [r3, #8]
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000668 	.word	0x20000668
 8000234:	08000239 	.word	0x08000239

08000238 <Process_KEYS>:

void Process_KEYS(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	static uint8_t howManyKeysPressed = 0;
	static bool lastActionDone[64];

	Reset_HID_Report();
 800023e:	f000 fb5d 	bl	80008fc <Reset_HID_Report>

	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0b4      	b.n	80003b2 <Process_KEYS+0x17a>
	{
		if(key_map[key_index]->state == PRESSED)
 8000248:	4b75      	ldr	r3, [pc, #468]	@ (8000420 <Process_KEYS+0x1e8>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0092      	lsls	r2, r2, #2
 800024e:	58d3      	ldr	r3, [r2, r3]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d000      	beq.n	8000258 <Process_KEYS+0x20>
 8000256:	e097      	b.n	8000388 <Process_KEYS+0x150>
		{
			howManyKeysPressed++;
 8000258:	4b72      	ldr	r3, [pc, #456]	@ (8000424 <Process_KEYS+0x1ec>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b70      	ldr	r3, [pc, #448]	@ (8000424 <Process_KEYS+0x1ec>)
 8000262:	701a      	strb	r2, [r3, #0]
			if(howManyKeysPressed > 6)
 8000264:	4b6f      	ldr	r3, [pc, #444]	@ (8000424 <Process_KEYS+0x1ec>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b06      	cmp	r3, #6
 800026a:	d900      	bls.n	800026e <Process_KEYS+0x36>
 800026c:	e081      	b.n	8000372 <Process_KEYS+0x13a>
			{
				//DO NOTHING
			}
			else
			{
				switch(key_map[FN_KEY]->state)
 800026e:	4b6c      	ldr	r3, [pc, #432]	@ (8000420 <Process_KEYS+0x1e8>)
 8000270:	22f0      	movs	r2, #240	@ 0xf0
 8000272:	589b      	ldr	r3, [r3, r2]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d000      	beq.n	800027c <Process_KEYS+0x44>
 800027a:	e06b      	b.n	8000354 <Process_KEYS+0x11c>
				{
				case PRESSED:
					switch(key_index)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000280:	d030      	beq.n	80002e4 <Process_KEYS+0xac>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b3f      	cmp	r3, #63	@ 0x3f
 8000286:	dc38      	bgt.n	80002fa <Process_KEYS+0xc2>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b3e      	cmp	r3, #62	@ 0x3e
 800028c:	d014      	beq.n	80002b8 <Process_KEYS+0x80>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b3e      	cmp	r3, #62	@ 0x3e
 8000292:	dc32      	bgt.n	80002fa <Process_KEYS+0xc2>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b35      	cmp	r3, #53	@ 0x35
 8000298:	d003      	beq.n	80002a2 <Process_KEYS+0x6a>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b3d      	cmp	r3, #61	@ 0x3d
 800029e:	d016      	beq.n	80002ce <Process_KEYS+0x96>
 80002a0:	e02b      	b.n	80002fa <Process_KEYS+0xc2>
					{
					case UP_KEY:
						if(lastActionDone[UP_KEY] == false)
 80002a2:	4b61      	ldr	r3, [pc, #388]	@ (8000428 <Process_KEYS+0x1f0>)
 80002a4:	2235      	movs	r2, #53	@ 0x35
 80002a6:	5c9b      	ldrb	r3, [r3, r2]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4053      	eors	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d048      	beq.n	8000344 <Process_KEYS+0x10c>
						{ LEDS_Increase_Brightness(); }
 80002b2:	f000 f8f3 	bl	800049c <LEDS_Increase_Brightness>
						break;
 80002b6:	e045      	b.n	8000344 <Process_KEYS+0x10c>
					case DOWN_KEY:
						if(lastActionDone[DOWN_KEY] == false)
 80002b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000428 <Process_KEYS+0x1f0>)
 80002ba:	223e      	movs	r2, #62	@ 0x3e
 80002bc:	5c9b      	ldrb	r3, [r3, r2]
 80002be:	2201      	movs	r2, #1
 80002c0:	4053      	eors	r3, r2
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d03f      	beq.n	8000348 <Process_KEYS+0x110>
						{ LEDS_Decrease_Brightness(); }
 80002c8:	f000 f904 	bl	80004d4 <LEDS_Decrease_Brightness>
						break;
 80002cc:	e03c      	b.n	8000348 <Process_KEYS+0x110>
					case LEFT_KEY:
						if(lastActionDone[LEFT_KEY] == false)
 80002ce:	4b56      	ldr	r3, [pc, #344]	@ (8000428 <Process_KEYS+0x1f0>)
 80002d0:	223d      	movs	r2, #61	@ 0x3d
 80002d2:	5c9b      	ldrb	r3, [r3, r2]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4053      	eors	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d036      	beq.n	800034c <Process_KEYS+0x114>
						{ LEDS_Cycle_Hue(); }
 80002de:	f000 f915 	bl	800050c <LEDS_Cycle_Hue>
						break;
 80002e2:	e033      	b.n	800034c <Process_KEYS+0x114>
					case RIGHT_KEY:
						if(lastActionDone[RIGHT_KEY] == false)
 80002e4:	4b50      	ldr	r3, [pc, #320]	@ (8000428 <Process_KEYS+0x1f0>)
 80002e6:	223f      	movs	r2, #63	@ 0x3f
 80002e8:	5c9b      	ldrb	r3, [r3, r2]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4053      	eors	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d02d      	beq.n	8000350 <Process_KEYS+0x118>
						{ LEDS_Cycle_Effect(); }
 80002f4:	f000 f92a 	bl	800054c <LEDS_Cycle_Effect>
						break;
 80002f8:	e02a      	b.n	8000350 <Process_KEYS+0x118>
					default:
						switch(key_map[R_ALT_KEY]->state)
 80002fa:	4b49      	ldr	r3, [pc, #292]	@ (8000420 <Process_KEYS+0x1e8>)
 80002fc:	22ec      	movs	r2, #236	@ 0xec
 80002fe:	589b      	ldr	r3, [r3, r2]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d10e      	bne.n	8000324 <Process_KEYS+0xec>
						{
						case PRESSED:
							Make_HID_Report(Get_Active_Keycode(FN_RALT_LAYER, key_index), howManyKeysPressed);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	0019      	movs	r1, r3
 800030c:	2002      	movs	r0, #2
 800030e:	f000 fcd9 	bl	8000cc4 <Get_Active_Keycode>
 8000312:	0003      	movs	r3, r0
 8000314:	001a      	movs	r2, r3
 8000316:	4b43      	ldr	r3, [pc, #268]	@ (8000424 <Process_KEYS+0x1ec>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	0019      	movs	r1, r3
 800031c:	0010      	movs	r0, r2
 800031e:	f000 fb5d 	bl	80009dc <Make_HID_Report>
							break;
 8000322:	e00e      	b.n	8000342 <Process_KEYS+0x10a>
						default:
							Make_HID_Report(Get_Active_Keycode(FN_LAYER, key_index), howManyKeysPressed);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	0019      	movs	r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fcca 	bl	8000cc4 <Get_Active_Keycode>
 8000330:	0003      	movs	r3, r0
 8000332:	001a      	movs	r2, r3
 8000334:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <Process_KEYS+0x1ec>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	0019      	movs	r1, r3
 800033a:	0010      	movs	r0, r2
 800033c:	f000 fb4e 	bl	80009dc <Make_HID_Report>
							break;
 8000340:	46c0      	nop			@ (mov r8, r8)
						}
						break;
 8000342:	e006      	b.n	8000352 <Process_KEYS+0x11a>
						break;
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	e014      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	e012      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	e010      	b.n	8000372 <Process_KEYS+0x13a>
						break;
 8000350:	46c0      	nop			@ (mov r8, r8)
					}
					break;
 8000352:	e00e      	b.n	8000372 <Process_KEYS+0x13a>
				default:
					Make_HID_Report(Get_Active_Keycode(BASE_LAYER, key_index), howManyKeysPressed);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	0019      	movs	r1, r3
 800035a:	2000      	movs	r0, #0
 800035c:	f000 fcb2 	bl	8000cc4 <Get_Active_Keycode>
 8000360:	0003      	movs	r3, r0
 8000362:	001a      	movs	r2, r3
 8000364:	4b2f      	ldr	r3, [pc, #188]	@ (8000424 <Process_KEYS+0x1ec>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0019      	movs	r1, r3
 800036a:	0010      	movs	r0, r2
 800036c:	f000 fb36 	bl	80009dc <Make_HID_Report>
					break;
 8000370:	46c0      	nop			@ (mov r8, r8)
				}
			}
			lastActionDone[key_index] = true;
 8000372:	4a2d      	ldr	r2, [pc, #180]	@ (8000428 <Process_KEYS+0x1f0>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = true;
 800037c:	4a2b      	ldr	r2, [pc, #172]	@ (800042c <Process_KEYS+0x1f4>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	18d3      	adds	r3, r2, r3
 8000382:	3303      	adds	r3, #3
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
		}
		if(key_map[key_index]->state == IDLE)
 8000388:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <Process_KEYS+0x1e8>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	0092      	lsls	r2, r2, #2
 800038e:	58d3      	ldr	r3, [r2, r3]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <Process_KEYS+0x174>
		{
			lastActionDone[key_index] = false;
 8000396:	4a24      	ldr	r2, [pc, #144]	@ (8000428 <Process_KEYS+0x1f0>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	18d3      	adds	r3, r2, r3
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
			leds.position[key_index] = false;
 80003a0:	4a22      	ldr	r2, [pc, #136]	@ (800042c <Process_KEYS+0x1f4>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	18d3      	adds	r3, r2, r3
 80003a6:	3303      	adds	r3, #3
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
	for(int key_index = 0; key_index < NUM_KEYS; key_index++)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80003b6:	dc00      	bgt.n	80003ba <Process_KEYS+0x182>
 80003b8:	e746      	b.n	8000248 <Process_KEYS+0x10>
		}
	}

	if(!Check_HID_KeyboardReport(lastHIDkeyboard))
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <Process_KEYS+0x1f8>)
 80003bc:	6818      	ldr	r0, [r3, #0]
 80003be:	6859      	ldr	r1, [r3, #4]
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	f000 fabd 	bl	8000940 <Check_HID_KeyboardReport>
 80003c6:	0003      	movs	r3, r0
 80003c8:	001a      	movs	r2, r3
 80003ca:	2301      	movs	r3, #1
 80003cc:	4053      	eors	r3, r2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <Process_KEYS+0x1a0>
	{
		Send_HID_KeyboardReport();
 80003d4:	f000 fb9e 	bl	8000b14 <Send_HID_KeyboardReport>
	}

	if(!Check_HID_MediaReport(lastHIDmedia))
 80003d8:	4b16      	ldr	r3, [pc, #88]	@ (8000434 <Process_KEYS+0x1fc>)
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	f000 faea 	bl	80009b4 <Check_HID_MediaReport>
 80003e0:	0003      	movs	r3, r0
 80003e2:	001a      	movs	r2, r3
 80003e4:	2301      	movs	r3, #1
 80003e6:	4053      	eors	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <Process_KEYS+0x1ba>
	{
		Send_HID_MediaReport();
 80003ee:	f000 fba1 	bl	8000b34 <Send_HID_MediaReport>
	}

	lastHIDmedia = HIDmedia;
 80003f2:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <Process_KEYS+0x1fc>)
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <Process_KEYS+0x200>)
 80003f6:	0010      	movs	r0, r2
 80003f8:	0019      	movs	r1, r3
 80003fa:	2302      	movs	r3, #2
 80003fc:	001a      	movs	r2, r3
 80003fe:	f00a fe17 	bl	800b030 <memcpy>
	lastHIDkeyboard = HIDkeyboard;
 8000402:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <Process_KEYS+0x1f8>)
 8000404:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <Process_KEYS+0x204>)
 8000406:	0010      	movs	r0, r2
 8000408:	0019      	movs	r1, r3
 800040a:	2309      	movs	r3, #9
 800040c:	001a      	movs	r2, r3
 800040e:	f00a fe0f 	bl	800b030 <memcpy>
	howManyKeysPressed = 0;
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <Process_KEYS+0x1ec>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	200005ca 	.word	0x200005ca
 8000428:	200005cc 	.word	0x200005cc
 800042c:	20000624 	.word	0x20000624
 8000430:	200005bc 	.word	0x200005bc
 8000434:	200005c8 	.word	0x200005c8
 8000438:	2000012c 	.word	0x2000012c
 800043c:	20000120 	.word	0x20000120

08000440 <Process_LEDS>:

//Fonctions privees
void Process_LEDS(void);

void Process_LEDS(void)
{
 8000440:	b5b0      	push	{r4, r5, r7, lr}
 8000442:	b08e      	sub	sp, #56	@ 0x38
 8000444:	af0e      	add	r7, sp, #56	@ 0x38
	static uint8_t compteur_LEDS;

	compteur_LEDS++;
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <Process_LEDS+0x50>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <Process_LEDS+0x50>)
 8000450:	701a      	strb	r2, [r3, #0]

	if(compteur_LEDS > 30)//update 30ms = ~30fps
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <Process_LEDS+0x50>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b1e      	cmp	r3, #30
 8000458:	d916      	bls.n	8000488 <Process_LEDS+0x48>
	{
		Processus_LEDS_execute[leds.phase](leds);
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <Process_LEDS+0x54>)
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	001a      	movs	r2, r3
 8000460:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <Process_LEDS+0x58>)
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	58d5      	ldr	r5, [r2, r3]
 8000466:	4c0b      	ldr	r4, [pc, #44]	@ (8000494 <Process_LEDS+0x54>)
 8000468:	466b      	mov	r3, sp
 800046a:	0018      	movs	r0, r3
 800046c:	0023      	movs	r3, r4
 800046e:	3310      	adds	r3, #16
 8000470:	2233      	movs	r2, #51	@ 0x33
 8000472:	0019      	movs	r1, r3
 8000474:	f00a fddc 	bl	800b030 <memcpy>
 8000478:	6820      	ldr	r0, [r4, #0]
 800047a:	6861      	ldr	r1, [r4, #4]
 800047c:	68a2      	ldr	r2, [r4, #8]
 800047e:	68e3      	ldr	r3, [r4, #12]
 8000480:	47a8      	blx	r5
		compteur_LEDS = 0;
 8000482:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <Process_LEDS+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
	}

}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bdb0      	pop	{r4, r5, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	20000667 	.word	0x20000667
 8000494:	20000624 	.word	0x20000624
 8000498:	20000610 	.word	0x20000610

0800049c <LEDS_Increase_Brightness>:

LEDS leds;

//Fonctions publiques
void LEDS_Increase_Brightness(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	if(brightness_index < 11)
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b0a      	cmp	r3, #10
 80004a6:	d805      	bhi.n	80004b4 <LEDS_Increase_Brightness+0x18>
	{ brightness_index++; }
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004b2:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <LEDS_Increase_Brightness+0x2c>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b04      	ldr	r3, [pc, #16]	@ (80004cc <LEDS_Increase_Brightness+0x30>)
 80004bc:	5c9a      	ldrb	r2, [r3, r2]
 80004be:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <LEDS_Increase_Brightness+0x34>)
 80004c0:	705a      	strb	r2, [r3, #1]
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000011d 	.word	0x2000011d
 80004cc:	2000010c 	.word	0x2000010c
 80004d0:	20000624 	.word	0x20000624

080004d4 <LEDS_Decrease_Brightness>:

void LEDS_Decrease_Brightness(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	if(brightness_index > 0)
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d005      	beq.n	80004ec <LEDS_Decrease_Brightness+0x18>
	{ brightness_index--; }
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004ea:	701a      	strb	r2, [r3, #0]
	leds.brightness = brightness_table[brightness_index];
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <LEDS_Decrease_Brightness+0x2c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	001a      	movs	r2, r3
 80004f2:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <LEDS_Decrease_Brightness+0x30>)
 80004f4:	5c9a      	ldrb	r2, [r3, r2]
 80004f6:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <LEDS_Decrease_Brightness+0x34>)
 80004f8:	705a      	strb	r2, [r3, #1]
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000011d 	.word	0x2000011d
 8000504:	2000010c 	.word	0x2000010c
 8000508:	20000624 	.word	0x20000624

0800050c <LEDS_Cycle_Hue>:

void LEDS_Cycle_Hue(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	hue_index++;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800051a:	701a      	strb	r2, [r3, #0]
	if(hue_index > 11)
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b0b      	cmp	r3, #11
 8000522:	d902      	bls.n	800052a <LEDS_Cycle_Hue+0x1e>
	{ hue_index = 0; }
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	leds.hue = hue_table[hue_index];
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <LEDS_Cycle_Hue+0x34>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	001a      	movs	r2, r3
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <LEDS_Cycle_Hue+0x38>)
 8000532:	5c9a      	ldrb	r2, [r3, r2]
 8000534:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <LEDS_Cycle_Hue+0x3c>)
 8000536:	701a      	strb	r2, [r3, #0]
}
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	2000060c 	.word	0x2000060c
 8000544:	20000100 	.word	0x20000100
 8000548:	20000624 	.word	0x20000624

0800054c <LEDS_Cycle_Effect>:

void LEDS_Cycle_Effect(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	phase_index++;
 8000550:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800055a:	701a      	strb	r2, [r3, #0]
	if(phase_index > 4)
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b04      	cmp	r3, #4
 8000562:	d902      	bls.n	800056a <LEDS_Cycle_Effect+0x1e>
	{ phase_index = 0; }
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	leds.phase = phase_table[phase_index];
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <LEDS_Cycle_Effect+0x34>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LEDS_Cycle_Effect+0x38>)
 8000572:	5c9a      	ldrb	r2, [r3, r2]
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <LEDS_Cycle_Effect+0x3c>)
 8000576:	709a      	strb	r2, [r3, #2]
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	2000060d 	.word	0x2000060d
 8000584:	20000118 	.word	0x20000118
 8000588:	20000624 	.word	0x20000624

0800058c <ProcessusLEDS_init>:


void ProcessusLEDS_init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  serviceBaseDeTemps_execute[PROCESSUS_LEDS_PHASE] = Process_LEDS;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <ProcessusLEDS_init+0x7c>)
 8000594:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <ProcessusLEDS_init+0x80>)
 8000596:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_RAINBOW_PHASE] = effet_Rainbow;
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <ProcessusLEDS_init+0x84>)
 800059a:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <ProcessusLEDS_init+0x88>)
 800059c:	601a      	str	r2, [r3, #0]
  Processus_LEDS_execute[LEDS_BREATHING_PHASE] = effet_Breathing;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <ProcessusLEDS_init+0x8c>)
 80005a2:	605a      	str	r2, [r3, #4]
  Processus_LEDS_execute[LEDS_STATIC_PHASE] = effet_StaticColor;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005a6:	4a1d      	ldr	r2, [pc, #116]	@ (800061c <ProcessusLEDS_init+0x90>)
 80005a8:	609a      	str	r2, [r3, #8]
  Processus_LEDS_execute[LEDS_RAINBOW_BREATHING_PHASE] = effet_Rainbow_Breathing;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000620 <ProcessusLEDS_init+0x94>)
 80005ae:	60da      	str	r2, [r3, #12]
  Processus_LEDS_execute[LEDS_KEY_RESPONSE_PHASE] = effet_Key_Responsive;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <ProcessusLEDS_init+0x84>)
 80005b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000624 <ProcessusLEDS_init+0x98>)
 80005b4:	611a      	str	r2, [r3, #16]

  leds.hue = hue_table[hue_index];
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <ProcessusLEDS_init+0x9c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <ProcessusLEDS_init+0xa0>)
 80005be:	5c9a      	ldrb	r2, [r3, r2]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005c2:	701a      	strb	r2, [r3, #0]
  leds.phase = phase_table[phase_index];
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <ProcessusLEDS_init+0xa8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <ProcessusLEDS_init+0xac>)
 80005cc:	5c9a      	ldrb	r2, [r3, r2]
 80005ce:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005d0:	709a      	strb	r2, [r3, #2]
  leds.brightness = brightness_table[brightness_index];
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <ProcessusLEDS_init+0xb0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	001a      	movs	r2, r3
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <ProcessusLEDS_init+0xb4>)
 80005da:	5c9a      	ldrb	r2, [r3, r2]
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005de:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < 64; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e008      	b.n	80005f8 <ProcessusLEDS_init+0x6c>
  { leds.position[i] = false; }
 80005e6:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <ProcessusLEDS_init+0xa4>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	18d3      	adds	r3, r2, r3
 80005ec:	3303      	adds	r3, #3
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 64; i++)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80005fc:	ddf3      	ble.n	80005e6 <ProcessusLEDS_init+0x5a>
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000668 	.word	0x20000668
 800060c:	08000441 	.word	0x08000441
 8000610:	20000610 	.word	0x20000610
 8000614:	080010b5 	.word	0x080010b5
 8000618:	0800116d 	.word	0x0800116d
 800061c:	0800140d 	.word	0x0800140d
 8000620:	08001215 	.word	0x08001215
 8000624:	0800130d 	.word	0x0800130d
 8000628:	2000060c 	.word	0x2000060c
 800062c:	20000100 	.word	0x20000100
 8000630:	20000624 	.word	0x20000624
 8000634:	2000060d 	.word	0x2000060d
 8000638:	20000118 	.word	0x20000118
 800063c:	2000011d 	.word	0x2000011d
 8000640:	2000010c 	.word	0x2000010c

08000644 <serviceBaseDeTemps_gere>:
//Definitions de variables privees:
//pas de variables privees

//Definitions de fonctions privees:
void serviceBaseDeTemps_gere(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e00a      	b.n	8000668 <serviceBaseDeTemps_gere+0x24>
  {
    serviceBaseDeTemps_execute[i]();
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <serviceBaseDeTemps_gere+0x38>)
 8000658:	0092      	lsls	r2, r2, #2
 800065a:	58d3      	ldr	r3, [r2, r3]
 800065c:	4798      	blx	r3
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	3201      	adds	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d9f0      	bls.n	8000652 <serviceBaseDeTemps_gere+0xe>
  }
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	20000668 	.word	0x20000668

08000680 <serviceBaseDeTemps_initialise>:
//Definitions de variables publiques:
void (*serviceBaseDeTemps_execute[SERVICEBASEDETEMPS_NOMBRE_DE_PHASES])(void);

//Definitions de fonctions publiques:
void serviceBaseDeTemps_initialise(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
unsigned char i;
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e00a      	b.n	80006a4 <serviceBaseDeTemps_initialise+0x24>
  {
    serviceBaseDeTemps_execute[i] = doNothing;
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <serviceBaseDeTemps_initialise+0x3c>)
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	490a      	ldr	r1, [pc, #40]	@ (80006c0 <serviceBaseDeTemps_initialise+0x40>)
 8000698:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < SERVICEBASEDETEMPS_NOMBRE_DE_PHASES; i++)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	3201      	adds	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d9f0      	bls.n	800068e <serviceBaseDeTemps_initialise+0xe>
  }
  piloteTimer14_execute = serviceBaseDeTemps_gere;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <serviceBaseDeTemps_initialise+0x44>)
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <serviceBaseDeTemps_initialise+0x48>)
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000668 	.word	0x20000668
 80006c0:	08001481 	.word	0x08001481
 80006c4:	20000920 	.word	0x20000920
 80006c8:	08000645 	.word	0x08000645

080006cc <Debounce_Switch_Matrix>:


KeyState matriceDebouncing[NUM_ROWS][NUM_COLS];

//Definitions fonctions publiques
void Debounce_Switch_Matrix(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
    for (int row = 0; row < NUM_ROWS; row++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e07e      	b.n	80007d6 <Debounce_Switch_Matrix+0x10a>
        for (int col = 0; col < NUM_COLS; col++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	e075      	b.n	80007ca <Debounce_Switch_Matrix+0xfe>
            bool physicalState = matrice[row][col];
 80006de:	1df9      	adds	r1, r7, #7
 80006e0:	4841      	ldr	r0, [pc, #260]	@ (80007e8 <Debounce_Switch_Matrix+0x11c>)
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	0013      	movs	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	18c2      	adds	r2, r0, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	700b      	strb	r3, [r1, #0]
            KeyState *key = &matriceDebouncing[row][col];
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	0013      	movs	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	1a9b      	subs	r3, r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	189b      	adds	r3, r3, r2
 8000704:	005a      	lsls	r2, r3, #1
 8000706:	4b39      	ldr	r3, [pc, #228]	@ (80007ec <Debounce_Switch_Matrix+0x120>)
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	603b      	str	r3, [r7, #0]

            switch (key->state) {
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d037      	beq.n	8000784 <Debounce_Switch_Matrix+0xb8>
 8000714:	dc56      	bgt.n	80007c4 <Debounce_Switch_Matrix+0xf8>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d026      	beq.n	8000768 <Debounce_Switch_Matrix+0x9c>
 800071a:	dc53      	bgt.n	80007c4 <Debounce_Switch_Matrix+0xf8>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <Debounce_Switch_Matrix+0x5a>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d00b      	beq.n	800073c <Debounce_Switch_Matrix+0x70>
 8000724:	e04e      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                case IDLE:
                    if (physicalState) {
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d043      	beq.n	80007b6 <Debounce_Switch_Matrix+0xea>
                        key->state = BOUNCE_PRESS;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 800073a:	e03c      	b.n	80007b6 <Debounce_Switch_Matrix+0xea>
                case BOUNCE_PRESS:
                    if (physicalState) {
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00d      	beq.n	8000760 <Debounce_Switch_Matrix+0x94>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	3301      	adds	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	705a      	strb	r2, [r3, #1]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b04      	cmp	r3, #4
 8000756:	d930      	bls.n	80007ba <Debounce_Switch_Matrix+0xee>
                            key->state = PRESSED;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = IDLE;
                    }
                    break;
 800075e:	e02c      	b.n	80007ba <Debounce_Switch_Matrix+0xee>
                        key->state = IDLE;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
                    break;
 8000766:	e028      	b.n	80007ba <Debounce_Switch_Matrix+0xee>
                case PRESSED:
                    if (!physicalState) {
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2201      	movs	r2, #1
 800076e:	4053      	eors	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d023      	beq.n	80007be <Debounce_Switch_Matrix+0xf2>
                        key->state = BOUNCE_RELEASE;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2203      	movs	r2, #3
 800077a:	701a      	strb	r2, [r3, #0]
                        key->debounce_counter = 0;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2200      	movs	r2, #0
 8000780:	705a      	strb	r2, [r3, #1]
                    }
                    break;
 8000782:	e01c      	b.n	80007be <Debounce_Switch_Matrix+0xf2>
                case BOUNCE_RELEASE:
                    if (!physicalState) {
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2201      	movs	r2, #1
 800078a:	4053      	eors	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00d      	beq.n	80007ae <Debounce_Switch_Matrix+0xe2>
                        if (++key->debounce_counter >= DEBOUNCE_TIME_MS) {
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	705a      	strb	r2, [r3, #1]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d90d      	bls.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                            key->state = IDLE;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
                        }
                    } else {
                        key->state = PRESSED;
                    }
                    break;
 80007ac:	e009      	b.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                        key->state = PRESSED;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
                    break;
 80007b4:	e005      	b.n	80007c2 <Debounce_Switch_Matrix+0xf6>
                    break;
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	e004      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e002      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	e000      	b.n	80007c4 <Debounce_Switch_Matrix+0xf8>
                    break;
 80007c2:	46c0      	nop			@ (mov r8, r8)
        for (int col = 0; col < NUM_COLS; col++) {
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b0d      	cmp	r3, #13
 80007ce:	dd86      	ble.n	80006de <Debounce_Switch_Matrix+0x12>
    for (int row = 0; row < NUM_ROWS; row++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	dc00      	bgt.n	80007de <Debounce_Switch_Matrix+0x112>
 80007dc:	e77c      	b.n	80006d8 <Debounce_Switch_Matrix+0xc>
            }
        }
    }
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000704 	.word	0x20000704
 80007ec:	20000678 	.word	0x20000678

080007f0 <InterfaceDebouncing_Init>:

void InterfaceDebouncing_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[DEBOUNCE_MATRICE_PHASE] = Debounce_Switch_Matrix;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <InterfaceDebouncing_Init+0x10>)
 80007f6:	4a03      	ldr	r2, [pc, #12]	@ (8000804 <InterfaceDebouncing_Init+0x14>)
 80007f8:	605a      	str	r2, [r3, #4]
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000668 	.word	0x20000668
 8000804:	080006cd 	.word	0x080006cd

08000808 <ScanMatrice>:
#include "ServiceBaseTemps_1ms.h"

bool matrice[NUM_ROWS][NUM_COLS];

void ScanMatrice(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	Set_All_Rows();
 800080e:	f001 f847 	bl	80018a0 <Set_All_Rows>

	for (int row = 0; row < NUM_ROWS; row++)
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e030      	b.n	800087a <ScanMatrice+0x72>
	{
		Reset_Row(row);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b29b      	uxth	r3, r3
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f827 	bl	8001870 <Reset_Row>

		for(int col = 0; col < NUM_COLS; col++)
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	e01d      	b.n	8000864 <ScanMatrice+0x5c>
		{
			matrice[row][col] = (Read_Col(col) == 0) ? 1 : 0;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	0018      	movs	r0, r3
 800082e:	f000 ffeb 	bl	8001808 <Read_Col>
 8000832:	0003      	movs	r3, r0
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2201      	movs	r2, #1
 800083c:	4053      	eors	r3, r2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	1c1a      	adds	r2, r3, #0
 8000842:	2301      	movs	r3, #1
 8000844:	4013      	ands	r3, r2
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	4910      	ldr	r1, [pc, #64]	@ (800088c <ScanMatrice+0x84>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	0013      	movs	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	18ca      	adds	r2, r1, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	1c02      	adds	r2, r0, #0
 800085c:	701a      	strb	r2, [r3, #0]
		for(int col = 0; col < NUM_COLS; col++)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b0d      	cmp	r3, #13
 8000868:	ddde      	ble.n	8000828 <ScanMatrice+0x20>
		}

		Set_Row(row);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	b29b      	uxth	r3, r3
 800086e:	0018      	movs	r0, r3
 8000870:	f000 ffe6 	bl	8001840 <Set_Row>
	for (int row = 0; row < NUM_ROWS; row++)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b04      	cmp	r3, #4
 800087e:	ddcb      	ble.n	8000818 <ScanMatrice+0x10>
	}
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000704 	.word	0x20000704

08000890 <InterfaceMatrice_Init>:

void InterfaceMatrice_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	serviceBaseDeTemps_execute[SCAN_MATRICE_PHASE] = ScanMatrice;
 8000894:	4b02      	ldr	r3, [pc, #8]	@ (80008a0 <InterfaceMatrice_Init+0x10>)
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <InterfaceMatrice_Init+0x14>)
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000668 	.word	0x20000668
 80008a4:	08000809 	.word	0x08000809

080008a8 <isMediaKey>:

keyboardReport HIDkeyboard = {0x01, 0, 0, 0, 0, 0, 0, 0, 0};
mediaReport HIDmedia = {0x02, 0};

bool isMediaKey(uint8_t keycode)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
    switch (keycode)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2bea      	cmp	r3, #234	@ 0xea
 80008ba:	dc17      	bgt.n	80008ec <isMediaKey+0x44>
 80008bc:	2bcd      	cmp	r3, #205	@ 0xcd
 80008be:	da04      	bge.n	80008ca <isMediaKey+0x22>
 80008c0:	2b70      	cmp	r3, #112	@ 0x70
 80008c2:	dc0e      	bgt.n	80008e2 <isMediaKey+0x3a>
 80008c4:	2b6f      	cmp	r3, #111	@ 0x6f
 80008c6:	da0f      	bge.n	80008e8 <isMediaKey+0x40>
 80008c8:	e010      	b.n	80008ec <isMediaKey+0x44>
 80008ca:	3bcd      	subs	r3, #205	@ 0xcd
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <isMediaKey+0x50>)
 80008ce:	40da      	lsrs	r2, r3
 80008d0:	0013      	movs	r3, r2
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	4193      	sbcs	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <isMediaKey+0x40>
 80008e0:	e004      	b.n	80008ec <isMediaKey+0x44>
 80008e2:	3bb5      	subs	r3, #181	@ 0xb5
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d801      	bhi.n	80008ec <isMediaKey+0x44>
        case KC_MUTE:
        case KC_NEXT:
        case KC_PREVIOUS:
        case KC_BRIGHT_UP:
        case KC_BRIGHT_DOWN:
            return true;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <isMediaKey+0x46>
        default:
            return false;
 80008ec:	2300      	movs	r3, #0
    }
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	30200001 	.word	0x30200001

080008fc <Reset_HID_Report>:

void Reset_HID_Report(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	HIDmedia.MEDIA_KEY = 0;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <Reset_HID_Report+0x3c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.MODIFIER = 0;
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <Reset_HID_Report+0x40>)
 8000908:	2200      	movs	r2, #0
 800090a:	705a      	strb	r2, [r3, #1]
	HIDkeyboard.KEYCODE1 = 0;
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <Reset_HID_Report+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	70da      	strb	r2, [r3, #3]
	HIDkeyboard.KEYCODE2 = 0;
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <Reset_HID_Report+0x40>)
 8000914:	2200      	movs	r2, #0
 8000916:	711a      	strb	r2, [r3, #4]
	HIDkeyboard.KEYCODE3 = 0;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Reset_HID_Report+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]
	HIDkeyboard.KEYCODE4 = 0;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <Reset_HID_Report+0x40>)
 8000920:	2200      	movs	r2, #0
 8000922:	719a      	strb	r2, [r3, #6]
	HIDkeyboard.KEYCODE5 = 0;
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <Reset_HID_Report+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	71da      	strb	r2, [r3, #7]
	HIDkeyboard.KEYCODE6 = 0;
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <Reset_HID_Report+0x40>)
 800092c:	2200      	movs	r2, #0
 800092e:	721a      	strb	r2, [r3, #8]
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	2000012c 	.word	0x2000012c
 800093c:	20000120 	.word	0x20000120

08000940 <Check_HID_KeyboardReport>:

bool Check_HID_KeyboardReport(keyboardReport lastReport)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	6018      	str	r0, [r3, #0]
 800094a:	6059      	str	r1, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
	if(lastReport.MODIFIER == HIDkeyboard.MODIFIER && lastReport.KEYCODE1 == HIDkeyboard.KEYCODE1 && lastReport.KEYCODE2 == HIDkeyboard.KEYCODE2
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	429a      	cmp	r2, r3
 8000958:	d125      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	78da      	ldrb	r2, [r3, #3]
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	429a      	cmp	r2, r3
 8000964:	d11f      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	791a      	ldrb	r2, [r3, #4]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d119      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE3 == HIDkeyboard.KEYCODE3 && lastReport.KEYCODE4 == HIDkeyboard.KEYCODE4 && lastReport.KEYCODE5 == HIDkeyboard.KEYCODE5
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	795a      	ldrb	r2, [r3, #5]
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000978:	795b      	ldrb	r3, [r3, #5]
 800097a:	429a      	cmp	r2, r3
 800097c:	d113      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	799a      	ldrb	r2, [r3, #6]
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d10d      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	79da      	ldrb	r2, [r3, #7]
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 8000990:	79db      	ldrb	r3, [r3, #7]
 8000992:	429a      	cmp	r2, r3
 8000994:	d107      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
			&& lastReport.KEYCODE6 == HIDkeyboard.KEYCODE6)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	7a1a      	ldrb	r2, [r3, #8]
 800099a:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <Check_HID_KeyboardReport+0x70>)
 800099c:	7a1b      	ldrb	r3, [r3, #8]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d101      	bne.n	80009a6 <Check_HID_KeyboardReport+0x66>
	{
		return true;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <Check_HID_KeyboardReport+0x68>
	}
	else
	{
		return false;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000120 	.word	0x20000120

080009b4 <Check_HID_MediaReport>:

bool Check_HID_MediaReport(mediaReport lastReport)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	8018      	strh	r0, [r3, #0]
	if(lastReport.MEDIA_KEY == HIDmedia.MEDIA_KEY)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	785a      	ldrb	r2, [r3, #1]
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <Check_HID_MediaReport+0x24>)
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d101      	bne.n	80009ce <Check_HID_MediaReport+0x1a>
	{
		return true;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <Check_HID_MediaReport+0x1c>
	}
	else
	{
		return false;
 80009ce:	2300      	movs	r3, #0
	}
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000012c 	.word	0x2000012c

080009dc <Make_HID_Report>:

void Make_HID_Report(uint8_t keycode, uint8_t position)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	1c0a      	adds	r2, r1, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	if(isMediaKey(keycode))
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ff58 	bl	80008a8 <isMediaKey>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d004      	beq.n	8000a06 <Make_HID_Report+0x2a>
	{
		HIDmedia.MEDIA_KEY = keycode;
 80009fc:	4b41      	ldr	r3, [pc, #260]	@ (8000b04 <Make_HID_Report+0x128>)
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	705a      	strb	r2, [r3, #1]
				break;

			}
		}
	}
}
 8000a04:	e07a      	b.n	8000afc <Make_HID_Report+0x120>
		if(keycode >= 0xE0 && keycode <= 0xE7)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2bdf      	cmp	r3, #223	@ 0xdf
 8000a0c:	d94f      	bls.n	8000aae <Make_HID_Report+0xd2>
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2be7      	cmp	r3, #231	@ 0xe7
 8000a14:	d84b      	bhi.n	8000aae <Make_HID_Report+0xd2>
			switch(keycode)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	3be0      	subs	r3, #224	@ 0xe0
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	d86d      	bhi.n	8000afc <Make_HID_Report+0x120>
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <Make_HID_Report+0x12c>)
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	469f      	mov	pc, r3
				HIDkeyboard.MODIFIER |= 0x01;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b35      	ldr	r3, [pc, #212]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a36:	705a      	strb	r2, [r3, #1]
				break;
 8000a38:	e038      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x02;
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a46:	705a      	strb	r2, [r3, #1]
				break;
 8000a48:	e030      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x04;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a56:	705a      	strb	r2, [r3, #1]
				break;
 8000a58:	e028      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x08;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a66:	705a      	strb	r2, [r3, #1]
				break;
 8000a68:	e020      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x10;
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	2210      	movs	r2, #16
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a76:	705a      	strb	r2, [r3, #1]
				break;
 8000a78:	e018      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x20;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a7c:	785b      	ldrb	r3, [r3, #1]
 8000a7e:	2220      	movs	r2, #32
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a86:	705a      	strb	r2, [r3, #1]
				break;
 8000a88:	e010      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x40;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2240      	movs	r2, #64	@ 0x40
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a96:	705a      	strb	r2, [r3, #1]
				break;
 8000a98:	e008      	b.n	8000aac <Make_HID_Report+0xd0>
				HIDkeyboard.MODIFIER |= 0x80;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <Make_HID_Report+0x130>)
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	4252      	negs	r2, r2
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <Make_HID_Report+0x130>)
 8000aa8:	705a      	strb	r2, [r3, #1]
				break;
 8000aaa:	46c0      	nop			@ (mov r8, r8)
			switch(keycode)
 8000aac:	e026      	b.n	8000afc <Make_HID_Report+0x120>
			switch(position)
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d822      	bhi.n	8000afc <Make_HID_Report+0x120>
 8000ab6:	009a      	lsls	r2, r3, #2
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <Make_HID_Report+0x134>)
 8000aba:	18d3      	adds	r3, r2, r3
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	469f      	mov	pc, r3
				HIDkeyboard.KEYCODE1 = keycode;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	70da      	strb	r2, [r3, #3]
				break;
 8000ac8:	e018      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE2 = keycode;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <Make_HID_Report+0x130>)
 8000acc:	1dfa      	adds	r2, r7, #7
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	711a      	strb	r2, [r3, #4]
				break;
 8000ad2:	e013      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE3 = keycode;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	715a      	strb	r2, [r3, #5]
				break;
 8000adc:	e00e      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE4 = keycode;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <Make_HID_Report+0x130>)
 8000ae0:	1dfa      	adds	r2, r7, #7
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	719a      	strb	r2, [r3, #6]
				break;
 8000ae6:	e009      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE5 = keycode;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <Make_HID_Report+0x130>)
 8000aea:	1dfa      	adds	r2, r7, #7
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	71da      	strb	r2, [r3, #7]
				break;
 8000af0:	e004      	b.n	8000afc <Make_HID_Report+0x120>
				HIDkeyboard.KEYCODE6 = keycode;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <Make_HID_Report+0x130>)
 8000af4:	1dfa      	adds	r2, r7, #7
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	721a      	strb	r2, [r3, #8]
				break;
 8000afa:	46c0      	nop			@ (mov r8, r8)
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000012c 	.word	0x2000012c
 8000b08:	0800b0a4 	.word	0x0800b0a4
 8000b0c:	20000120 	.word	0x20000120
 8000b10:	0800b0c4 	.word	0x0800b0c4

08000b14 <Send_HID_KeyboardReport>:


void Send_HID_KeyboardReport(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &HIDkeyboard, sizeof(HIDkeyboard));
 8000b18:	4904      	ldr	r1, [pc, #16]	@ (8000b2c <Send_HID_KeyboardReport+0x18>)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <Send_HID_KeyboardReport+0x1c>)
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f008 fa7c 	bl	800901c <USBD_CUSTOM_HID_SendReport>
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	2000094c 	.word	0x2000094c

08000b34 <Send_HID_MediaReport>:

void Send_HID_MediaReport(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &HIDmedia, sizeof(HIDmedia));
 8000b38:	4904      	ldr	r1, [pc, #16]	@ (8000b4c <Send_HID_MediaReport+0x18>)
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <Send_HID_MediaReport+0x1c>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f008 fa6c 	bl	800901c <USBD_CUSTOM_HID_SendReport>
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	2000094c 	.word	0x2000094c

08000b54 <Write_KeyConfig_To_Flash>:

				}
};

void Write_KeyConfig_To_Flash(uint32_t flash_address, uint8_t *buffer)
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();

	status = HAL_FLASH_Unlock();
 8000b66:	231b      	movs	r3, #27
 8000b68:	18fe      	adds	r6, r7, r3
 8000b6a:	f001 fe17 	bl	800279c <HAL_FLASH_Unlock>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7033      	strb	r3, [r6, #0]
	if (status != HAL_OK) {
 8000b72:	231b      	movs	r3, #27
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <Write_KeyConfig_To_Flash+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7c:	b662      	cpsie	i
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();
		return;
 8000b80:	e05a      	b.n	8000c38 <Write_KeyConfig_To_Flash+0xe4>
	}

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000b82:	210c      	movs	r1, #12
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = flash_address;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = 1;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2201      	movs	r2, #1
 8000b94:	609a      	str	r2, [r3, #8]

	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000b96:	231b      	movs	r3, #27
 8000b98:	18fe      	adds	r6, r7, r3
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 feba 	bl	800291c <HAL_FLASHEx_Erase>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	7033      	strb	r3, [r6, #0]
	if (status != HAL_OK) {
 8000bac:	231b      	movs	r3, #27
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <Write_KeyConfig_To_Flash+0x6c>
		HAL_FLASH_Lock();
 8000bb6:	f001 fe17 	bl	80027e8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bba:	b662      	cpsie	i
}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();
		return;
 8000bbe:	e03b      	b.n	8000c38 <Write_KeyConfig_To_Flash+0xe4>
	}

	for (uint32_t i = 1; i < 64; i += 2) {
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	e031      	b.n	8000c2a <Write_KeyConfig_To_Flash+0xd6>
		uint16_t halfWord = (uint16_t)(buffer[i] | (buffer[i+1] << 8));
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	18cb      	adds	r3, r1, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	2018      	movs	r0, #24
 8000be6:	183b      	adds	r3, r7, r0
 8000be8:	801a      	strh	r2, [r3, #0]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
								   flash_address + (i - 1),
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	18d3      	adds	r3, r2, r3
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000bf0:	1e59      	subs	r1, r3, #1
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	001d      	movs	r5, r3
 8000bfe:	231b      	movs	r3, #27
 8000c00:	18fe      	adds	r6, r7, r3
 8000c02:	0022      	movs	r2, r4
 8000c04:	002b      	movs	r3, r5
 8000c06:	2001      	movs	r0, #1
 8000c08:	f001 fd32 	bl	8002670 <HAL_FLASH_Program>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7033      	strb	r3, [r6, #0]
								  (uint64_t)halfWord);
		if (status != HAL_OK) {
 8000c10:	231b      	movs	r3, #27
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <Write_KeyConfig_To_Flash+0xd0>
			HAL_FLASH_Lock();
 8000c1a:	f001 fde5 	bl	80027e8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c1e:	b662      	cpsie	i
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			return;
 8000c22:	e009      	b.n	8000c38 <Write_KeyConfig_To_Flash+0xe4>
	for (uint32_t i = 1; i < 64; i += 2) {
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3302      	adds	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c2e:	d9ca      	bls.n	8000bc6 <Write_KeyConfig_To_Flash+0x72>
		}
	}


	HAL_FLASH_Lock();
 8000c30:	f001 fdda 	bl	80027e8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c34:	b662      	cpsie	i
}
 8000c36:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
}
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b009      	add	sp, #36	@ 0x24
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000c40 <Read_KeyConfig_From_Flash>:


void Read_KeyConfig_From_Flash(uint32_t flash_address, uint8_t config_id)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	000a      	movs	r2, r1
 8000c4a:	1cfb      	adds	r3, r7, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
	uint8_t (*out_buf)[NUM_KEYS] = NULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]

	switch(config_id)
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d011      	beq.n	8000c7e <Read_KeyConfig_From_Flash+0x3e>
 8000c5a:	dc13      	bgt.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d00b      	beq.n	8000c78 <Read_KeyConfig_From_Flash+0x38>
 8000c60:	dc10      	bgt.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d002      	beq.n	8000c6c <Read_KeyConfig_From_Flash+0x2c>
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d003      	beq.n	8000c72 <Read_KeyConfig_From_Flash+0x32>
 8000c6a:	e00b      	b.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
	{
	case ID_CONFIG_2_FN:
		out_buf = &config2_keycodes_map[FN_LAYER];
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <Read_KeyConfig_From_Flash+0x74>)
 8000c6e:	60fb      	str	r3, [r7, #12]
		break;
 8000c70:	e008      	b.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_2_ALT:
		out_buf = &config2_keycodes_map[FN_RALT_LAYER];
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <Read_KeyConfig_From_Flash+0x78>)
 8000c74:	60fb      	str	r3, [r7, #12]
		break;
 8000c76:	e005      	b.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_3_FN:
		out_buf = &config3_keycodes_map[FN_LAYER];
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <Read_KeyConfig_From_Flash+0x7c>)
 8000c7a:	60fb      	str	r3, [r7, #12]
		break;
 8000c7c:	e002      	b.n	8000c84 <Read_KeyConfig_From_Flash+0x44>
	case ID_CONFIG_3_ALT:
		out_buf = &config3_keycodes_map[FN_RALT_LAYER];
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <Read_KeyConfig_From_Flash+0x80>)
 8000c80:	60fb      	str	r3, [r7, #12]
		break;
 8000c82:	46c0      	nop			@ (mov r8, r8)
	}
    for (uint32_t i = 0; i < NUM_KEYS; i++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	e00c      	b.n	8000ca4 <Read_KeyConfig_From_Flash+0x64>
        (*out_buf)[i] = *(__IO uint8_t *)(flash_address + i);
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2d9      	uxtb	r1, r3
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	18d3      	adds	r3, r2, r3
 8000c9a:	1c0a      	adds	r2, r1, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_KEYS; i++) {
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ca8:	d9ef      	bls.n	8000c8a <Read_KeyConfig_From_Flash+0x4a>
    }
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b004      	add	sp, #16
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000230 	.word	0x20000230
 8000cb8:	20000270 	.word	0x20000270
 8000cbc:	200002f0 	.word	0x200002f0
 8000cc0:	20000330 	.word	0x20000330

08000cc4 <Get_Active_Keycode>:


uint8_t Get_Active_Keycode(uint8_t layer, uint8_t key_index)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	1c0a      	adds	r2, r1, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
    if (current_keycodes_map == NULL)
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <Get_Active_Keycode+0x48>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d108      	bne.n	8000cf0 <Get_Active_Keycode+0x2c>
    {
        return default_keycodes_map[layer][key_index];
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	490a      	ldr	r1, [pc, #40]	@ (8000d10 <Get_Active_Keycode+0x4c>)
 8000ce8:	0192      	lsls	r2, r2, #6
 8000cea:	188a      	adds	r2, r1, r2
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	e008      	b.n	8000d02 <Get_Active_Keycode+0x3e>
    }
    return (*current_keycodes_map)[layer][key_index];
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <Get_Active_Keycode+0x48>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0192      	lsls	r2, r2, #6
 8000cfe:	188a      	adds	r2, r1, r2
 8000d00:	5cd3      	ldrb	r3, [r2, r3]
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	2000074c 	.word	0x2000074c
 8000d10:	20000130 	.word	0x20000130

08000d14 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	2280      	movs	r2, #128	@ 0x80
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01c      	beq.n	8000d66 <HAL_GPIO_EXTI_Callback+0x52>
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dc26      	bgt.n	8000d82 <HAL_GPIO_EXTI_Callback+0x6e>
 8000d34:	2b80      	cmp	r3, #128	@ 0x80
 8000d36:	d004      	beq.n	8000d42 <HAL_GPIO_EXTI_Callback+0x2e>
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	0052      	lsls	r2, r2, #1
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_EXTI_Callback+0x36>
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
		current_keycodes_map = &config3_keycodes_map;
		break;
	}
}
 8000d40:	e01f      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0x6e>
		current_keycodes_map = &default_keycodes_map;
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x78>)
 8000d44:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d46:	601a      	str	r2, [r3, #0]
		break;
 8000d48:	e01b      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0x6e>
		Read_KeyConfig_From_Flash(CONFIG_2_FN_FLASH_ADDRESS, ID_CONFIG_2_FN);
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff76 	bl	8000c40 <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_2_ALT_FLASH_ADDRESS, ID_CONFIG_2_ALT);
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d56:	2104      	movs	r1, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff71 	bl	8000c40 <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config2_keycodes_map;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x78>)
 8000d60:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x88>)
 8000d62:	601a      	str	r2, [r3, #0]
		break;
 8000d64:	e00d      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0x6e>
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d68:	2105      	movs	r1, #5
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff68 	bl	8000c40 <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d72:	2106      	movs	r1, #6
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff63 	bl	8000c40 <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config3_keycodes_map;
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x78>)
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d7e:	601a      	str	r2, [r3, #0]
		break;
 8000d80:	46c0      	nop			@ (mov r8, r8)
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	2000074c 	.word	0x2000074c
 8000d90:	20000130 	.word	0x20000130
 8000d94:	0801e000 	.word	0x0801e000
 8000d98:	0801e800 	.word	0x0801e800
 8000d9c:	200001f0 	.word	0x200001f0
 8000da0:	0801f000 	.word	0x0801f000
 8000da4:	0801f800 	.word	0x0801f800
 8000da8:	200002b0 	.word	0x200002b0

08000dac <Key_Config_Init>:


void Key_Config_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(OS_PORT, OS1) == GPIO_PIN_RESET)
 8000db0:	2390      	movs	r3, #144	@ 0x90
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 ffd4 	bl	8002d64 <HAL_GPIO_ReadPin>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d102      	bne.n	8000dc6 <Key_Config_Init+0x1a>
	{
		current_keycodes_map = &default_keycodes_map;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <Key_Config_Init+0x7c>)
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e2c <Key_Config_Init+0x80>)
 8000dc4:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OS_PORT, OS2) == GPIO_PIN_RESET)
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	005a      	lsls	r2, r3, #1
 8000dca:	2390      	movs	r3, #144	@ 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	0011      	movs	r1, r2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 ffc7 	bl	8002d64 <HAL_GPIO_ReadPin>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d10c      	bne.n	8000df4 <Key_Config_Init+0x48>
	{
		Read_KeyConfig_From_Flash(CONFIG_2_FN_FLASH_ADDRESS, ID_CONFIG_2_FN);
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <Key_Config_Init+0x84>)
 8000ddc:	2103      	movs	r1, #3
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff ff2e 	bl	8000c40 <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_2_ALT_FLASH_ADDRESS, ID_CONFIG_2_ALT);
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <Key_Config_Init+0x88>)
 8000de6:	2104      	movs	r1, #4
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ff29 	bl	8000c40 <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config2_keycodes_map;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <Key_Config_Init+0x7c>)
 8000df0:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <Key_Config_Init+0x8c>)
 8000df2:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OS_PORT, OS3) == GPIO_PIN_RESET)
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	009a      	lsls	r2, r3, #2
 8000df8:	2390      	movs	r3, #144	@ 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 ffb0 	bl	8002d64 <HAL_GPIO_ReadPin>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d10c      	bne.n	8000e22 <Key_Config_Init+0x76>
	{
		Read_KeyConfig_From_Flash(CONFIG_3_FN_FLASH_ADDRESS, ID_CONFIG_3_FN);
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <Key_Config_Init+0x90>)
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff17 	bl	8000c40 <Read_KeyConfig_From_Flash>
		Read_KeyConfig_From_Flash(CONFIG_3_ALT_FLASH_ADDRESS, ID_CONFIG_3_ALT);
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <Key_Config_Init+0x94>)
 8000e14:	2106      	movs	r1, #6
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff12 	bl	8000c40 <Read_KeyConfig_From_Flash>
		current_keycodes_map = &config3_keycodes_map;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	@ (8000e28 <Key_Config_Init+0x7c>)
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <Key_Config_Init+0x98>)
 8000e20:	601a      	str	r2, [r3, #0]
	}
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000074c 	.word	0x2000074c
 8000e2c:	20000130 	.word	0x20000130
 8000e30:	0801e000 	.word	0x0801e000
 8000e34:	0801e800 	.word	0x0801e800
 8000e38:	200001f0 	.word	0x200001f0
 8000e3c:	0801f000 	.word	0x0801f000
 8000e40:	0801f800 	.word	0x0801f800
 8000e44:	200002b0 	.word	0x200002b0

08000e48 <hsl_to_rgb>:
  55, 56, 57, 58, 59, 60, 61, 62, 63
};


uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0004      	movs	r4, r0
 8000e50:	0008      	movs	r0, r1
 8000e52:	0011      	movs	r1, r2
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	1c22      	adds	r2, r4, #0
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	1dbb      	adds	r3, r7, #6
 8000e5c:	1c02      	adds	r2, r0, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	1d7b      	adds	r3, r7, #5
 8000e62:	1c0a      	adds	r2, r1, #0
 8000e64:	701a      	strb	r2, [r3, #0]
	if(l == 0) return 0;
 8000e66:	1d7b      	adds	r3, r7, #5
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <hsl_to_rgb+0x2a>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e119      	b.n	80010a6 <hsl_to_rgb+0x25e>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8000e72:	1d7b      	adds	r3, r7, #5
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	210c      	movs	r1, #12
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	801a      	strh	r2, [r3, #0]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8000e82:	1d7b      	adds	r3, r7, #5
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0c      	blt.n	8000ea6 <hsl_to_rgb+0x5e>
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1dba      	adds	r2, r7, #6
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	4353      	muls	r3, r2
 8000e9a:	121b      	asrs	r3, r3, #8
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	2313      	movs	r3, #19
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e00f      	b.n	8000ec6 <hsl_to_rgb+0x7e>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	1dba      	adds	r2, r7, #6
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	4353      	muls	r3, r2
 8000ebc:	121b      	asrs	r3, r3, #8
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	2313      	movs	r3, #19
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	701a      	strb	r2, [r3, #0]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	1c1a      	adds	r2, r3, #0
 8000ece:	1c13      	adds	r3, r2, #0
 8000ed0:	18db      	adds	r3, r3, r3
 8000ed2:	189b      	adds	r3, r3, r2
 8000ed4:	18db      	adds	r3, r3, r3
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	210a      	movs	r1, #10
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	801a      	strh	r2, [r3, #0]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	2014      	movs	r0, #20
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	701a      	strb	r2, [r3, #0]
	h1 = lo + 1;
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	200e      	movs	r0, #14
 8000ef8:	183b      	adds	r3, r7, r0
 8000efa:	801a      	strh	r2, [r3, #0]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	001a      	movs	r2, r3
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d10e      	bne.n	8000f2a <hsl_to_rgb+0xe2>
 8000f0c:	183b      	adds	r3, r7, r0
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	001a      	movs	r2, r3
 8000f14:	2313      	movs	r3, #19
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4353      	muls	r3, r2
 8000f1e:	121b      	asrs	r3, r3, #8
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	2312      	movs	r3, #18
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e011      	b.n	8000f4e <hsl_to_rgb+0x106>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	001a      	movs	r2, r3
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	2213      	movs	r2, #19
 8000f3c:	18ba      	adds	r2, r7, r2
 8000f3e:	7812      	ldrb	r2, [r2, #0]
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	4353      	muls	r3, r2
 8000f44:	121b      	asrs	r3, r3, #8
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	2312      	movs	r3, #18
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	701a      	strb	r2, [r3, #0]

	m = l - (c >> 1);
 8000f4e:	2313      	movs	r3, #19
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	085b      	lsrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	1d7a      	adds	r2, r7, #5
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	2311      	movs	r3, #17
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	701a      	strb	r2, [r3, #0]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8000f68:	230a      	movs	r3, #10
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d863      	bhi.n	8001040 <hsl_to_rgb+0x1f8>
 8000f78:	009a      	lsls	r2, r3, #2
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <hsl_to_rgb+0x268>)
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	469f      	mov	pc, r3
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8000f82:	2313      	movs	r3, #19
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	2317      	movs	r3, #23
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	2312      	movs	r3, #18
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	2316      	movs	r3, #22
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	2315      	movs	r3, #21
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e05e      	b.n	8001066 <hsl_to_rgb+0x21e>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8000fa8:	2312      	movs	r3, #18
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	2317      	movs	r3, #23
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	2313      	movs	r3, #19
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	2316      	movs	r3, #22
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	2315      	movs	r3, #21
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e04b      	b.n	8001066 <hsl_to_rgb+0x21e>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8000fce:	2317      	movs	r3, #23
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	2313      	movs	r3, #19
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	2316      	movs	r3, #22
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	2315      	movs	r3, #21
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e038      	b.n	8001066 <hsl_to_rgb+0x21e>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8000ff4:	2317      	movs	r3, #23
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	2316      	movs	r3, #22
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	2313      	movs	r3, #19
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	2315      	movs	r3, #21
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e025      	b.n	8001066 <hsl_to_rgb+0x21e>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800101a:	2312      	movs	r3, #18
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	2317      	movs	r3, #23
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	2316      	movs	r3, #22
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	2313      	movs	r3, #19
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	2315      	movs	r3, #21
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e012      	b.n	8001066 <hsl_to_rgb+0x21e>
	 default: r = c; g = 0; b = x; break; // M to R
 8001040:	2313      	movs	r3, #19
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	2317      	movs	r3, #23
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	2316      	movs	r3, #22
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	2312      	movs	r3, #18
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	2315      	movs	r3, #21
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	46c0      	nop			@ (mov r8, r8)
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001066:	2317      	movs	r3, #23
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	001a      	movs	r2, r3
 8001070:	2011      	movs	r0, #17
 8001072:	183b      	adds	r3, r7, r0
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	041a      	lsls	r2, r3, #16
 800107c:	2316      	movs	r3, #22
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	0019      	movs	r1, r3
 8001086:	183b      	adds	r3, r7, r0
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	18cb      	adds	r3, r1, r3
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	431a      	orrs	r2, r3
 8001092:	2315      	movs	r3, #21
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	0019      	movs	r1, r3
 800109c:	183b      	adds	r3, r7, r0
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	18cb      	adds	r3, r1, r3
 80010a4:	4313      	orrs	r3, r2
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b007      	add	sp, #28
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	0800b120 	.word	0x0800b120

080010b4 <effet_Rainbow>:


void effet_Rainbow(LEDS led_param)
{
 80010b4:	b084      	sub	sp, #16
 80010b6:	b590      	push	{r4, r7, lr}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	2418      	movs	r4, #24
 80010be:	193c      	adds	r4, r7, r4
 80010c0:	6020      	str	r0, [r4, #0]
 80010c2:	6061      	str	r1, [r4, #4]
 80010c4:	60a2      	str	r2, [r4, #8]
 80010c6:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	2212      	movs	r2, #18
 80010cc:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e02f      	b.n	8001136 <effet_Rainbow+0x82>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	1d7b      	adds	r3, r7, #5
 80010dc:	4921      	ldr	r1, [pc, #132]	@ (8001164 <effet_Rainbow+0xb0>)
 80010de:	5c8a      	ldrb	r2, [r1, r2]
 80010e0:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, led_param.brightness);
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	223f      	movs	r2, #63	@ 0x3f
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	1dba      	adds	r2, r7, #6
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	4353      	muls	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <effet_Rainbow+0xb4>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	2318      	movs	r3, #24
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	001a      	movs	r2, r3
 8001108:	21ff      	movs	r1, #255	@ 0xff
 800110a:	f7ff fe9d 	bl	8000e48 <hsl_to_rgb>
 800110e:	0003      	movs	r3, r0
 8001110:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
 8001116:	b2d9      	uxtb	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b2da      	uxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2dc      	uxtb	r4, r3
 8001122:	1d7b      	adds	r3, r7, #5
 8001124:	7818      	ldrb	r0, [r3, #0]
 8001126:	0023      	movs	r3, r4
 8001128:	f000 fbe4 	bl	80018f4 <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	3201      	adds	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b3f      	cmp	r3, #63	@ 0x3f
 800113c:	d9cb      	bls.n	80010d6 <effet_Rainbow+0x22>
	}

	// Write to LED
	++angle;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <effet_Rainbow+0xb4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3301      	adds	r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	b25a      	sxtb	r2, r3
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <effet_Rainbow+0xb4>)
 800114e:	701a      	strb	r2, [r3, #0]
	led_render();
 8001150:	f000 fc3a 	bl	80019c8 <led_render>
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bc90      	pop	{r4, r7}
 800115c:	bc08      	pop	{r3}
 800115e:	b004      	add	sp, #16
 8001160:	4718      	bx	r3
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	0800b0e0 	.word	0x0800b0e0
 8001168:	20000750 	.word	0x20000750

0800116c <effet_Breathing>:


void effet_Breathing(LEDS led_param)
{
 800116c:	b084      	sub	sp, #16
 800116e:	b5b0      	push	{r4, r5, r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	2518      	movs	r5, #24
 8001176:	197c      	adds	r4, r7, r5
 8001178:	6020      	str	r0, [r4, #0]
 800117a:	6061      	str	r1, [r4, #4]
 800117c:	60a2      	str	r2, [r4, #8]
 800117e:	60e3      	str	r3, [r4, #12]
    static uint8_t current_brightness = 0;
    static int8_t direction = 1;

    // Adjust brightness
    current_brightness += direction;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <effet_Breathing+0xa0>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <effet_Breathing+0xa4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <effet_Breathing+0xa0>)
 8001192:	701a      	strb	r2, [r3, #0]
    if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <effet_Breathing+0xa0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <effet_Breathing+0x3c>
 800119c:	197b      	adds	r3, r7, r5
 800119e:	785a      	ldrb	r2, [r3, #1]
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <effet_Breathing+0xa0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d108      	bne.n	80011ba <effet_Breathing+0x4e>
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <effet_Breathing+0xa4>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	425b      	negs	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <effet_Breathing+0xa4>)
 80011b8:	701a      	strb	r2, [r3, #0]

    // Set all LEDs to the same color with fading
    uint32_t rgb = hsl_to_rgb(led_param.hue, 255, current_brightness); // Static hue
 80011ba:	2318      	movs	r3, #24
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	7818      	ldrb	r0, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <effet_Breathing+0xa0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	21ff      	movs	r1, #255	@ 0xff
 80011c8:	f7ff fe3e 	bl	8000e48 <hsl_to_rgb>
 80011cc:	0003      	movs	r3, r0
 80011ce:	607b      	str	r3, [r7, #4]
    uint8_t r = (rgb >> 16) & 0xFF;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	0c1a      	lsrs	r2, r3, #16
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	701a      	strb	r2, [r3, #0]
    uint8_t g = (rgb >> 8) & 0xFF;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0a1a      	lsrs	r2, r3, #8
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	701a      	strb	r2, [r3, #0]
    uint8_t b = rgb & 0xFF;
 80011e0:	1c7b      	adds	r3, r7, #1
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	701a      	strb	r2, [r3, #0]

    led_set_all_RGB(r, g, b);
 80011e6:	1c7b      	adds	r3, r7, #1
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	1cfb      	adds	r3, r7, #3
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 fbc0 	bl	8001978 <led_set_all_RGB>
    led_render();
 80011f8:	f000 fbe6 	bl	80019c8 <led_render>
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bcb0      	pop	{r4, r5, r7}
 8001204:	bc08      	pop	{r3}
 8001206:	b004      	add	sp, #16
 8001208:	4718      	bx	r3
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000751 	.word	0x20000751
 8001210:	20000370 	.word	0x20000370

08001214 <effet_Rainbow_Breathing>:


void effet_Rainbow_Breathing(LEDS led_param)
{
 8001214:	b084      	sub	sp, #16
 8001216:	b5b0      	push	{r4, r5, r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	2518      	movs	r5, #24
 800121e:	197c      	adds	r4, r7, r5
 8001220:	6020      	str	r0, [r4, #0]
 8001222:	6061      	str	r1, [r4, #4]
 8001224:	60a2      	str	r2, [r4, #8]
 8001226:	60e3      	str	r3, [r4, #12]
	static int8_t angle = 0;
	const uint8_t angle_difference = 18;
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	2212      	movs	r2, #18
 800122c:	701a      	strb	r2, [r3, #0]

	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 800122e:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <effet_Rainbow_Breathing+0xe8>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <effet_Rainbow_Breathing+0xec>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <effet_Rainbow_Breathing+0xe8>)
 8001240:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <effet_Rainbow_Breathing+0xe8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <effet_Rainbow_Breathing+0x42>
 800124a:	197b      	adds	r3, r7, r5
 800124c:	785a      	ldrb	r2, [r3, #1]
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <effet_Rainbow_Breathing+0xe8>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d108      	bne.n	8001268 <effet_Rainbow_Breathing+0x54>
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <effet_Rainbow_Breathing+0xec>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	425b      	negs	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b25a      	sxtb	r2, r3
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <effet_Rainbow_Breathing+0xec>)
 8001266:	701a      	strb	r2, [r3, #0]


	for(uint8_t i = 0; i < LED_CNT; i++)
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e02e      	b.n	80012ce <effet_Rainbow_Breathing+0xba>
	{
		// Set correct LED position
		uint8_t led_index = led_map[i];
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	1d7b      	adds	r3, r7, #5
 8001276:	4923      	ldr	r1, [pc, #140]	@ (8001304 <effet_Rainbow_Breathing+0xf0>)
 8001278:	5c8a      	ldrb	r2, [r1, r2]
 800127a:	701a      	strb	r2, [r3, #0]
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + ((LED_CNT - 1 - i) * angle_difference), 255, current_brightness);
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	223f      	movs	r2, #63	@ 0x3f
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	1dba      	adds	r2, r7, #6
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	4353      	muls	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <effet_Rainbow_Breathing+0xf4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <effet_Rainbow_Breathing+0xe8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	001a      	movs	r2, r3
 80012a0:	21ff      	movs	r1, #255	@ 0xff
 80012a2:	f7ff fdd1 	bl	8000e48 <hsl_to_rgb>
 80012a6:	0003      	movs	r3, r0
 80012a8:	603b      	str	r3, [r7, #0]
		// Set color
		led_set_RGB(led_index, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	0c1b      	lsrs	r3, r3, #16
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2dc      	uxtb	r4, r3
 80012ba:	1d7b      	adds	r3, r7, #5
 80012bc:	7818      	ldrb	r0, [r3, #0]
 80012be:	0023      	movs	r3, r4
 80012c0:	f000 fb18 	bl	80018f4 <led_set_RGB>
	for(uint8_t i = 0; i < LED_CNT; i++)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	3201      	adds	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80012d4:	d9cc      	bls.n	8001270 <effet_Rainbow_Breathing+0x5c>
	}

	// Write to LED
	++angle;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <effet_Rainbow_Breathing+0xf4>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <effet_Rainbow_Breathing+0xf4>)
 80012e6:	701a      	strb	r2, [r3, #0]
	led_render();
 80012e8:	f000 fb6e 	bl	80019c8 <led_render>
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bcb0      	pop	{r4, r5, r7}
 80012f4:	bc08      	pop	{r3}
 80012f6:	b004      	add	sp, #16
 80012f8:	4718      	bx	r3
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	20000752 	.word	0x20000752
 8001300:	20000371 	.word	0x20000371
 8001304:	0800b0e0 	.word	0x0800b0e0
 8001308:	20000753 	.word	0x20000753

0800130c <effet_Key_Responsive>:


void effet_Key_Responsive(LEDS led_param)
{
 800130c:	b084      	sub	sp, #16
 800130e:	b5b0      	push	{r4, r5, r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	2520      	movs	r5, #32
 8001316:	197c      	adds	r4, r7, r5
 8001318:	6020      	str	r0, [r4, #0]
 800131a:	6061      	str	r1, [r4, #4]
 800131c:	60a2      	str	r2, [r4, #8]
 800131e:	60e3      	str	r3, [r4, #12]
	static uint8_t current_brightness = 0;
	static int8_t direction = 1;

	// Adjust brightness
	current_brightness += direction;
 8001320:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <effet_Key_Responsive+0xf0>)
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <effet_Key_Responsive+0xf4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <effet_Key_Responsive+0xf0>)
 8001332:	701a      	strb	r2, [r3, #0]
	if (current_brightness == MIN_BRIGHTNESS || current_brightness == /*MAX*/led_param.brightness) direction = -direction;
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <effet_Key_Responsive+0xf0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <effet_Key_Responsive+0x3c>
 800133c:	197b      	adds	r3, r7, r5
 800133e:	785a      	ldrb	r2, [r3, #1]
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <effet_Key_Responsive+0xf0>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d108      	bne.n	800135a <effet_Key_Responsive+0x4e>
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <effet_Key_Responsive+0xf4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	425b      	negs	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b25a      	sxtb	r2, r3
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <effet_Key_Responsive+0xf4>)
 8001358:	701a      	strb	r2, [r3, #0]

	// Set all LEDs to the same color with fading
	uint32_t rgb = hsl_to_rgb(led_param.hue, 255, led_param.brightness); // Static hue
 800135a:	2220      	movs	r2, #32
 800135c:	18bb      	adds	r3, r7, r2
 800135e:	7818      	ldrb	r0, [r3, #0]
 8001360:	18bb      	adds	r3, r7, r2
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	001a      	movs	r2, r3
 8001366:	21ff      	movs	r1, #255	@ 0xff
 8001368:	f7ff fd6e 	bl	8000e48 <hsl_to_rgb>
 800136c:	0003      	movs	r3, r0
 800136e:	60bb      	str	r3, [r7, #8]
	uint8_t r = (rgb >> 16) & 0xFF;
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0c1a      	lsrs	r2, r3, #16
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]
	uint8_t g = (rgb >> 8) & 0xFF;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	0a1a      	lsrs	r2, r3, #8
 800137c:	1dbb      	adds	r3, r7, #6
 800137e:	701a      	strb	r2, [r3, #0]
	uint8_t b = rgb & 0xFF;
 8001380:	1d7b      	adds	r3, r7, #5
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < LED_CNT; i++)
 8001386:	230f      	movs	r3, #15
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e027      	b.n	80013e0 <effet_Key_Responsive+0xd4>
	{
		uint8_t led_index = led_map[i];
 8001390:	200f      	movs	r0, #15
 8001392:	183b      	adds	r3, r7, r0
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	491a      	ldr	r1, [pc, #104]	@ (8001404 <effet_Key_Responsive+0xf8>)
 800139a:	5c8a      	ldrb	r2, [r1, r2]
 800139c:	701a      	strb	r2, [r3, #0]

		switch(leds.position[i])
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <effet_Key_Responsive+0xfc>)
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	78db      	ldrb	r3, [r3, #3]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10b      	bne.n	80013c4 <effet_Key_Responsive+0xb8>
		{
		case true:
			led_set_RGB(led_index, r, g, b);
 80013ac:	1d7b      	adds	r3, r7, #5
 80013ae:	781c      	ldrb	r4, [r3, #0]
 80013b0:	1dbb      	adds	r3, r7, #6
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	7819      	ldrb	r1, [r3, #0]
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	7818      	ldrb	r0, [r3, #0]
 80013bc:	0023      	movs	r3, r4
 80013be:	f000 fa99 	bl	80018f4 <led_set_RGB>
			break;
 80013c2:	e007      	b.n	80013d4 <effet_Key_Responsive+0xc8>
		case false:
			led_set_RGB(led_index, 0, 0, 0);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	7818      	ldrb	r0, [r3, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	f000 fa91 	bl	80018f4 <led_set_RGB>
			break;
 80013d2:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < LED_CNT; i++)
 80013d4:	210f      	movs	r1, #15
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	3201      	adds	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e8:	d9d2      	bls.n	8001390 <effet_Key_Responsive+0x84>
		}
	}

	led_render();
 80013ea:	f000 faed 	bl	80019c8 <led_render>
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bcb0      	pop	{r4, r5, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	b004      	add	sp, #16
 80013fa:	4718      	bx	r3
 80013fc:	20000754 	.word	0x20000754
 8001400:	20000372 	.word	0x20000372
 8001404:	0800b0e0 	.word	0x0800b0e0
 8001408:	20000624 	.word	0x20000624

0800140c <effet_StaticColor>:


void effet_StaticColor(LEDS led_param)
{
 800140c:	b084      	sub	sp, #16
 800140e:	b5b0      	push	{r4, r5, r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	2518      	movs	r5, #24
 8001416:	197c      	adds	r4, r7, r5
 8001418:	6020      	str	r0, [r4, #0]
 800141a:	6061      	str	r1, [r4, #4]
 800141c:	60a2      	str	r2, [r4, #8]
 800141e:	60e3      	str	r3, [r4, #12]
	uint32_t rgb_color = hsl_to_rgb(led_param.hue, 255, led_param.brightness);
 8001420:	002a      	movs	r2, r5
 8001422:	18bb      	adds	r3, r7, r2
 8001424:	7818      	ldrb	r0, [r3, #0]
 8001426:	18bb      	adds	r3, r7, r2
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	001a      	movs	r2, r3
 800142c:	21ff      	movs	r1, #255	@ 0xff
 800142e:	f7ff fd0b 	bl	8000e48 <hsl_to_rgb>
 8001432:	0003      	movs	r3, r0
 8001434:	607b      	str	r3, [r7, #4]
	led_set_all_RGB((rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b2db      	uxtb	r3, r3
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	0019      	movs	r1, r3
 8001448:	f000 fa96 	bl	8001978 <led_set_all_RGB>
	led_render();
 800144c:	f000 fabc 	bl	80019c8 <led_render>
}
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bcb0      	pop	{r4, r5, r7}
 8001458:	bc08      	pop	{r3}
 800145a:	b004      	add	sp, #16
 800145c:	4718      	bx	r3

0800145e <Main_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Main_Init(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
	piloteTimer14_initialise();
 8001462:	f000 fc91 	bl	8001d88 <piloteTimer14_initialise>
	serviceBaseDeTemps_initialise();
 8001466:	f7ff f90b 	bl	8000680 <serviceBaseDeTemps_initialise>
	InterfaceMatrice_Init();
 800146a:	f7ff fa11 	bl	8000890 <InterfaceMatrice_Init>
	InterfaceDebouncing_Init();
 800146e:	f7ff f9bf 	bl	80007f0 <InterfaceDebouncing_Init>
	ProcessusKeys_Init();
 8001472:	f7fe fed5 	bl	8000220 <ProcessusKeys_Init>
	ProcessusLEDS_init();
 8001476:	f7ff f889 	bl	800058c <ProcessusLEDS_init>
}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <doNothing>:

void doNothing(void){}
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148e:	f000 fdcf 	bl	8002030 <HAL_Init>

  /* USER CODE BEGIN Init */

  Main_Init();
 8001492:	f7ff ffe4 	bl	800145e <Main_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f810 	bl	80014ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f000 f925 	bl	80016e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800149e:	f000 f905 	bl	80016ac <MX_DMA_Init>
  MX_TIM2_Init();
 80014a2:	f000 f85f 	bl	8001564 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80014a6:	f009 f899 	bl	800a5dc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 80014aa:	f000 f8d9 	bl	8001660 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  Key_Config_Init();
 80014ae:	f7ff fc7d 	bl	8000dac <Key_Config_Init>
  piloteTimer14_permetLesInterruptions();
 80014b2:	f000 fc5d 	bl	8001d70 <piloteTimer14_permetLesInterruptions>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	e7fd      	b.n	80014b6 <main+0x2c>

080014ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b099      	sub	sp, #100	@ 0x64
 80014be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c0:	242c      	movs	r4, #44	@ 0x2c
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2334      	movs	r3, #52	@ 0x34
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f009 fd84 	bl	800afd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	231c      	movs	r3, #28
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	0018      	movs	r0, r3
 80014d6:	2310      	movs	r3, #16
 80014d8:	001a      	movs	r2, r3
 80014da:	2100      	movs	r1, #0
 80014dc:	f009 fd7c 	bl	800afd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	003b      	movs	r3, r7
 80014e2:	0018      	movs	r0, r3
 80014e4:	231c      	movs	r3, #28
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f009 fd75 	bl	800afd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	2220      	movs	r2, #32
 80014f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2201      	movs	r2, #1
 80014f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	193b      	adds	r3, r7, r4
 8001502:	0018      	movs	r0, r3
 8001504:	f003 faae 	bl	8004a64 <HAL_RCC_OscConfig>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800150c:	f000 f976 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	211c      	movs	r1, #28
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2203      	movs	r2, #3
 800151c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2101      	movs	r1, #1
 800152e:	0018      	movs	r0, r3
 8001530:	f003 fe1e 	bl	8005170 <HAL_RCC_ClockConfig>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001538:	f000 f960 	bl	80017fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800153c:	003b      	movs	r3, r7
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	0292      	lsls	r2, r2, #10
 8001542:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001544:	003b      	movs	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154a:	003b      	movs	r3, r7
 800154c:	0018      	movs	r0, r3
 800154e:	f003 ff5b 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001556:	f000 f951 	bl	80017fc <Error_Handler>
  }
}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b019      	add	sp, #100	@ 0x64
 8001560:	bd90      	pop	{r4, r7, pc}
	...

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	2328      	movs	r3, #40	@ 0x28
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	0018      	movs	r0, r3
 8001570:	2310      	movs	r3, #16
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f009 fd2f 	bl	800afd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	2320      	movs	r3, #32
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	0018      	movs	r0, r3
 8001580:	2308      	movs	r3, #8
 8001582:	001a      	movs	r2, r3
 8001584:	2100      	movs	r1, #0
 8001586:	f009 fd27 	bl	800afd8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	0018      	movs	r0, r3
 800158e:	231c      	movs	r3, #28
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f009 fd20 	bl	800afd8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <MX_TIM2_Init+0xf8>)
 800159a:	2280      	movs	r2, #128	@ 0x80
 800159c:	05d2      	lsls	r2, r2, #23
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015ae:	223b      	movs	r2, #59	@ 0x3b
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4b27      	ldr	r3, [pc, #156]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015c0:	0018      	movs	r0, r3
 80015c2:	f004 f81f 	bl	8005604 <HAL_TIM_Base_Init>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015ca:	f000 f917 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	2128      	movs	r1, #40	@ 0x28
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	0152      	lsls	r2, r2, #5
 80015d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d8:	187a      	adds	r2, r7, r1
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f004 fd54 	bl	800608c <HAL_TIM_ConfigClockSource>
 80015e4:	1e03      	subs	r3, r0, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80015e8:	f000 f908 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <MX_TIM2_Init+0xf8>)
 80015ee:	0018      	movs	r0, r3
 80015f0:	f004 f8aa 	bl	8005748 <HAL_TIM_PWM_Init>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015f8:	f000 f900 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2120      	movs	r1, #32
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160a:	187a      	adds	r2, r7, r1
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <MX_TIM2_Init+0xf8>)
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f005 fa4b 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800161a:	f000 f8ef 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2260      	movs	r2, #96	@ 0x60
 8001622:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	1d39      	adds	r1, r7, #4
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_TIM2_Init+0xf8>)
 800163a:	2200      	movs	r2, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f004 fc5f 	bl	8005f00 <HAL_TIM_PWM_ConfigChannel>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001646:	f000 f8d9 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800164a:	4b04      	ldr	r3, [pc, #16]	@ (800165c <MX_TIM2_Init+0xf8>)
 800164c:	0018      	movs	r0, r3
 800164e:	f000 fc31 	bl	8001eb4 <HAL_TIM_MspPostInit>

}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b00e      	add	sp, #56	@ 0x38
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	20000758 	.word	0x20000758

08001660 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_TIM14_Init+0x40>)
 8001666:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <MX_TIM14_Init+0x44>)
 8001668:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <MX_TIM14_Init+0x40>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_TIM14_Init+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 47999;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_TIM14_Init+0x40>)
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <MX_TIM14_Init+0x48>)
 800167a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_TIM14_Init+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_TIM14_Init+0x40>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <MX_TIM14_Init+0x40>)
 800168a:	0018      	movs	r0, r3
 800168c:	f003 ffba 	bl	8005604 <HAL_TIM_Base_Init>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001694:	f000 f8b2 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	200007a0 	.word	0x200007a0
 80016a4:	40002000 	.word	0x40002000
 80016a8:	0000bb7f 	.word	0x0000bb7f

080016ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_DMA_Init+0x38>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_DMA_Init+0x38>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_DMA_Init+0x38>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2101      	movs	r1, #1
 80016ce:	200b      	movs	r0, #11
 80016d0:	f000 fdbe 	bl	8002250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80016d4:	200b      	movs	r0, #11
 80016d6:	f000 fdd0 	bl	800227a <HAL_NVIC_EnableIRQ>

}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	240c      	movs	r4, #12
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	0018      	movs	r0, r3
 80016f4:	2314      	movs	r3, #20
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f009 fc6d 	bl	800afd8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <MX_GPIO_Init+0x108>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <MX_GPIO_Init+0x108>)
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0289      	lsls	r1, r1, #10
 8001708:	430a      	orrs	r2, r1
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <MX_GPIO_Init+0x108>)
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b35      	ldr	r3, [pc, #212]	@ (80017f0 <MX_GPIO_Init+0x108>)
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <MX_GPIO_Init+0x108>)
 8001720:	2180      	movs	r1, #128	@ 0x80
 8001722:	02c9      	lsls	r1, r1, #11
 8001724:	430a      	orrs	r2, r1
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <MX_GPIO_Init+0x108>)
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	02db      	lsls	r3, r3, #11
 8001730:	4013      	ands	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001736:	2390      	movs	r3, #144	@ 0x90
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	2200      	movs	r2, #0
 800173c:	211f      	movs	r1, #31
 800173e:	0018      	movs	r0, r3
 8001740:	f001 fb2d 	bl	8002d9e <HAL_GPIO_WritePin>
                          |ROW5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
 8001744:	193b      	adds	r3, r7, r4
 8001746:	221f      	movs	r2, #31
 8001748:	601a      	str	r2, [r3, #0]
                          |ROW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2201      	movs	r2, #1
 800174e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	193a      	adds	r2, r7, r4
 800175e:	2390      	movs	r3, #144	@ 0x90
 8001760:	05db      	lsls	r3, r3, #23
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f001 f985 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDS_STAT_Pin */
  GPIO_InitStruct.Pin = LEDS_STAT_Pin;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2240      	movs	r2, #64	@ 0x40
 800176e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2202      	movs	r2, #2
 8001774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2201      	movs	r2, #1
 8001786:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(LEDS_STAT_GPIO_Port, &GPIO_InitStruct);
 8001788:	193a      	adds	r2, r7, r4
 800178a:	2390      	movs	r3, #144	@ 0x90
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f001 f96f 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OS1_Pin OS2_Pin OS3_Pin */
  GPIO_InitStruct.Pin = OS1_Pin|OS2_Pin|OS3_Pin;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	22e0      	movs	r2, #224	@ 0xe0
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2284      	movs	r2, #132	@ 0x84
 80017a2:	0392      	lsls	r2, r2, #14
 80017a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	193a      	adds	r2, r7, r4
 80017ae:	2390      	movs	r3, #144	@ 0x90
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f001 f95d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL11_Pin
                           COL12_Pin COL13_Pin COL14_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin
                           COL9_Pin COL10_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL11_Pin
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <MX_GPIO_Init+0x10c>)
 80017be:	601a      	str	r2, [r3, #0]
                          |COL12_Pin|COL13_Pin|COL14_Pin|COL4_Pin
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin
                          |COL9_Pin|COL10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2201      	movs	r2, #1
 80017ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <MX_GPIO_Init+0x110>)
 80017d0:	0019      	movs	r1, r3
 80017d2:	0010      	movs	r0, r2
 80017d4:	f001 f94e 	bl	8002a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2102      	movs	r1, #2
 80017dc:	2007      	movs	r0, #7
 80017de:	f000 fd37 	bl	8002250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f000 fd49 	bl	800227a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b009      	add	sp, #36	@ 0x24
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	00003fff 	.word	0x00003fff
 80017f8:	48000400 	.word	0x48000400

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	e7fd      	b.n	8001804 <Error_Handler+0x8>

08001808 <Read_Col>:

uint16_t col_pin[NUM_COLS] = { COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,
							COL10, COL11, COL12, COL13, COL14 };

bool Read_Col(uint16_t col_index)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	801a      	strh	r2, [r3, #0]
	return HAL_GPIO_ReadPin(COL_PORT, col_pin[col_index]);
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <Read_Col+0x30>)
 800181a:	0052      	lsls	r2, r2, #1
 800181c:	5ad3      	ldrh	r3, [r2, r3]
 800181e:	4a07      	ldr	r2, [pc, #28]	@ (800183c <Read_Col+0x34>)
 8001820:	0019      	movs	r1, r3
 8001822:	0010      	movs	r0, r2
 8001824:	f001 fa9e 	bl	8002d64 <HAL_GPIO_ReadPin>
 8001828:	0003      	movs	r3, r0
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	4193      	sbcs	r3, r2
 800182e:	b2db      	uxtb	r3, r3
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000374 	.word	0x20000374
 800183c:	48000400 	.word	0x48000400

08001840 <Set_Row>:
#include "pilote_ROW.h"

uint16_t row_pin[NUM_ROWS] = { ROW1, ROW2, ROW3, ROW4, ROW5};

void Set_Row(uint16_t row_index)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	0002      	movs	r2, r0
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_SET);
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <Set_Row+0x2c>)
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	5ad1      	ldrh	r1, [r2, r3]
 8001856:	2390      	movs	r3, #144	@ 0x90
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	2201      	movs	r2, #1
 800185c:	0018      	movs	r0, r3
 800185e:	f001 fa9e 	bl	8002d9e <HAL_GPIO_WritePin>
}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	20000390 	.word	0x20000390

08001870 <Reset_Row>:

void Reset_Row(uint16_t row_index)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	1dbb      	adds	r3, r7, #6
 800187a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROW_PORT, row_pin[row_index], GPIO_PIN_RESET);
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	881a      	ldrh	r2, [r3, #0]
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <Reset_Row+0x2c>)
 8001882:	0052      	lsls	r2, r2, #1
 8001884:	5ad1      	ldrh	r1, [r2, r3]
 8001886:	2390      	movs	r3, #144	@ 0x90
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	2200      	movs	r2, #0
 800188c:	0018      	movs	r0, r3
 800188e:	f001 fa86 	bl	8002d9e <HAL_GPIO_WritePin>
}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000390 	.word	0x20000390

080018a0 <Set_All_Rows>:

void Set_All_Rows(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_ROWS; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e007      	b.n	80018bc <Set_All_Rows+0x1c>
	{
		Set_Row(i);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff ffc5 	bl	8001840 <Set_Row>
	for(int i = 0; i < NUM_ROWS; i++)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	ddf4      	ble.n	80018ac <Set_All_Rows+0xc>
	}
}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	46c0      	nop			@ (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <scale8>:
// LED write buffer
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	0002      	movs	r2, r0
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	1dbb      	adds	r3, r7, #6
 80018da:	1c0a      	adds	r2, r1, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  return ((uint16_t)x * scale) >> 8;
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	1dba      	adds	r2, r7, #6
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4353      	muls	r3, r2
 80018e8:	121b      	asrs	r3, r3, #8
 80018ea:	b2db      	uxtb	r3, r3
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <led_set_RGB>:


// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	0005      	movs	r5, r0
 80018fc:	000c      	movs	r4, r1
 80018fe:	0010      	movs	r0, r2
 8001900:	0019      	movs	r1, r3
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	1c2a      	adds	r2, r5, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	1dbb      	adds	r3, r7, #6
 800190a:	1c22      	adds	r2, r4, #0
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	1d7b      	adds	r3, r7, #5
 8001910:	1c02      	adds	r2, r0, #0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	1c0a      	adds	r2, r1, #0
 8001918:	701a      	strb	r2, [r3, #0]
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	0013      	movs	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	189c      	adds	r4, r3, r2
 8001924:	1d7b      	adds	r3, r7, #5
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	21b0      	movs	r1, #176	@ 0xb0
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff ffce 	bl	80018cc <scale8>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <led_set_RGB+0x80>)
 8001936:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	0013      	movs	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	189b      	adds	r3, r3, r2
 8001942:	3301      	adds	r3, #1
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <led_set_RGB+0x80>)
 8001946:	1db9      	adds	r1, r7, #6
 8001948:	7809      	ldrb	r1, [r1, #0]
 800194a:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	0013      	movs	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	189b      	adds	r3, r3, r2
 8001956:	1c9c      	adds	r4, r3, #2
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	21f0      	movs	r1, #240	@ 0xf0
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff ffb4 	bl	80018cc <scale8>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <led_set_RGB+0x80>)
 800196a:	551a      	strb	r2, [r3, r4]
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	2000082c 	.word	0x2000082c

08001978 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	0004      	movs	r4, r0
 8001980:	0008      	movs	r0, r1
 8001982:	0011      	movs	r1, r2
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	1c22      	adds	r2, r4, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	1c02      	adds	r2, r0, #0
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	1d7b      	adds	r3, r7, #5
 8001992:	1c0a      	adds	r2, r1, #0
 8001994:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < LED_CNT; ++i) led_set_RGB(i, r, g, b);
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e00d      	b.n	80019b8 <led_set_all_RGB+0x40>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b2d8      	uxtb	r0, r3
 80019a0:	1d7b      	adds	r3, r7, #5
 80019a2:	781c      	ldrb	r4, [r3, #0]
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	7819      	ldrb	r1, [r3, #0]
 80019ac:	0023      	movs	r3, r4
 80019ae:	f7ff ffa1 	bl	80018f4 <led_set_RGB>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80019bc:	d9ee      	bls.n	800199c <led_set_all_RGB+0x24>
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b005      	add	sp, #20
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <led_render>:

// Shuttle the data to the LEDs!
void led_render()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 80019ce:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <led_render+0x148>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <led_render+0x1a>
 80019d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <led_render+0x14c>)
 80019d8:	2221      	movs	r2, #33	@ 0x21
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d01a      	beq.n	8001a18 <led_render+0x50>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e009      	b.n	80019fe <led_render+0x36>
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001b18 <led_render+0x150>)
 80019f0:	2100      	movs	r1, #0
 80019f2:	54d1      	strb	r1, [r2, r3]
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	1dfa      	adds	r2, r7, #7
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	3201      	adds	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a04:	d9f1      	bls.n	80019ea <led_render+0x22>
    wr_buf_p = 0;
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <led_render+0x148>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <led_render+0x154>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	0018      	movs	r0, r3
 8001a12:	f004 f8a7 	bl	8005b64 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001a16:	e078      	b.n	8001b0a <led_render+0x142>
  }

  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	e069      	b.n	8001af2 <led_render+0x12a>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001a1e:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <led_render+0x158>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	001a      	movs	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dd01      	ble.n	8001a36 <led_render+0x6e>
 8001a32:	2126      	movs	r1, #38	@ 0x26
 8001a34:	e000      	b.n	8001a38 <led_render+0x70>
 8001a36:	2113      	movs	r1, #19
 8001a38:	4a37      	ldr	r2, [pc, #220]	@ (8001b18 <led_render+0x150>)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	1c0a      	adds	r2, r1, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <led_render+0x158>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	001a      	movs	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dd01      	ble.n	8001a5a <led_render+0x92>
 8001a56:	2126      	movs	r1, #38	@ 0x26
 8001a58:	e000      	b.n	8001a5c <led_render+0x94>
 8001a5a:	2113      	movs	r1, #19
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	4a2d      	ldr	r2, [pc, #180]	@ (8001b18 <led_render+0x150>)
 8001a62:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001a64:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <led_render+0x158>)
 8001a66:	789b      	ldrb	r3, [r3, #2]
 8001a68:	001a      	movs	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	0013      	movs	r3, r2
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dd01      	ble.n	8001a7c <led_render+0xb4>
 8001a78:	2126      	movs	r1, #38	@ 0x26
 8001a7a:	e000      	b.n	8001a7e <led_render+0xb6>
 8001a7c:	2113      	movs	r1, #19
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3310      	adds	r3, #16
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <led_render+0x150>)
 8001a84:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <led_render+0x158>)
 8001a88:	78db      	ldrb	r3, [r3, #3]
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd01      	ble.n	8001a9e <led_render+0xd6>
 8001a9a:	2126      	movs	r1, #38	@ 0x26
 8001a9c:	e000      	b.n	8001aa0 <led_render+0xd8>
 8001a9e:	2113      	movs	r1, #19
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <led_render+0x150>)
 8001aa6:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <led_render+0x158>)
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	001a      	movs	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd01      	ble.n	8001ac0 <led_render+0xf8>
 8001abc:	2126      	movs	r1, #38	@ 0x26
 8001abe:	e000      	b.n	8001ac2 <led_render+0xfa>
 8001ac0:	2113      	movs	r1, #19
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <led_render+0x150>)
 8001ac8:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <led_render+0x158>)
 8001acc:	795b      	ldrb	r3, [r3, #5]
 8001ace:	001a      	movs	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd01      	ble.n	8001ae2 <led_render+0x11a>
 8001ade:	2126      	movs	r1, #38	@ 0x26
 8001ae0:	e000      	b.n	8001ae4 <led_render+0x11c>
 8001ae2:	2113      	movs	r1, #19
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3328      	adds	r3, #40	@ 0x28
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <led_render+0x150>)
 8001aea:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d992      	bls.n	8001a1e <led_render+0x56>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <led_render+0x150>)
 8001afa:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <led_render+0x154>)
 8001afc:	2330      	movs	r3, #48	@ 0x30
 8001afe:	2100      	movs	r1, #0
 8001b00:	f003 fe7a 	bl	80057f8 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001b04:	4b02      	ldr	r3, [pc, #8]	@ (8001b10 <led_render+0x148>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000091c 	.word	0x2000091c
 8001b14:	200007e8 	.word	0x200007e8
 8001b18:	200008ec 	.word	0x200008ec
 8001b1c:	20000758 	.word	0x20000758
 8001b20:	2000082c 	.word	0x2000082c

08001b24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b32:	d853      	bhi.n	8001bdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e047      	b.n	8001bca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001b3a:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	0013      	movs	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	189b      	adds	r3, r3, r2
 8001b44:	4a37      	ldr	r2, [pc, #220]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	dd01      	ble.n	8001b5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001b58:	2126      	movs	r1, #38	@ 0x26
 8001b5a:	e000      	b.n	8001b5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001b5c:	2113      	movs	r1, #19
 8001b5e:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	18d3      	adds	r3, r2, r3
 8001b64:	1c0a      	adds	r2, r1, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	189b      	adds	r3, r3, r2
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	0013      	movs	r3, r2
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dd01      	ble.n	8001b8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8001b88:	2126      	movs	r1, #38	@ 0x26
 8001b8a:	e000      	b.n	8001b8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001b8c:	2113      	movs	r1, #19
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3308      	adds	r3, #8
 8001b92:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001b94:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	0013      	movs	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	189b      	adds	r3, r3, r2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd01      	ble.n	8001bba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001bb6:	2126      	movs	r1, #38	@ 0x26
 8001bb8:	e000      	b.n	8001bbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8001bba:	2113      	movs	r1, #19
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3310      	adds	r3, #16
 8001bc0:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d9b4      	bls.n	8001b3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bd8:	601a      	str	r2, [r3, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001bda:	e01d      	b.n	8001c18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
  } else if (wr_buf_p < LED_CNT + 2) {
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b41      	cmp	r3, #65	@ 0x41
 8001be2:	d819      	bhi.n	8001c18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001be4:	230b      	movs	r3, #11
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e00a      	b.n	8001c04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>
 8001bee:	200b      	movs	r0, #11
 8001bf0:	183b      	adds	r3, r7, r0
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x104>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	54d1      	strb	r1, [r2, r3]
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	183a      	adds	r2, r7, r0
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	3201      	adds	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	230b      	movs	r3, #11
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b17      	cmp	r3, #23
 8001c0c:	d9ef      	bls.n	8001bee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xca>
    wr_buf_p++;
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	4b02      	ldr	r3, [pc, #8]	@ (8001c20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>)
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000091c 	.word	0x2000091c
 8001c24:	2000082c 	.word	0x2000082c
 8001c28:	200008ec 	.word	0x200008ec

08001c2c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < LED_CNT) {
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c3a:	d852      	bhi.n	8001ce2 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    //Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e046      	b.n	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	0013      	movs	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	001a      	movs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dd01      	ble.n	8001c64 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001c60:	2126      	movs	r1, #38	@ 0x26
 8001c62:	e000      	b.n	8001c66 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001c64:	2113      	movs	r1, #19
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3318      	adds	r3, #24
 8001c6a:	4a35      	ldr	r2, [pc, #212]	@ (8001d40 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001c6c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001c6e:	4b32      	ldr	r3, [pc, #200]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	0013      	movs	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a30      	ldr	r2, [pc, #192]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	001a      	movs	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dd01      	ble.n	8001c92 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001c8e:	2126      	movs	r1, #38	@ 0x26
 8001c90:	e000      	b.n	8001c94 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001c92:	2113      	movs	r1, #19
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3320      	adds	r3, #32
 8001c98:	4a29      	ldr	r2, [pc, #164]	@ (8001d40 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001c9a:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001c9c:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	4a24      	ldr	r2, [pc, #144]	@ (8001d3c <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	001a      	movs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	2280      	movs	r2, #128	@ 0x80
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dd01      	ble.n	8001cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001cbc:	2126      	movs	r1, #38	@ 0x26
 8001cbe:	e000      	b.n	8001cc2 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001cc0:	2113      	movs	r1, #19
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3328      	adds	r3, #40	@ 0x28
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001cc8:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b07      	cmp	r3, #7
 8001cd4:	d9b5      	bls.n	8001c42 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001cde:	601a      	str	r2, [r3, #0]
  } else {

    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8001ce0:	e026      	b.n	8001d30 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
  } else if (wr_buf_p < LED_CNT + 2) {
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b41      	cmp	r3, #65	@ 0x41
 8001ce8:	d81a      	bhi.n	8001d20 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001cea:	230b      	movs	r3, #11
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2218      	movs	r2, #24
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e00a      	b.n	8001d0a <HAL_TIM_PWM_PulseFinishedCallback+0xde>
 8001cf4:	200b      	movs	r0, #11
 8001cf6:	183b      	adds	r3, r7, r0
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	54d1      	strb	r1, [r2, r3]
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	183a      	adds	r2, r7, r0
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	3201      	adds	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	230b      	movs	r3, #11
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d12:	d9ef      	bls.n	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
    ++wr_buf_p;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	e007      	b.n	8001d30 <HAL_TIM_PWM_PulseFinishedCallback+0x104>
    wr_buf_p = 0;
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f003 ff1a 	bl	8005b64 <HAL_TIM_PWM_Stop_DMA>
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000091c 	.word	0x2000091c
 8001d3c:	2000082c 	.word	0x2000082c
 8001d40:	200008ec 	.word	0x200008ec
 8001d44:	20000758 	.word	0x20000758

08001d48 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer14_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (htim == &htim14)
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d102      	bne.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  piloteTimer14_execute();
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4798      	blx	r3
  }
}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	200007a0 	.word	0x200007a0
 8001d6c:	20000920 	.word	0x20000920

08001d70 <piloteTimer14_permetLesInterruptions>:

void piloteTimer14_permetLesInterruptions(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim14);
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <piloteTimer14_permetLesInterruptions+0x14>)
 8001d76:	0018      	movs	r0, r3
 8001d78:	f003 fc94 	bl	80056a4 <HAL_TIM_Base_Start_IT>
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	200007a0 	.word	0x200007a0

08001d88 <piloteTimer14_initialise>:

void piloteTimer14_initialise(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  piloteTimer14_execute = doNothing;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <piloteTimer14_initialise+0x10>)
 8001d8e:	4a03      	ldr	r2, [pc, #12]	@ (8001d9c <piloteTimer14_initialise+0x14>)
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000920 	.word	0x20000920
 8001d9c:	08001481 	.word	0x08001481

08001da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_MspInit+0x44>)
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <HAL_MspInit+0x44>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	619a      	str	r2, [r3, #24]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <HAL_MspInit+0x44>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_MspInit+0x44>)
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <HAL_MspInit+0x44>)
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	0549      	lsls	r1, r1, #21
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	61da      	str	r2, [r3, #28]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_MspInit+0x44>)
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	055b      	lsls	r3, r3, #21
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	05db      	lsls	r3, r3, #23
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d133      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001dfe:	69da      	ldr	r2, [r3, #28]
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	61da      	str	r2, [r3, #28]
 8001e08:	4b26      	ldr	r3, [pc, #152]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e16:	4a25      	ldr	r2, [pc, #148]	@ (8001eac <HAL_TIM_Base_MspInit+0xc4>)
 8001e18:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e28:	2280      	movs	r2, #128	@ 0x80
 8001e2a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 fa33 	bl	80022b4 <HAL_DMA_Init>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001e52:	f7ff fcd3 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e62:	e01a      	b.n	8001e9a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM14)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_TIM_Base_MspInit+0xc8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d115      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	0049      	lsls	r1, r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	61da      	str	r2, [r3, #28]
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	2013      	movs	r0, #19
 8001e90:	f000 f9de 	bl	8002250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001e94:	2013      	movs	r0, #19
 8001e96:	f000 f9f0 	bl	800227a <HAL_NVIC_EnableIRQ>
}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	200007e8 	.word	0x200007e8
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40002000 	.word	0x40002000

08001eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	240c      	movs	r4, #12
 8001ebe:	193b      	adds	r3, r7, r4
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	2314      	movs	r3, #20
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f009 f886 	bl	800afd8 <memset>
  if(htim->Instance==TIM2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	05db      	lsls	r3, r3, #23
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d125      	bne.n	8001f24 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_TIM_MspPostInit+0x78>)
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_TIM_MspPostInit+0x78>)
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	0289      	lsls	r1, r1, #10
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_TIM_MspPostInit+0x78>)
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LEDS_OUT_Pin;
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0212      	lsls	r2, r2, #8
 8001efa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	0021      	movs	r1, r4
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2202      	movs	r2, #2
 8001f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2202      	movs	r2, #2
 8001f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LEDS_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f16:	187a      	adds	r2, r7, r1
 8001f18:	2390      	movs	r3, #144	@ 0x90
 8001f1a:	05db      	lsls	r3, r3, #23
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 fda8 	bl	8002a74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b009      	add	sp, #36	@ 0x24
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	e7fd      	b.n	8001f34 <NMI_Handler+0x4>

08001f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	e7fd      	b.n	8001f3c <HardFault_Handler+0x4>

08001f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f58:	f000 f8b2 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OS1_Pin);
 8001f66:	2080      	movs	r0, #128	@ 0x80
 8001f68:	f000 ff36 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OS2_Pin);
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 ff31 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OS3_Pin);
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 ff2c 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fa83 	bl	800249a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	200007e8 	.word	0x200007e8

08001fa0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <TIM14_IRQHandler+0x14>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f003 febc 	bl	8005d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001fac:	46c0      	nop			@ (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	200007a0 	.word	0x200007a0

08001fb8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <USB_IRQHandler+0x14>)
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f001 f840 	bl	8003044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001fc4:	46c0      	nop			@ (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	20000e50 	.word	0x20000e50

08001fd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fd4:	46c0      	nop			@ (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fe0:	f7ff fff6 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	@ (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800200a:	f008 ffed 	bl	800afe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200e:	f7ff fa3c 	bl	800148a <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   r0, =_estack
 8002014:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	2000059c 	.word	0x2000059c
  ldr r2, =_sidata
 8002020:	0800b1fc 	.word	0x0800b1fc
  ldr r2, =_sbss
 8002024:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8002028:	20001184 	.word	0x20001184

0800202c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_COMP_IRQHandler>
	...

08002030 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_Init+0x24>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_Init+0x24>)
 800203a:	2110      	movs	r1, #16
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 f809 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002046:	f7ff feab 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_InitTick+0x5c>)
 8002062:	681c      	ldr	r4, [r3, #0]
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_InitTick+0x60>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	0019      	movs	r1, r3
 800206a:	23fa      	movs	r3, #250	@ 0xfa
 800206c:	0098      	lsls	r0, r3, #2
 800206e:	f7fe f84b 	bl	8000108 <__udivsi3>
 8002072:	0003      	movs	r3, r0
 8002074:	0019      	movs	r1, r3
 8002076:	0020      	movs	r0, r4
 8002078:	f7fe f846 	bl	8000108 <__udivsi3>
 800207c:	0003      	movs	r3, r0
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f90b 	bl	800229a <HAL_SYSTICK_Config>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e00f      	b.n	80020ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d80b      	bhi.n	80020aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	2200      	movs	r2, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f8d8 	bl	8002250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_InitTick+0x64>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b003      	add	sp, #12
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	2000039c 	.word	0x2000039c
 80020b8:	200003a4 	.word	0x200003a4
 80020bc:	200003a0 	.word	0x200003a0

080020c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_IncTick+0x1c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <HAL_IncTick+0x20>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	18d2      	adds	r2, r2, r3
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_IncTick+0x20>)
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	200003a4 	.word	0x200003a4
 80020e0:	20000924 	.word	0x20000924

080020e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <HAL_GetTick+0x10>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	20000924 	.word	0x20000924

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	0002      	movs	r2, r0
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b7f      	cmp	r3, #127	@ 0x7f
 800210a:	d809      	bhi.n	8002120 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	001a      	movs	r2, r3
 8002112:	231f      	movs	r3, #31
 8002114:	401a      	ands	r2, r3
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <__NVIC_EnableIRQ+0x30>)
 8002118:	2101      	movs	r1, #1
 800211a:	4091      	lsls	r1, r2
 800211c:	000a      	movs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
  }
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	0002      	movs	r2, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002140:	d828      	bhi.n	8002194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002142:	4a2f      	ldr	r2, [pc, #188]	@ (8002200 <__NVIC_SetPriority+0xd4>)
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b25b      	sxtb	r3, r3
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	33c0      	adds	r3, #192	@ 0xc0
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	589b      	ldr	r3, [r3, r2]
 8002152:	1dfa      	adds	r2, r7, #7
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	0011      	movs	r1, r2
 8002158:	2203      	movs	r2, #3
 800215a:	400a      	ands	r2, r1
 800215c:	00d2      	lsls	r2, r2, #3
 800215e:	21ff      	movs	r1, #255	@ 0xff
 8002160:	4091      	lsls	r1, r2
 8002162:	000a      	movs	r2, r1
 8002164:	43d2      	mvns	r2, r2
 8002166:	401a      	ands	r2, r3
 8002168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	22ff      	movs	r2, #255	@ 0xff
 8002170:	401a      	ands	r2, r3
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	0018      	movs	r0, r3
 8002178:	2303      	movs	r3, #3
 800217a:	4003      	ands	r3, r0
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002180:	481f      	ldr	r0, [pc, #124]	@ (8002200 <__NVIC_SetPriority+0xd4>)
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b25b      	sxtb	r3, r3
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	430a      	orrs	r2, r1
 800218c:	33c0      	adds	r3, #192	@ 0xc0
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002192:	e031      	b.n	80021f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002194:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <__NVIC_SetPriority+0xd8>)
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	0019      	movs	r1, r3
 800219c:	230f      	movs	r3, #15
 800219e:	400b      	ands	r3, r1
 80021a0:	3b08      	subs	r3, #8
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3306      	adds	r3, #6
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	18d3      	adds	r3, r2, r3
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1dfa      	adds	r2, r7, #7
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	0011      	movs	r1, r2
 80021b4:	2203      	movs	r2, #3
 80021b6:	400a      	ands	r2, r1
 80021b8:	00d2      	lsls	r2, r2, #3
 80021ba:	21ff      	movs	r1, #255	@ 0xff
 80021bc:	4091      	lsls	r1, r2
 80021be:	000a      	movs	r2, r1
 80021c0:	43d2      	mvns	r2, r2
 80021c2:	401a      	ands	r2, r3
 80021c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	22ff      	movs	r2, #255	@ 0xff
 80021cc:	401a      	ands	r2, r3
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	0018      	movs	r0, r3
 80021d4:	2303      	movs	r3, #3
 80021d6:	4003      	ands	r3, r0
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021dc:	4809      	ldr	r0, [pc, #36]	@ (8002204 <__NVIC_SetPriority+0xd8>)
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	001c      	movs	r4, r3
 80021e4:	230f      	movs	r3, #15
 80021e6:	4023      	ands	r3, r4
 80021e8:	3b08      	subs	r3, #8
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	430a      	orrs	r2, r1
 80021ee:	3306      	adds	r3, #6
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	18c3      	adds	r3, r0, r3
 80021f4:	3304      	adds	r3, #4
 80021f6:	601a      	str	r2, [r3, #0]
}
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b003      	add	sp, #12
 80021fe:	bd90      	pop	{r4, r7, pc}
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	045b      	lsls	r3, r3, #17
 8002218:	429a      	cmp	r2, r3
 800221a:	d301      	bcc.n	8002220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221c:	2301      	movs	r3, #1
 800221e:	e010      	b.n	8002242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <SysTick_Config+0x44>)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	3a01      	subs	r2, #1
 8002226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002228:	2301      	movs	r3, #1
 800222a:	425b      	negs	r3, r3
 800222c:	2103      	movs	r1, #3
 800222e:	0018      	movs	r0, r3
 8002230:	f7ff ff7c 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <SysTick_Config+0x44>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <SysTick_Config+0x44>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b002      	add	sp, #8
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	210f      	movs	r1, #15
 800225c:	187b      	adds	r3, r7, r1
 800225e:	1c02      	adds	r2, r0, #0
 8002260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	187b      	adds	r3, r7, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	0011      	movs	r1, r2
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	0002      	movs	r2, r0
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ff33 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff ffaf 	bl	8002208 <SysTick_Config>
 80022aa:	0003      	movs	r3, r0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e036      	b.n	8002338 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2221      	movs	r2, #33	@ 0x21
 80022ce:	2102      	movs	r1, #2
 80022d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <HAL_DMA_Init+0x8c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0018      	movs	r0, r3
 800231c:	f000 f98c 	bl	8002638 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2221      	movs	r2, #33	@ 0x21
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2220      	movs	r2, #32
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	ffffc00f 	.word	0xffffc00f

08002344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Start_IT+0x24>
 8002364:	2302      	movs	r3, #2
 8002366:	e04f      	b.n	8002408 <HAL_DMA_Start_IT+0xc4>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	2101      	movs	r1, #1
 800236e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d13a      	bne.n	80023f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	@ 0x21
 8002380:	2102      	movs	r1, #2
 8002382:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	438a      	bics	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f91c 	bl	80025de <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	210e      	movs	r1, #14
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00f      	b.n	80023e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	210a      	movs	r1, #10
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2104      	movs	r1, #4
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023fa:	2317      	movs	r3, #23
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002402:	2317      	movs	r3, #23
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b006      	add	sp, #24
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	210f      	movs	r1, #15
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2221      	movs	r2, #33	@ 0x21
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d006      	beq.n	800243a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e028      	b.n	800248c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	210e      	movs	r1, #14
 8002446:	438a      	bics	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002462:	2101      	movs	r1, #1
 8002464:	4091      	lsls	r1, r2
 8002466:	000a      	movs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2221      	movs	r2, #33	@ 0x21
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	2100      	movs	r1, #0
 8002478:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	0010      	movs	r0, r2
 800248a:	4798      	blx	r3
    }
  }
  return status;
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	781b      	ldrb	r3, [r3, #0]
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2204      	movs	r2, #4
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	d024      	beq.n	800250c <HAL_DMA_IRQHandler+0x72>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2204      	movs	r2, #4
 80024c6:	4013      	ands	r3, r2
 80024c8:	d020      	beq.n	800250c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2220      	movs	r2, #32
 80024d2:	4013      	ands	r3, r2
 80024d4:	d107      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2104      	movs	r1, #4
 80024e2:	438a      	bics	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	2104      	movs	r1, #4
 80024f0:	4091      	lsls	r1, r2
 80024f2:	000a      	movs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d100      	bne.n	8002500 <HAL_DMA_IRQHandler+0x66>
 80024fe:	e06a      	b.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	0010      	movs	r0, r2
 8002508:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800250a:	e064      	b.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	2202      	movs	r2, #2
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	d02b      	beq.n	8002574 <HAL_DMA_IRQHandler+0xda>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2220      	movs	r2, #32
 800252c:	4013      	ands	r3, r2
 800252e:	d10b      	bne.n	8002548 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	210a      	movs	r1, #10
 800253c:	438a      	bics	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2221      	movs	r2, #33	@ 0x21
 8002544:	2101      	movs	r1, #1
 8002546:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002550:	2102      	movs	r1, #2
 8002552:	4091      	lsls	r1, r2
 8002554:	000a      	movs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d036      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	0010      	movs	r0, r2
 8002570:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002572:	e030      	b.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	2208      	movs	r2, #8
 800257a:	409a      	lsls	r2, r3
 800257c:	0013      	movs	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	d028      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2208      	movs	r2, #8
 8002588:	4013      	ands	r3, r2
 800258a:	d024      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	210e      	movs	r1, #14
 8002598:	438a      	bics	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a4:	2101      	movs	r1, #1
 80025a6:	4091      	lsls	r1, r2
 80025a8:	000a      	movs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2221      	movs	r2, #33	@ 0x21
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	0010      	movs	r0, r2
 80025d2:	4798      	blx	r3
    }
  }
}
 80025d4:	e7ff      	b.n	80025d6 <HAL_DMA_IRQHandler+0x13c>
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}

080025de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	4091      	lsls	r1, r2
 80025f8:	000a      	movs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b10      	cmp	r3, #16
 800260a:	d108      	bne.n	800261e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800261c:	e007      	b.n	800262e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	60da      	str	r2, [r3, #12]
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a08      	ldr	r2, [pc, #32]	@ (8002668 <DMA_CalcBaseAndBitshift+0x30>)
 8002646:	4694      	mov	ip, r2
 8002648:	4463      	add	r3, ip
 800264a:	2114      	movs	r1, #20
 800264c:	0018      	movs	r0, r3
 800264e:	f7fd fd5b 	bl	8000108 <__udivsi3>
 8002652:	0003      	movs	r3, r0
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a03      	ldr	r2, [pc, #12]	@ (800266c <DMA_CalcBaseAndBitshift+0x34>)
 800265e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	bffdfff8 	.word	0xbffdfff8
 800266c:	40020000 	.word	0x40020000

08002670 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800267e:	2317      	movs	r3, #23
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002686:	2316      	movs	r3, #22
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800268e:	2315      	movs	r3, #21
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002696:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_FLASH_Program+0x120>)
 8002698:	7e1b      	ldrb	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_FLASH_Program+0x32>
 800269e:	2302      	movs	r3, #2
 80026a0:	e072      	b.n	8002788 <HAL_FLASH_Program+0x118>
 80026a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_FLASH_Program+0x120>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026a8:	2317      	movs	r3, #23
 80026aa:	18fe      	adds	r6, r7, r3
 80026ac:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_FLASH_Program+0x124>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f8c4 	bl	800283c <FLASH_WaitForLastOperation>
 80026b4:	0003      	movs	r3, r0
 80026b6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80026b8:	2317      	movs	r3, #23
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d15c      	bne.n	800277c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d104      	bne.n	80026d2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80026c8:	2315      	movs	r3, #21
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e00b      	b.n	80026ea <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d104      	bne.n	80026e2 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80026d8:	2315      	movs	r3, #21
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e003      	b.n	80026ea <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80026e2:	2315      	movs	r3, #21
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2204      	movs	r2, #4
 80026e8:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80026ea:	2316      	movs	r3, #22
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e039      	b.n	8002768 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026f4:	2116      	movs	r1, #22
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	005a      	lsls	r2, r3, #1
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	18d0      	adds	r0, r2, r3
 8002700:	187b      	adds	r3, r7, r1
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	001a      	movs	r2, r3
 8002708:	3a20      	subs	r2, #32
 800270a:	2a00      	cmp	r2, #0
 800270c:	db03      	blt.n	8002716 <HAL_FLASH_Program+0xa6>
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	40d1      	lsrs	r1, r2
 8002712:	000c      	movs	r4, r1
 8002714:	e008      	b.n	8002728 <HAL_FLASH_Program+0xb8>
 8002716:	2220      	movs	r2, #32
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4091      	lsls	r1, r2
 800271e:	000a      	movs	r2, r1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000c      	movs	r4, r1
 8002726:	4314      	orrs	r4, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	40da      	lsrs	r2, r3
 800272c:	0015      	movs	r5, r2
 800272e:	b2a3      	uxth	r3, r4
 8002730:	0019      	movs	r1, r3
 8002732:	f000 f867 	bl	8002804 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002736:	2317      	movs	r3, #23
 8002738:	18fe      	adds	r6, r7, r3
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_FLASH_Program+0x124>)
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f87d 	bl	800283c <FLASH_WaitForLastOperation>
 8002742:	0003      	movs	r3, r0
 8002744:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002746:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <HAL_FLASH_Program+0x128>)
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <HAL_FLASH_Program+0x128>)
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002752:	2317      	movs	r3, #23
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10e      	bne.n	800277a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 800275c:	2116      	movs	r1, #22
 800275e:	187b      	adds	r3, r7, r1
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	187b      	adds	r3, r7, r1
 8002764:	3201      	adds	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	2316      	movs	r3, #22
 800276a:	18fa      	adds	r2, r7, r3
 800276c:	2315      	movs	r3, #21
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3bd      	bcc.n	80026f4 <HAL_FLASH_Program+0x84>
 8002778:	e000      	b.n	800277c <HAL_FLASH_Program+0x10c>
      {
        break;
 800277a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <HAL_FLASH_Program+0x120>)
 800277e:	2200      	movs	r2, #0
 8002780:	761a      	strb	r2, [r3, #24]

  return status;
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b007      	add	sp, #28
 800278e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002790:	20000928 	.word	0x20000928
 8002794:	0000c350 	.word	0x0000c350
 8002798:	40022000 	.word	0x40022000

0800279c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_FLASH_Unlock+0x40>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2280      	movs	r2, #128	@ 0x80
 80027ae:	4013      	ands	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <HAL_FLASH_Unlock+0x40>)
 80027b4:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <HAL_FLASH_Unlock+0x44>)
 80027b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <HAL_FLASH_Unlock+0x40>)
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <HAL_FLASH_Unlock+0x48>)
 80027bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <HAL_FLASH_Unlock+0x40>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	4013      	ands	r3, r2
 80027c6:	d002      	beq.n	80027ce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b002      	add	sp, #8
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	40022000 	.word	0x40022000
 80027e0:	45670123 	.word	0x45670123
 80027e4:	cdef89ab 	.word	0xcdef89ab

080027e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_FLASH_Lock+0x18>)
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_FLASH_Lock+0x18>)
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	430a      	orrs	r2, r1
 80027f6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40022000 	.word	0x40022000

08002804 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	000a      	movs	r2, r1
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <FLASH_Program_HalfWord+0x30>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002818:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <FLASH_Program_HalfWord+0x34>)
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <FLASH_Program_HalfWord+0x34>)
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	1cba      	adds	r2, r7, #2
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	801a      	strh	r2, [r3, #0]
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000928 	.word	0x20000928
 8002838:	40022000 	.word	0x40022000

0800283c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff fc4e 	bl	80020e4 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800284c:	e00f      	b.n	800286e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3301      	adds	r3, #1
 8002852:	d00c      	beq.n	800286e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <FLASH_WaitForLastOperation+0x2e>
 800285a:	f7ff fc43 	bl	80020e4 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d201      	bcs.n	800286e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e01f      	b.n	80028ae <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800286e:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <FLASH_WaitForLastOperation+0x7c>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	2b01      	cmp	r3, #1
 8002878:	d0e9      	beq.n	800284e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800287a:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <FLASH_WaitForLastOperation+0x7c>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	4013      	ands	r3, r2
 8002882:	2b20      	cmp	r3, #32
 8002884:	d102      	bne.n	800288c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002886:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <FLASH_WaitForLastOperation+0x7c>)
 8002888:	2220      	movs	r2, #32
 800288a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <FLASH_WaitForLastOperation+0x7c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	2b10      	cmp	r3, #16
 8002896:	d005      	beq.n	80028a4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <FLASH_WaitForLastOperation+0x7c>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2204      	movs	r2, #4
 800289e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d103      	bne.n	80028ac <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028a4:	f000 f80a 	bl	80028bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	40022000 	.word	0x40022000

080028bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <FLASH_SetErrorCode+0x58>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d109      	bne.n	80028e6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028d2:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <FLASH_SetErrorCode+0x5c>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2202      	movs	r2, #2
 80028d8:	431a      	orrs	r2, r3
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <FLASH_SetErrorCode+0x5c>)
 80028dc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2210      	movs	r2, #16
 80028e2:	4313      	orrs	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <FLASH_SetErrorCode+0x58>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2204      	movs	r2, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d109      	bne.n	8002906 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <FLASH_SetErrorCode+0x5c>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2201      	movs	r2, #1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <FLASH_SetErrorCode+0x5c>)
 80028fc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	4313      	orrs	r3, r2
 8002904:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002906:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <FLASH_SetErrorCode+0x58>)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
}  
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40022000 	.word	0x40022000
 8002918:	20000928 	.word	0x20000928

0800291c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002932:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_FLASHEx_Erase+0xe0>)
 8002934:	7e1b      	ldrb	r3, [r3, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_FLASHEx_Erase+0x22>
 800293a:	2302      	movs	r3, #2
 800293c:	e05a      	b.n	80029f4 <HAL_FLASHEx_Erase+0xd8>
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_FLASHEx_Erase+0xe0>)
 8002940:	2201      	movs	r2, #1
 8002942:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d116      	bne.n	800297a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800294c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a00 <HAL_FLASHEx_Erase+0xe4>)
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff ff74 	bl	800283c <FLASH_WaitForLastOperation>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d147      	bne.n	80029e8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002958:	f000 f856 	bl	8002a08 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800295c:	230f      	movs	r3, #15
 800295e:	18fc      	adds	r4, r7, r3
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <HAL_FLASHEx_Erase+0xe4>)
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff ff6a 	bl	800283c <FLASH_WaitForLastOperation>
 8002968:	0003      	movs	r3, r0
 800296a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_FLASHEx_Erase+0xe8>)
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_FLASHEx_Erase+0xe8>)
 8002972:	2104      	movs	r1, #4
 8002974:	438a      	bics	r2, r1
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	e036      	b.n	80029e8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800297a:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <HAL_FLASHEx_Erase+0xe4>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <FLASH_WaitForLastOperation>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d130      	bne.n	80029e8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2201      	movs	r2, #1
 800298a:	4252      	negs	r2, r2
 800298c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e01f      	b.n	80029d6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f84d 	bl	8002a38 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800299e:	250f      	movs	r5, #15
 80029a0:	197c      	adds	r4, r7, r5
 80029a2:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <HAL_FLASHEx_Erase+0xe4>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ff49 	bl	800283c <FLASH_WaitForLastOperation>
 80029aa:	0003      	movs	r3, r0
 80029ac:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_FLASHEx_Erase+0xe8>)
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_FLASHEx_Erase+0xe8>)
 80029b4:	2102      	movs	r1, #2
 80029b6:	438a      	bics	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80029ba:	197b      	adds	r3, r7, r5
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	601a      	str	r2, [r3, #0]
            break;
 80029c8:	e00e      	b.n	80029e8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	4694      	mov	ip, r2
 80029d2:	4463      	add	r3, ip
 80029d4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	02da      	lsls	r2, r3, #11
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	18d3      	adds	r3, r2, r3
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3d6      	bcc.n	8002996 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <HAL_FLASHEx_Erase+0xe0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	761a      	strb	r2, [r3, #24]

  return status;
 80029ee:	230f      	movs	r3, #15
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}
 80029fc:	20000928 	.word	0x20000928
 8002a00:	0000c350 	.word	0x0000c350
 8002a04:	40022000 	.word	0x40022000

08002a08 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <FLASH_MassErase+0x28>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <FLASH_MassErase+0x2c>)
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <FLASH_MassErase+0x2c>)
 8002a18:	2104      	movs	r1, #4
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <FLASH_MassErase+0x2c>)
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <FLASH_MassErase+0x2c>)
 8002a24:	2140      	movs	r1, #64	@ 0x40
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000928 	.word	0x20000928
 8002a34:	40022000 	.word	0x40022000

08002a38 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a40:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <FLASH_PageErase+0x34>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <FLASH_PageErase+0x38>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <FLASH_PageErase+0x38>)
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a52:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <FLASH_PageErase+0x38>)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <FLASH_PageErase+0x38>)
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <FLASH_PageErase+0x38>)
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	430a      	orrs	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000928 	.word	0x20000928
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e155      	b.n	8002d30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4091      	lsls	r1, r2
 8002a8e:	000a      	movs	r2, r1
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d100      	bne.n	8002a9c <HAL_GPIO_Init+0x28>
 8002a9a:	e146      	b.n	8002d2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d005      	beq.n	8002ab4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d130      	bne.n	8002b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aea:	2201      	movs	r2, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	2201      	movs	r2, #1
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d017      	beq.n	8002b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d123      	bne.n	8002ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	58d3      	ldr	r3, [r2, r3]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2207      	movs	r2, #7
 8002b70:	4013      	ands	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2107      	movs	r1, #7
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	6939      	ldr	r1, [r7, #16]
 8002ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	23c0      	movs	r3, #192	@ 0xc0
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_GPIO_Init+0x174>
 8002be6:	e0a0      	b.n	8002d2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be8:	4b57      	ldr	r3, [pc, #348]	@ (8002d48 <HAL_GPIO_Init+0x2d4>)
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b56      	ldr	r3, [pc, #344]	@ (8002d48 <HAL_GPIO_Init+0x2d4>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	4b54      	ldr	r3, [pc, #336]	@ (8002d48 <HAL_GPIO_Init+0x2d4>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c00:	4a52      	ldr	r2, [pc, #328]	@ (8002d4c <HAL_GPIO_Init+0x2d8>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	589b      	ldr	r3, [r3, r2]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	2390      	movs	r3, #144	@ 0x90
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x1ee>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a47      	ldr	r2, [pc, #284]	@ (8002d50 <HAL_GPIO_Init+0x2dc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x1ea>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a46      	ldr	r2, [pc, #280]	@ (8002d54 <HAL_GPIO_Init+0x2e0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x1e6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a45      	ldr	r2, [pc, #276]	@ (8002d58 <HAL_GPIO_Init+0x2e4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x1e2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a44      	ldr	r2, [pc, #272]	@ (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x1de>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x1f0>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x1f0>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x1f0>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x1f0>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x1f0>
 8002c62:	2300      	movs	r3, #0
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	2103      	movs	r1, #3
 8002c68:	400a      	ands	r2, r1
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c74:	4935      	ldr	r1, [pc, #212]	@ (8002d4c <HAL_GPIO_Init+0x2d8>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	035b      	lsls	r3, r3, #13
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	2380      	movs	r3, #128	@ 0x80
 8002cec:	029b      	lsls	r3, r3, #10
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d00:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	025b      	lsls	r3, r3, #9
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	40da      	lsrs	r2, r3
 8002d38:	1e13      	subs	r3, r2, #0
 8002d3a:	d000      	beq.n	8002d3e <HAL_GPIO_Init+0x2ca>
 8002d3c:	e6a2      	b.n	8002a84 <HAL_GPIO_Init+0x10>
  } 
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b006      	add	sp, #24
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	48000400 	.word	0x48000400
 8002d54:	48000800 	.word	0x48000800
 8002d58:	48000c00 	.word	0x48000c00
 8002d5c:	48001000 	.word	0x48001000
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	000a      	movs	r2, r1
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	1cba      	adds	r2, r7, #2
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7e:	230f      	movs	r3, #15
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e003      	b.n	8002d90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d90:	230f      	movs	r3, #15
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	781b      	ldrb	r3, [r3, #0]
  }
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	0008      	movs	r0, r1
 8002da8:	0011      	movs	r1, r2
 8002daa:	1cbb      	adds	r3, r7, #2
 8002dac:	1c02      	adds	r2, r0, #0
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	1c7b      	adds	r3, r7, #1
 8002db2:	1c0a      	adds	r2, r1, #0
 8002db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db6:	1c7b      	adds	r3, r7, #1
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dbe:	1cbb      	adds	r3, r7, #2
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc6:	e003      	b.n	8002dd0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc8:	1cbb      	adds	r3, r7, #2
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	0002      	movs	r2, r0
 8002de0:	1dbb      	adds	r3, r7, #6
 8002de2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	1dba      	adds	r2, r7, #6
 8002dea:	8812      	ldrh	r2, [r2, #0]
 8002dec:	4013      	ands	r3, r2
 8002dee:	d008      	beq.n	8002e02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002df2:	1dba      	adds	r2, r7, #6
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd ff89 	bl	8000d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0e4      	b.n	8002fec <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a73      	ldr	r2, [pc, #460]	@ (8002ff4 <HAL_PCD_Init+0x1e4>)
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	23a4      	movs	r3, #164	@ 0xa4
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	2100      	movs	r1, #0
 8002e36:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f007 fd92 	bl	800a964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff4 <HAL_PCD_Init+0x1e4>)
 8002e44:	2103      	movs	r1, #3
 8002e46:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f003 feb1 	bl	8006bb4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e047      	b.n	8002eec <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e5c:	200f      	movs	r0, #15
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	0013      	movs	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	18cb      	adds	r3, r1, r3
 8002e6e:	3311      	adds	r3, #17
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e74:	183b      	adds	r3, r7, r0
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	18cb      	adds	r3, r1, r3
 8002e84:	3310      	adds	r3, #16
 8002e86:	183a      	adds	r2, r7, r0
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	0013      	movs	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	18cb      	adds	r3, r1, r3
 8002e9c:	3313      	adds	r3, #19
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ea2:	183b      	adds	r3, r7, r0
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	189b      	adds	r3, r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	18cb      	adds	r3, r1, r3
 8002eb2:	3320      	adds	r3, #32
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	18cb      	adds	r3, r1, r3
 8002ec8:	3324      	adds	r3, #36	@ 0x24
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	183b      	adds	r3, r7, r0
 8002ee8:	3201      	adds	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	187a      	adds	r2, r7, r1
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3b0      	bcc.n	8002e5c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e056      	b.n	8002fb0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f02:	240f      	movs	r4, #15
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	2352      	movs	r3, #82	@ 0x52
 8002f0c:	33ff      	adds	r3, #255	@ 0xff
 8002f0e:	0019      	movs	r1, r3
 8002f10:	0013      	movs	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	189b      	adds	r3, r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	18c3      	adds	r3, r0, r3
 8002f1a:	185b      	adds	r3, r3, r1
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	23a8      	movs	r3, #168	@ 0xa8
 8002f28:	0059      	lsls	r1, r3, #1
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	18c3      	adds	r3, r0, r3
 8002f34:	185b      	adds	r3, r3, r1
 8002f36:	193a      	adds	r2, r7, r4
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	2354      	movs	r3, #84	@ 0x54
 8002f44:	33ff      	adds	r3, #255	@ 0xff
 8002f46:	0019      	movs	r1, r3
 8002f48:	0013      	movs	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	18c3      	adds	r3, r0, r3
 8002f52:	185b      	adds	r3, r3, r1
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	23b0      	movs	r3, #176	@ 0xb0
 8002f60:	0059      	lsls	r1, r3, #1
 8002f62:	0013      	movs	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	18c3      	adds	r3, r0, r3
 8002f6c:	185b      	adds	r3, r3, r1
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	23b2      	movs	r3, #178	@ 0xb2
 8002f7a:	0059      	lsls	r1, r3, #1
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	18c3      	adds	r3, r0, r3
 8002f86:	185b      	adds	r3, r3, r1
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	23b4      	movs	r3, #180	@ 0xb4
 8002f94:	0059      	lsls	r1, r3, #1
 8002f96:	0013      	movs	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	18c3      	adds	r3, r0, r3
 8002fa0:	185b      	adds	r3, r3, r1
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	3201      	adds	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	18ba      	adds	r2, r7, r2
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3a1      	bcc.n	8002f02 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	f003 fe0e 	bl	8006be8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <HAL_PCD_Init+0x1e4>)
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7a9b      	ldrb	r3, [r3, #10]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d103      	bne.n	8002fea <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f001 fd07 	bl	80049f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b005      	add	sp, #20
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	00000291 	.word	0x00000291

08002ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	23a4      	movs	r3, #164	@ 0xa4
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_PCD_Start+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e014      	b.n	800303a <HAL_PCD_Start+0x42>
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	23a4      	movs	r3, #164	@ 0xa4
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	2101      	movs	r1, #1
 8003018:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f003 fdb2 	bl	8006b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0018      	movs	r0, r3
 800302a:	f005 fda7 	bl	8008b7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	23a4      	movs	r3, #164	@ 0xa4
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	2100      	movs	r1, #0
 8003036:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b002      	add	sp, #8
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0018      	movs	r0, r3
 8003052:	f005 fda9 	bl	8008ba8 <USB_ReadInterrupts>
 8003056:	0003      	movs	r3, r0
 8003058:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	4013      	ands	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f000 fb48 	bl	80036fc <PCD_EP_ISR_Handler>

    return;
 800306c:	e11d      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4013      	ands	r3, r2
 8003076:	d015      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2244      	movs	r2, #68	@ 0x44
 800307e:	5a9b      	ldrh	r3, [r3, r2]
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	498a      	ldr	r1, [pc, #552]	@ (80032b0 <HAL_PCD_IRQHandler+0x26c>)
 8003088:	400a      	ands	r2, r1
 800308a:	b291      	uxth	r1, r2
 800308c:	2244      	movs	r2, #68	@ 0x44
 800308e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f007 fcf1 	bl	800aa7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2100      	movs	r1, #0
 800309c:	0018      	movs	r0, r3
 800309e:	f000 f915 	bl	80032cc <HAL_PCD_SetAddress>

    return;
 80030a2:	e102      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	01db      	lsls	r3, r3, #7
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00c      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2244      	movs	r2, #68	@ 0x44
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	497d      	ldr	r1, [pc, #500]	@ (80032b4 <HAL_PCD_IRQHandler+0x270>)
 80030be:	400a      	ands	r2, r1
 80030c0:	b291      	uxth	r1, r2
 80030c2:	2244      	movs	r2, #68	@ 0x44
 80030c4:	5299      	strh	r1, [r3, r2]

    return;
 80030c6:	e0f0      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00c      	beq.n	80030ec <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2244      	movs	r2, #68	@ 0x44
 80030d8:	5a9b      	ldrh	r3, [r3, r2]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4975      	ldr	r1, [pc, #468]	@ (80032b8 <HAL_PCD_IRQHandler+0x274>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	b291      	uxth	r1, r2
 80030e6:	2244      	movs	r2, #68	@ 0x44
 80030e8:	5299      	strh	r1, [r3, r2]

    return;
 80030ea:	e0de      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	015b      	lsls	r3, r3, #5
 80030f2:	4013      	ands	r3, r2
 80030f4:	d038      	beq.n	8003168 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2240      	movs	r2, #64	@ 0x40
 80030fc:	5a9b      	ldrh	r3, [r3, r2]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2104      	movs	r1, #4
 8003106:	438a      	bics	r2, r1
 8003108:	b291      	uxth	r1, r2
 800310a:	2240      	movs	r2, #64	@ 0x40
 800310c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	5a9b      	ldrh	r3, [r3, r2]
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2108      	movs	r1, #8
 800311e:	438a      	bics	r2, r1
 8003120:	b291      	uxth	r1, r2
 8003122:	2240      	movs	r2, #64	@ 0x40
 8003124:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	23b2      	movs	r3, #178	@ 0xb2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d109      	bne.n	8003146 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	23b2      	movs	r3, #178	@ 0xb2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	2100      	movs	r1, #0
 800313a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2100      	movs	r1, #0
 8003140:	0018      	movs	r0, r3
 8003142:	f001 fc83 	bl	8004a4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f007 fcd7 	bl	800aafc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2244      	movs	r2, #68	@ 0x44
 8003154:	5a9b      	ldrh	r3, [r3, r2]
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4957      	ldr	r1, [pc, #348]	@ (80032bc <HAL_PCD_IRQHandler+0x278>)
 800315e:	400a      	ands	r2, r1
 8003160:	b291      	uxth	r1, r2
 8003162:	2244      	movs	r2, #68	@ 0x44
 8003164:	5299      	strh	r1, [r3, r2]

    return;
 8003166:	e0a0      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4013      	ands	r3, r2
 8003170:	d028      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	5a9b      	ldrh	r3, [r3, r2]
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2108      	movs	r1, #8
 8003182:	430a      	orrs	r2, r1
 8003184:	b291      	uxth	r1, r2
 8003186:	2240      	movs	r2, #64	@ 0x40
 8003188:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2244      	movs	r2, #68	@ 0x44
 8003190:	5a9b      	ldrh	r3, [r3, r2]
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4949      	ldr	r1, [pc, #292]	@ (80032c0 <HAL_PCD_IRQHandler+0x27c>)
 800319a:	400a      	ands	r2, r1
 800319c:	b291      	uxth	r1, r2
 800319e:	2244      	movs	r2, #68	@ 0x44
 80031a0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	5a9b      	ldrh	r3, [r3, r2]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2104      	movs	r1, #4
 80031b2:	430a      	orrs	r2, r1
 80031b4:	b291      	uxth	r1, r2
 80031b6:	2240      	movs	r2, #64	@ 0x40
 80031b8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f007 fc81 	bl	800aac4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031c2:	e072      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2280      	movs	r2, #128	@ 0x80
 80031c8:	4013      	ands	r3, r2
 80031ca:	d046      	beq.n	800325a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2244      	movs	r2, #68	@ 0x44
 80031d2:	5a9b      	ldrh	r3, [r3, r2]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2180      	movs	r1, #128	@ 0x80
 80031dc:	438a      	bics	r2, r1
 80031de:	b291      	uxth	r1, r2
 80031e0:	2244      	movs	r2, #68	@ 0x44
 80031e2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	23b2      	movs	r3, #178	@ 0xb2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d12f      	bne.n	8003250 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2240      	movs	r2, #64	@ 0x40
 80031f6:	5a9b      	ldrh	r3, [r3, r2]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2104      	movs	r1, #4
 8003200:	430a      	orrs	r2, r1
 8003202:	b291      	uxth	r1, r2
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2240      	movs	r2, #64	@ 0x40
 800320e:	5a9b      	ldrh	r3, [r3, r2]
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2108      	movs	r1, #8
 8003218:	430a      	orrs	r2, r1
 800321a:	b291      	uxth	r1, r2
 800321c:	2240      	movs	r2, #64	@ 0x40
 800321e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23b2      	movs	r3, #178	@ 0xb2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	2101      	movs	r1, #1
 8003228:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2254      	movs	r2, #84	@ 0x54
 8003230:	5a9b      	ldrh	r3, [r3, r2]
 8003232:	b29b      	uxth	r3, r3
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	223c      	movs	r2, #60	@ 0x3c
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	23b3      	movs	r3, #179	@ 0xb3
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2101      	movs	r1, #1
 8003248:	0018      	movs	r0, r3
 800324a:	f001 fbff 	bl	8004a4c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800324e:	e02c      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f007 fc36 	bl	800aac4 <HAL_PCD_SuspendCallback>
    return;
 8003258:	e027      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4013      	ands	r3, r2
 8003262:	d010      	beq.n	8003286 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2244      	movs	r2, #68	@ 0x44
 800326a:	5a9b      	ldrh	r3, [r3, r2]
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4914      	ldr	r1, [pc, #80]	@ (80032c4 <HAL_PCD_IRQHandler+0x280>)
 8003274:	400a      	ands	r2, r1
 8003276:	b291      	uxth	r1, r2
 8003278:	2244      	movs	r2, #68	@ 0x44
 800327a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f007 fbec 	bl	800aa5c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003284:	e011      	b.n	80032aa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d00c      	beq.n	80032aa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2244      	movs	r2, #68	@ 0x44
 8003296:	5a9b      	ldrh	r3, [r3, r2]
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	490a      	ldr	r1, [pc, #40]	@ (80032c8 <HAL_PCD_IRQHandler+0x284>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	b291      	uxth	r1, r2
 80032a4:	2244      	movs	r2, #68	@ 0x44
 80032a6:	5299      	strh	r1, [r3, r2]

    return;
 80032a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b004      	add	sp, #16
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	fffffbff 	.word	0xfffffbff
 80032b4:	ffffbfff 	.word	0xffffbfff
 80032b8:	ffffdfff 	.word	0xffffdfff
 80032bc:	ffffefff 	.word	0xffffefff
 80032c0:	fffff7ff 	.word	0xfffff7ff
 80032c4:	fffffdff 	.word	0xfffffdff
 80032c8:	fffffeff 	.word	0xfffffeff

080032cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	000a      	movs	r2, r1
 80032d6:	1cfb      	adds	r3, r7, #3
 80032d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	23a4      	movs	r3, #164	@ 0xa4
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_SetAddress+0x1e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e016      	b.n	8003318 <HAL_PCD_SetAddress+0x4c>
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	23a4      	movs	r3, #164	@ 0xa4
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	2101      	movs	r1, #1
 80032f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1cfa      	adds	r2, r7, #3
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	1cfb      	adds	r3, r7, #3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f005 fc24 	bl	8008b54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	23a4      	movs	r3, #164	@ 0xa4
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	2100      	movs	r1, #0
 8003314:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	000c      	movs	r4, r1
 800332a:	0010      	movs	r0, r2
 800332c:	0019      	movs	r1, r3
 800332e:	1cfb      	adds	r3, r7, #3
 8003330:	1c22      	adds	r2, r4, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	003b      	movs	r3, r7
 8003336:	1c02      	adds	r2, r0, #0
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	1cbb      	adds	r3, r7, #2
 800333c:	1c0a      	adds	r2, r1, #0
 800333e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003340:	230b      	movs	r3, #11
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003348:	1cfb      	adds	r3, r7, #3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b25b      	sxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	da0f      	bge.n	8003372 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003352:	1cfb      	adds	r3, r7, #3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2207      	movs	r2, #7
 8003358:	401a      	ands	r2, r3
 800335a:	0013      	movs	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	189b      	adds	r3, r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	3310      	adds	r3, #16
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	18d3      	adds	r3, r2, r3
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	705a      	strb	r2, [r3, #1]
 8003370:	e00f      	b.n	8003392 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003372:	1cfb      	adds	r3, r7, #3
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2207      	movs	r2, #7
 8003378:	401a      	ands	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	189b      	adds	r3, r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	3351      	adds	r3, #81	@ 0x51
 8003384:	33ff      	adds	r3, #255	@ 0xff
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003392:	1cfb      	adds	r3, r7, #3
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033a0:	003b      	movs	r3, r7
 80033a2:	881a      	ldrh	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1cba      	adds	r2, r7, #2
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033b0:	1cbb      	adds	r3, r7, #2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d102      	bne.n	80033be <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	23a4      	movs	r3, #164	@ 0xa4
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_PCD_EP_Open+0xae>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e013      	b.n	80033f6 <HAL_PCD_EP_Open+0xd6>
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	23a4      	movs	r3, #164	@ 0xa4
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	2101      	movs	r1, #1
 80033d6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	0011      	movs	r1, r2
 80033e0:	0018      	movs	r0, r3
 80033e2:	f003 fc1d 	bl	8006c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	23a4      	movs	r3, #164	@ 0xa4
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	2100      	movs	r1, #0
 80033ee:	54d1      	strb	r1, [r2, r3]

  return ret;
 80033f0:	230b      	movs	r3, #11
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	781b      	ldrb	r3, [r3, #0]
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b005      	add	sp, #20
 80033fc:	bd90      	pop	{r4, r7, pc}

080033fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	000a      	movs	r2, r1
 8003408:	1cfb      	adds	r3, r7, #3
 800340a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800340c:	1cfb      	adds	r3, r7, #3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b25b      	sxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	da0f      	bge.n	8003436 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2207      	movs	r2, #7
 800341c:	401a      	ands	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	189b      	adds	r3, r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	3310      	adds	r3, #16
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	705a      	strb	r2, [r3, #1]
 8003434:	e00f      	b.n	8003456 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003436:	1cfb      	adds	r3, r7, #3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2207      	movs	r2, #7
 800343c:	401a      	ands	r2, r3
 800343e:	0013      	movs	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	189b      	adds	r3, r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	3351      	adds	r3, #81	@ 0x51
 8003448:	33ff      	adds	r3, #255	@ 0xff
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003456:	1cfb      	adds	r3, r7, #3
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2207      	movs	r2, #7
 800345c:	4013      	ands	r3, r2
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	23a4      	movs	r3, #164	@ 0xa4
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_PCD_EP_Close+0x76>
 8003470:	2302      	movs	r3, #2
 8003472:	e011      	b.n	8003498 <HAL_PCD_EP_Close+0x9a>
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	23a4      	movs	r3, #164	@ 0xa4
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	2101      	movs	r1, #1
 800347c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f003 ff72 	bl	8007370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	23a4      	movs	r3, #164	@ 0xa4
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	2100      	movs	r1, #0
 8003494:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	200b      	movs	r0, #11
 80034ae:	183b      	adds	r3, r7, r0
 80034b0:	1c0a      	adds	r2, r1, #0
 80034b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	0001      	movs	r1, r0
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2207      	movs	r2, #7
 80034bc:	401a      	ands	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	3351      	adds	r3, #81	@ 0x51
 80034c8:	33ff      	adds	r3, #255	@ 0xff
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2207      	movs	r2, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f004 f8f6 	bl	80076f0 <USB_EPStartXfer>

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	200b      	movs	r0, #11
 800351c:	183b      	adds	r3, r7, r0
 800351e:	1c0a      	adds	r2, r1, #0
 8003520:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	183b      	adds	r3, r7, r0
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2207      	movs	r2, #7
 8003528:	401a      	ands	r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	189b      	adds	r3, r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	3310      	adds	r3, #16
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2224      	movs	r2, #36	@ 0x24
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2201      	movs	r2, #1
 800355e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003560:	183b      	adds	r3, r7, r0
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2207      	movs	r2, #7
 8003566:	4013      	ands	r3, r2
 8003568:	b2da      	uxtb	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f004 f8ba 	bl	80076f0 <USB_EPStartXfer>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b006      	add	sp, #24
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	000a      	movs	r2, r1
 8003590:	1cfb      	adds	r3, r7, #3
 8003592:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003594:	1cfb      	adds	r3, r7, #3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2207      	movs	r2, #7
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	7912      	ldrb	r2, [r2, #4]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e046      	b.n	8003636 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a8:	1cfb      	adds	r3, r7, #3
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da0f      	bge.n	80035d2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b2:	1cfb      	adds	r3, r7, #3
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2207      	movs	r2, #7
 80035b8:	401a      	ands	r2, r3
 80035ba:	0013      	movs	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	3310      	adds	r3, #16
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	18d3      	adds	r3, r2, r3
 80035c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	705a      	strb	r2, [r3, #1]
 80035d0:	e00d      	b.n	80035ee <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035d2:	1cfb      	adds	r3, r7, #3
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	0013      	movs	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	3351      	adds	r3, #81	@ 0x51
 80035e0:	33ff      	adds	r3, #255	@ 0xff
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	1cfb      	adds	r3, r7, #3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	23a4      	movs	r3, #164	@ 0xa4
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_PCD_EP_SetStall+0x8c>
 800360e:	2302      	movs	r3, #2
 8003610:	e011      	b.n	8003636 <HAL_PCD_EP_SetStall+0xb0>
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	23a4      	movs	r3, #164	@ 0xa4
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	2101      	movs	r1, #1
 800361a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f005 f993 	bl	8008950 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	23a4      	movs	r3, #164	@ 0xa4
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	2100      	movs	r1, #0
 8003632:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	000a      	movs	r2, r1
 8003648:	1cfb      	adds	r3, r7, #3
 800364a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800364c:	1cfb      	adds	r3, r7, #3
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	220f      	movs	r2, #15
 8003652:	4013      	ands	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	7912      	ldrb	r2, [r2, #4]
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e048      	b.n	80036f2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003660:	1cfb      	adds	r3, r7, #3
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b25b      	sxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0f      	bge.n	800368a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366a:	1cfb      	adds	r3, r7, #3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2207      	movs	r2, #7
 8003670:	401a      	ands	r2, r3
 8003672:	0013      	movs	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	189b      	adds	r3, r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	3310      	adds	r3, #16
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	705a      	strb	r2, [r3, #1]
 8003688:	e00f      	b.n	80036aa <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368a:	1cfb      	adds	r3, r7, #3
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2207      	movs	r2, #7
 8003690:	401a      	ands	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	189b      	adds	r3, r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	3351      	adds	r3, #81	@ 0x51
 800369c:	33ff      	adds	r3, #255	@ 0xff
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b0:	1cfb      	adds	r3, r7, #3
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	23a4      	movs	r3, #164	@ 0xa4
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_PCD_EP_ClrStall+0x90>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e011      	b.n	80036f2 <HAL_PCD_EP_ClrStall+0xb4>
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	23a4      	movs	r3, #164	@ 0xa4
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	2101      	movs	r1, #1
 80036d6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f005 f985 	bl	80089f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	23a4      	movs	r3, #164	@ 0xa4
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	2100      	movs	r1, #0
 80036ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b5b0      	push	{r4, r5, r7, lr}
 80036fe:	b096      	sub	sp, #88	@ 0x58
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003704:	f000 fbea 	bl	8003edc <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2048      	movs	r0, #72	@ 0x48
 800370e:	183b      	adds	r3, r7, r0
 8003710:	2144      	movs	r1, #68	@ 0x44
 8003712:	5a52      	ldrh	r2, [r2, r1]
 8003714:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003716:	183b      	adds	r3, r7, r0
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	244f      	movs	r4, #79	@ 0x4f
 800371e:	193b      	adds	r3, r7, r4
 8003720:	210f      	movs	r1, #15
 8003722:	400a      	ands	r2, r1
 8003724:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003726:	193b      	adds	r3, r7, r4
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d000      	beq.n	8003730 <PCD_EP_ISR_Handler+0x34>
 800372e:	e18d      	b.n	8003a4c <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003730:	183b      	adds	r3, r7, r0
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	4013      	ands	r3, r2
 8003738:	d152      	bne.n	80037e0 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	200e      	movs	r0, #14
 8003744:	183b      	adds	r3, r7, r0
 8003746:	49ba      	ldr	r1, [pc, #744]	@ (8003a30 <PCD_EP_ISR_Handler+0x334>)
 8003748:	400a      	ands	r2, r1
 800374a:	801a      	strh	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	183a      	adds	r2, r7, r0
 8003752:	8812      	ldrh	r2, [r2, #0]
 8003754:	49b7      	ldr	r1, [pc, #732]	@ (8003a34 <PCD_EP_ISR_Handler+0x338>)
 8003756:	430a      	orrs	r2, r1
 8003758:	b292      	uxth	r2, r2
 800375a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3310      	adds	r3, #16
 8003760:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2250      	movs	r2, #80	@ 0x50
 8003768:	5a9b      	ldrh	r3, [r3, r2]
 800376a:	b29b      	uxth	r3, r3
 800376c:	001a      	movs	r2, r3
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	18d2      	adds	r2, r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	4aae      	ldr	r2, [pc, #696]	@ (8003a38 <PCD_EP_ISR_Handler+0x33c>)
 800377e:	4694      	mov	ip, r2
 8003780:	4463      	add	r3, ip
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	059b      	lsls	r3, r3, #22
 8003786:	0d9a      	lsrs	r2, r3, #22
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	18d2      	adds	r2, r2, r3
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2100      	movs	r1, #0
 800379e:	0018      	movs	r0, r3
 80037a0:	f007 f93e 	bl	800aa20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7b1b      	ldrb	r3, [r3, #12]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <PCD_EP_ISR_Handler+0xb6>
 80037ae:	f000 fb95 	bl	8003edc <PCD_EP_ISR_Handler+0x7e0>
 80037b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <PCD_EP_ISR_Handler+0xc2>
 80037ba:	f000 fb8f 	bl	8003edc <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7b1b      	ldrb	r3, [r3, #12]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	4252      	negs	r2, r2
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0011      	movs	r1, r2
 80037d2:	224c      	movs	r2, #76	@ 0x4c
 80037d4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	731a      	strb	r2, [r3, #12]
 80037dc:	f000 fb7e 	bl	8003edc <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3351      	adds	r3, #81	@ 0x51
 80037e4:	33ff      	adds	r3, #255	@ 0xff
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	214c      	movs	r1, #76	@ 0x4c
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	881a      	ldrh	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4013      	ands	r3, r2
 80037fe:	d037      	beq.n	8003870 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2250      	movs	r2, #80	@ 0x50
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	001a      	movs	r2, r3
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	18d2      	adds	r2, r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	4a88      	ldr	r2, [pc, #544]	@ (8003a3c <PCD_EP_ISR_Handler+0x340>)
 800381c:	4694      	mov	ip, r2
 800381e:	4463      	add	r3, ip
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	059b      	lsls	r3, r3, #22
 8003824:	0d9a      	lsrs	r2, r3, #22
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	22a6      	movs	r2, #166	@ 0xa6
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	1899      	adds	r1, r3, r2
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800383e:	b29b      	uxth	r3, r3
 8003840:	f005 fa0a 	bl	8008c58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29a      	uxth	r2, r3
 800384c:	2010      	movs	r0, #16
 800384e:	183b      	adds	r3, r7, r0
 8003850:	497b      	ldr	r1, [pc, #492]	@ (8003a40 <PCD_EP_ISR_Handler+0x344>)
 8003852:	400a      	ands	r2, r1
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	183a      	adds	r2, r7, r0
 800385c:	8812      	ldrh	r2, [r2, #0]
 800385e:	2180      	movs	r1, #128	@ 0x80
 8003860:	430a      	orrs	r2, r1
 8003862:	b292      	uxth	r2, r2
 8003864:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f007 f8a3 	bl	800a9b4 <HAL_PCD_SetupStageCallback>
 800386e:	e335      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003870:	234c      	movs	r3, #76	@ 0x4c
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	5e9b      	ldrsh	r3, [r3, r2]
 8003878:	2b00      	cmp	r3, #0
 800387a:	db00      	blt.n	800387e <PCD_EP_ISR_Handler+0x182>
 800387c:	e32e      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29a      	uxth	r2, r3
 8003886:	201e      	movs	r0, #30
 8003888:	183b      	adds	r3, r7, r0
 800388a:	496d      	ldr	r1, [pc, #436]	@ (8003a40 <PCD_EP_ISR_Handler+0x344>)
 800388c:	400a      	ands	r2, r1
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	183a      	adds	r2, r7, r0
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	430a      	orrs	r2, r1
 800389c:	b292      	uxth	r2, r2
 800389e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2250      	movs	r2, #80	@ 0x50
 80038a6:	5a9b      	ldrh	r3, [r3, r2]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	001a      	movs	r2, r3
 80038ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	18d2      	adds	r2, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	4a60      	ldr	r2, [pc, #384]	@ (8003a3c <PCD_EP_ISR_Handler+0x340>)
 80038bc:	4694      	mov	ip, r2
 80038be:	4463      	add	r3, ip
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	059b      	lsls	r3, r3, #22
 80038c4:	0d9a      	lsrs	r2, r3, #22
 80038c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01a      	beq.n	8003908 <PCD_EP_ISR_Handler+0x20c>
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	6959      	ldr	r1, [r3, #20]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f005 f9b4 	bl	8008c58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	18d2      	adds	r2, r2, r3
 80038fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2100      	movs	r1, #0
 8003902:	0018      	movs	r0, r3
 8003904:	f007 f86b 	bl	800a9de <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	214c      	movs	r1, #76	@ 0x4c
 800390e:	187b      	adds	r3, r7, r1
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003914:	187b      	adds	r3, r7, r1
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d000      	beq.n	8003922 <PCD_EP_ISR_Handler+0x226>
 8003920:	e2dc      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
 8003922:	187b      	adds	r3, r7, r1
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	23c0      	movs	r3, #192	@ 0xc0
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	401a      	ands	r2, r3
 800392c:	23c0      	movs	r3, #192	@ 0xc0
 800392e:	019b      	lsls	r3, r3, #6
 8003930:	429a      	cmp	r2, r3
 8003932:	d100      	bne.n	8003936 <PCD_EP_ISR_Handler+0x23a>
 8003934:	e2d2      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2250      	movs	r2, #80	@ 0x50
 8003942:	5a9b      	ldrh	r3, [r3, r2]
 8003944:	b29b      	uxth	r3, r3
 8003946:	001a      	movs	r2, r3
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	189b      	adds	r3, r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4a3a      	ldr	r2, [pc, #232]	@ (8003a3c <PCD_EP_ISR_Handler+0x340>)
 8003952:	4694      	mov	ip, r2
 8003954:	4463      	add	r3, ip
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	059b      	lsls	r3, r3, #22
 8003960:	0d9b      	lsrs	r3, r3, #22
 8003962:	b29a      	uxth	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <PCD_EP_ISR_Handler+0x286>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	4a2f      	ldr	r2, [pc, #188]	@ (8003a34 <PCD_EP_ISR_Handler+0x338>)
 8003978:	4313      	orrs	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	e035      	b.n	80039ee <PCD_EP_ISR_Handler+0x2f2>
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b3e      	cmp	r3, #62	@ 0x3e
 8003988:	d817      	bhi.n	80039ba <PCD_EP_ISR_Handler+0x2be>
 800398a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	647b      	str	r3, [r7, #68]	@ 0x44
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2201      	movs	r2, #1
 8003998:	4013      	ands	r3, r2
 800399a:	d002      	beq.n	80039a2 <PCD_EP_ISR_Handler+0x2a6>
 800399c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399e:	3301      	adds	r3, #1
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	029b      	lsls	r3, r3, #10
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	e019      	b.n	80039ee <PCD_EP_ISR_Handler+0x2f2>
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	221f      	movs	r2, #31
 80039c8:	4013      	ands	r3, r2
 80039ca:	d102      	bne.n	80039d2 <PCD_EP_ISR_Handler+0x2d6>
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	3b01      	subs	r3, #1
 80039d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039da:	b29b      	uxth	r3, r3
 80039dc:	029b      	lsls	r3, r3, #10
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <PCD_EP_ISR_Handler+0x338>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	2012      	movs	r0, #18
 80039f8:	183b      	adds	r3, r7, r0
 80039fa:	4912      	ldr	r1, [pc, #72]	@ (8003a44 <PCD_EP_ISR_Handler+0x348>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	183a      	adds	r2, r7, r0
 8003a04:	8812      	ldrh	r2, [r2, #0]
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	0149      	lsls	r1, r1, #5
 8003a0a:	404a      	eors	r2, r1
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	183b      	adds	r3, r7, r0
 8003a10:	183a      	adds	r2, r7, r0
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	2180      	movs	r1, #128	@ 0x80
 8003a16:	0189      	lsls	r1, r1, #6
 8003a18:	404a      	eors	r2, r1
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	183a      	adds	r2, r7, r0
 8003a22:	8812      	ldrh	r2, [r2, #0]
 8003a24:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <PCD_EP_ISR_Handler+0x34c>)
 8003a26:	430a      	orrs	r2, r1
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	e256      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	ffff8f0f 	.word	0xffff8f0f
 8003a34:	ffff8000 	.word	0xffff8000
 8003a38:	00000402 	.word	0x00000402
 8003a3c:	00000406 	.word	0x00000406
 8003a40:	00000f8f 	.word	0x00000f8f
 8003a44:	ffffbf8f 	.word	0xffffbf8f
 8003a48:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	001a      	movs	r2, r3
 8003a52:	204f      	movs	r0, #79	@ 0x4f
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	18d2      	adds	r2, r2, r3
 8003a5c:	214c      	movs	r1, #76	@ 0x4c
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	8812      	ldrh	r2, [r2, #0]
 8003a62:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2200      	movs	r2, #0
 8003a68:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db00      	blt.n	8003a70 <PCD_EP_ISR_Handler+0x374>
 8003a6e:	e0fa      	b.n	8003c66 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	001a      	movs	r2, r3
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	244a      	movs	r4, #74	@ 0x4a
 8003a84:	193b      	adds	r3, r7, r4
 8003a86:	49d1      	ldr	r1, [pc, #836]	@ (8003dcc <PCD_EP_ISR_Handler+0x6d0>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	001a      	movs	r2, r3
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	8812      	ldrh	r2, [r2, #0]
 8003a9e:	2180      	movs	r1, #128	@ 0x80
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	0013      	movs	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	3351      	adds	r3, #81	@ 0x51
 8003ab4:	33ff      	adds	r3, #255	@ 0xff
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abe:	7b1b      	ldrb	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d125      	bne.n	8003b10 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2250      	movs	r2, #80	@ 0x50
 8003aca:	5a9b      	ldrh	r3, [r3, r2]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	001a      	movs	r2, r3
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	18d2      	adds	r2, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	4abc      	ldr	r2, [pc, #752]	@ (8003dd0 <PCD_EP_ISR_Handler+0x6d4>)
 8003ae0:	4694      	mov	ip, r2
 8003ae2:	4463      	add	r3, ip
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	2450      	movs	r4, #80	@ 0x50
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	0592      	lsls	r2, r2, #22
 8003aec:	0d92      	lsrs	r2, r2, #22
 8003aee:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003af0:	193b      	adds	r3, r7, r4
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d100      	bne.n	8003afa <PCD_EP_ISR_Handler+0x3fe>
 8003af8:	e08d      	b.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b00:	6959      	ldr	r1, [r3, #20]
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	88da      	ldrh	r2, [r3, #6]
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	f005 f8a5 	bl	8008c58 <USB_ReadPMA>
 8003b0e:	e082      	b.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d10c      	bne.n	8003b32 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b18:	2350      	movs	r3, #80	@ 0x50
 8003b1a:	18fc      	adds	r4, r7, r3
 8003b1c:	234c      	movs	r3, #76	@ 0x4c
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 f9ec 	bl	8003f04 <HAL_PCD_EP_DB_Receive>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	8023      	strh	r3, [r4, #0]
 8003b30:	e071      	b.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	001a      	movs	r2, r3
 8003b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	2052      	movs	r0, #82	@ 0x52
 8003b46:	183b      	adds	r3, r7, r0
 8003b48:	49a2      	ldr	r1, [pc, #648]	@ (8003dd4 <PCD_EP_ISR_Handler+0x6d8>)
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	001a      	movs	r2, r3
 8003b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	183a      	adds	r2, r7, r0
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	499d      	ldr	r1, [pc, #628]	@ (8003dd8 <PCD_EP_ISR_Handler+0x6dc>)
 8003b62:	430a      	orrs	r2, r1
 8003b64:	b292      	uxth	r2, r2
 8003b66:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	01db      	lsls	r3, r3, #7
 8003b80:	4013      	ands	r3, r2
 8003b82:	d024      	beq.n	8003bce <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2250      	movs	r2, #80	@ 0x50
 8003b8a:	5a9b      	ldrh	r3, [r3, r2]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	001a      	movs	r2, r3
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	18d2      	adds	r2, r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	4a8f      	ldr	r2, [pc, #572]	@ (8003ddc <PCD_EP_ISR_Handler+0x6e0>)
 8003ba0:	4694      	mov	ip, r2
 8003ba2:	4463      	add	r3, ip
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	2450      	movs	r4, #80	@ 0x50
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	0592      	lsls	r2, r2, #22
 8003bac:	0d92      	lsrs	r2, r2, #22
 8003bae:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02e      	beq.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbe:	6959      	ldr	r1, [r3, #20]
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc2:	891a      	ldrh	r2, [r3, #8]
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	f005 f846 	bl	8008c58 <USB_ReadPMA>
 8003bcc:	e023      	b.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2250      	movs	r2, #80	@ 0x50
 8003bd4:	5a9b      	ldrh	r3, [r3, r2]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	001a      	movs	r2, r3
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	18d2      	adds	r2, r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	4a79      	ldr	r2, [pc, #484]	@ (8003dd0 <PCD_EP_ISR_Handler+0x6d4>)
 8003bea:	4694      	mov	ip, r2
 8003bec:	4463      	add	r3, ip
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	2450      	movs	r4, #80	@ 0x50
 8003bf2:	193b      	adds	r3, r7, r4
 8003bf4:	0592      	lsls	r2, r2, #22
 8003bf6:	0d92      	lsrs	r2, r2, #22
 8003bf8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	6959      	ldr	r1, [r3, #20]
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	895a      	ldrh	r2, [r3, #10]
 8003c0e:	193b      	adds	r3, r7, r4
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	f005 f821 	bl	8008c58 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	2150      	movs	r1, #80	@ 0x50
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	18d2      	adds	r2, r2, r3
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	18d2      	adds	r2, r2, r3
 8003c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <PCD_EP_ISR_Handler+0x54c>
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d207      	bcs.n	8003c58 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f006 fec4 	bl	800a9de <HAL_PCD_DataOutStageCallback>
 8003c56:	e006      	b.n	8003c66 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f003 fd45 	bl	80076f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c66:	244c      	movs	r4, #76	@ 0x4c
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	2280      	movs	r2, #128	@ 0x80
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d100      	bne.n	8003c74 <PCD_EP_ISR_Handler+0x578>
 8003c72:	e133      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c74:	204f      	movs	r0, #79	@ 0x4f
 8003c76:	183b      	adds	r3, r7, r0
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	3310      	adds	r3, #16
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	001a      	movs	r2, r3
 8003c90:	183b      	adds	r3, r7, r0
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	2542      	movs	r5, #66	@ 0x42
 8003c9e:	197b      	adds	r3, r7, r5
 8003ca0:	494f      	ldr	r1, [pc, #316]	@ (8003de0 <PCD_EP_ISR_Handler+0x6e4>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	001a      	movs	r2, r3
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	197a      	adds	r2, r7, r5
 8003cb6:	8812      	ldrh	r2, [r2, #0]
 8003cb8:	494a      	ldr	r1, [pc, #296]	@ (8003de4 <PCD_EP_ISR_Handler+0x6e8>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d000      	beq.n	8003cca <PCD_EP_ISR_Handler+0x5ce>
 8003cc8:	e0af      	b.n	8003e2a <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd2:	7b1b      	ldrb	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d100      	bne.n	8003cda <PCD_EP_ISR_Handler+0x5de>
 8003cd8:	e09f      	b.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	2240      	movs	r2, #64	@ 0x40
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d046      	beq.n	8003d72 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d125      	bne.n	8003d38 <PCD_EP_ISR_Handler+0x63c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2250      	movs	r2, #80	@ 0x50
 8003cf8:	5a9b      	ldrh	r3, [r3, r2]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00da      	lsls	r2, r3, #3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	18d3      	adds	r3, r2, r3
 8003d0e:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <PCD_EP_ISR_Handler+0x6e0>)
 8003d10:	4694      	mov	ip, r2
 8003d12:	4463      	add	r3, ip
 8003d14:	623b      	str	r3, [r7, #32]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	059b      	lsls	r3, r3, #22
 8003d1e:	0d9b      	lsrs	r3, r3, #22
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <PCD_EP_ISR_Handler+0x6e8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e070      	b.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
 8003d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d16c      	bne.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2250      	movs	r2, #80	@ 0x50
 8003d4c:	5a9b      	ldrh	r3, [r3, r2]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	001a      	movs	r2, r3
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	00da      	lsls	r2, r3, #3
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	18d3      	adds	r3, r2, r3
 8003d62:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <PCD_EP_ISR_Handler+0x6e0>)
 8003d64:	4694      	mov	ip, r2
 8003d66:	4463      	add	r3, ip
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	e053      	b.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d133      	bne.n	8003de8 <PCD_EP_ISR_Handler+0x6ec>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2250      	movs	r2, #80	@ 0x50
 8003d8c:	5a9b      	ldrh	r3, [r3, r2]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	001a      	movs	r2, r3
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00da      	lsls	r2, r3, #3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd0 <PCD_EP_ISR_Handler+0x6d4>)
 8003da4:	4694      	mov	ip, r2
 8003da6:	4463      	add	r3, ip
 8003da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	059b      	lsls	r3, r3, #22
 8003db2:	0d9b      	lsrs	r3, r3, #22
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <PCD_EP_ISR_Handler+0x6e8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e026      	b.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
 8003dcc:	00000f8f 	.word	0x00000f8f
 8003dd0:	00000406 	.word	0x00000406
 8003dd4:	ffff8f8f 	.word	0xffff8f8f
 8003dd8:	ffff80c0 	.word	0xffff80c0
 8003ddc:	00000402 	.word	0x00000402
 8003de0:	ffff8f0f 	.word	0xffff8f0f
 8003de4:	ffff8000 	.word	0xffff8000
 8003de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d114      	bne.n	8003e1a <PCD_EP_ISR_Handler+0x71e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2250      	movs	r2, #80	@ 0x50
 8003df6:	5a9b      	ldrh	r3, [r3, r2]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	00da      	lsls	r2, r3, #3
 8003e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003efc <PCD_EP_ISR_Handler+0x800>)
 8003e0e:	4694      	mov	ip, r2
 8003e10:	4463      	add	r3, ip
 8003e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	2200      	movs	r2, #0
 8003e18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f006 fdfc 	bl	800aa20 <HAL_PCD_DataInStageCallback>
 8003e28:	e058      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e2a:	234c      	movs	r3, #76	@ 0x4c
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4013      	ands	r3, r2
 8003e36:	d149      	bne.n	8003ecc <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2250      	movs	r2, #80	@ 0x50
 8003e3e:	5a9b      	ldrh	r3, [r3, r2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	18d2      	adds	r2, r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <PCD_EP_ISR_Handler+0x804>)
 8003e54:	4694      	mov	ip, r2
 8003e56:	4463      	add	r3, ip
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	2140      	movs	r1, #64	@ 0x40
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	0592      	lsls	r2, r2, #22
 8003e60:	0d92      	lsrs	r2, r2, #22
 8003e62:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d907      	bls.n	8003e80 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8003e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	1ad2      	subs	r2, r2, r3
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7c:	619a      	str	r2, [r3, #24]
 8003e7e:	e002      	b.n	8003e86 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0011      	movs	r1, r2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f006 fdc2 	bl	800aa20 <HAL_PCD_DataInStageCallback>
 8003e9c:	e01e      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	2140      	movs	r1, #64	@ 0x40
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	18d2      	adds	r2, r2, r3
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	18d2      	adds	r2, r2, r3
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f003 fc13 	bl	80076f0 <USB_EPStartXfer>
 8003eca:	e007      	b.n	8003edc <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ecc:	234c      	movs	r3, #76	@ 0x4c
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	881a      	ldrh	r2, [r3, #0]
 8003ed2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f930 	bl	800413c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2244      	movs	r2, #68	@ 0x44
 8003ee2:	5a9b      	ldrh	r3, [r3, r2]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da01      	bge.n	8003ef0 <PCD_EP_ISR_Handler+0x7f4>
 8003eec:	f7ff fc0c 	bl	8003708 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b016      	add	sp, #88	@ 0x58
 8003ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	00000406 	.word	0x00000406
 8003f00:	00000402 	.word	0x00000402

08003f04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	1dbb      	adds	r3, r7, #6
 8003f10:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f12:	1dbb      	adds	r3, r7, #6
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	01db      	lsls	r3, r3, #7
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d100      	bne.n	8003f20 <HAL_PCD_EP_DB_Receive+0x1c>
 8003f1e:	e07d      	b.n	800401c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2250      	movs	r2, #80	@ 0x50
 8003f26:	5a9b      	ldrh	r3, [r3, r2]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	18d2      	adds	r2, r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	18d3      	adds	r3, r2, r3
 8003f3a:	4a7a      	ldr	r2, [pc, #488]	@ (8004124 <HAL_PCD_EP_DB_Receive+0x220>)
 8003f3c:	4694      	mov	ip, r2
 8003f3e:	4463      	add	r3, ip
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	211a      	movs	r1, #26
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	0592      	lsls	r2, r2, #22
 8003f48:	0d92      	lsrs	r2, r2, #22
 8003f4a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d307      	bcc.n	8003f68 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	1ad2      	subs	r2, r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	619a      	str	r2, [r3, #24]
 8003f66:	e002      	b.n	8003f6e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d121      	bne.n	8003fba <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	18d3      	adds	r3, r2, r3
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	2018      	movs	r0, #24
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	4966      	ldr	r1, [pc, #408]	@ (8004128 <HAL_PCD_EP_DB_Receive+0x224>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	183a      	adds	r2, r7, r0
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	2180      	movs	r1, #128	@ 0x80
 8003f9a:	0189      	lsls	r1, r1, #6
 8003f9c:	404a      	eors	r2, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	183a      	adds	r2, r7, r0
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	495e      	ldr	r1, [pc, #376]	@ (800412c <HAL_PCD_EP_DB_Receive+0x228>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d01a      	beq.n	8003ffa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	001a      	movs	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	2016      	movs	r0, #22
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	4955      	ldr	r1, [pc, #340]	@ (8004130 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	18d3      	adds	r3, r2, r3
 8003fee:	183a      	adds	r2, r7, r0
 8003ff0:	8812      	ldrh	r2, [r2, #0]
 8003ff2:	4950      	ldr	r1, [pc, #320]	@ (8004134 <HAL_PCD_EP_DB_Receive+0x230>)
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	b292      	uxth	r2, r2
 8003ff8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003ffa:	241a      	movs	r4, #26
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d100      	bne.n	8004006 <HAL_PCD_EP_DB_Receive+0x102>
 8004004:	e086      	b.n	8004114 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6959      	ldr	r1, [r3, #20]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	891a      	ldrh	r2, [r3, #8]
 8004012:	193b      	adds	r3, r7, r4
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f004 fe1f 	bl	8008c58 <USB_ReadPMA>
 800401a:	e07b      	b.n	8004114 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2250      	movs	r2, #80	@ 0x50
 8004022:	5a9b      	ldrh	r3, [r3, r2]
 8004024:	b29b      	uxth	r3, r3
 8004026:	001a      	movs	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	18d2      	adds	r2, r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	4a40      	ldr	r2, [pc, #256]	@ (8004138 <HAL_PCD_EP_DB_Receive+0x234>)
 8004038:	4694      	mov	ip, r2
 800403a:	4463      	add	r3, ip
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	211a      	movs	r1, #26
 8004040:	187b      	adds	r3, r7, r1
 8004042:	0592      	lsls	r2, r2, #22
 8004044:	0d92      	lsrs	r2, r2, #22
 8004046:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	187b      	adds	r3, r7, r1
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d307      	bcc.n	8004064 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	187b      	adds	r3, r7, r1
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	619a      	str	r2, [r3, #24]
 8004062:	e002      	b.n	800406a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d121      	bne.n	80040b6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	001a      	movs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	18d3      	adds	r3, r2, r3
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29a      	uxth	r2, r3
 8004084:	201e      	movs	r0, #30
 8004086:	183b      	adds	r3, r7, r0
 8004088:	4927      	ldr	r1, [pc, #156]	@ (8004128 <HAL_PCD_EP_DB_Receive+0x224>)
 800408a:	400a      	ands	r2, r1
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	183b      	adds	r3, r7, r0
 8004090:	183a      	adds	r2, r7, r0
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	0189      	lsls	r1, r1, #6
 8004098:	404a      	eors	r2, r1
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	001a      	movs	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	183a      	adds	r2, r7, r0
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	491f      	ldr	r1, [pc, #124]	@ (800412c <HAL_PCD_EP_DB_Receive+0x228>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	b292      	uxth	r2, r2
 80040b4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	2240      	movs	r2, #64	@ 0x40
 80040bc:	4013      	ands	r3, r2
 80040be:	d11a      	bne.n	80040f6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	001a      	movs	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	18d3      	adds	r3, r2, r3
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	201c      	movs	r0, #28
 80040d4:	183b      	adds	r3, r7, r0
 80040d6:	4916      	ldr	r1, [pc, #88]	@ (8004130 <HAL_PCD_EP_DB_Receive+0x22c>)
 80040d8:	400a      	ands	r2, r1
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	001a      	movs	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	18d3      	adds	r3, r2, r3
 80040ea:	183a      	adds	r2, r7, r0
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	4911      	ldr	r1, [pc, #68]	@ (8004134 <HAL_PCD_EP_DB_Receive+0x230>)
 80040f0:	430a      	orrs	r2, r1
 80040f2:	b292      	uxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80040f6:	241a      	movs	r4, #26
 80040f8:	193b      	adds	r3, r7, r4
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6959      	ldr	r1, [r3, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	895a      	ldrh	r2, [r3, #10]
 800410c:	193b      	adds	r3, r7, r4
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	f004 fda2 	bl	8008c58 <USB_ReadPMA>
    }
  }

  return count;
 8004114:	231a      	movs	r3, #26
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	881b      	ldrh	r3, [r3, #0]
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b009      	add	sp, #36	@ 0x24
 8004120:	bd90      	pop	{r4, r7, pc}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	00000402 	.word	0x00000402
 8004128:	ffffbf8f 	.word	0xffffbf8f
 800412c:	ffff8080 	.word	0xffff8080
 8004130:	ffff8f8f 	.word	0xffff8f8f
 8004134:	ffff80c0 	.word	0xffff80c0
 8004138:	00000406 	.word	0x00000406

0800413c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b0a4      	sub	sp, #144	@ 0x90
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	1dbb      	adds	r3, r7, #6
 8004148:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800414a:	1dbb      	adds	r3, r7, #6
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	2240      	movs	r2, #64	@ 0x40
 8004150:	4013      	ands	r3, r2
 8004152:	d100      	bne.n	8004156 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004154:	e1e4      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2250      	movs	r2, #80	@ 0x50
 800415c:	5a9b      	ldrh	r3, [r3, r2]
 800415e:	b29b      	uxth	r3, r3
 8004160:	001a      	movs	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	18d2      	adds	r2, r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	4ad0      	ldr	r2, [pc, #832]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004172:	4694      	mov	ip, r2
 8004174:	4463      	add	r3, ip
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	2188      	movs	r1, #136	@ 0x88
 800417a:	187b      	adds	r3, r7, r1
 800417c:	0592      	lsls	r2, r2, #22
 800417e:	0d92      	lsrs	r2, r2, #22
 8004180:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	187b      	adds	r3, r7, r1
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d907      	bls.n	800419e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	187b      	adds	r3, r7, r1
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	1ad2      	subs	r2, r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	e002      	b.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d000      	beq.n	80041ae <HAL_PCD_EP_DB_Transmit+0x72>
 80041ac:	e0b5      	b.n	800431a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d125      	bne.n	8004202 <HAL_PCD_EP_DB_Transmit+0xc6>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2250      	movs	r2, #80	@ 0x50
 80041c2:	5a9b      	ldrh	r3, [r3, r2]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	001a      	movs	r2, r3
 80041c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	00da      	lsls	r2, r3, #3
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	4ab6      	ldr	r2, [pc, #728]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80041da:	4694      	mov	ip, r2
 80041dc:	4463      	add	r3, ip
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	059b      	lsls	r3, r3, #22
 80041e8:	0d9b      	lsrs	r3, r3, #22
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4ab0      	ldr	r2, [pc, #704]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	e01b      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d117      	bne.n	800423a <HAL_PCD_EP_DB_Transmit+0xfe>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2250      	movs	r2, #80	@ 0x50
 8004216:	5a9b      	ldrh	r3, [r3, r2]
 8004218:	b29b      	uxth	r3, r3
 800421a:	001a      	movs	r2, r3
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	189b      	adds	r3, r3, r2
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	00da      	lsls	r2, r3, #3
 8004228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422a:	18d3      	adds	r3, r2, r3
 800422c:	4aa1      	ldr	r2, [pc, #644]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800422e:	4694      	mov	ip, r2
 8004230:	4463      	add	r3, ip
 8004232:	633b      	str	r3, [r7, #48]	@ 0x30
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	2200      	movs	r2, #0
 8004238:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d125      	bne.n	8004294 <HAL_PCD_EP_DB_Transmit+0x158>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2250      	movs	r2, #80	@ 0x50
 8004254:	5a9b      	ldrh	r3, [r3, r2]
 8004256:	b29b      	uxth	r3, r3
 8004258:	001a      	movs	r2, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	189b      	adds	r3, r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	00da      	lsls	r2, r3, #3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	18d3      	adds	r3, r2, r3
 800426a:	4a94      	ldr	r2, [pc, #592]	@ (80044bc <HAL_PCD_EP_DB_Transmit+0x380>)
 800426c:	4694      	mov	ip, r2
 800426e:	4463      	add	r3, ip
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	059b      	lsls	r3, r3, #22
 800427a:	0d9b      	lsrs	r3, r3, #22
 800427c:	b29a      	uxth	r2, r3
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	4a8b      	ldr	r2, [pc, #556]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	b29a      	uxth	r2, r3
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e018      	b.n	80042c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d114      	bne.n	80042c6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2250      	movs	r2, #80	@ 0x50
 80042a2:	5a9b      	ldrh	r3, [r3, r2]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	001a      	movs	r2, r3
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	00da      	lsls	r2, r3, #3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	18d3      	adds	r3, r2, r3
 80042b8:	4a80      	ldr	r2, [pc, #512]	@ (80044bc <HAL_PCD_EP_DB_Transmit+0x380>)
 80042ba:	4694      	mov	ip, r2
 80042bc:	4463      	add	r3, ip
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f006 fba6 	bl	800aa20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042d4:	1dbb      	adds	r3, r7, #6
 80042d6:	881a      	ldrh	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	@ 0x80
 80042da:	01db      	lsls	r3, r3, #7
 80042dc:	4013      	ands	r3, r2
 80042de:	d100      	bne.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80042e0:	e308      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	001a      	movs	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	18d3      	adds	r3, r2, r3
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	2016      	movs	r0, #22
 80042f6:	183b      	adds	r3, r7, r0
 80042f8:	4971      	ldr	r1, [pc, #452]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x384>)
 80042fa:	400a      	ands	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	001a      	movs	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	18d3      	adds	r3, r2, r3
 800430c:	183a      	adds	r2, r7, r0
 800430e:	8812      	ldrh	r2, [r2, #0]
 8004310:	496c      	ldr	r1, [pc, #432]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004312:	430a      	orrs	r2, r1
 8004314:	b292      	uxth	r2, r2
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e2ec      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431a:	1dbb      	adds	r3, r7, #6
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	01db      	lsls	r3, r3, #7
 8004322:	4013      	ands	r3, r2
 8004324:	d01a      	beq.n	800435c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	001a      	movs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29a      	uxth	r2, r3
 8004338:	208a      	movs	r0, #138	@ 0x8a
 800433a:	183b      	adds	r3, r7, r0
 800433c:	4960      	ldr	r1, [pc, #384]	@ (80044c0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800433e:	400a      	ands	r2, r1
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	001a      	movs	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	183a      	adds	r2, r7, r0
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	495b      	ldr	r1, [pc, #364]	@ (80044c4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004356:	430a      	orrs	r2, r1
 8004358:	b292      	uxth	r2, r2
 800435a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2224      	movs	r2, #36	@ 0x24
 8004360:	5c9b      	ldrb	r3, [r3, r2]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d000      	beq.n	8004368 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004366:	e2c5      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	2188      	movs	r1, #136	@ 0x88
 800436e:	187b      	adds	r3, r7, r1
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	18d2      	adds	r2, r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	18d2      	adds	r2, r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d30c      	bcc.n	80043ac <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	218c      	movs	r1, #140	@ 0x8c
 8004398:	187a      	adds	r2, r7, r1
 800439a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e01a      	b.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80043b4:	2388      	movs	r3, #136	@ 0x88
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	228c      	movs	r2, #140	@ 0x8c
 80043bc:	18ba      	adds	r2, r7, r2
 80043be:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2224      	movs	r2, #36	@ 0x24
 80043c4:	2100      	movs	r1, #0
 80043c6:	5499      	strb	r1, [r3, r2]
 80043c8:	e00b      	b.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2224      	movs	r2, #36	@ 0x24
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	228c      	movs	r2, #140	@ 0x8c
 80043d8:	18ba      	adds	r2, r7, r2
 80043da:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d000      	beq.n	80043ec <HAL_PCD_EP_DB_Transmit+0x2b0>
 80043ea:	e06d      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x38c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2250      	movs	r2, #80	@ 0x50
 80043f8:	5a9b      	ldrh	r3, [r3, r2]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	001a      	movs	r2, r3
 80043fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004400:	189b      	adds	r3, r3, r2
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	00da      	lsls	r2, r3, #3
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	4a29      	ldr	r2, [pc, #164]	@ (80044b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004410:	4694      	mov	ip, r2
 8004412:	4463      	add	r3, ip
 8004414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	0d9b      	lsrs	r3, r3, #22
 8004420:	b29a      	uxth	r2, r3
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	238c      	movs	r3, #140	@ 0x8c
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <HAL_PCD_EP_DB_Transmit+0x306>
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	b29a      	uxth	r2, r3
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e061      	b.n	8004506 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004442:	228c      	movs	r2, #140	@ 0x8c
 8004444:	18bb      	adds	r3, r7, r2
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b3e      	cmp	r3, #62	@ 0x3e
 800444a:	d817      	bhi.n	800447c <HAL_PCD_EP_DB_Transmit+0x340>
 800444c:	18bb      	adds	r3, r7, r2
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004454:	18bb      	adds	r3, r7, r2
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	d002      	beq.n	8004464 <HAL_PCD_EP_DB_Transmit+0x328>
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004460:	3301      	adds	r3, #1
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800446c:	b29b      	uxth	r3, r3
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	b29b      	uxth	r3, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	b29a      	uxth	r2, r3
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e044      	b.n	8004506 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800447c:	228c      	movs	r2, #140	@ 0x8c
 800447e:	18bb      	adds	r3, r7, r2
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004486:	18bb      	adds	r3, r7, r2
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	221f      	movs	r2, #31
 800448c:	4013      	ands	r3, r2
 800448e:	d102      	bne.n	8004496 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004492:	3b01      	subs	r3, #1
 8004494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29a      	uxth	r2, r3
 800449c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449e:	b29b      	uxth	r3, r3
 80044a0:	029b      	lsls	r3, r3, #10
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4313      	orrs	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4a03      	ldr	r2, [pc, #12]	@ (80044b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e028      	b.n	8004506 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044b4:	00000402 	.word	0x00000402
 80044b8:	ffff8000 	.word	0xffff8000
 80044bc:	00000406 	.word	0x00000406
 80044c0:	ffff8f8f 	.word	0xffff8f8f
 80044c4:	ffffc080 	.word	0xffffc080
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11a      	bne.n	8004506 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2250      	movs	r2, #80	@ 0x50
 80044dc:	5a9b      	ldrh	r3, [r3, r2]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	001a      	movs	r2, r3
 80044e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	00da      	lsls	r2, r3, #3
 80044ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	4ad9      	ldr	r2, [pc, #868]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80044f4:	4694      	mov	ip, r2
 80044f6:	4463      	add	r3, ip
 80044f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fa:	238c      	movs	r3, #140	@ 0x8c
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	b29a      	uxth	r2, r3
 8004502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004504:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6959      	ldr	r1, [r3, #20]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	891a      	ldrh	r2, [r3, #8]
 8004512:	238c      	movs	r3, #140	@ 0x8c
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f004 fb53 	bl	8008bc4 <USB_WritePMA>
 800451e:	e1e9      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2250      	movs	r2, #80	@ 0x50
 8004526:	5a9b      	ldrh	r3, [r3, r2]
 8004528:	b29b      	uxth	r3, r3
 800452a:	001a      	movs	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	18d2      	adds	r2, r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	4ac8      	ldr	r2, [pc, #800]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x720>)
 800453c:	4694      	mov	ip, r2
 800453e:	4463      	add	r3, ip
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	2188      	movs	r1, #136	@ 0x88
 8004544:	187b      	adds	r3, r7, r1
 8004546:	0592      	lsls	r2, r2, #22
 8004548:	0d92      	lsrs	r2, r2, #22
 800454a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	187b      	adds	r3, r7, r1
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d307      	bcc.n	8004568 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	187b      	adds	r3, r7, r1
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	619a      	str	r2, [r3, #24]
 8004566:	e002      	b.n	800456e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d000      	beq.n	8004578 <HAL_PCD_EP_DB_Transmit+0x43c>
 8004576:	e0bb      	b.n	80046f0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d125      	bne.n	80045cc <HAL_PCD_EP_DB_Transmit+0x490>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2250      	movs	r2, #80	@ 0x50
 800458c:	5a9b      	ldrh	r3, [r3, r2]
 800458e:	b29b      	uxth	r3, r3
 8004590:	001a      	movs	r2, r3
 8004592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004594:	189b      	adds	r3, r3, r2
 8004596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	00da      	lsls	r2, r3, #3
 800459e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	4aad      	ldr	r2, [pc, #692]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80045a4:	4694      	mov	ip, r2
 80045a6:	4463      	add	r3, ip
 80045a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	0d9b      	lsrs	r3, r3, #22
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4aa7      	ldr	r2, [pc, #668]	@ (8004860 <HAL_PCD_EP_DB_Transmit+0x724>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e01b      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d117      	bne.n	8004604 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2250      	movs	r2, #80	@ 0x50
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	001a      	movs	r2, r3
 80045e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	4a98      	ldr	r2, [pc, #608]	@ (8004858 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80045f8:	4694      	mov	ip, r2
 80045fa:	4463      	add	r3, ip
 80045fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004600:	2200      	movs	r2, #0
 8004602:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	677b      	str	r3, [r7, #116]	@ 0x74
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d12b      	bne.n	800466a <HAL_PCD_EP_DB_Transmit+0x52e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2250      	movs	r2, #80	@ 0x50
 800461e:	5a9b      	ldrh	r3, [r3, r2]
 8004620:	b29b      	uxth	r3, r3
 8004622:	001a      	movs	r2, r3
 8004624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004626:	189b      	adds	r3, r3, r2
 8004628:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	00da      	lsls	r2, r3, #3
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	4a89      	ldr	r2, [pc, #548]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x720>)
 8004636:	4694      	mov	ip, r2
 8004638:	4463      	add	r3, ip
 800463a:	2184      	movs	r1, #132	@ 0x84
 800463c:	187a      	adds	r2, r7, r1
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	187b      	adds	r3, r7, r1
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	059b      	lsls	r3, r3, #22
 800464a:	0d9b      	lsrs	r3, r3, #22
 800464c:	b29a      	uxth	r2, r3
 800464e:	187b      	adds	r3, r7, r1
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	187b      	adds	r3, r7, r1
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	4a80      	ldr	r2, [pc, #512]	@ (8004860 <HAL_PCD_EP_DB_Transmit+0x724>)
 800465e:	4313      	orrs	r3, r2
 8004660:	b29a      	uxth	r2, r3
 8004662:	187b      	adds	r3, r7, r1
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	e018      	b.n	800469c <HAL_PCD_EP_DB_Transmit+0x560>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	785b      	ldrb	r3, [r3, #1]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d114      	bne.n	800469c <HAL_PCD_EP_DB_Transmit+0x560>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2250      	movs	r2, #80	@ 0x50
 8004678:	5a9b      	ldrh	r3, [r3, r2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	001a      	movs	r2, r3
 800467e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004680:	189b      	adds	r3, r3, r2
 8004682:	677b      	str	r3, [r7, #116]	@ 0x74
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	00da      	lsls	r2, r3, #3
 800468a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468c:	18d3      	adds	r3, r2, r3
 800468e:	4a73      	ldr	r2, [pc, #460]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x720>)
 8004690:	4694      	mov	ip, r2
 8004692:	4463      	add	r3, ip
 8004694:	673b      	str	r3, [r7, #112]	@ 0x70
 8004696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f006 f9bb 	bl	800aa20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046aa:	1dbb      	adds	r3, r7, #6
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	4013      	ands	r3, r2
 80046b4:	d000      	beq.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x57c>
 80046b6:	e11d      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	001a      	movs	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	2082      	movs	r0, #130	@ 0x82
 80046cc:	183b      	adds	r3, r7, r0
 80046ce:	4965      	ldr	r1, [pc, #404]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x728>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	001a      	movs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	18d3      	adds	r3, r2, r3
 80046e2:	183a      	adds	r2, r7, r0
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	4960      	ldr	r1, [pc, #384]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80046e8:	430a      	orrs	r2, r1
 80046ea:	b292      	uxth	r2, r2
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e101      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	01db      	lsls	r3, r3, #7
 80046f8:	4013      	ands	r3, r2
 80046fa:	d11a      	bne.n	8004732 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	001a      	movs	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29a      	uxth	r2, r3
 800470e:	204e      	movs	r0, #78	@ 0x4e
 8004710:	183b      	adds	r3, r7, r0
 8004712:	4954      	ldr	r1, [pc, #336]	@ (8004864 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004714:	400a      	ands	r2, r1
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	001a      	movs	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	18d3      	adds	r3, r2, r3
 8004726:	183a      	adds	r2, r7, r0
 8004728:	8812      	ldrh	r2, [r2, #0]
 800472a:	494f      	ldr	r1, [pc, #316]	@ (8004868 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800472c:	430a      	orrs	r2, r1
 800472e:	b292      	uxth	r2, r2
 8004730:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2224      	movs	r2, #36	@ 0x24
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d000      	beq.n	800473e <HAL_PCD_EP_DB_Transmit+0x602>
 800473c:	e0da      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	2188      	movs	r1, #136	@ 0x88
 8004744:	187b      	adds	r3, r7, r1
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	18d2      	adds	r2, r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	187b      	adds	r3, r7, r1
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	18d2      	adds	r2, r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d30c      	bcc.n	8004782 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	218c      	movs	r1, #140	@ 0x8c
 800476e:	187a      	adds	r2, r7, r1
 8004770:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	187b      	adds	r3, r7, r1
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e01a      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800478a:	2388      	movs	r3, #136	@ 0x88
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	228c      	movs	r2, #140	@ 0x8c
 8004792:	18ba      	adds	r2, r7, r2
 8004794:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2224      	movs	r2, #36	@ 0x24
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]
 800479e:	e00b      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	228c      	movs	r2, #140	@ 0x8c
 80047a6:	18ba      	adds	r2, r7, r2
 80047a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2200      	movs	r2, #0
 80047ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	2100      	movs	r1, #0
 80047b6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d000      	beq.n	80047c8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80047c6:	e06d      	b.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x768>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2250      	movs	r2, #80	@ 0x50
 80047d4:	5a9b      	ldrh	r3, [r3, r2]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	001a      	movs	r2, r3
 80047da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00da      	lsls	r2, r3, #3
 80047e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e8:	18d3      	adds	r3, r2, r3
 80047ea:	4a1c      	ldr	r2, [pc, #112]	@ (800485c <HAL_PCD_EP_DB_Transmit+0x720>)
 80047ec:	4694      	mov	ip, r2
 80047ee:	4463      	add	r3, ip
 80047f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	059b      	lsls	r3, r3, #22
 80047fa:	0d9b      	lsrs	r3, r3, #22
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	238c      	movs	r3, #140	@ 0x8c
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d108      	bne.n	800481e <HAL_PCD_EP_DB_Transmit+0x6e2>
 800480c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004814:	4313      	orrs	r3, r2
 8004816:	b29a      	uxth	r2, r3
 8004818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e05e      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x7a0>
 800481e:	228c      	movs	r2, #140	@ 0x8c
 8004820:	18bb      	adds	r3, r7, r2
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b3e      	cmp	r3, #62	@ 0x3e
 8004826:	d821      	bhi.n	800486c <HAL_PCD_EP_DB_Transmit+0x730>
 8004828:	18bb      	adds	r3, r7, r2
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004830:	18bb      	adds	r3, r7, r2
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	4013      	ands	r3, r2
 8004838:	d002      	beq.n	8004840 <HAL_PCD_EP_DB_Transmit+0x704>
 800483a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800483c:	3301      	adds	r3, #1
 800483e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29a      	uxth	r2, r3
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29b      	uxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	b29a      	uxth	r2, r3
 8004852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e041      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004858:	00000402 	.word	0x00000402
 800485c:	00000406 	.word	0x00000406
 8004860:	ffff8000 	.word	0xffff8000
 8004864:	ffff8f8f 	.word	0xffff8f8f
 8004868:	ffffc080 	.word	0xffffc080
 800486c:	228c      	movs	r2, #140	@ 0x8c
 800486e:	18bb      	adds	r3, r7, r2
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004876:	18bb      	adds	r3, r7, r2
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	221f      	movs	r2, #31
 800487c:	4013      	ands	r3, r2
 800487e:	d102      	bne.n	8004886 <HAL_PCD_EP_DB_Transmit+0x74a>
 8004880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004882:	3b01      	subs	r3, #1
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29a      	uxth	r2, r3
 800488c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	4313      	orrs	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	4a2c      	ldr	r2, [pc, #176]	@ (800494c <HAL_PCD_EP_DB_Transmit+0x810>)
 800489a:	4313      	orrs	r3, r2
 800489c:	b29a      	uxth	r2, r3
 800489e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e01b      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d117      	bne.n	80048dc <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2250      	movs	r2, #80	@ 0x50
 80048b2:	5a9b      	ldrh	r3, [r3, r2]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	001a      	movs	r2, r3
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	00da      	lsls	r2, r3, #3
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	18d3      	adds	r3, r2, r3
 80048c8:	4a21      	ldr	r2, [pc, #132]	@ (8004950 <HAL_PCD_EP_DB_Transmit+0x814>)
 80048ca:	4694      	mov	ip, r2
 80048cc:	4463      	add	r3, ip
 80048ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d0:	238c      	movs	r3, #140	@ 0x8c
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6959      	ldr	r1, [r3, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	895a      	ldrh	r2, [r3, #10]
 80048e8:	238c      	movs	r3, #140	@ 0x8c
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f004 f968 	bl	8008bc4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	001a      	movs	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	18d3      	adds	r3, r2, r3
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29a      	uxth	r2, r3
 8004906:	2014      	movs	r0, #20
 8004908:	183b      	adds	r3, r7, r0
 800490a:	4912      	ldr	r1, [pc, #72]	@ (8004954 <HAL_PCD_EP_DB_Transmit+0x818>)
 800490c:	400a      	ands	r2, r1
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	183b      	adds	r3, r7, r0
 8004912:	183a      	adds	r2, r7, r0
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	2110      	movs	r1, #16
 8004918:	404a      	eors	r2, r1
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	183b      	adds	r3, r7, r0
 800491e:	183a      	adds	r2, r7, r0
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	2120      	movs	r1, #32
 8004924:	404a      	eors	r2, r1
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	001a      	movs	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	18d3      	adds	r3, r2, r3
 8004936:	183a      	adds	r2, r7, r0
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	4907      	ldr	r1, [pc, #28]	@ (8004958 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800493c:	430a      	orrs	r2, r1
 800493e:	b292      	uxth	r2, r2
 8004940:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b024      	add	sp, #144	@ 0x90
 800494a:	bd80      	pop	{r7, pc}
 800494c:	ffff8000 	.word	0xffff8000
 8004950:	00000406 	.word	0x00000406
 8004954:	ffff8fbf 	.word	0xffff8fbf
 8004958:	ffff8080 	.word	0xffff8080

0800495c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	0008      	movs	r0, r1
 8004966:	0011      	movs	r1, r2
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	240a      	movs	r4, #10
 800496c:	193b      	adds	r3, r7, r4
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	2308      	movs	r3, #8
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	1c0a      	adds	r2, r1, #0
 8004978:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800497a:	0021      	movs	r1, r4
 800497c:	187b      	adds	r3, r7, r1
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	2280      	movs	r2, #128	@ 0x80
 8004982:	4013      	ands	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498a:	187b      	adds	r3, r7, r1
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	2207      	movs	r2, #7
 8004990:	401a      	ands	r2, r3
 8004992:	0013      	movs	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	189b      	adds	r3, r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	3310      	adds	r3, #16
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	18d3      	adds	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e00b      	b.n	80049bc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049a4:	230a      	movs	r3, #10
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	0013      	movs	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	3351      	adds	r3, #81	@ 0x51
 80049b4:	33ff      	adds	r3, #255	@ 0xff
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	18d3      	adds	r3, r2, r3
 80049ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049bc:	2308      	movs	r3, #8
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	80da      	strh	r2, [r3, #6]
 80049d4:	e00b      	b.n	80049ee <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2201      	movs	r2, #1
 80049da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b007      	add	sp, #28
 80049f6:	bd90      	pop	{r4, r7, pc}

080049f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	23b4      	movs	r3, #180	@ 0xb4
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	23b2      	movs	r3, #178	@ 0xb2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	2100      	movs	r1, #0
 8004a18:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2254      	movs	r2, #84	@ 0x54
 8004a1e:	5a9b      	ldrh	r3, [r3, r2]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2201      	movs	r2, #1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b299      	uxth	r1, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2254      	movs	r2, #84	@ 0x54
 8004a2c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2254      	movs	r2, #84	@ 0x54
 8004a32:	5a9b      	ldrh	r3, [r3, r2]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2202      	movs	r2, #2
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b299      	uxth	r1, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2254      	movs	r2, #84	@ 0x54
 8004a40:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b004      	add	sp, #16
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	000a      	movs	r2, r1
 8004a56:	1cfb      	adds	r3, r7, #3
 8004a58:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f000 fb76 	bl	8005164 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d100      	bne.n	8004a84 <HAL_RCC_OscConfig+0x20>
 8004a82:	e08e      	b.n	8004ba2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a84:	4bc5      	ldr	r3, [pc, #788]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	220c      	movs	r2, #12
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d00e      	beq.n	8004aae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a90:	4bc2      	ldr	r3, [pc, #776]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	220c      	movs	r2, #12
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d117      	bne.n	8004acc <HAL_RCC_OscConfig+0x68>
 8004a9c:	4bbf      	ldr	r3, [pc, #764]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	23c0      	movs	r3, #192	@ 0xc0
 8004aa2:	025b      	lsls	r3, r3, #9
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d10e      	bne.n	8004acc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aae:	4bbb      	ldr	r3, [pc, #748]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	2380      	movs	r3, #128	@ 0x80
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d100      	bne.n	8004abc <HAL_RCC_OscConfig+0x58>
 8004aba:	e071      	b.n	8004ba0 <HAL_RCC_OscConfig+0x13c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d000      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x62>
 8004ac4:	e06c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f000 fb4c 	bl	8005164 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x80>
 8004ad4:	4bb1      	ldr	r3, [pc, #708]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4bb0      	ldr	r3, [pc, #704]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004ada:	2180      	movs	r1, #128	@ 0x80
 8004adc:	0249      	lsls	r1, r1, #9
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e02f      	b.n	8004b44 <HAL_RCC_OscConfig+0xe0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0xa2>
 8004aec:	4bab      	ldr	r3, [pc, #684]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4baa      	ldr	r3, [pc, #680]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004af2:	49ab      	ldr	r1, [pc, #684]	@ (8004da0 <HAL_RCC_OscConfig+0x33c>)
 8004af4:	400a      	ands	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	4ba8      	ldr	r3, [pc, #672]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004afe:	49a9      	ldr	r1, [pc, #676]	@ (8004da4 <HAL_RCC_OscConfig+0x340>)
 8004b00:	400a      	ands	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e01e      	b.n	8004b44 <HAL_RCC_OscConfig+0xe0>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10e      	bne.n	8004b2c <HAL_RCC_OscConfig+0xc8>
 8004b0e:	4ba3      	ldr	r3, [pc, #652]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4ba2      	ldr	r3, [pc, #648]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b14:	2180      	movs	r1, #128	@ 0x80
 8004b16:	02c9      	lsls	r1, r1, #11
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	4b9f      	ldr	r3, [pc, #636]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b9e      	ldr	r3, [pc, #632]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b22:	2180      	movs	r1, #128	@ 0x80
 8004b24:	0249      	lsls	r1, r1, #9
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0xe0>
 8004b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b9a      	ldr	r3, [pc, #616]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b32:	499b      	ldr	r1, [pc, #620]	@ (8004da0 <HAL_RCC_OscConfig+0x33c>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	4b98      	ldr	r3, [pc, #608]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b97      	ldr	r3, [pc, #604]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b3e:	4999      	ldr	r1, [pc, #612]	@ (8004da4 <HAL_RCC_OscConfig+0x340>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d014      	beq.n	8004b76 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd faca 	bl	80020e4 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b56:	f7fd fac5 	bl	80020e4 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	@ 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e2fd      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b68:	4b8c      	ldr	r3, [pc, #560]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	4013      	ands	r3, r2
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0xf2>
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fd fab5 	bl	80020e4 <HAL_GetTick>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fab0 	bl	80020e4 <HAL_GetTick>
 8004b84:	0002      	movs	r2, r0
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e2e8      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b82      	ldr	r3, [pc, #520]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x11c>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d100      	bne.n	8004bae <HAL_RCC_OscConfig+0x14a>
 8004bac:	e06c      	b.n	8004c88 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bae:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bb8:	4b78      	ldr	r3, [pc, #480]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	220c      	movs	r2, #12
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d11f      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1a0>
 8004bc4:	4b75      	ldr	r3, [pc, #468]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	23c0      	movs	r3, #192	@ 0xc0
 8004bca:	025b      	lsls	r3, r3, #9
 8004bcc:	401a      	ands	r2, r3
 8004bce:	2380      	movs	r3, #128	@ 0x80
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b71      	ldr	r3, [pc, #452]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_OscConfig+0x188>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2bb      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b6b      	ldr	r3, [pc, #428]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	22f8      	movs	r2, #248	@ 0xf8
 8004bf2:	4393      	bics	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00da      	lsls	r2, r3, #3
 8004bfc:	4b67      	ldr	r3, [pc, #412]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e041      	b.n	8004c88 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d024      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b63      	ldr	r3, [pc, #396]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b62      	ldr	r3, [pc, #392]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c12:	2101      	movs	r1, #1
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fd fa64 	bl	80020e4 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fd fa5f 	bl	80020e4 <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e297      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d0f1      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b57      	ldr	r3, [pc, #348]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	22f8      	movs	r2, #248	@ 0xf8
 8004c44:	4393      	bics	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	00da      	lsls	r2, r3, #3
 8004c4e:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e018      	b.n	8004c88 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	4b51      	ldr	r3, [pc, #324]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b50      	ldr	r3, [pc, #320]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	438a      	bics	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c62:	f7fd fa3f 	bl	80020e4 <HAL_GetTick>
 8004c66:	0003      	movs	r3, r0
 8004c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fd fa3a 	bl	80020e4 <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e272      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2202      	movs	r2, #2
 8004c84:	4013      	ands	r3, r2
 8004c86:	d1f1      	bne.n	8004c6c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d036      	beq.n	8004d00 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d019      	beq.n	8004cce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9a:	4b40      	ldr	r3, [pc, #256]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7fd fa1d 	bl	80020e4 <HAL_GetTick>
 8004caa:	0003      	movs	r3, r0
 8004cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fd fa18 	bl	80020e4 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e250      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d0f1      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x24c>
 8004ccc:	e018      	b.n	8004d00 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cce:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004cd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cd2:	4b32      	ldr	r3, [pc, #200]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fd fa03 	bl	80020e4 <HAL_GetTick>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fd f9fe 	bl	80020e4 <HAL_GetTick>
 8004ce8:	0002      	movs	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e236      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf6:	4b29      	ldr	r3, [pc, #164]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d1f1      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2204      	movs	r2, #4
 8004d06:	4013      	ands	r3, r2
 8004d08:	d100      	bne.n	8004d0c <HAL_RCC_OscConfig+0x2a8>
 8004d0a:	e0b5      	b.n	8004e78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0c:	201f      	movs	r0, #31
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d14:	4b21      	ldr	r3, [pc, #132]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	055b      	lsls	r3, r3, #21
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d110      	bne.n	8004d42 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d26:	2180      	movs	r1, #128	@ 0x80
 8004d28:	0549      	lsls	r1, r1, #21
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	055b      	lsls	r3, r3, #21
 8004d36:	4013      	ands	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d42:	4b19      	ldr	r3, [pc, #100]	@ (8004da8 <HAL_RCC_OscConfig+0x344>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d11a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d4e:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <HAL_RCC_OscConfig+0x344>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <HAL_RCC_OscConfig+0x344>)
 8004d54:	2180      	movs	r1, #128	@ 0x80
 8004d56:	0049      	lsls	r1, r1, #1
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5c:	f7fd f9c2 	bl	80020e4 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd f9bd 	bl	80020e4 <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	@ 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e1f5      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCC_OscConfig+0x344>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	@ 0x80
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10f      	bne.n	8004dac <HAL_RCC_OscConfig+0x348>
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	4b02      	ldr	r3, [pc, #8]	@ (8004d9c <HAL_RCC_OscConfig+0x338>)
 8004d92:	2101      	movs	r1, #1
 8004d94:	430a      	orrs	r2, r1
 8004d96:	621a      	str	r2, [r3, #32]
 8004d98:	e036      	b.n	8004e08 <HAL_RCC_OscConfig+0x3a4>
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	fffeffff 	.word	0xfffeffff
 8004da4:	fffbffff 	.word	0xfffbffff
 8004da8:	40007000 	.word	0x40007000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x36a>
 8004db4:	4bca      	ldr	r3, [pc, #808]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	4bc9      	ldr	r3, [pc, #804]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004dba:	2101      	movs	r1, #1
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	621a      	str	r2, [r3, #32]
 8004dc0:	4bc7      	ldr	r3, [pc, #796]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	4bc6      	ldr	r3, [pc, #792]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	438a      	bics	r2, r1
 8004dca:	621a      	str	r2, [r3, #32]
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x3a4>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x38c>
 8004dd6:	4bc2      	ldr	r3, [pc, #776]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	4bc1      	ldr	r3, [pc, #772]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004ddc:	2104      	movs	r1, #4
 8004dde:	430a      	orrs	r2, r1
 8004de0:	621a      	str	r2, [r3, #32]
 8004de2:	4bbf      	ldr	r3, [pc, #764]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004de4:	6a1a      	ldr	r2, [r3, #32]
 8004de6:	4bbe      	ldr	r3, [pc, #760]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	621a      	str	r2, [r3, #32]
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x3a4>
 8004df0:	4bbb      	ldr	r3, [pc, #748]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	4bba      	ldr	r3, [pc, #744]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004df6:	2101      	movs	r1, #1
 8004df8:	438a      	bics	r2, r1
 8004dfa:	621a      	str	r2, [r3, #32]
 8004dfc:	4bb8      	ldr	r3, [pc, #736]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	4bb7      	ldr	r3, [pc, #732]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e02:	2104      	movs	r1, #4
 8004e04:	438a      	bics	r2, r1
 8004e06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d014      	beq.n	8004e3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e10:	f7fd f968 	bl	80020e4 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	e009      	b.n	8004e2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fd f963 	bl	80020e4 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	4aaf      	ldr	r2, [pc, #700]	@ (80050e4 <HAL_RCC_OscConfig+0x680>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e19a      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4bac      	ldr	r3, [pc, #688]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	2202      	movs	r2, #2
 8004e34:	4013      	ands	r3, r2
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x3b6>
 8004e38:	e013      	b.n	8004e62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fd f953 	bl	80020e4 <HAL_GetTick>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e009      	b.n	8004e58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fd f94e 	bl	80020e4 <HAL_GetTick>
 8004e48:	0002      	movs	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	4aa5      	ldr	r2, [pc, #660]	@ (80050e4 <HAL_RCC_OscConfig+0x680>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e185      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e58:	4ba1      	ldr	r3, [pc, #644]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e62:	231f      	movs	r3, #31
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	4b9b      	ldr	r3, [pc, #620]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e72:	499d      	ldr	r1, [pc, #628]	@ (80050e8 <HAL_RCC_OscConfig+0x684>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d063      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d12a      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e8a:	4b95      	ldr	r3, [pc, #596]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8e:	4b94      	ldr	r3, [pc, #592]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e90:	2104      	movs	r1, #4
 8004e92:	430a      	orrs	r2, r1
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e96:	4b92      	ldr	r3, [pc, #584]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9a:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd f91f 	bl	80020e4 <HAL_GetTick>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004eac:	f7fd f91a 	bl	80020e4 <HAL_GetTick>
 8004eb0:	0002      	movs	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e152      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ebe:	4b88      	ldr	r3, [pc, #544]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d0f1      	beq.n	8004eac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ec8:	4b85      	ldr	r3, [pc, #532]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ecc:	22f8      	movs	r2, #248	@ 0xf8
 8004ece:	4393      	bics	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	00da      	lsls	r2, r3, #3
 8004ed8:	4b81      	ldr	r3, [pc, #516]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ede:	e034      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	3305      	adds	r3, #5
 8004ee6:	d111      	bne.n	8004f0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ee8:	4b7d      	ldr	r3, [pc, #500]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eec:	4b7c      	ldr	r3, [pc, #496]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004eee:	2104      	movs	r1, #4
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	22f8      	movs	r2, #248	@ 0xf8
 8004efa:	4393      	bics	r3, r2
 8004efc:	0019      	movs	r1, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	00da      	lsls	r2, r3, #3
 8004f04:	4b76      	ldr	r3, [pc, #472]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f06:	430a      	orrs	r2, r1
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f0a:	e01e      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f0c:	4b74      	ldr	r3, [pc, #464]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f10:	4b73      	ldr	r3, [pc, #460]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f12:	2104      	movs	r1, #4
 8004f14:	430a      	orrs	r2, r1
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f18:	4b71      	ldr	r3, [pc, #452]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1c:	4b70      	ldr	r3, [pc, #448]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f1e:	2101      	movs	r1, #1
 8004f20:	438a      	bics	r2, r1
 8004f22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fd f8de 	bl	80020e4 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f2e:	f7fd f8d9 	bl	80020e4 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e111      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f40:	4b67      	ldr	r3, [pc, #412]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f44:	2202      	movs	r2, #2
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f1      	bne.n	8004f2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4013      	ands	r3, r2
 8004f52:	d05c      	beq.n	800500e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f54:	4b62      	ldr	r3, [pc, #392]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	220c      	movs	r2, #12
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d00e      	beq.n	8004f7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f60:	4b5f      	ldr	r3, [pc, #380]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	220c      	movs	r2, #12
 8004f66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d114      	bne.n	8004f96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	23c0      	movs	r3, #192	@ 0xc0
 8004f72:	025b      	lsls	r3, r3, #9
 8004f74:	401a      	ands	r2, r3
 8004f76:	23c0      	movs	r3, #192	@ 0xc0
 8004f78:	025b      	lsls	r3, r3, #9
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f7e:	4b58      	ldr	r3, [pc, #352]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f82:	2380      	movs	r3, #128	@ 0x80
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	4013      	ands	r3, r2
 8004f88:	d040      	beq.n	800500c <HAL_RCC_OscConfig+0x5a8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d03c      	beq.n	800500c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e0e6      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f9e:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004fa4:	2180      	movs	r1, #128	@ 0x80
 8004fa6:	0249      	lsls	r1, r1, #9
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fd f89a 	bl	80020e4 <HAL_GetTick>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb6:	f7fd f895 	bl	80020e4 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0cd      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fc8:	4b45      	ldr	r3, [pc, #276]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x552>
 8004fd4:	e01b      	b.n	800500e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fd6:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fda:	4b41      	ldr	r3, [pc, #260]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8004fdc:	4943      	ldr	r1, [pc, #268]	@ (80050ec <HAL_RCC_OscConfig+0x688>)
 8004fde:	400a      	ands	r2, r1
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fd f87f 	bl	80020e4 <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fec:	f7fd f87a 	bl	80020e4 <HAL_GetTick>
 8004ff0:	0002      	movs	r2, r0
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e0b2      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ffe:	4b38      	ldr	r3, [pc, #224]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005002:	2380      	movs	r3, #128	@ 0x80
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	4013      	ands	r3, r2
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x588>
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800500c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d100      	bne.n	8005018 <HAL_RCC_OscConfig+0x5b4>
 8005016:	e0a4      	b.n	8005162 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	220c      	movs	r2, #12
 800501e:	4013      	ands	r3, r2
 8005020:	2b08      	cmp	r3, #8
 8005022:	d100      	bne.n	8005026 <HAL_RCC_OscConfig+0x5c2>
 8005024:	e078      	b.n	8005118 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	2b02      	cmp	r3, #2
 800502c:	d14c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005034:	492e      	ldr	r1, [pc, #184]	@ (80050f0 <HAL_RCC_OscConfig+0x68c>)
 8005036:	400a      	ands	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fd f853 	bl	80020e4 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd f84e 	bl	80020e4 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e086      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005056:	4b22      	ldr	r3, [pc, #136]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	049b      	lsls	r3, r3, #18
 800505e:	4013      	ands	r3, r2
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	220f      	movs	r2, #15
 8005068:	4393      	bics	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005072:	430a      	orrs	r2, r1
 8005074:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a1e      	ldr	r2, [pc, #120]	@ (80050f4 <HAL_RCC_OscConfig+0x690>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	431a      	orrs	r2, r3
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005090:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 8005096:	2180      	movs	r1, #128	@ 0x80
 8005098:	0449      	lsls	r1, r1, #17
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fd f821 	bl	80020e4 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd f81c 	bl	80020e4 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e054      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	@ 0x80
 80050c0:	049b      	lsls	r3, r3, #18
 80050c2:	4013      	ands	r3, r2
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x644>
 80050c6:	e04c      	b.n	8005162 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <HAL_RCC_OscConfig+0x67c>)
 80050ce:	4908      	ldr	r1, [pc, #32]	@ (80050f0 <HAL_RCC_OscConfig+0x68c>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fd f806 	bl	80020e4 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x6a6>
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000
 80050e4:	00001388 	.word	0x00001388
 80050e8:	efffffff 	.word	0xefffffff
 80050ec:	fffeffff 	.word	0xfffeffff
 80050f0:	feffffff 	.word	0xfeffffff
 80050f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fc fff4 	bl	80020e4 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e02c      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510a:	4b18      	ldr	r3, [pc, #96]	@ (800516c <HAL_RCC_OscConfig+0x708>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	049b      	lsls	r3, r3, #18
 8005112:	4013      	ands	r3, r2
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x694>
 8005116:	e024      	b.n	8005162 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e01f      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005124:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCC_OscConfig+0x708>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800512a:	4b10      	ldr	r3, [pc, #64]	@ (800516c <HAL_RCC_OscConfig+0x708>)
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	23c0      	movs	r3, #192	@ 0xc0
 8005134:	025b      	lsls	r3, r3, #9
 8005136:	401a      	ands	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	429a      	cmp	r2, r3
 800513e:	d10e      	bne.n	800515e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	220f      	movs	r2, #15
 8005144:	401a      	ands	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d107      	bne.n	800515e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	23f0      	movs	r3, #240	@ 0xf0
 8005152:	039b      	lsls	r3, r3, #14
 8005154:	401a      	ands	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b008      	add	sp, #32
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000

08005170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0bf      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b61      	ldr	r3, [pc, #388]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d911      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b5e      	ldr	r3, [pc, #376]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	4393      	bics	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	4b5b      	ldr	r3, [pc, #364]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a4:	4b59      	ldr	r3, [pc, #356]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	4013      	ands	r3, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0a6      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2202      	movs	r2, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	d015      	beq.n	80051ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2204      	movs	r2, #4
 80051c6:	4013      	ands	r3, r2
 80051c8:	d006      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051ca:	4b51      	ldr	r3, [pc, #324]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4b50      	ldr	r3, [pc, #320]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80051d0:	21e0      	movs	r1, #224	@ 0xe0
 80051d2:	00c9      	lsls	r1, r1, #3
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	22f0      	movs	r2, #240	@ 0xf0
 80051de:	4393      	bics	r3, r2
 80051e0:	0019      	movs	r1, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	d04c      	beq.n	8005290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	4b44      	ldr	r3, [pc, #272]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	4013      	ands	r3, r2
 8005208:	d120      	bne.n	800524c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e07a      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005216:	4b3e      	ldr	r3, [pc, #248]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	2380      	movs	r3, #128	@ 0x80
 800521c:	049b      	lsls	r3, r3, #18
 800521e:	4013      	ands	r3, r2
 8005220:	d114      	bne.n	800524c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e06e      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800522e:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 8005230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005232:	2380      	movs	r3, #128	@ 0x80
 8005234:	029b      	lsls	r3, r3, #10
 8005236:	4013      	ands	r3, r2
 8005238:	d108      	bne.n	800524c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e062      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e05b      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524c:	4b30      	ldr	r3, [pc, #192]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2203      	movs	r2, #3
 8005252:	4393      	bics	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	4b2d      	ldr	r3, [pc, #180]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005260:	f7fc ff40 	bl	80020e4 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005268:	e009      	b.n	800527e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526a:	f7fc ff3b 	bl	80020e4 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	4a27      	ldr	r2, [pc, #156]	@ (8005314 <HAL_RCC_ClockConfig+0x1a4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e042      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	220c      	movs	r2, #12
 8005284:	401a      	ands	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1ec      	bne.n	800526a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b1e      	ldr	r3, [pc, #120]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	4013      	ands	r3, r2
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d211      	bcs.n	80052c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	4393      	bics	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	4b18      	ldr	r3, [pc, #96]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b0:	4b16      	ldr	r3, [pc, #88]	@ (800530c <HAL_RCC_ClockConfig+0x19c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e020      	b.n	8005304 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2204      	movs	r2, #4
 80052c8:	4013      	ands	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b10      	ldr	r3, [pc, #64]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a11      	ldr	r2, [pc, #68]	@ (8005318 <HAL_RCC_ClockConfig+0x1a8>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	0019      	movs	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052e0:	f000 f820 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80052e4:	0001      	movs	r1, r0
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <HAL_RCC_ClockConfig+0x1a0>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	220f      	movs	r2, #15
 80052ee:	4013      	ands	r3, r2
 80052f0:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <HAL_RCC_ClockConfig+0x1ac>)
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	000a      	movs	r2, r1
 80052f6:	40da      	lsrs	r2, r3
 80052f8:	4b09      	ldr	r3, [pc, #36]	@ (8005320 <HAL_RCC_ClockConfig+0x1b0>)
 80052fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052fc:	2003      	movs	r0, #3
 80052fe:	f7fc feab 	bl	8002058 <HAL_InitTick>
  
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40022000 	.word	0x40022000
 8005310:	40021000 	.word	0x40021000
 8005314:	00001388 	.word	0x00001388
 8005318:	fffff8ff 	.word	0xfffff8ff
 800531c:	0800b134 	.word	0x0800b134
 8005320:	2000039c 	.word	0x2000039c

08005324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800533e:	4b2d      	ldr	r3, [pc, #180]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	220c      	movs	r2, #12
 8005348:	4013      	ands	r3, r2
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d046      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0xb8>
 800534e:	d848      	bhi.n	80053e2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005350:	2b04      	cmp	r3, #4
 8005352:	d002      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x36>
 8005354:	2b08      	cmp	r3, #8
 8005356:	d003      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x3c>
 8005358:	e043      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4b27      	ldr	r3, [pc, #156]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800535c:	613b      	str	r3, [r7, #16]
      break;
 800535e:	e043      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0c9b      	lsrs	r3, r3, #18
 8005364:	220f      	movs	r2, #15
 8005366:	4013      	ands	r3, r2
 8005368:	4a24      	ldr	r2, [pc, #144]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xd8>)
 800536a:	5cd3      	ldrb	r3, [r2, r3]
 800536c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800536e:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	220f      	movs	r2, #15
 8005374:	4013      	ands	r3, r2
 8005376:	4a22      	ldr	r2, [pc, #136]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	23c0      	movs	r3, #192	@ 0xc0
 8005380:	025b      	lsls	r3, r3, #9
 8005382:	401a      	ands	r2, r3
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	025b      	lsls	r3, r3, #9
 8005388:	429a      	cmp	r2, r3
 800538a:	d109      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	481a      	ldr	r0, [pc, #104]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005390:	f7fa feba 	bl	8000108 <__udivsi3>
 8005394:	0003      	movs	r3, r0
 8005396:	001a      	movs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4353      	muls	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e01a      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	23c0      	movs	r3, #192	@ 0xc0
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	401a      	ands	r2, r3
 80053a8:	23c0      	movs	r3, #192	@ 0xc0
 80053aa:	025b      	lsls	r3, r3, #9
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d109      	bne.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4814      	ldr	r0, [pc, #80]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053b4:	f7fa fea8 	bl	8000108 <__udivsi3>
 80053b8:	0003      	movs	r3, r0
 80053ba:	001a      	movs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4353      	muls	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	480c      	ldr	r0, [pc, #48]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053c8:	f7fa fe9e 	bl	8000108 <__udivsi3>
 80053cc:	0003      	movs	r3, r0
 80053ce:	001a      	movs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4353      	muls	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	613b      	str	r3, [r7, #16]
      break;
 80053da:	e005      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053de:	613b      	str	r3, [r7, #16]
      break;
 80053e0:	e002      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053e2:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053e4:	613b      	str	r3, [r7, #16]
      break;
 80053e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053e8:	693b      	ldr	r3, [r7, #16]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b006      	add	sp, #24
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	40021000 	.word	0x40021000
 80053f8:	007a1200 	.word	0x007a1200
 80053fc:	0800b144 	.word	0x0800b144
 8005400:	0800b154 	.word	0x0800b154
 8005404:	02dc6c00 	.word	0x02dc6c00

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	025b      	lsls	r3, r3, #9
 8005420:	4013      	ands	r3, r2
 8005422:	d100      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005424:	e08e      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2017      	movs	r0, #23
 8005428:	183b      	adds	r3, r7, r0
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542e:	4b6e      	ldr	r3, [pc, #440]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	2380      	movs	r3, #128	@ 0x80
 8005434:	055b      	lsls	r3, r3, #21
 8005436:	4013      	ands	r3, r2
 8005438:	d110      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	4b6b      	ldr	r3, [pc, #428]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	4b6a      	ldr	r3, [pc, #424]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005440:	2180      	movs	r1, #128	@ 0x80
 8005442:	0549      	lsls	r1, r1, #21
 8005444:	430a      	orrs	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
 8005448:	4b67      	ldr	r3, [pc, #412]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	2380      	movs	r3, #128	@ 0x80
 800544e:	055b      	lsls	r3, r3, #21
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005456:	183b      	adds	r3, r7, r0
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	4b63      	ldr	r3, [pc, #396]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4013      	ands	r3, r2
 8005466:	d11a      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005468:	4b60      	ldr	r3, [pc, #384]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b5f      	ldr	r3, [pc, #380]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800546e:	2180      	movs	r1, #128	@ 0x80
 8005470:	0049      	lsls	r1, r1, #1
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7fc fe35 	bl	80020e4 <HAL_GetTick>
 800547a:	0003      	movs	r3, r0
 800547c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	e008      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fc fe30 	bl	80020e4 <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0a6      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005492:	4b56      	ldr	r3, [pc, #344]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4013      	ands	r3, r2
 800549c:	d0f0      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800549e:	4b52      	ldr	r3, [pc, #328]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	23c0      	movs	r3, #192	@ 0xc0
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4013      	ands	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d034      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	23c0      	movs	r3, #192	@ 0xc0
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4013      	ands	r3, r2
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d02c      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054c0:	4b49      	ldr	r3, [pc, #292]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4a4a      	ldr	r2, [pc, #296]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ca:	4b47      	ldr	r3, [pc, #284]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	4b46      	ldr	r3, [pc, #280]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054d0:	2180      	movs	r1, #128	@ 0x80
 80054d2:	0249      	lsls	r1, r1, #9
 80054d4:	430a      	orrs	r2, r1
 80054d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054d8:	4b43      	ldr	r3, [pc, #268]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	4b42      	ldr	r3, [pc, #264]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054de:	4945      	ldr	r1, [pc, #276]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054e4:	4b40      	ldr	r3, [pc, #256]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f2:	f7fc fdf7 	bl	80020e4 <HAL_GetTick>
 80054f6:	0003      	movs	r3, r0
 80054f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fa:	e009      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fc fdf2 	bl	80020e4 <HAL_GetTick>
 8005500:	0002      	movs	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	4a3c      	ldr	r2, [pc, #240]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e067      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005510:	4b35      	ldr	r3, [pc, #212]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	2202      	movs	r2, #2
 8005516:	4013      	ands	r3, r2
 8005518:	d0f0      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551a:	4b33      	ldr	r3, [pc, #204]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b2f      	ldr	r3, [pc, #188]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800552a:	430a      	orrs	r2, r1
 800552c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800552e:	2317      	movs	r3, #23
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d105      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005538:	4b2b      	ldr	r3, [pc, #172]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800553e:	492f      	ldr	r1, [pc, #188]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005540:	400a      	ands	r2, r1
 8005542:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800554e:	4b26      	ldr	r3, [pc, #152]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	2203      	movs	r2, #3
 8005554:	4393      	bics	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	4b22      	ldr	r3, [pc, #136]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555e:	430a      	orrs	r2, r1
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2202      	movs	r2, #2
 8005568:	4013      	ands	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800556c:	4b1e      	ldr	r3, [pc, #120]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	4a23      	ldr	r2, [pc, #140]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005572:	4013      	ands	r3, r2
 8005574:	0019      	movs	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800557c:	430a      	orrs	r2, r1
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2220      	movs	r2, #32
 8005586:	4013      	ands	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558a:	4b17      	ldr	r3, [pc, #92]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	2210      	movs	r2, #16
 8005590:	4393      	bics	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800559a:	430a      	orrs	r2, r1
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	4013      	ands	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055aa:	4b0f      	ldr	r3, [pc, #60]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	2280      	movs	r2, #128	@ 0x80
 80055b0:	4393      	bics	r3, r2
 80055b2:	0019      	movs	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ba:	430a      	orrs	r2, r1
 80055bc:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	2380      	movs	r3, #128	@ 0x80
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4013      	ands	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055ca:	4b07      	ldr	r3, [pc, #28]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	2240      	movs	r2, #64	@ 0x40
 80055d0:	4393      	bics	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	4b03      	ldr	r3, [pc, #12]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055da:	430a      	orrs	r2, r1
 80055dc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b006      	add	sp, #24
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40007000 	.word	0x40007000
 80055f0:	fffffcff 	.word	0xfffffcff
 80055f4:	fffeffff 	.word	0xfffeffff
 80055f8:	00001388 	.word	0x00001388
 80055fc:	efffffff 	.word	0xefffffff
 8005600:	fffcffff 	.word	0xfffcffff

08005604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e042      	b.n	800569c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223d      	movs	r2, #61	@ 0x3d
 800561a:	5c9b      	ldrb	r3, [r3, r2]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d107      	bne.n	8005632 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	223c      	movs	r2, #60	@ 0x3c
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f7fc fbdb 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	223d      	movs	r2, #61	@ 0x3d
 8005636:	2102      	movs	r1, #2
 8005638:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	0019      	movs	r1, r3
 8005644:	0010      	movs	r0, r2
 8005646:	f000 fee9 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2246      	movs	r2, #70	@ 0x46
 800564e:	2101      	movs	r1, #1
 8005650:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	223e      	movs	r2, #62	@ 0x3e
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	223f      	movs	r2, #63	@ 0x3f
 800565e:	2101      	movs	r1, #1
 8005660:	5499      	strb	r1, [r3, r2]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2240      	movs	r2, #64	@ 0x40
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2241      	movs	r2, #65	@ 0x41
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2242      	movs	r2, #66	@ 0x42
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2243      	movs	r2, #67	@ 0x43
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2244      	movs	r2, #68	@ 0x44
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2245      	movs	r2, #69	@ 0x45
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	223d      	movs	r2, #61	@ 0x3d
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	223d      	movs	r2, #61	@ 0x3d
 80056b0:	5c9b      	ldrb	r3, [r3, r2]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e03b      	b.n	8005734 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	223d      	movs	r2, #61	@ 0x3d
 80056c0:	2102      	movs	r1, #2
 80056c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2101      	movs	r1, #1
 80056d0:	430a      	orrs	r2, r1
 80056d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a18      	ldr	r2, [pc, #96]	@ (800573c <HAL_TIM_Base_Start_IT+0x98>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <HAL_TIM_Base_Start_IT+0x5a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	05db      	lsls	r3, r3, #23
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d009      	beq.n	80056fe <HAL_TIM_Base_Start_IT+0x5a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a14      	ldr	r2, [pc, #80]	@ (8005740 <HAL_TIM_Base_Start_IT+0x9c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIM_Base_Start_IT+0x5a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <HAL_TIM_Base_Start_IT+0xa0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d111      	bne.n	8005722 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2207      	movs	r2, #7
 8005706:	4013      	ands	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d010      	beq.n	8005732 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2101      	movs	r1, #1
 800571c:	430a      	orrs	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	e007      	b.n	8005732 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2101      	movs	r1, #1
 800572e:	430a      	orrs	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b004      	add	sp, #16
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40014000 	.word	0x40014000

08005748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e042      	b.n	80057e0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	223d      	movs	r2, #61	@ 0x3d
 800575e:	5c9b      	ldrb	r3, [r3, r2]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223c      	movs	r2, #60	@ 0x3c
 800576a:	2100      	movs	r1, #0
 800576c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f000 f839 	bl	80057e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	223d      	movs	r2, #61	@ 0x3d
 800577a:	2102      	movs	r1, #2
 800577c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	0019      	movs	r1, r3
 8005788:	0010      	movs	r0, r2
 800578a:	f000 fe47 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2246      	movs	r2, #70	@ 0x46
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	223e      	movs	r2, #62	@ 0x3e
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	223f      	movs	r2, #63	@ 0x3f
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2240      	movs	r2, #64	@ 0x40
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2241      	movs	r2, #65	@ 0x41
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2242      	movs	r2, #66	@ 0x42
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2243      	movs	r2, #67	@ 0x43
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2244      	movs	r2, #68	@ 0x44
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2245      	movs	r2, #69	@ 0x45
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	223d      	movs	r2, #61	@ 0x3d
 80057da:	2101      	movs	r1, #1
 80057dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b002      	add	sp, #8
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	001a      	movs	r2, r3
 8005806:	1cbb      	adds	r3, r7, #2
 8005808:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2317      	movs	r3, #23
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d108      	bne.n	800582a <HAL_TIM_PWM_Start_DMA+0x32>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	223e      	movs	r2, #62	@ 0x3e
 800581c:	5c9b      	ldrb	r3, [r3, r2]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	3b02      	subs	r3, #2
 8005822:	425a      	negs	r2, r3
 8005824:	4153      	adcs	r3, r2
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e01f      	b.n	800586a <HAL_TIM_PWM_Start_DMA+0x72>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d108      	bne.n	8005842 <HAL_TIM_PWM_Start_DMA+0x4a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	223f      	movs	r2, #63	@ 0x3f
 8005834:	5c9b      	ldrb	r3, [r3, r2]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	3b02      	subs	r3, #2
 800583a:	425a      	negs	r2, r3
 800583c:	4153      	adcs	r3, r2
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e013      	b.n	800586a <HAL_TIM_PWM_Start_DMA+0x72>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d108      	bne.n	800585a <HAL_TIM_PWM_Start_DMA+0x62>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	5c9b      	ldrb	r3, [r3, r2]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	3b02      	subs	r3, #2
 8005852:	425a      	negs	r2, r3
 8005854:	4153      	adcs	r3, r2
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e007      	b.n	800586a <HAL_TIM_PWM_Start_DMA+0x72>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2241      	movs	r2, #65	@ 0x41
 800585e:	5c9b      	ldrb	r3, [r3, r2]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	3b02      	subs	r3, #2
 8005864:	425a      	negs	r2, r3
 8005866:	4153      	adcs	r3, r2
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
 8005870:	e164      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d108      	bne.n	800588a <HAL_TIM_PWM_Start_DMA+0x92>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	223e      	movs	r2, #62	@ 0x3e
 800587c:	5c9b      	ldrb	r3, [r3, r2]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	425a      	negs	r2, r3
 8005884:	4153      	adcs	r3, r2
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e01f      	b.n	80058ca <HAL_TIM_PWM_Start_DMA+0xd2>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d108      	bne.n	80058a2 <HAL_TIM_PWM_Start_DMA+0xaa>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	223f      	movs	r2, #63	@ 0x3f
 8005894:	5c9b      	ldrb	r3, [r3, r2]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	425a      	negs	r2, r3
 800589c:	4153      	adcs	r3, r2
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e013      	b.n	80058ca <HAL_TIM_PWM_Start_DMA+0xd2>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d108      	bne.n	80058ba <HAL_TIM_PWM_Start_DMA+0xc2>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2240      	movs	r2, #64	@ 0x40
 80058ac:	5c9b      	ldrb	r3, [r3, r2]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	425a      	negs	r2, r3
 80058b4:	4153      	adcs	r3, r2
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	e007      	b.n	80058ca <HAL_TIM_PWM_Start_DMA+0xd2>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2241      	movs	r2, #65	@ 0x41
 80058be:	5c9b      	ldrb	r3, [r3, r2]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	425a      	negs	r2, r3
 80058c6:	4153      	adcs	r3, r2
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d025      	beq.n	800591a <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_TIM_PWM_Start_DMA+0xe4>
 80058d4:	1cbb      	adds	r3, r7, #2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e12d      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <HAL_TIM_PWM_Start_DMA+0xf8>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	223e      	movs	r2, #62	@ 0x3e
 80058ea:	2102      	movs	r1, #2
 80058ec:	5499      	strb	r1, [r3, r2]
 80058ee:	e016      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x126>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d104      	bne.n	8005900 <HAL_TIM_PWM_Start_DMA+0x108>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	223f      	movs	r2, #63	@ 0x3f
 80058fa:	2102      	movs	r1, #2
 80058fc:	5499      	strb	r1, [r3, r2]
 80058fe:	e00e      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x126>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b08      	cmp	r3, #8
 8005904:	d104      	bne.n	8005910 <HAL_TIM_PWM_Start_DMA+0x118>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2240      	movs	r2, #64	@ 0x40
 800590a:	2102      	movs	r1, #2
 800590c:	5499      	strb	r1, [r3, r2]
 800590e:	e006      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x126>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2241      	movs	r2, #65	@ 0x41
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]
 8005918:	e001      	b.n	800591e <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e10e      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d100      	bne.n	8005926 <HAL_TIM_PWM_Start_DMA+0x12e>
 8005924:	e080      	b.n	8005a28 <HAL_TIM_PWM_Start_DMA+0x230>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d900      	bls.n	800592e <HAL_TIM_PWM_Start_DMA+0x136>
 800592c:	e0a1      	b.n	8005a72 <HAL_TIM_PWM_Start_DMA+0x27a>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d054      	beq.n	80059de <HAL_TIM_PWM_Start_DMA+0x1e6>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d900      	bls.n	800593c <HAL_TIM_PWM_Start_DMA+0x144>
 800593a:	e09a      	b.n	8005a72 <HAL_TIM_PWM_Start_DMA+0x27a>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_PWM_Start_DMA+0x152>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b04      	cmp	r3, #4
 8005946:	d025      	beq.n	8005994 <HAL_TIM_PWM_Start_DMA+0x19c>
 8005948:	e093      	b.n	8005a72 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	4a7d      	ldr	r2, [pc, #500]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005950:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	4a7c      	ldr	r2, [pc, #496]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005958:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	4a7b      	ldr	r2, [pc, #492]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x354>)
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3334      	adds	r3, #52	@ 0x34
 800596e:	001a      	movs	r2, r3
 8005970:	1cbb      	adds	r3, r7, #2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	f7fc fce6 	bl	8002344 <HAL_DMA_Start_IT>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d001      	beq.n	8005980 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0dd      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	0089      	lsls	r1, r1, #2
 800598e:	430a      	orrs	r2, r1
 8005990:	60da      	str	r2, [r3, #12]
      break;
 8005992:	e073      	b.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	4a6a      	ldr	r2, [pc, #424]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	4a69      	ldr	r2, [pc, #420]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x350>)
 80059a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	4a68      	ldr	r2, [pc, #416]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x354>)
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3338      	adds	r3, #56	@ 0x38
 80059b8:	001a      	movs	r2, r3
 80059ba:	1cbb      	adds	r3, r7, #2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	f7fc fcc1 	bl	8002344 <HAL_DMA_Start_IT>
 80059c2:	1e03      	subs	r3, r0, #0
 80059c4:	d001      	beq.n	80059ca <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0b8      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	00c9      	lsls	r1, r1, #3
 80059d8:	430a      	orrs	r2, r1
 80059da:	60da      	str	r2, [r3, #12]
      break;
 80059dc:	e04e      	b.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	4a58      	ldr	r2, [pc, #352]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80059e4:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	4a57      	ldr	r2, [pc, #348]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x350>)
 80059ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	4a56      	ldr	r2, [pc, #344]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x354>)
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	333c      	adds	r3, #60	@ 0x3c
 8005a02:	001a      	movs	r2, r3
 8005a04:	1cbb      	adds	r3, r7, #2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	f7fc fc9c 	bl	8002344 <HAL_DMA_Start_IT>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e093      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	0109      	lsls	r1, r1, #4
 8005a22:	430a      	orrs	r2, r1
 8005a24:	60da      	str	r2, [r3, #12]
      break;
 8005a26:	e029      	b.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	4a45      	ldr	r2, [pc, #276]	@ (8005b44 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	4a44      	ldr	r2, [pc, #272]	@ (8005b48 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	4a43      	ldr	r2, [pc, #268]	@ (8005b4c <HAL_TIM_PWM_Start_DMA+0x354>)
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3340      	adds	r3, #64	@ 0x40
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	1cbb      	adds	r3, r7, #2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	f7fc fc77 	bl	8002344 <HAL_DMA_Start_IT>
 8005a56:	1e03      	subs	r3, r0, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e06e      	b.n	8005b3c <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2180      	movs	r1, #128	@ 0x80
 8005a6a:	0149      	lsls	r1, r1, #5
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	60da      	str	r2, [r3, #12]
      break;
 8005a70:	e004      	b.n	8005a7c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8005a72:	2317      	movs	r3, #23
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
      break;
 8005a7a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005a7c:	2317      	movs	r3, #23
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d157      	bne.n	8005b36 <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 ffe8 	bl	8006a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2a      	ldr	r2, [pc, #168]	@ (8005b58 <HAL_TIM_PWM_Start_DMA+0x360>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a29      	ldr	r2, [pc, #164]	@ (8005b5c <HAL_TIM_PWM_Start_DMA+0x364>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2180      	movs	r1, #128	@ 0x80
 8005ad2:	0209      	lsls	r1, r1, #8
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b50 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00f      	beq.n	8005b02 <HAL_TIM_PWM_Start_DMA+0x30a>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	05db      	lsls	r3, r3, #23
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d009      	beq.n	8005b02 <HAL_TIM_PWM_Start_DMA+0x30a>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIM_PWM_Start_DMA+0x30a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2207      	movs	r2, #7
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d010      	beq.n	8005b36 <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	e007      	b.n	8005b36 <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2101      	movs	r1, #1
 8005b32:	430a      	orrs	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b36:	2317      	movs	r3, #23
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	781b      	ldrb	r3, [r3, #0]
}
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b006      	add	sp, #24
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	08006309 	.word	0x08006309
 8005b48:	080063b3 	.word	0x080063b3
 8005b4c:	08006275 	.word	0x08006275
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	40000400 	.word	0x40000400

08005b64 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	230f      	movs	r3, #15
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	d039      	beq.n	8005bf0 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d844      	bhi.n	8005c0c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d025      	beq.n	8005bd4 <HAL_TIM_PWM_Stop_DMA+0x70>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d83e      	bhi.n	8005c0c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_TIM_PWM_Stop_DMA+0x38>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_PWM_Stop_DMA+0x54>
 8005b9a:	e037      	b.n	8005c0c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4954      	ldr	r1, [pc, #336]	@ (8005cf8 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8005ba8:	400a      	ands	r2, r1
 8005baa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7fc fc2d 	bl	8002410 <HAL_DMA_Abort_IT>
      break;
 8005bb6:	e02e      	b.n	8005c16 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	494e      	ldr	r1, [pc, #312]	@ (8005cfc <HAL_TIM_PWM_Stop_DMA+0x198>)
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7fc fc1f 	bl	8002410 <HAL_DMA_Abort_IT>
      break;
 8005bd2:	e020      	b.n	8005c16 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4948      	ldr	r1, [pc, #288]	@ (8005d00 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7fc fc11 	bl	8002410 <HAL_DMA_Abort_IT>
      break;
 8005bee:	e012      	b.n	8005c16 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4942      	ldr	r1, [pc, #264]	@ (8005d04 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7fc fc03 	bl	8002410 <HAL_DMA_Abort_IT>
      break;
 8005c0a:	e004      	b.n	8005c16 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]
      break;
 8005c14:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c16:	230f      	movs	r3, #15
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d000      	beq.n	8005c22 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8005c20:	e063      	b.n	8005cea <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 ff1a 	bl	8006a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a34      	ldr	r2, [pc, #208]	@ (8005d08 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a33      	ldr	r2, [pc, #204]	@ (8005d0c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a31      	ldr	r2, [pc, #196]	@ (8005d10 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a30      	ldr	r2, [pc, #192]	@ (8005d14 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d101      	bne.n	8005c5c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <HAL_TIM_PWM_Stop_DMA+0xfa>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	@ (8005d18 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <HAL_TIM_PWM_Stop_DMA+0x126>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a29      	ldr	r2, [pc, #164]	@ (8005d1c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_PWM_Stop_DMA+0x126>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4926      	ldr	r1, [pc, #152]	@ (8005d20 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	d10d      	bne.n	8005cb2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8005d1c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2101      	movs	r1, #1
 8005cae:	438a      	bics	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Stop_DMA+0x15e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	223e      	movs	r2, #62	@ 0x3e
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	5499      	strb	r1, [r3, r2]
 8005cc0:	e013      	b.n	8005cea <HAL_TIM_PWM_Stop_DMA+0x186>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223f      	movs	r2, #63	@ 0x3f
 8005ccc:	2101      	movs	r1, #1
 8005cce:	5499      	strb	r1, [r3, r2]
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_PWM_Stop_DMA+0x186>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Stop_DMA+0x17e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2240      	movs	r2, #64	@ 0x40
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]
 8005ce0:	e003      	b.n	8005cea <HAL_TIM_PWM_Stop_DMA+0x186>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2241      	movs	r2, #65	@ 0x41
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005cea:	230f      	movs	r3, #15
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	fffffdff 	.word	0xfffffdff
 8005cfc:	fffffbff 	.word	0xfffffbff
 8005d00:	fffff7ff 	.word	0xfffff7ff
 8005d04:	ffffefff 	.word	0xffffefff
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800
 8005d18:	00001111 	.word	0x00001111
 8005d1c:	00000444 	.word	0x00000444
 8005d20:	ffff7fff 	.word	0xffff7fff

08005d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	4013      	ands	r3, r2
 8005d42:	d021      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2202      	movs	r2, #2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2203      	movs	r2, #3
 8005d52:	4252      	negs	r2, r2
 8005d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2203      	movs	r2, #3
 8005d64:	4013      	ands	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 fa6a 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e007      	b.n	8005d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 fa5d 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7fb ff55 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2204      	movs	r2, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	d01e      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	4252      	negs	r2, r2
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	23c0      	movs	r3, #192	@ 0xc0
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 fa43 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005dbe:	e007      	b.n	8005dd0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 fa36 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f7fb ff2e 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d021      	beq.n	8005e22 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4013      	ands	r3, r2
 8005de4:	d01d      	beq.n	8005e22 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2209      	movs	r2, #9
 8005dec:	4252      	negs	r2, r2
 8005dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2204      	movs	r2, #4
 8005df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 fa1d 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005e0a:	e007      	b.n	8005e1c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f000 fa10 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7fb ff08 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2210      	movs	r2, #16
 8005e26:	4013      	ands	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d01e      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2211      	movs	r2, #17
 8005e38:	4252      	negs	r2, r2
 8005e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	23c0      	movs	r3, #192	@ 0xc0
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 f9f6 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005e58:	e007      	b.n	8005e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f9e9 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fb fee1 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2201      	movs	r2, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	d00c      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d008      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	4252      	negs	r2, r2
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fb ff5b 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2280      	movs	r2, #128	@ 0x80
 8005e96:	4013      	ands	r3, r2
 8005e98:	d00c      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2280      	movs	r2, #128	@ 0x80
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d008      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2281      	movs	r2, #129	@ 0x81
 8005ea8:	4252      	negs	r2, r2
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 fe62 	bl	8006b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2240      	movs	r2, #64	@ 0x40
 8005eb8:	4013      	ands	r3, r2
 8005eba:	d00c      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2240      	movs	r2, #64	@ 0x40
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d008      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2241      	movs	r2, #65	@ 0x41
 8005eca:	4252      	negs	r2, r2
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 f9bf 	bl	8006254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	4013      	ands	r3, r2
 8005edc:	d00c      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d008      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2221      	movs	r2, #33	@ 0x21
 8005eec:	4252      	negs	r2, r2
 8005eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fe38 	bl	8006b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ef8:	46c0      	nop			@ (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0c:	2317      	movs	r3, #23
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	223c      	movs	r2, #60	@ 0x3c
 8005f18:	5c9b      	ldrb	r3, [r3, r2]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0ad      	b.n	800607e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	223c      	movs	r2, #60	@ 0x3c
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	d100      	bne.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005f30:	e076      	b.n	8006020 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d900      	bls.n	8005f3a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005f38:	e095      	b.n	8006066 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d04e      	beq.n	8005fde <HAL_TIM_PWM_ConfigChannel+0xde>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d900      	bls.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005f46:	e08e      	b.n	8006066 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d021      	beq.n	8005f98 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005f54:	e087      	b.n	8006066 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	0011      	movs	r1, r2
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f000 faea 	bl	8006538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2108      	movs	r1, #8
 8005f70:	430a      	orrs	r2, r1
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2104      	movs	r1, #4
 8005f80:	438a      	bics	r2, r1
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	619a      	str	r2, [r3, #24]
      break;
 8005f96:	e06b      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f000 fb51 	bl	8006648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2180      	movs	r1, #128	@ 0x80
 8005fb2:	0109      	lsls	r1, r1, #4
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4931      	ldr	r1, [pc, #196]	@ (8006088 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6999      	ldr	r1, [r3, #24]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	021a      	lsls	r2, r3, #8
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	619a      	str	r2, [r3, #24]
      break;
 8005fdc:	e048      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	0011      	movs	r1, r2
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 fbb2 	bl	8006750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2108      	movs	r1, #8
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2104      	movs	r1, #4
 8006008:	438a      	bics	r2, r1
 800600a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69d9      	ldr	r1, [r3, #28]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	61da      	str	r2, [r3, #28]
      break;
 800601e:	e027      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	0011      	movs	r1, r2
 8006028:	0018      	movs	r0, r3
 800602a:	f000 fc17 	bl	800685c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2180      	movs	r1, #128	@ 0x80
 800603a:	0109      	lsls	r1, r1, #4
 800603c:	430a      	orrs	r2, r1
 800603e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	490f      	ldr	r1, [pc, #60]	@ (8006088 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800604c:	400a      	ands	r2, r1
 800604e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69d9      	ldr	r1, [r3, #28]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	021a      	lsls	r2, r3, #8
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
      break;
 8006064:	e004      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006066:	2317      	movs	r3, #23
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
      break;
 800606e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	223c      	movs	r2, #60	@ 0x3c
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]

  return status;
 8006078:	2317      	movs	r3, #23
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	781b      	ldrb	r3, [r3, #0]
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b006      	add	sp, #24
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	fffffbff 	.word	0xfffffbff

0800608c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	230f      	movs	r3, #15
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223c      	movs	r2, #60	@ 0x3c
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x20>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0bc      	b.n	8006226 <HAL_TIM_ConfigClockSource+0x19a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	223c      	movs	r2, #60	@ 0x3c
 80060b0:	2101      	movs	r1, #1
 80060b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	223d      	movs	r2, #61	@ 0x3d
 80060b8:	2102      	movs	r1, #2
 80060ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2277      	movs	r2, #119	@ 0x77
 80060c8:	4393      	bics	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4a58      	ldr	r2, [pc, #352]	@ (8006230 <HAL_TIM_ConfigClockSource+0x1a4>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2280      	movs	r2, #128	@ 0x80
 80060e2:	0192      	lsls	r2, r2, #6
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d040      	beq.n	800616a <HAL_TIM_ConfigClockSource+0xde>
 80060e8:	2280      	movs	r2, #128	@ 0x80
 80060ea:	0192      	lsls	r2, r2, #6
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d900      	bls.n	80060f2 <HAL_TIM_ConfigClockSource+0x66>
 80060f0:	e088      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	0152      	lsls	r2, r2, #5
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d100      	bne.n	80060fc <HAL_TIM_ConfigClockSource+0x70>
 80060fa:	e088      	b.n	800620e <HAL_TIM_ConfigClockSource+0x182>
 80060fc:	2280      	movs	r2, #128	@ 0x80
 80060fe:	0152      	lsls	r2, r2, #5
 8006100:	4293      	cmp	r3, r2
 8006102:	d900      	bls.n	8006106 <HAL_TIM_ConfigClockSource+0x7a>
 8006104:	e07e      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 8006106:	2b70      	cmp	r3, #112	@ 0x70
 8006108:	d018      	beq.n	800613c <HAL_TIM_ConfigClockSource+0xb0>
 800610a:	d900      	bls.n	800610e <HAL_TIM_ConfigClockSource+0x82>
 800610c:	e07a      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 800610e:	2b60      	cmp	r3, #96	@ 0x60
 8006110:	d04f      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x126>
 8006112:	d900      	bls.n	8006116 <HAL_TIM_ConfigClockSource+0x8a>
 8006114:	e076      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 8006116:	2b50      	cmp	r3, #80	@ 0x50
 8006118:	d03b      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0x106>
 800611a:	d900      	bls.n	800611e <HAL_TIM_ConfigClockSource+0x92>
 800611c:	e072      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d057      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x146>
 8006122:	d900      	bls.n	8006126 <HAL_TIM_ConfigClockSource+0x9a>
 8006124:	e06e      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 8006126:	2b30      	cmp	r3, #48	@ 0x30
 8006128:	d063      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x166>
 800612a:	d86b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d060      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x166>
 8006130:	d868      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d05d      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x166>
 8006136:	2b10      	cmp	r3, #16
 8006138:	d05b      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x166>
 800613a:	e063      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800614c:	f000 fc6a 	bl	8006a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2277      	movs	r2, #119	@ 0x77
 800615c:	4313      	orrs	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
      break;
 8006168:	e052      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800617a:	f000 fc53 	bl	8006a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2180      	movs	r1, #128	@ 0x80
 800618a:	01c9      	lsls	r1, r1, #7
 800618c:	430a      	orrs	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
      break;
 8006190:	e03e      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	001a      	movs	r2, r3
 80061a0:	f000 fbc6 	bl	8006930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2150      	movs	r1, #80	@ 0x50
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 fc20 	bl	80069f0 <TIM_ITRx_SetConfig>
      break;
 80061b0:	e02e      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061be:	001a      	movs	r2, r3
 80061c0:	f000 fbe4 	bl	800698c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2160      	movs	r1, #96	@ 0x60
 80061ca:	0018      	movs	r0, r3
 80061cc:	f000 fc10 	bl	80069f0 <TIM_ITRx_SetConfig>
      break;
 80061d0:	e01e      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061de:	001a      	movs	r2, r3
 80061e0:	f000 fba6 	bl	8006930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2140      	movs	r1, #64	@ 0x40
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 fc00 	bl	80069f0 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e00e      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	0019      	movs	r1, r3
 80061fc:	0010      	movs	r0, r2
 80061fe:	f000 fbf7 	bl	80069f0 <TIM_ITRx_SetConfig>
      break;
 8006202:	e005      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006204:	230f      	movs	r3, #15
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
      break;
 800620c:	e000      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800620e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223d      	movs	r2, #61	@ 0x3d
 8006214:	2101      	movs	r1, #1
 8006216:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	223c      	movs	r2, #60	@ 0x3c
 800621c:	2100      	movs	r1, #0
 800621e:	5499      	strb	r1, [r3, r2]

  return status;
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	781b      	ldrb	r3, [r3, #0]
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b004      	add	sp, #16
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	ffff00ff 	.word	0xffff00ff

08006234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623c:	46c0      	nop			@ (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b002      	add	sp, #8
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800624c:	46c0      	nop			@ (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625c:	46c0      	nop			@ (mov r8, r8)
 800625e:	46bd      	mov	sp, r7
 8006260:	b002      	add	sp, #8
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800626c:	46c0      	nop			@ (mov r8, r8)
 800626e:	46bd      	mov	sp, r7
 8006270:	b002      	add	sp, #8
 8006272:	bd80      	pop	{r7, pc}

08006274 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d107      	bne.n	800629c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	223e      	movs	r2, #62	@ 0x3e
 8006296:	2101      	movs	r1, #1
 8006298:	5499      	strb	r1, [r3, r2]
 800629a:	e02a      	b.n	80062f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d107      	bne.n	80062b6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2202      	movs	r2, #2
 80062aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	223f      	movs	r2, #63	@ 0x3f
 80062b0:	2101      	movs	r1, #1
 80062b2:	5499      	strb	r1, [r3, r2]
 80062b4:	e01d      	b.n	80062f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d107      	bne.n	80062d0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2204      	movs	r2, #4
 80062c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2240      	movs	r2, #64	@ 0x40
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]
 80062ce:	e010      	b.n	80062f2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d107      	bne.n	80062ea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2208      	movs	r2, #8
 80062de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2241      	movs	r2, #65	@ 0x41
 80062e4:	2101      	movs	r1, #1
 80062e6:	5499      	strb	r1, [r3, r2]
 80062e8:	e003      	b.n	80062f2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	223d      	movs	r2, #61	@ 0x3d
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f7ff ffb5 	bl	8006264 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
}
 8006300:	46c0      	nop			@ (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}

08006308 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d10b      	bne.n	8006338 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d136      	bne.n	800639c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	223e      	movs	r2, #62	@ 0x3e
 8006332:	2101      	movs	r1, #1
 8006334:	5499      	strb	r1, [r3, r2]
 8006336:	e031      	b.n	800639c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	429a      	cmp	r2, r3
 8006340:	d10b      	bne.n	800635a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2202      	movs	r2, #2
 8006346:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d125      	bne.n	800639c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	223f      	movs	r2, #63	@ 0x3f
 8006354:	2101      	movs	r1, #1
 8006356:	5499      	strb	r1, [r3, r2]
 8006358:	e020      	b.n	800639c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d10b      	bne.n	800637c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2204      	movs	r2, #4
 8006368:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d114      	bne.n	800639c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2240      	movs	r2, #64	@ 0x40
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]
 800637a:	e00f      	b.n	800639c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d10a      	bne.n	800639c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2208      	movs	r2, #8
 800638a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2241      	movs	r2, #65	@ 0x41
 8006398:	2101      	movs	r1, #1
 800639a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	0018      	movs	r0, r3
 80063a0:	f7fb fc44 	bl	8001c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	771a      	strb	r2, [r3, #28]
}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b004      	add	sp, #16
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d103      	bne.n	80063d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	771a      	strb	r2, [r3, #28]
 80063d0:	e019      	b.n	8006406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d103      	bne.n	80063e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2202      	movs	r2, #2
 80063e0:	771a      	strb	r2, [r3, #28]
 80063e2:	e010      	b.n	8006406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d103      	bne.n	80063f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2204      	movs	r2, #4
 80063f2:	771a      	strb	r2, [r3, #28]
 80063f4:	e007      	b.n	8006406 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2208      	movs	r2, #8
 8006404:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	0018      	movs	r0, r3
 800640a:	f7fb fb8b 	bl	8001b24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
}
 8006414:	46c0      	nop			@ (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b004      	add	sp, #16
 800641a:	bd80      	pop	{r7, pc}

0800641c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a3b      	ldr	r2, [pc, #236]	@ (800651c <TIM_Base_SetConfig+0x100>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d008      	beq.n	8006446 <TIM_Base_SetConfig+0x2a>
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	05db      	lsls	r3, r3, #23
 800643a:	429a      	cmp	r2, r3
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0x2a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a37      	ldr	r2, [pc, #220]	@ (8006520 <TIM_Base_SetConfig+0x104>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2270      	movs	r2, #112	@ 0x70
 800644a:	4393      	bics	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a30      	ldr	r2, [pc, #192]	@ (800651c <TIM_Base_SetConfig+0x100>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	429a      	cmp	r2, r3
 8006468:	d013      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <TIM_Base_SetConfig+0x104>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00f      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2b      	ldr	r2, [pc, #172]	@ (8006524 <TIM_Base_SetConfig+0x108>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2a      	ldr	r2, [pc, #168]	@ (8006528 <TIM_Base_SetConfig+0x10c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a29      	ldr	r2, [pc, #164]	@ (800652c <TIM_Base_SetConfig+0x110>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_Base_SetConfig+0x76>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a28      	ldr	r2, [pc, #160]	@ (8006530 <TIM_Base_SetConfig+0x114>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a27      	ldr	r2, [pc, #156]	@ (8006534 <TIM_Base_SetConfig+0x118>)
 8006496:	4013      	ands	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2280      	movs	r2, #128	@ 0x80
 80064a8:	4393      	bics	r3, r2
 80064aa:	001a      	movs	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a13      	ldr	r2, [pc, #76]	@ (800651c <TIM_Base_SetConfig+0x100>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00b      	beq.n	80064ea <TIM_Base_SetConfig+0xce>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a14      	ldr	r2, [pc, #80]	@ (8006528 <TIM_Base_SetConfig+0x10c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d007      	beq.n	80064ea <TIM_Base_SetConfig+0xce>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a13      	ldr	r2, [pc, #76]	@ (800652c <TIM_Base_SetConfig+0x110>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_Base_SetConfig+0xce>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a12      	ldr	r2, [pc, #72]	@ (8006530 <TIM_Base_SetConfig+0x114>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d103      	bne.n	80064f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4013      	ands	r3, r2
 8006500:	2b01      	cmp	r3, #1
 8006502:	d106      	bne.n	8006512 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2201      	movs	r2, #1
 800650a:	4393      	bics	r3, r2
 800650c:	001a      	movs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]
  }
}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40000400 	.word	0x40000400
 8006524:	40002000 	.word	0x40002000
 8006528:	40014000 	.word	0x40014000
 800652c:	40014400 	.word	0x40014400
 8006530:	40014800 	.word	0x40014800
 8006534:	fffffcff 	.word	0xfffffcff

08006538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	2201      	movs	r2, #1
 800654e:	4393      	bics	r3, r2
 8006550:	001a      	movs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2270      	movs	r2, #112	@ 0x70
 8006566:	4393      	bics	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2203      	movs	r2, #3
 800656e:	4393      	bics	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2202      	movs	r2, #2
 8006580:	4393      	bics	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	@ (8006630 <TIM_OC1_SetConfig+0xf8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00b      	beq.n	80065ae <TIM_OC1_SetConfig+0x76>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a26      	ldr	r2, [pc, #152]	@ (8006634 <TIM_OC1_SetConfig+0xfc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <TIM_OC1_SetConfig+0x76>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a25      	ldr	r2, [pc, #148]	@ (8006638 <TIM_OC1_SetConfig+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC1_SetConfig+0x76>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	@ (800663c <TIM_OC1_SetConfig+0x104>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d10c      	bne.n	80065c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2208      	movs	r2, #8
 80065b2:	4393      	bics	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2204      	movs	r2, #4
 80065c4:	4393      	bics	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a19      	ldr	r2, [pc, #100]	@ (8006630 <TIM_OC1_SetConfig+0xf8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_OC1_SetConfig+0xb0>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <TIM_OC1_SetConfig+0xfc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_OC1_SetConfig+0xb0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <TIM_OC1_SetConfig+0x100>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC1_SetConfig+0xb0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a16      	ldr	r2, [pc, #88]	@ (800663c <TIM_OC1_SetConfig+0x104>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d111      	bne.n	800660c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4a15      	ldr	r2, [pc, #84]	@ (8006640 <TIM_OC1_SetConfig+0x108>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4a14      	ldr	r2, [pc, #80]	@ (8006644 <TIM_OC1_SetConfig+0x10c>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	46bd      	mov	sp, r7
 800662a:	b006      	add	sp, #24
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800
 8006640:	fffffeff 	.word	0xfffffeff
 8006644:	fffffdff 	.word	0xfffffdff

08006648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	2210      	movs	r2, #16
 800665e:	4393      	bics	r3, r2
 8006660:	001a      	movs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a2e      	ldr	r2, [pc, #184]	@ (8006730 <TIM_OC2_SetConfig+0xe8>)
 8006676:	4013      	ands	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a2d      	ldr	r2, [pc, #180]	@ (8006734 <TIM_OC2_SetConfig+0xec>)
 800667e:	4013      	ands	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2220      	movs	r2, #32
 8006692:	4393      	bics	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a24      	ldr	r2, [pc, #144]	@ (8006738 <TIM_OC2_SetConfig+0xf0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2280      	movs	r2, #128	@ 0x80
 80066ae:	4393      	bics	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2240      	movs	r2, #64	@ 0x40
 80066c2:	4393      	bics	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006738 <TIM_OC2_SetConfig+0xf0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_OC2_SetConfig+0x9e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <TIM_OC2_SetConfig+0xf4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_OC2_SetConfig+0x9e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <TIM_OC2_SetConfig+0xf8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC2_SetConfig+0x9e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <TIM_OC2_SetConfig+0xfc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d113      	bne.n	800670e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <TIM_OC2_SetConfig+0x100>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4a16      	ldr	r2, [pc, #88]	@ (800674c <TIM_OC2_SetConfig+0x104>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b006      	add	sp, #24
 800672e:	bd80      	pop	{r7, pc}
 8006730:	ffff8fff 	.word	0xffff8fff
 8006734:	fffffcff 	.word	0xfffffcff
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800
 8006748:	fffffbff 	.word	0xfffffbff
 800674c:	fffff7ff 	.word	0xfffff7ff

08006750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4a33      	ldr	r2, [pc, #204]	@ (8006834 <TIM_OC3_SetConfig+0xe4>)
 8006766:	401a      	ands	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2270      	movs	r2, #112	@ 0x70
 800677c:	4393      	bics	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2203      	movs	r2, #3
 8006784:	4393      	bics	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4a28      	ldr	r2, [pc, #160]	@ (8006838 <TIM_OC3_SetConfig+0xe8>)
 8006796:	4013      	ands	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a24      	ldr	r2, [pc, #144]	@ (800683c <TIM_OC3_SetConfig+0xec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4a23      	ldr	r2, [pc, #140]	@ (8006840 <TIM_OC3_SetConfig+0xf0>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006844 <TIM_OC3_SetConfig+0xf4>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <TIM_OC3_SetConfig+0xec>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_OC3_SetConfig+0x9a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <TIM_OC3_SetConfig+0xf8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_OC3_SetConfig+0x9a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <TIM_OC3_SetConfig+0xfc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_OC3_SetConfig+0x9a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006850 <TIM_OC3_SetConfig+0x100>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d113      	bne.n	8006812 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <TIM_OC3_SetConfig+0x104>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <TIM_OC3_SetConfig+0x108>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b006      	add	sp, #24
 8006832:	bd80      	pop	{r7, pc}
 8006834:	fffffeff 	.word	0xfffffeff
 8006838:	fffffdff 	.word	0xfffffdff
 800683c:	40012c00 	.word	0x40012c00
 8006840:	fffff7ff 	.word	0xfffff7ff
 8006844:	fffffbff 	.word	0xfffffbff
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800
 8006854:	ffffefff 	.word	0xffffefff
 8006858:	ffffdfff 	.word	0xffffdfff

0800685c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	4a26      	ldr	r2, [pc, #152]	@ (800690c <TIM_OC4_SetConfig+0xb0>)
 8006872:	401a      	ands	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4a22      	ldr	r2, [pc, #136]	@ (8006910 <TIM_OC4_SetConfig+0xb4>)
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a21      	ldr	r2, [pc, #132]	@ (8006914 <TIM_OC4_SetConfig+0xb8>)
 8006890:	4013      	ands	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <TIM_OC4_SetConfig+0xbc>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a19      	ldr	r2, [pc, #100]	@ (800691c <TIM_OC4_SetConfig+0xc0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_OC4_SetConfig+0x78>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <TIM_OC4_SetConfig+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_OC4_SetConfig+0x78>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <TIM_OC4_SetConfig+0xc8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_OC4_SetConfig+0x78>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <TIM_OC4_SetConfig+0xcc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d109      	bne.n	80068e8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4a15      	ldr	r2, [pc, #84]	@ (800692c <TIM_OC4_SetConfig+0xd0>)
 80068d8:	4013      	ands	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	019b      	lsls	r3, r3, #6
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	46bd      	mov	sp, r7
 8006906:	b006      	add	sp, #24
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	ffffefff 	.word	0xffffefff
 8006910:	ffff8fff 	.word	0xffff8fff
 8006914:	fffffcff 	.word	0xfffffcff
 8006918:	ffffdfff 	.word	0xffffdfff
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800
 800692c:	ffffbfff 	.word	0xffffbfff

08006930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	2201      	movs	r2, #1
 8006948:	4393      	bics	r3, r2
 800694a:	001a      	movs	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	22f0      	movs	r2, #240	@ 0xf0
 800695a:	4393      	bics	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	220a      	movs	r2, #10
 800696c:	4393      	bics	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	46c0      	nop			@ (mov r8, r8)
 8006986:	46bd      	mov	sp, r7
 8006988:	b006      	add	sp, #24
 800698a:	bd80      	pop	{r7, pc}

0800698c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	2210      	movs	r2, #16
 80069a4:	4393      	bics	r3, r2
 80069a6:	001a      	movs	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4a0d      	ldr	r2, [pc, #52]	@ (80069ec <TIM_TI2_ConfigInputStage+0x60>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	031b      	lsls	r3, r3, #12
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	22a0      	movs	r2, #160	@ 0xa0
 80069c8:	4393      	bics	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b006      	add	sp, #24
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	ffff0fff 	.word	0xffff0fff

080069f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2270      	movs	r2, #112	@ 0x70
 8006a04:	4393      	bics	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	2207      	movs	r2, #7
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	609a      	str	r2, [r3, #8]
}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b004      	add	sp, #16
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	4a09      	ldr	r2, [pc, #36]	@ (8006a60 <TIM_ETR_SetConfig+0x3c>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	021a      	lsls	r2, r3, #8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	46c0      	nop			@ (mov r8, r8)
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b006      	add	sp, #24
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	ffff00ff 	.word	0xffff00ff

08006a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	221f      	movs	r2, #31
 8006a74:	4013      	ands	r3, r2
 8006a76:	2201      	movs	r2, #1
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	0013      	movs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	43d2      	mvns	r2, r2
 8006a86:	401a      	ands	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	211f      	movs	r1, #31
 8006a94:	400b      	ands	r3, r1
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4099      	lsls	r1, r3
 8006a9a:	000b      	movs	r3, r1
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b006      	add	sp, #24
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	223c      	movs	r2, #60	@ 0x3c
 8006aba:	5c9b      	ldrb	r3, [r3, r2]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e047      	b.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	223c      	movs	r2, #60	@ 0x3c
 8006ac8:	2101      	movs	r1, #1
 8006aca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	223d      	movs	r2, #61	@ 0x3d
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2270      	movs	r2, #112	@ 0x70
 8006ae8:	4393      	bics	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a16      	ldr	r2, [pc, #88]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00f      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	2380      	movs	r3, #128	@ 0x80
 8006b0e:	05db      	lsls	r3, r3, #23
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d009      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a11      	ldr	r2, [pc, #68]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a10      	ldr	r2, [pc, #64]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10c      	bne.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2280      	movs	r2, #128	@ 0x80
 8006b2c:	4393      	bics	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	223d      	movs	r2, #61	@ 0x3d
 8006b46:	2101      	movs	r1, #1
 8006b48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	223c      	movs	r2, #60	@ 0x3c
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b004      	add	sp, #16
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40014000 	.word	0x40014000

08006b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b80:	46c0      	nop			@ (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b002      	add	sp, #8
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2244      	movs	r2, #68	@ 0x44
 8006b94:	2100      	movs	r1, #0
 8006b96:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b98:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <USB_EnableGlobalInt+0x28>)
 8006b9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2240      	movs	r2, #64	@ 0x40
 8006ba4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b004      	add	sp, #16
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	0000bf80 	.word	0x0000bf80

08006bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bbc:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <USB_DisableGlobalInt+0x30>)
 8006bbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2240      	movs	r2, #64	@ 0x40
 8006bc4:	5a9b      	ldrh	r3, [r3, r2]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	43d2      	mvns	r2, r2
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	b299      	uxth	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2240      	movs	r2, #64	@ 0x40
 8006bd8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	0018      	movs	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	0000bf80 	.word	0x0000bf80

08006be8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	6019      	str	r1, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2240      	movs	r2, #64	@ 0x40
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2240      	movs	r2, #64	@ 0x40
 8006c02:	2100      	movs	r1, #0
 8006c04:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2244      	movs	r2, #68	@ 0x44
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2250      	movs	r2, #80	@ 0x50
 8006c12:	2100      	movs	r1, #0
 8006c14:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b09c      	sub	sp, #112	@ 0x70
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c2a:	236f      	movs	r3, #111	@ 0x6f
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	18d3      	adds	r3, r2, r3
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	236c      	movs	r3, #108	@ 0x6c
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	49a1      	ldr	r1, [pc, #644]	@ (8006ecc <USB_ActivateEndpoint+0x2ac>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d017      	beq.n	8006c82 <USB_ActivateEndpoint+0x62>
 8006c52:	dc28      	bgt.n	8006ca6 <USB_ActivateEndpoint+0x86>
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d00e      	beq.n	8006c76 <USB_ActivateEndpoint+0x56>
 8006c58:	dc25      	bgt.n	8006ca6 <USB_ActivateEndpoint+0x86>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <USB_ActivateEndpoint+0x44>
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d018      	beq.n	8006c94 <USB_ActivateEndpoint+0x74>
 8006c62:	e020      	b.n	8006ca6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c64:	226c      	movs	r2, #108	@ 0x6c
 8006c66:	18bb      	adds	r3, r7, r2
 8006c68:	18ba      	adds	r2, r7, r2
 8006c6a:	8812      	ldrh	r2, [r2, #0]
 8006c6c:	2180      	movs	r1, #128	@ 0x80
 8006c6e:	0089      	lsls	r1, r1, #2
 8006c70:	430a      	orrs	r2, r1
 8006c72:	801a      	strh	r2, [r3, #0]
      break;
 8006c74:	e01c      	b.n	8006cb0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8006c76:	226c      	movs	r2, #108	@ 0x6c
 8006c78:	18bb      	adds	r3, r7, r2
 8006c7a:	18ba      	adds	r2, r7, r2
 8006c7c:	8812      	ldrh	r2, [r2, #0]
 8006c7e:	801a      	strh	r2, [r3, #0]
      break;
 8006c80:	e016      	b.n	8006cb0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c82:	226c      	movs	r2, #108	@ 0x6c
 8006c84:	18bb      	adds	r3, r7, r2
 8006c86:	18ba      	adds	r2, r7, r2
 8006c88:	8812      	ldrh	r2, [r2, #0]
 8006c8a:	21c0      	movs	r1, #192	@ 0xc0
 8006c8c:	00c9      	lsls	r1, r1, #3
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	801a      	strh	r2, [r3, #0]
      break;
 8006c92:	e00d      	b.n	8006cb0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c94:	226c      	movs	r2, #108	@ 0x6c
 8006c96:	18bb      	adds	r3, r7, r2
 8006c98:	18ba      	adds	r2, r7, r2
 8006c9a:	8812      	ldrh	r2, [r2, #0]
 8006c9c:	2180      	movs	r1, #128	@ 0x80
 8006c9e:	00c9      	lsls	r1, r1, #3
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	801a      	strh	r2, [r3, #0]
      break;
 8006ca4:	e004      	b.n	8006cb0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8006ca6:	236f      	movs	r3, #111	@ 0x6f
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
      break;
 8006cae:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	18d3      	adds	r3, r2, r3
 8006cba:	226c      	movs	r2, #108	@ 0x6c
 8006cbc:	18ba      	adds	r2, r7, r2
 8006cbe:	8812      	ldrh	r2, [r2, #0]
 8006cc0:	4983      	ldr	r1, [pc, #524]	@ (8006ed0 <USB_ActivateEndpoint+0x2b0>)
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	b292      	uxth	r2, r2
 8006cc6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	b21b      	sxth	r3, r3
 8006cd8:	4a7e      	ldr	r2, [pc, #504]	@ (8006ed4 <USB_ActivateEndpoint+0x2b4>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	b21a      	sxth	r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	2166      	movs	r1, #102	@ 0x66
 8006cea:	187b      	adds	r3, r7, r1
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	18d3      	adds	r3, r2, r3
 8006cf8:	187a      	adds	r2, r7, r1
 8006cfa:	8812      	ldrh	r2, [r2, #0]
 8006cfc:	4974      	ldr	r1, [pc, #464]	@ (8006ed0 <USB_ActivateEndpoint+0x2b0>)
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	b292      	uxth	r2, r2
 8006d02:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	7b1b      	ldrb	r3, [r3, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d000      	beq.n	8006d0e <USB_ActivateEndpoint+0xee>
 8006d0c:	e177      	b.n	8006ffe <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d100      	bne.n	8006d18 <USB_ActivateEndpoint+0xf8>
 8006d16:	e07a      	b.n	8006e0e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2250      	movs	r2, #80	@ 0x50
 8006d20:	5a9b      	ldrh	r3, [r3, r2]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	001a      	movs	r2, r3
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	189b      	adds	r3, r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	00da      	lsls	r2, r3, #3
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	00d2      	lsls	r2, r2, #3
 8006d3a:	4694      	mov	ip, r2
 8006d3c:	4463      	add	r3, ip
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	88db      	ldrh	r3, [r3, #6]
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	18db      	adds	r3, r3, r3
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	18d2      	adds	r2, r2, r3
 8006d5a:	2112      	movs	r1, #18
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	8812      	ldrh	r2, [r2, #0]
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	2240      	movs	r2, #64	@ 0x40
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d016      	beq.n	8006d9a <USB_ActivateEndpoint+0x17a>
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	18d3      	adds	r3, r2, r3
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	2010      	movs	r0, #16
 8006d7c:	183b      	adds	r3, r7, r0
 8006d7e:	4955      	ldr	r1, [pc, #340]	@ (8006ed4 <USB_ActivateEndpoint+0x2b4>)
 8006d80:	400a      	ands	r2, r1
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	18d3      	adds	r3, r2, r3
 8006d8e:	183a      	adds	r2, r7, r0
 8006d90:	8812      	ldrh	r2, [r2, #0]
 8006d92:	4951      	ldr	r1, [pc, #324]	@ (8006ed8 <USB_ActivateEndpoint+0x2b8>)
 8006d94:	430a      	orrs	r2, r1
 8006d96:	b292      	uxth	r2, r2
 8006d98:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d01d      	beq.n	8006dde <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	18d3      	adds	r3, r2, r3
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	200c      	movs	r0, #12
 8006db2:	183b      	adds	r3, r7, r0
 8006db4:	4949      	ldr	r1, [pc, #292]	@ (8006edc <USB_ActivateEndpoint+0x2bc>)
 8006db6:	400a      	ands	r2, r1
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	183b      	adds	r3, r7, r0
 8006dbc:	183a      	adds	r2, r7, r0
 8006dbe:	8812      	ldrh	r2, [r2, #0]
 8006dc0:	2120      	movs	r1, #32
 8006dc2:	404a      	eors	r2, r1
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	18d3      	adds	r3, r2, r3
 8006dd0:	183a      	adds	r2, r7, r0
 8006dd2:	8812      	ldrh	r2, [r2, #0]
 8006dd4:	493e      	ldr	r1, [pc, #248]	@ (8006ed0 <USB_ActivateEndpoint+0x2b0>)
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	b292      	uxth	r2, r2
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e2b5      	b.n	800734a <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	200e      	movs	r0, #14
 8006dee:	183b      	adds	r3, r7, r0
 8006df0:	493a      	ldr	r1, [pc, #232]	@ (8006edc <USB_ActivateEndpoint+0x2bc>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	18d3      	adds	r3, r2, r3
 8006e00:	183a      	adds	r2, r7, r0
 8006e02:	8812      	ldrh	r2, [r2, #0]
 8006e04:	4932      	ldr	r1, [pc, #200]	@ (8006ed0 <USB_ActivateEndpoint+0x2b0>)
 8006e06:	430a      	orrs	r2, r1
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e29d      	b.n	800734a <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2250      	movs	r2, #80	@ 0x50
 8006e16:	5a9b      	ldrh	r3, [r3, r2]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	001a      	movs	r2, r3
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	00da      	lsls	r2, r3, #3
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	18d3      	adds	r3, r2, r3
 8006e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee0 <USB_ActivateEndpoint+0x2c0>)
 8006e2e:	4694      	mov	ip, r2
 8006e30:	4463      	add	r3, ip
 8006e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	88db      	ldrh	r3, [r3, #6]
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	18db      	adds	r3, r3, r3
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2250      	movs	r2, #80	@ 0x50
 8006e4c:	5a9b      	ldrh	r3, [r3, r2]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	001a      	movs	r2, r3
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	189b      	adds	r3, r3, r2
 8006e56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	00da      	lsls	r2, r3, #3
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	18d3      	adds	r3, r2, r3
 8006e62:	4a20      	ldr	r2, [pc, #128]	@ (8006ee4 <USB_ActivateEndpoint+0x2c4>)
 8006e64:	4694      	mov	ip, r2
 8006e66:	4463      	add	r3, ip
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	0d9b      	lsrs	r3, r3, #22
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d108      	bne.n	8006e94 <USB_ActivateEndpoint+0x274>
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <USB_ActivateEndpoint+0x2c8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e045      	b.n	8006f20 <USB_ActivateEndpoint+0x300>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e9a:	d827      	bhi.n	8006eec <USB_ActivateEndpoint+0x2cc>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d002      	beq.n	8006eb4 <USB_ActivateEndpoint+0x294>
 8006eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e029      	b.n	8006f20 <USB_ActivateEndpoint+0x300>
 8006ecc:	ffff898f 	.word	0xffff898f
 8006ed0:	ffff8080 	.word	0xffff8080
 8006ed4:	ffff8f8f 	.word	0xffff8f8f
 8006ed8:	ffff80c0 	.word	0xffff80c0
 8006edc:	ffff8fbf 	.word	0xffff8fbf
 8006ee0:	00000404 	.word	0x00000404
 8006ee4:	00000406 	.word	0x00000406
 8006ee8:	ffff8000 	.word	0xffff8000
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	221f      	movs	r2, #31
 8006efa:	4013      	ands	r3, r2
 8006efc:	d102      	bne.n	8006f04 <USB_ActivateEndpoint+0x2e4>
 8006efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f00:	3b01      	subs	r3, #1
 8006f02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4ab5      	ldr	r2, [pc, #724]	@ (80071ec <USB_ActivateEndpoint+0x5cc>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	18d2      	adds	r2, r2, r3
 8006f2a:	2122      	movs	r1, #34	@ 0x22
 8006f2c:	187b      	adds	r3, r7, r1
 8006f2e:	8812      	ldrh	r2, [r2, #0]
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	187b      	adds	r3, r7, r1
 8006f34:	881a      	ldrh	r2, [r3, #0]
 8006f36:	2380      	movs	r3, #128	@ 0x80
 8006f38:	01db      	lsls	r3, r3, #7
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d016      	beq.n	8006f6c <USB_ActivateEndpoint+0x34c>
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	18d3      	adds	r3, r2, r3
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	2020      	movs	r0, #32
 8006f4e:	183b      	adds	r3, r7, r0
 8006f50:	49a7      	ldr	r1, [pc, #668]	@ (80071f0 <USB_ActivateEndpoint+0x5d0>)
 8006f52:	400a      	ands	r2, r1
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	18d3      	adds	r3, r2, r3
 8006f60:	183a      	adds	r2, r7, r0
 8006f62:	8812      	ldrh	r2, [r2, #0]
 8006f64:	49a3      	ldr	r1, [pc, #652]	@ (80071f4 <USB_ActivateEndpoint+0x5d4>)
 8006f66:	430a      	orrs	r2, r1
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d125      	bne.n	8006fc0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	18d3      	adds	r3, r2, r3
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	201c      	movs	r0, #28
 8006f84:	183b      	adds	r3, r7, r0
 8006f86:	499c      	ldr	r1, [pc, #624]	@ (80071f8 <USB_ActivateEndpoint+0x5d8>)
 8006f88:	400a      	ands	r2, r1
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	183b      	adds	r3, r7, r0
 8006f8e:	183a      	adds	r2, r7, r0
 8006f90:	8812      	ldrh	r2, [r2, #0]
 8006f92:	2180      	movs	r1, #128	@ 0x80
 8006f94:	0149      	lsls	r1, r1, #5
 8006f96:	404a      	eors	r2, r1
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	183b      	adds	r3, r7, r0
 8006f9c:	183a      	adds	r2, r7, r0
 8006f9e:	8812      	ldrh	r2, [r2, #0]
 8006fa0:	2180      	movs	r1, #128	@ 0x80
 8006fa2:	0189      	lsls	r1, r1, #6
 8006fa4:	404a      	eors	r2, r1
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	18d3      	adds	r3, r2, r3
 8006fb2:	183a      	adds	r2, r7, r0
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	4991      	ldr	r1, [pc, #580]	@ (80071fc <USB_ActivateEndpoint+0x5dc>)
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e1c4      	b.n	800734a <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	201e      	movs	r0, #30
 8006fd0:	183b      	adds	r3, r7, r0
 8006fd2:	4989      	ldr	r1, [pc, #548]	@ (80071f8 <USB_ActivateEndpoint+0x5d8>)
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	183b      	adds	r3, r7, r0
 8006fda:	183a      	adds	r2, r7, r0
 8006fdc:	8812      	ldrh	r2, [r2, #0]
 8006fde:	2180      	movs	r1, #128	@ 0x80
 8006fe0:	0189      	lsls	r1, r1, #6
 8006fe2:	404a      	eors	r2, r1
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	18d3      	adds	r3, r2, r3
 8006ff0:	183a      	adds	r2, r7, r0
 8006ff2:	8812      	ldrh	r2, [r2, #0]
 8006ff4:	4981      	ldr	r1, [pc, #516]	@ (80071fc <USB_ActivateEndpoint+0x5dc>)
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	e1a5      	b.n	800734a <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d117      	bne.n	8007036 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	18d3      	adds	r3, r2, r3
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29a      	uxth	r2, r3
 8007014:	2062      	movs	r0, #98	@ 0x62
 8007016:	183b      	adds	r3, r7, r0
 8007018:	4975      	ldr	r1, [pc, #468]	@ (80071f0 <USB_ActivateEndpoint+0x5d0>)
 800701a:	400a      	ands	r2, r1
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	18d3      	adds	r3, r2, r3
 8007028:	183a      	adds	r2, r7, r0
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	4974      	ldr	r1, [pc, #464]	@ (8007200 <USB_ActivateEndpoint+0x5e0>)
 800702e:	430a      	orrs	r2, r1
 8007030:	b292      	uxth	r2, r2
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	e016      	b.n	8007064 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29a      	uxth	r2, r3
 8007044:	2064      	movs	r0, #100	@ 0x64
 8007046:	183b      	adds	r3, r7, r0
 8007048:	496e      	ldr	r1, [pc, #440]	@ (8007204 <USB_ActivateEndpoint+0x5e4>)
 800704a:	400a      	ands	r2, r1
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	18d3      	adds	r3, r2, r3
 8007058:	183a      	adds	r2, r7, r0
 800705a:	8812      	ldrh	r2, [r2, #0]
 800705c:	4967      	ldr	r1, [pc, #412]	@ (80071fc <USB_ActivateEndpoint+0x5dc>)
 800705e:	430a      	orrs	r2, r1
 8007060:	b292      	uxth	r2, r2
 8007062:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2250      	movs	r2, #80	@ 0x50
 800706c:	5a9b      	ldrh	r3, [r3, r2]
 800706e:	b29b      	uxth	r3, r3
 8007070:	001a      	movs	r2, r3
 8007072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007074:	189b      	adds	r3, r3, r2
 8007076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	00da      	lsls	r2, r3, #3
 800707e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007080:	18d3      	adds	r3, r2, r3
 8007082:	2280      	movs	r2, #128	@ 0x80
 8007084:	00d2      	lsls	r2, r2, #3
 8007086:	4694      	mov	ip, r2
 8007088:	4463      	add	r3, ip
 800708a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	891b      	ldrh	r3, [r3, #8]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	18db      	adds	r3, r3, r3
 8007096:	b29a      	uxth	r2, r3
 8007098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	657b      	str	r3, [r7, #84]	@ 0x54
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2250      	movs	r2, #80	@ 0x50
 80070a4:	5a9b      	ldrh	r3, [r3, r2]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	001a      	movs	r2, r3
 80070aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ac:	189b      	adds	r3, r3, r2
 80070ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00da      	lsls	r2, r3, #3
 80070b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	4a53      	ldr	r2, [pc, #332]	@ (8007208 <USB_ActivateEndpoint+0x5e8>)
 80070bc:	4694      	mov	ip, r2
 80070be:	4463      	add	r3, ip
 80070c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	895b      	ldrh	r3, [r3, #10]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	18db      	adds	r3, r3, r3
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d000      	beq.n	80070dc <USB_ActivateEndpoint+0x4bc>
 80070da:	e09b      	b.n	8007214 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	18d2      	adds	r2, r2, r3
 80070e6:	2140      	movs	r1, #64	@ 0x40
 80070e8:	187b      	adds	r3, r7, r1
 80070ea:	8812      	ldrh	r2, [r2, #0]
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	187b      	adds	r3, r7, r1
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	2380      	movs	r3, #128	@ 0x80
 80070f4:	01db      	lsls	r3, r3, #7
 80070f6:	4013      	ands	r3, r2
 80070f8:	d016      	beq.n	8007128 <USB_ActivateEndpoint+0x508>
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	18d3      	adds	r3, r2, r3
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	203e      	movs	r0, #62	@ 0x3e
 800710a:	183b      	adds	r3, r7, r0
 800710c:	4938      	ldr	r1, [pc, #224]	@ (80071f0 <USB_ActivateEndpoint+0x5d0>)
 800710e:	400a      	ands	r2, r1
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	18d3      	adds	r3, r2, r3
 800711c:	183a      	adds	r2, r7, r0
 800711e:	8812      	ldrh	r2, [r2, #0]
 8007120:	4934      	ldr	r1, [pc, #208]	@ (80071f4 <USB_ActivateEndpoint+0x5d4>)
 8007122:	430a      	orrs	r2, r1
 8007124:	b292      	uxth	r2, r2
 8007126:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	18d2      	adds	r2, r2, r3
 8007132:	213c      	movs	r1, #60	@ 0x3c
 8007134:	187b      	adds	r3, r7, r1
 8007136:	8812      	ldrh	r2, [r2, #0]
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	187b      	adds	r3, r7, r1
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	2240      	movs	r2, #64	@ 0x40
 8007140:	4013      	ands	r3, r2
 8007142:	d016      	beq.n	8007172 <USB_ActivateEndpoint+0x552>
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29a      	uxth	r2, r3
 8007152:	203a      	movs	r0, #58	@ 0x3a
 8007154:	183b      	adds	r3, r7, r0
 8007156:	4926      	ldr	r1, [pc, #152]	@ (80071f0 <USB_ActivateEndpoint+0x5d0>)
 8007158:	400a      	ands	r2, r1
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	18d3      	adds	r3, r2, r3
 8007166:	183a      	adds	r2, r7, r0
 8007168:	8812      	ldrh	r2, [r2, #0]
 800716a:	4928      	ldr	r1, [pc, #160]	@ (800720c <USB_ActivateEndpoint+0x5ec>)
 800716c:	430a      	orrs	r2, r1
 800716e:	b292      	uxth	r2, r2
 8007170:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	18d3      	adds	r3, r2, r3
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	2038      	movs	r0, #56	@ 0x38
 8007182:	183b      	adds	r3, r7, r0
 8007184:	491c      	ldr	r1, [pc, #112]	@ (80071f8 <USB_ActivateEndpoint+0x5d8>)
 8007186:	400a      	ands	r2, r1
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	183b      	adds	r3, r7, r0
 800718c:	183a      	adds	r2, r7, r0
 800718e:	8812      	ldrh	r2, [r2, #0]
 8007190:	2180      	movs	r1, #128	@ 0x80
 8007192:	0149      	lsls	r1, r1, #5
 8007194:	404a      	eors	r2, r1
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	183b      	adds	r3, r7, r0
 800719a:	183a      	adds	r2, r7, r0
 800719c:	8812      	ldrh	r2, [r2, #0]
 800719e:	2180      	movs	r1, #128	@ 0x80
 80071a0:	0189      	lsls	r1, r1, #6
 80071a2:	404a      	eors	r2, r1
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	183a      	adds	r2, r7, r0
 80071b2:	8812      	ldrh	r2, [r2, #0]
 80071b4:	4911      	ldr	r1, [pc, #68]	@ (80071fc <USB_ActivateEndpoint+0x5dc>)
 80071b6:	430a      	orrs	r2, r1
 80071b8:	b292      	uxth	r2, r2
 80071ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	18d3      	adds	r3, r2, r3
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	2036      	movs	r0, #54	@ 0x36
 80071cc:	183b      	adds	r3, r7, r0
 80071ce:	4910      	ldr	r1, [pc, #64]	@ (8007210 <USB_ActivateEndpoint+0x5f0>)
 80071d0:	400a      	ands	r2, r1
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	18d3      	adds	r3, r2, r3
 80071de:	183a      	adds	r2, r7, r0
 80071e0:	8812      	ldrh	r2, [r2, #0]
 80071e2:	4906      	ldr	r1, [pc, #24]	@ (80071fc <USB_ActivateEndpoint+0x5dc>)
 80071e4:	430a      	orrs	r2, r1
 80071e6:	b292      	uxth	r2, r2
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e0ae      	b.n	800734a <USB_ActivateEndpoint+0x72a>
 80071ec:	ffff8000 	.word	0xffff8000
 80071f0:	ffff8f8f 	.word	0xffff8f8f
 80071f4:	ffffc080 	.word	0xffffc080
 80071f8:	ffffbf8f 	.word	0xffffbf8f
 80071fc:	ffff8080 	.word	0xffff8080
 8007200:	ffff8180 	.word	0xffff8180
 8007204:	ffff8e8f 	.word	0xffff8e8f
 8007208:	00000404 	.word	0x00000404
 800720c:	ffff80c0 	.word	0xffff80c0
 8007210:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	18d2      	adds	r2, r2, r3
 800721e:	214e      	movs	r1, #78	@ 0x4e
 8007220:	187b      	adds	r3, r7, r1
 8007222:	8812      	ldrh	r2, [r2, #0]
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	187b      	adds	r3, r7, r1
 8007228:	881a      	ldrh	r2, [r3, #0]
 800722a:	2380      	movs	r3, #128	@ 0x80
 800722c:	01db      	lsls	r3, r3, #7
 800722e:	4013      	ands	r3, r2
 8007230:	d016      	beq.n	8007260 <USB_ActivateEndpoint+0x640>
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	18d3      	adds	r3, r2, r3
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29a      	uxth	r2, r3
 8007240:	204c      	movs	r0, #76	@ 0x4c
 8007242:	183b      	adds	r3, r7, r0
 8007244:	4944      	ldr	r1, [pc, #272]	@ (8007358 <USB_ActivateEndpoint+0x738>)
 8007246:	400a      	ands	r2, r1
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	18d3      	adds	r3, r2, r3
 8007254:	183a      	adds	r2, r7, r0
 8007256:	8812      	ldrh	r2, [r2, #0]
 8007258:	4940      	ldr	r1, [pc, #256]	@ (800735c <USB_ActivateEndpoint+0x73c>)
 800725a:	430a      	orrs	r2, r1
 800725c:	b292      	uxth	r2, r2
 800725e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	18d2      	adds	r2, r2, r3
 800726a:	214a      	movs	r1, #74	@ 0x4a
 800726c:	187b      	adds	r3, r7, r1
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	187b      	adds	r3, r7, r1
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	2240      	movs	r2, #64	@ 0x40
 8007278:	4013      	ands	r3, r2
 800727a:	d016      	beq.n	80072aa <USB_ActivateEndpoint+0x68a>
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	18d3      	adds	r3, r2, r3
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29a      	uxth	r2, r3
 800728a:	2048      	movs	r0, #72	@ 0x48
 800728c:	183b      	adds	r3, r7, r0
 800728e:	4932      	ldr	r1, [pc, #200]	@ (8007358 <USB_ActivateEndpoint+0x738>)
 8007290:	400a      	ands	r2, r1
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	18d3      	adds	r3, r2, r3
 800729e:	183a      	adds	r2, r7, r0
 80072a0:	8812      	ldrh	r2, [r2, #0]
 80072a2:	492f      	ldr	r1, [pc, #188]	@ (8007360 <USB_ActivateEndpoint+0x740>)
 80072a4:	430a      	orrs	r2, r1
 80072a6:	b292      	uxth	r2, r2
 80072a8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	78db      	ldrb	r3, [r3, #3]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d01d      	beq.n	80072ee <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	18d3      	adds	r3, r2, r3
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	2044      	movs	r0, #68	@ 0x44
 80072c2:	183b      	adds	r3, r7, r0
 80072c4:	4927      	ldr	r1, [pc, #156]	@ (8007364 <USB_ActivateEndpoint+0x744>)
 80072c6:	400a      	ands	r2, r1
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	183b      	adds	r3, r7, r0
 80072cc:	183a      	adds	r2, r7, r0
 80072ce:	8812      	ldrh	r2, [r2, #0]
 80072d0:	2120      	movs	r1, #32
 80072d2:	404a      	eors	r2, r1
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	183a      	adds	r2, r7, r0
 80072e2:	8812      	ldrh	r2, [r2, #0]
 80072e4:	4920      	ldr	r1, [pc, #128]	@ (8007368 <USB_ActivateEndpoint+0x748>)
 80072e6:	430a      	orrs	r2, r1
 80072e8:	b292      	uxth	r2, r2
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e016      	b.n	800731c <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	18d3      	adds	r3, r2, r3
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	2046      	movs	r0, #70	@ 0x46
 80072fe:	183b      	adds	r3, r7, r0
 8007300:	4918      	ldr	r1, [pc, #96]	@ (8007364 <USB_ActivateEndpoint+0x744>)
 8007302:	400a      	ands	r2, r1
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	18d3      	adds	r3, r2, r3
 8007310:	183a      	adds	r2, r7, r0
 8007312:	8812      	ldrh	r2, [r2, #0]
 8007314:	4914      	ldr	r1, [pc, #80]	@ (8007368 <USB_ActivateEndpoint+0x748>)
 8007316:	430a      	orrs	r2, r1
 8007318:	b292      	uxth	r2, r2
 800731a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	18d3      	adds	r3, r2, r3
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	2042      	movs	r0, #66	@ 0x42
 800732c:	183b      	adds	r3, r7, r0
 800732e:	490f      	ldr	r1, [pc, #60]	@ (800736c <USB_ActivateEndpoint+0x74c>)
 8007330:	400a      	ands	r2, r1
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	18d3      	adds	r3, r2, r3
 800733e:	183a      	adds	r2, r7, r0
 8007340:	8812      	ldrh	r2, [r2, #0]
 8007342:	4909      	ldr	r1, [pc, #36]	@ (8007368 <USB_ActivateEndpoint+0x748>)
 8007344:	430a      	orrs	r2, r1
 8007346:	b292      	uxth	r2, r2
 8007348:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800734a:	236f      	movs	r3, #111	@ 0x6f
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	781b      	ldrb	r3, [r3, #0]
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	b01c      	add	sp, #112	@ 0x70
 8007356:	bd80      	pop	{r7, pc}
 8007358:	ffff8f8f 	.word	0xffff8f8f
 800735c:	ffffc080 	.word	0xffffc080
 8007360:	ffff80c0 	.word	0xffff80c0
 8007364:	ffff8fbf 	.word	0xffff8fbf
 8007368:	ffff8080 	.word	0xffff8080
 800736c:	ffffbf8f 	.word	0xffffbf8f

08007370 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	@ 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	7b1b      	ldrb	r3, [r3, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d000      	beq.n	8007384 <USB_DeactivateEndpoint+0x14>
 8007382:	e07e      	b.n	8007482 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d03c      	beq.n	8007406 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	18d2      	adds	r2, r2, r3
 8007396:	210c      	movs	r1, #12
 8007398:	187b      	adds	r3, r7, r1
 800739a:	8812      	ldrh	r2, [r2, #0]
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	2240      	movs	r2, #64	@ 0x40
 80073a4:	4013      	ands	r3, r2
 80073a6:	d016      	beq.n	80073d6 <USB_DeactivateEndpoint+0x66>
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	18d3      	adds	r3, r2, r3
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	200a      	movs	r0, #10
 80073b8:	183b      	adds	r3, r7, r0
 80073ba:	49c7      	ldr	r1, [pc, #796]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 80073bc:	400a      	ands	r2, r1
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	18d3      	adds	r3, r2, r3
 80073ca:	183a      	adds	r2, r7, r0
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	49c3      	ldr	r1, [pc, #780]	@ (80076dc <USB_DeactivateEndpoint+0x36c>)
 80073d0:	430a      	orrs	r2, r1
 80073d2:	b292      	uxth	r2, r2
 80073d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	2008      	movs	r0, #8
 80073e6:	183b      	adds	r3, r7, r0
 80073e8:	49bd      	ldr	r1, [pc, #756]	@ (80076e0 <USB_DeactivateEndpoint+0x370>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	183a      	adds	r2, r7, r0
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	49b9      	ldr	r1, [pc, #740]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 80073fe:	430a      	orrs	r2, r1
 8007400:	b292      	uxth	r2, r2
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e163      	b.n	80076ce <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	18d2      	adds	r2, r2, r3
 8007410:	2112      	movs	r1, #18
 8007412:	187b      	adds	r3, r7, r1
 8007414:	8812      	ldrh	r2, [r2, #0]
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	187b      	adds	r3, r7, r1
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	2380      	movs	r3, #128	@ 0x80
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	4013      	ands	r3, r2
 8007422:	d016      	beq.n	8007452 <USB_DeactivateEndpoint+0xe2>
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	18d3      	adds	r3, r2, r3
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29a      	uxth	r2, r3
 8007432:	2010      	movs	r0, #16
 8007434:	183b      	adds	r3, r7, r0
 8007436:	49a8      	ldr	r1, [pc, #672]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 8007438:	400a      	ands	r2, r1
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	18d3      	adds	r3, r2, r3
 8007446:	183a      	adds	r2, r7, r0
 8007448:	8812      	ldrh	r2, [r2, #0]
 800744a:	49a7      	ldr	r1, [pc, #668]	@ (80076e8 <USB_DeactivateEndpoint+0x378>)
 800744c:	430a      	orrs	r2, r1
 800744e:	b292      	uxth	r2, r2
 8007450:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	18d3      	adds	r3, r2, r3
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29a      	uxth	r2, r3
 8007460:	200e      	movs	r0, #14
 8007462:	183b      	adds	r3, r7, r0
 8007464:	49a1      	ldr	r1, [pc, #644]	@ (80076ec <USB_DeactivateEndpoint+0x37c>)
 8007466:	400a      	ands	r2, r1
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	18d3      	adds	r3, r2, r3
 8007474:	183a      	adds	r2, r7, r0
 8007476:	8812      	ldrh	r2, [r2, #0]
 8007478:	499a      	ldr	r1, [pc, #616]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 800747a:	430a      	orrs	r2, r1
 800747c:	b292      	uxth	r2, r2
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	e125      	b.n	80076ce <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d000      	beq.n	800748c <USB_DeactivateEndpoint+0x11c>
 800748a:	e090      	b.n	80075ae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	18d2      	adds	r2, r2, r3
 8007496:	2120      	movs	r1, #32
 8007498:	187b      	adds	r3, r7, r1
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	187b      	adds	r3, r7, r1
 80074a0:	881a      	ldrh	r2, [r3, #0]
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	01db      	lsls	r3, r3, #7
 80074a6:	4013      	ands	r3, r2
 80074a8:	d016      	beq.n	80074d8 <USB_DeactivateEndpoint+0x168>
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	18d3      	adds	r3, r2, r3
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	201e      	movs	r0, #30
 80074ba:	183b      	adds	r3, r7, r0
 80074bc:	4986      	ldr	r1, [pc, #536]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 80074be:	400a      	ands	r2, r1
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	183a      	adds	r2, r7, r0
 80074ce:	8812      	ldrh	r2, [r2, #0]
 80074d0:	4985      	ldr	r1, [pc, #532]	@ (80076e8 <USB_DeactivateEndpoint+0x378>)
 80074d2:	430a      	orrs	r2, r1
 80074d4:	b292      	uxth	r2, r2
 80074d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	18d2      	adds	r2, r2, r3
 80074e2:	211c      	movs	r1, #28
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	8812      	ldrh	r2, [r2, #0]
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	2240      	movs	r2, #64	@ 0x40
 80074f0:	4013      	ands	r3, r2
 80074f2:	d016      	beq.n	8007522 <USB_DeactivateEndpoint+0x1b2>
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	18d3      	adds	r3, r2, r3
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29a      	uxth	r2, r3
 8007502:	201a      	movs	r0, #26
 8007504:	183b      	adds	r3, r7, r0
 8007506:	4974      	ldr	r1, [pc, #464]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 8007508:	400a      	ands	r2, r1
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	18d3      	adds	r3, r2, r3
 8007516:	183a      	adds	r2, r7, r0
 8007518:	8812      	ldrh	r2, [r2, #0]
 800751a:	4970      	ldr	r1, [pc, #448]	@ (80076dc <USB_DeactivateEndpoint+0x36c>)
 800751c:	430a      	orrs	r2, r1
 800751e:	b292      	uxth	r2, r2
 8007520:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	18d3      	adds	r3, r2, r3
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29a      	uxth	r2, r3
 8007530:	2018      	movs	r0, #24
 8007532:	183b      	adds	r3, r7, r0
 8007534:	4968      	ldr	r1, [pc, #416]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 8007536:	400a      	ands	r2, r1
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	18d3      	adds	r3, r2, r3
 8007544:	183a      	adds	r2, r7, r0
 8007546:	8812      	ldrh	r2, [r2, #0]
 8007548:	4964      	ldr	r1, [pc, #400]	@ (80076dc <USB_DeactivateEndpoint+0x36c>)
 800754a:	430a      	orrs	r2, r1
 800754c:	b292      	uxth	r2, r2
 800754e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	18d3      	adds	r3, r2, r3
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29a      	uxth	r2, r3
 800755e:	2016      	movs	r0, #22
 8007560:	183b      	adds	r3, r7, r0
 8007562:	4962      	ldr	r1, [pc, #392]	@ (80076ec <USB_DeactivateEndpoint+0x37c>)
 8007564:	400a      	ands	r2, r1
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	18d3      	adds	r3, r2, r3
 8007572:	183a      	adds	r2, r7, r0
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	495b      	ldr	r1, [pc, #364]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 8007578:	430a      	orrs	r2, r1
 800757a:	b292      	uxth	r2, r2
 800757c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	18d3      	adds	r3, r2, r3
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29a      	uxth	r2, r3
 800758c:	2014      	movs	r0, #20
 800758e:	183b      	adds	r3, r7, r0
 8007590:	4953      	ldr	r1, [pc, #332]	@ (80076e0 <USB_DeactivateEndpoint+0x370>)
 8007592:	400a      	ands	r2, r1
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	18d3      	adds	r3, r2, r3
 80075a0:	183a      	adds	r2, r7, r0
 80075a2:	8812      	ldrh	r2, [r2, #0]
 80075a4:	494f      	ldr	r1, [pc, #316]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 80075a6:	430a      	orrs	r2, r1
 80075a8:	b292      	uxth	r2, r2
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e08f      	b.n	80076ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	18d2      	adds	r2, r2, r3
 80075b8:	212e      	movs	r1, #46	@ 0x2e
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	8812      	ldrh	r2, [r2, #0]
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	187b      	adds	r3, r7, r1
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	2380      	movs	r3, #128	@ 0x80
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	4013      	ands	r3, r2
 80075ca:	d016      	beq.n	80075fa <USB_DeactivateEndpoint+0x28a>
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	18d3      	adds	r3, r2, r3
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	202c      	movs	r0, #44	@ 0x2c
 80075dc:	183b      	adds	r3, r7, r0
 80075de:	493e      	ldr	r1, [pc, #248]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 80075e0:	400a      	ands	r2, r1
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	18d3      	adds	r3, r2, r3
 80075ee:	183a      	adds	r2, r7, r0
 80075f0:	8812      	ldrh	r2, [r2, #0]
 80075f2:	493d      	ldr	r1, [pc, #244]	@ (80076e8 <USB_DeactivateEndpoint+0x378>)
 80075f4:	430a      	orrs	r2, r1
 80075f6:	b292      	uxth	r2, r2
 80075f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	18d2      	adds	r2, r2, r3
 8007604:	212a      	movs	r1, #42	@ 0x2a
 8007606:	187b      	adds	r3, r7, r1
 8007608:	8812      	ldrh	r2, [r2, #0]
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	187b      	adds	r3, r7, r1
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	2240      	movs	r2, #64	@ 0x40
 8007612:	4013      	ands	r3, r2
 8007614:	d016      	beq.n	8007644 <USB_DeactivateEndpoint+0x2d4>
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	18d3      	adds	r3, r2, r3
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29a      	uxth	r2, r3
 8007624:	2028      	movs	r0, #40	@ 0x28
 8007626:	183b      	adds	r3, r7, r0
 8007628:	492b      	ldr	r1, [pc, #172]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 800762a:	400a      	ands	r2, r1
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	18d3      	adds	r3, r2, r3
 8007638:	183a      	adds	r2, r7, r0
 800763a:	8812      	ldrh	r2, [r2, #0]
 800763c:	4927      	ldr	r1, [pc, #156]	@ (80076dc <USB_DeactivateEndpoint+0x36c>)
 800763e:	430a      	orrs	r2, r1
 8007640:	b292      	uxth	r2, r2
 8007642:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	18d3      	adds	r3, r2, r3
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29a      	uxth	r2, r3
 8007652:	2026      	movs	r0, #38	@ 0x26
 8007654:	183b      	adds	r3, r7, r0
 8007656:	4920      	ldr	r1, [pc, #128]	@ (80076d8 <USB_DeactivateEndpoint+0x368>)
 8007658:	400a      	ands	r2, r1
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	18d3      	adds	r3, r2, r3
 8007666:	183a      	adds	r2, r7, r0
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	491f      	ldr	r1, [pc, #124]	@ (80076e8 <USB_DeactivateEndpoint+0x378>)
 800766c:	430a      	orrs	r2, r1
 800766e:	b292      	uxth	r2, r2
 8007670:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29a      	uxth	r2, r3
 8007680:	2024      	movs	r0, #36	@ 0x24
 8007682:	183b      	adds	r3, r7, r0
 8007684:	4916      	ldr	r1, [pc, #88]	@ (80076e0 <USB_DeactivateEndpoint+0x370>)
 8007686:	400a      	ands	r2, r1
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	18d3      	adds	r3, r2, r3
 8007694:	183a      	adds	r2, r7, r0
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	4912      	ldr	r1, [pc, #72]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 800769a:	430a      	orrs	r2, r1
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	18d3      	adds	r3, r2, r3
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	2022      	movs	r0, #34	@ 0x22
 80076b0:	183b      	adds	r3, r7, r0
 80076b2:	490e      	ldr	r1, [pc, #56]	@ (80076ec <USB_DeactivateEndpoint+0x37c>)
 80076b4:	400a      	ands	r2, r1
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	18d3      	adds	r3, r2, r3
 80076c2:	183a      	adds	r2, r7, r0
 80076c4:	8812      	ldrh	r2, [r2, #0]
 80076c6:	4907      	ldr	r1, [pc, #28]	@ (80076e4 <USB_DeactivateEndpoint+0x374>)
 80076c8:	430a      	orrs	r2, r1
 80076ca:	b292      	uxth	r2, r2
 80076cc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b00c      	add	sp, #48	@ 0x30
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	ffff8f8f 	.word	0xffff8f8f
 80076dc:	ffff80c0 	.word	0xffff80c0
 80076e0:	ffff8fbf 	.word	0xffff8fbf
 80076e4:	ffff8080 	.word	0xffff8080
 80076e8:	ffffc080 	.word	0xffffc080
 80076ec:	ffffbf8f 	.word	0xffffbf8f

080076f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076f0:	b590      	push	{r4, r7, lr}
 80076f2:	b0c3      	sub	sp, #268	@ 0x10c
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d001      	beq.n	8007706 <USB_EPStartXfer+0x16>
 8007702:	f000 fd2d 	bl	8008160 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d905      	bls.n	800771e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	1d7a      	adds	r2, r7, #5
 8007718:	32ff      	adds	r2, #255	@ 0xff
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	e004      	b.n	8007728 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	1d7a      	adds	r2, r7, #5
 8007724:	32ff      	adds	r2, #255	@ 0xff
 8007726:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	7b1b      	ldrb	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d125      	bne.n	800777c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	6959      	ldr	r1, [r3, #20]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	88da      	ldrh	r2, [r3, #6]
 8007738:	1d7b      	adds	r3, r7, #5
 800773a:	33ff      	adds	r3, #255	@ 0xff
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fa3f 	bl	8008bc4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2250      	movs	r2, #80	@ 0x50
 800774e:	5a9b      	ldrh	r3, [r3, r2]
 8007750:	b29b      	uxth	r3, r3
 8007752:	001a      	movs	r2, r3
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	189b      	adds	r3, r3, r2
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	00da      	lsls	r2, r3, #3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	4ad7      	ldr	r2, [pc, #860]	@ (8007ac4 <USB_EPStartXfer+0x3d4>)
 8007766:	4694      	mov	ip, r2
 8007768:	4463      	add	r3, ip
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	1d7b      	adds	r3, r7, #5
 800776e:	33ff      	adds	r3, #255	@ 0xff
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	f000 fccd 	bl	8008116 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d000      	beq.n	8007786 <USB_EPStartXfer+0x96>
 8007784:	e362      	b.n	8007e4c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d800      	bhi.n	8007794 <USB_EPStartXfer+0xa4>
 8007792:	e309      	b.n	8007da8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	18d3      	adds	r3, r2, r3
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	2056      	movs	r0, #86	@ 0x56
 80077a4:	183b      	adds	r3, r7, r0
 80077a6:	49c8      	ldr	r1, [pc, #800]	@ (8007ac8 <USB_EPStartXfer+0x3d8>)
 80077a8:	400a      	ands	r2, r1
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	183a      	adds	r2, r7, r0
 80077b8:	8812      	ldrh	r2, [r2, #0]
 80077ba:	49c4      	ldr	r1, [pc, #784]	@ (8007acc <USB_EPStartXfer+0x3dc>)
 80077bc:	430a      	orrs	r2, r1
 80077be:	b292      	uxth	r2, r2
 80077c0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	1d7b      	adds	r3, r7, #5
 80077c8:	33ff      	adds	r3, #255	@ 0xff
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	18d3      	adds	r3, r2, r3
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	001a      	movs	r2, r3
 80077e2:	2340      	movs	r3, #64	@ 0x40
 80077e4:	4013      	ands	r3, r2
 80077e6:	d100      	bne.n	80077ea <USB_EPStartXfer+0xfa>
 80077e8:	e176      	b.n	8007ad8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d000      	beq.n	80077f8 <USB_EPStartXfer+0x108>
 80077f6:	e074      	b.n	80078e2 <USB_EPStartXfer+0x1f2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2250      	movs	r2, #80	@ 0x50
 8007800:	5a9b      	ldrh	r3, [r3, r2]
 8007802:	b29b      	uxth	r3, r3
 8007804:	001a      	movs	r2, r3
 8007806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007808:	189b      	adds	r3, r3, r2
 800780a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	00da      	lsls	r2, r3, #3
 8007812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	4aae      	ldr	r2, [pc, #696]	@ (8007ad0 <USB_EPStartXfer+0x3e0>)
 8007818:	4694      	mov	ip, r2
 800781a:	4463      	add	r3, ip
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	059b      	lsls	r3, r3, #22
 8007826:	0d9b      	lsrs	r3, r3, #22
 8007828:	b29a      	uxth	r2, r3
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	1d7b      	adds	r3, r7, #5
 8007830:	33ff      	adds	r3, #255	@ 0xff
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d108      	bne.n	800784a <USB_EPStartXfer+0x15a>
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	4aa5      	ldr	r2, [pc, #660]	@ (8007ad4 <USB_EPStartXfer+0x3e4>)
 8007840:	4313      	orrs	r3, r2
 8007842:	b29a      	uxth	r2, r3
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	e066      	b.n	8007918 <USB_EPStartXfer+0x228>
 800784a:	1d7b      	adds	r3, r7, #5
 800784c:	33ff      	adds	r3, #255	@ 0xff
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b3e      	cmp	r3, #62	@ 0x3e
 8007852:	d821      	bhi.n	8007898 <USB_EPStartXfer+0x1a8>
 8007854:	1d7b      	adds	r3, r7, #5
 8007856:	33ff      	adds	r3, #255	@ 0xff
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	1c7a      	adds	r2, r7, #1
 800785e:	32ff      	adds	r2, #255	@ 0xff
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	1d7b      	adds	r3, r7, #5
 8007864:	33ff      	adds	r3, #255	@ 0xff
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2201      	movs	r2, #1
 800786a:	4013      	ands	r3, r2
 800786c:	d006      	beq.n	800787c <USB_EPStartXfer+0x18c>
 800786e:	1c7b      	adds	r3, r7, #1
 8007870:	33ff      	adds	r3, #255	@ 0xff
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	1c7a      	adds	r2, r7, #1
 8007878:	32ff      	adds	r2, #255	@ 0xff
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	1c7b      	adds	r3, r7, #1
 8007884:	33ff      	adds	r3, #255	@ 0xff
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	029b      	lsls	r3, r3, #10
 800788c:	b29b      	uxth	r3, r3
 800788e:	4313      	orrs	r3, r2
 8007890:	b29a      	uxth	r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	e03f      	b.n	8007918 <USB_EPStartXfer+0x228>
 8007898:	1d7b      	adds	r3, r7, #5
 800789a:	33ff      	adds	r3, #255	@ 0xff
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	1c7a      	adds	r2, r7, #1
 80078a2:	32ff      	adds	r2, #255	@ 0xff
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	1d7b      	adds	r3, r7, #5
 80078a8:	33ff      	adds	r3, #255	@ 0xff
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	221f      	movs	r2, #31
 80078ae:	4013      	ands	r3, r2
 80078b0:	d106      	bne.n	80078c0 <USB_EPStartXfer+0x1d0>
 80078b2:	1c7b      	adds	r3, r7, #1
 80078b4:	33ff      	adds	r3, #255	@ 0xff
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	1c7a      	adds	r2, r7, #1
 80078bc:	32ff      	adds	r2, #255	@ 0xff
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	1c7b      	adds	r3, r7, #1
 80078c8:	33ff      	adds	r3, #255	@ 0xff
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	029b      	lsls	r3, r3, #10
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4a7f      	ldr	r2, [pc, #508]	@ (8007ad4 <USB_EPStartXfer+0x3e4>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	b29a      	uxth	r2, r3
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	e01a      	b.n	8007918 <USB_EPStartXfer+0x228>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d116      	bne.n	8007918 <USB_EPStartXfer+0x228>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2250      	movs	r2, #80	@ 0x50
 80078ee:	5a9b      	ldrh	r3, [r3, r2]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	189b      	adds	r3, r3, r2
 80078f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	00da      	lsls	r2, r3, #3
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	18d3      	adds	r3, r2, r3
 8007904:	4a72      	ldr	r2, [pc, #456]	@ (8007ad0 <USB_EPStartXfer+0x3e0>)
 8007906:	4694      	mov	ip, r2
 8007908:	4463      	add	r3, ip
 800790a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800790c:	1d7b      	adds	r3, r7, #5
 800790e:	33ff      	adds	r3, #255	@ 0xff
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007918:	2076      	movs	r0, #118	@ 0x76
 800791a:	183b      	adds	r3, r7, r0
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	8952      	ldrh	r2, [r2, #10]
 8007920:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6959      	ldr	r1, [r3, #20]
 8007926:	1d7b      	adds	r3, r7, #5
 8007928:	33ff      	adds	r3, #255	@ 0xff
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	b29c      	uxth	r4, r3
 800792e:	183b      	adds	r3, r7, r0
 8007930:	881a      	ldrh	r2, [r3, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	0023      	movs	r3, r4
 8007936:	f001 f945 	bl	8008bc4 <USB_WritePMA>
            ep->xfer_buff += len;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695a      	ldr	r2, [r3, #20]
 800793e:	1d7b      	adds	r3, r7, #5
 8007940:	33ff      	adds	r3, #255	@ 0xff
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	18d2      	adds	r2, r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	429a      	cmp	r2, r3
 8007954:	d908      	bls.n	8007968 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6a1a      	ldr	r2, [r3, #32]
 800795a:	1d7b      	adds	r3, r7, #5
 800795c:	33ff      	adds	r3, #255	@ 0xff
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	621a      	str	r2, [r3, #32]
 8007966:	e007      	b.n	8007978 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	1d7a      	adds	r2, r7, #5
 800796e:	32ff      	adds	r2, #255	@ 0xff
 8007970:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2200      	movs	r2, #0
 8007976:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d000      	beq.n	8007982 <USB_EPStartXfer+0x292>
 8007980:	e070      	b.n	8007a64 <USB_EPStartXfer+0x374>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2250      	movs	r2, #80	@ 0x50
 800798a:	5a9b      	ldrh	r3, [r3, r2]
 800798c:	b29b      	uxth	r3, r3
 800798e:	001a      	movs	r2, r3
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	189b      	adds	r3, r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	18d3      	adds	r3, r2, r3
 80079a0:	4a48      	ldr	r2, [pc, #288]	@ (8007ac4 <USB_EPStartXfer+0x3d4>)
 80079a2:	4694      	mov	ip, r2
 80079a4:	4463      	add	r3, ip
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	059b      	lsls	r3, r3, #22
 80079b0:	0d9b      	lsrs	r3, r3, #22
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	1d7b      	adds	r3, r7, #5
 80079ba:	33ff      	adds	r3, #255	@ 0xff
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d108      	bne.n	80079d4 <USB_EPStartXfer+0x2e4>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4a42      	ldr	r2, [pc, #264]	@ (8007ad4 <USB_EPStartXfer+0x3e4>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	801a      	strh	r2, [r3, #0]
 80079d2:	e064      	b.n	8007a9e <USB_EPStartXfer+0x3ae>
 80079d4:	1d7b      	adds	r3, r7, #5
 80079d6:	33ff      	adds	r3, #255	@ 0xff
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b3e      	cmp	r3, #62	@ 0x3e
 80079dc:	d81f      	bhi.n	8007a1e <USB_EPStartXfer+0x32e>
 80079de:	1d7b      	adds	r3, r7, #5
 80079e0:	33ff      	adds	r3, #255	@ 0xff
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	21fc      	movs	r1, #252	@ 0xfc
 80079e8:	187a      	adds	r2, r7, r1
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	1d7b      	adds	r3, r7, #5
 80079ee:	33ff      	adds	r3, #255	@ 0xff
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2201      	movs	r2, #1
 80079f4:	4013      	ands	r3, r2
 80079f6:	d004      	beq.n	8007a02 <USB_EPStartXfer+0x312>
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	187a      	adds	r2, r7, r1
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	23fc      	movs	r3, #252	@ 0xfc
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e03f      	b.n	8007a9e <USB_EPStartXfer+0x3ae>
 8007a1e:	1d7b      	adds	r3, r7, #5
 8007a20:	33ff      	adds	r3, #255	@ 0xff
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	21fc      	movs	r1, #252	@ 0xfc
 8007a28:	187a      	adds	r2, r7, r1
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	1d7b      	adds	r3, r7, #5
 8007a2e:	33ff      	adds	r3, #255	@ 0xff
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	221f      	movs	r2, #31
 8007a34:	4013      	ands	r3, r2
 8007a36:	d104      	bne.n	8007a42 <USB_EPStartXfer+0x352>
 8007a38:	187b      	adds	r3, r7, r1
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	187a      	adds	r2, r7, r1
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	23fc      	movs	r3, #252	@ 0xfc
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	029b      	lsls	r3, r3, #10
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4313      	orrs	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad4 <USB_EPStartXfer+0x3e4>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	e01c      	b.n	8007a9e <USB_EPStartXfer+0x3ae>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d118      	bne.n	8007a9e <USB_EPStartXfer+0x3ae>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2250      	movs	r2, #80	@ 0x50
 8007a74:	5a9b      	ldrh	r3, [r3, r2]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	001a      	movs	r2, r3
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	189b      	adds	r3, r3, r2
 8007a7e:	623b      	str	r3, [r7, #32]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	00da      	lsls	r2, r3, #3
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac4 <USB_EPStartXfer+0x3d4>)
 8007a8c:	4694      	mov	ip, r2
 8007a8e:	4463      	add	r3, ip
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	1d7b      	adds	r3, r7, #5
 8007a94:	33ff      	adds	r3, #255	@ 0xff
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a9e:	2076      	movs	r0, #118	@ 0x76
 8007aa0:	183b      	adds	r3, r7, r0
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	8912      	ldrh	r2, [r2, #8]
 8007aa6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	6959      	ldr	r1, [r3, #20]
 8007aac:	1d7b      	adds	r3, r7, #5
 8007aae:	33ff      	adds	r3, #255	@ 0xff
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	b29c      	uxth	r4, r3
 8007ab4:	183b      	adds	r3, r7, r0
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	0023      	movs	r3, r4
 8007abc:	f001 f882 	bl	8008bc4 <USB_WritePMA>
 8007ac0:	e329      	b.n	8008116 <USB_EPStartXfer+0xa26>
 8007ac2:	46c0      	nop			@ (mov r8, r8)
 8007ac4:	00000402 	.word	0x00000402
 8007ac8:	ffff8f8f 	.word	0xffff8f8f
 8007acc:	ffff8180 	.word	0xffff8180
 8007ad0:	00000406 	.word	0x00000406
 8007ad4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d000      	beq.n	8007ae2 <USB_EPStartXfer+0x3f2>
 8007ae0:	e070      	b.n	8007bc4 <USB_EPStartXfer+0x4d4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2250      	movs	r2, #80	@ 0x50
 8007aea:	5a9b      	ldrh	r3, [r3, r2]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	001a      	movs	r2, r3
 8007af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af2:	189b      	adds	r3, r3, r2
 8007af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	00da      	lsls	r2, r3, #3
 8007afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007afe:	18d3      	adds	r3, r2, r3
 8007b00:	4acd      	ldr	r2, [pc, #820]	@ (8007e38 <USB_EPStartXfer+0x748>)
 8007b02:	4694      	mov	ip, r2
 8007b04:	4463      	add	r3, ip
 8007b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	059b      	lsls	r3, r3, #22
 8007b10:	0d9b      	lsrs	r3, r3, #22
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	1d7b      	adds	r3, r7, #5
 8007b1a:	33ff      	adds	r3, #255	@ 0xff
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d108      	bne.n	8007b34 <USB_EPStartXfer+0x444>
 8007b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4ac4      	ldr	r2, [pc, #784]	@ (8007e3c <USB_EPStartXfer+0x74c>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	e064      	b.n	8007bfe <USB_EPStartXfer+0x50e>
 8007b34:	1d7b      	adds	r3, r7, #5
 8007b36:	33ff      	adds	r3, #255	@ 0xff
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b3c:	d81f      	bhi.n	8007b7e <USB_EPStartXfer+0x48e>
 8007b3e:	1d7b      	adds	r3, r7, #5
 8007b40:	33ff      	adds	r3, #255	@ 0xff
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	21f8      	movs	r1, #248	@ 0xf8
 8007b48:	187a      	adds	r2, r7, r1
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	1d7b      	adds	r3, r7, #5
 8007b4e:	33ff      	adds	r3, #255	@ 0xff
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2201      	movs	r2, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d004      	beq.n	8007b62 <USB_EPStartXfer+0x472>
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	187a      	adds	r2, r7, r1
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	23f8      	movs	r3, #248	@ 0xf8
 8007b6a:	18fb      	adds	r3, r7, r3
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	029b      	lsls	r3, r3, #10
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	4313      	orrs	r3, r2
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e03f      	b.n	8007bfe <USB_EPStartXfer+0x50e>
 8007b7e:	1d7b      	adds	r3, r7, #5
 8007b80:	33ff      	adds	r3, #255	@ 0xff
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	21f8      	movs	r1, #248	@ 0xf8
 8007b88:	187a      	adds	r2, r7, r1
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	1d7b      	adds	r3, r7, #5
 8007b8e:	33ff      	adds	r3, #255	@ 0xff
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	221f      	movs	r2, #31
 8007b94:	4013      	ands	r3, r2
 8007b96:	d104      	bne.n	8007ba2 <USB_EPStartXfer+0x4b2>
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	187a      	adds	r2, r7, r1
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	23f8      	movs	r3, #248	@ 0xf8
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	029b      	lsls	r3, r3, #10
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4aa0      	ldr	r2, [pc, #640]	@ (8007e3c <USB_EPStartXfer+0x74c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bc0:	801a      	strh	r2, [r3, #0]
 8007bc2:	e01c      	b.n	8007bfe <USB_EPStartXfer+0x50e>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d118      	bne.n	8007bfe <USB_EPStartXfer+0x50e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2250      	movs	r2, #80	@ 0x50
 8007bd4:	5a9b      	ldrh	r3, [r3, r2]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	001a      	movs	r2, r3
 8007bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	00da      	lsls	r2, r3, #3
 8007be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007be8:	18d3      	adds	r3, r2, r3
 8007bea:	4a93      	ldr	r2, [pc, #588]	@ (8007e38 <USB_EPStartXfer+0x748>)
 8007bec:	4694      	mov	ip, r2
 8007bee:	4463      	add	r3, ip
 8007bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf2:	1d7b      	adds	r3, r7, #5
 8007bf4:	33ff      	adds	r3, #255	@ 0xff
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bfe:	2076      	movs	r0, #118	@ 0x76
 8007c00:	183b      	adds	r3, r7, r0
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	8912      	ldrh	r2, [r2, #8]
 8007c06:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6959      	ldr	r1, [r3, #20]
 8007c0c:	1d7b      	adds	r3, r7, #5
 8007c0e:	33ff      	adds	r3, #255	@ 0xff
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	b29c      	uxth	r4, r3
 8007c14:	183b      	adds	r3, r7, r0
 8007c16:	881a      	ldrh	r2, [r3, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	0023      	movs	r3, r4
 8007c1c:	f000 ffd2 	bl	8008bc4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695a      	ldr	r2, [r3, #20]
 8007c24:	1d7b      	adds	r3, r7, #5
 8007c26:	33ff      	adds	r3, #255	@ 0xff
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	18d2      	adds	r2, r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	6a1a      	ldr	r2, [r3, #32]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d908      	bls.n	8007c4e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	1d7b      	adds	r3, r7, #5
 8007c42:	33ff      	adds	r3, #255	@ 0xff
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	621a      	str	r2, [r3, #32]
 8007c4c:	e007      	b.n	8007c5e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	1d7a      	adds	r2, r7, #5
 8007c54:	32ff      	adds	r2, #255	@ 0xff
 8007c56:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d000      	beq.n	8007c6c <USB_EPStartXfer+0x57c>
 8007c6a:	e070      	b.n	8007d4e <USB_EPStartXfer+0x65e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2250      	movs	r2, #80	@ 0x50
 8007c74:	5a9b      	ldrh	r3, [r3, r2]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	001a      	movs	r2, r3
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	189b      	adds	r3, r3, r2
 8007c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	00da      	lsls	r2, r3, #3
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	18d3      	adds	r3, r2, r3
 8007c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8007e40 <USB_EPStartXfer+0x750>)
 8007c8c:	4694      	mov	ip, r2
 8007c8e:	4463      	add	r3, ip
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	059b      	lsls	r3, r3, #22
 8007c9a:	0d9b      	lsrs	r3, r3, #22
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	1d7b      	adds	r3, r7, #5
 8007ca4:	33ff      	adds	r3, #255	@ 0xff
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <USB_EPStartXfer+0x5ce>
 8007cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	4a62      	ldr	r2, [pc, #392]	@ (8007e3c <USB_EPStartXfer+0x74c>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e062      	b.n	8007d84 <USB_EPStartXfer+0x694>
 8007cbe:	1d7b      	adds	r3, r7, #5
 8007cc0:	33ff      	adds	r3, #255	@ 0xff
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc6:	d81f      	bhi.n	8007d08 <USB_EPStartXfer+0x618>
 8007cc8:	1d7b      	adds	r3, r7, #5
 8007cca:	33ff      	adds	r3, #255	@ 0xff
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	085b      	lsrs	r3, r3, #1
 8007cd0:	21f4      	movs	r1, #244	@ 0xf4
 8007cd2:	187a      	adds	r2, r7, r1
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	1d7b      	adds	r3, r7, #5
 8007cd8:	33ff      	adds	r3, #255	@ 0xff
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d004      	beq.n	8007cec <USB_EPStartXfer+0x5fc>
 8007ce2:	187b      	adds	r3, r7, r1
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	187a      	adds	r2, r7, r1
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	23f4      	movs	r3, #244	@ 0xf4
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	029b      	lsls	r3, r3, #10
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	e03d      	b.n	8007d84 <USB_EPStartXfer+0x694>
 8007d08:	1d7b      	adds	r3, r7, #5
 8007d0a:	33ff      	adds	r3, #255	@ 0xff
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	21f4      	movs	r1, #244	@ 0xf4
 8007d12:	187a      	adds	r2, r7, r1
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	1d7b      	adds	r3, r7, #5
 8007d18:	33ff      	adds	r3, #255	@ 0xff
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	221f      	movs	r2, #31
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d104      	bne.n	8007d2c <USB_EPStartXfer+0x63c>
 8007d22:	187b      	adds	r3, r7, r1
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	187a      	adds	r2, r7, r1
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	23f4      	movs	r3, #244	@ 0xf4
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	029b      	lsls	r3, r3, #10
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4a3e      	ldr	r2, [pc, #248]	@ (8007e3c <USB_EPStartXfer+0x74c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	e01a      	b.n	8007d84 <USB_EPStartXfer+0x694>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d116      	bne.n	8007d84 <USB_EPStartXfer+0x694>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2250      	movs	r2, #80	@ 0x50
 8007d5a:	5a9b      	ldrh	r3, [r3, r2]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	001a      	movs	r2, r3
 8007d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d62:	189b      	adds	r3, r3, r2
 8007d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	00da      	lsls	r2, r3, #3
 8007d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d6e:	18d3      	adds	r3, r2, r3
 8007d70:	4a33      	ldr	r2, [pc, #204]	@ (8007e40 <USB_EPStartXfer+0x750>)
 8007d72:	4694      	mov	ip, r2
 8007d74:	4463      	add	r3, ip
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d78:	1d7b      	adds	r3, r7, #5
 8007d7a:	33ff      	adds	r3, #255	@ 0xff
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d84:	2076      	movs	r0, #118	@ 0x76
 8007d86:	183b      	adds	r3, r7, r0
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	8952      	ldrh	r2, [r2, #10]
 8007d8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6959      	ldr	r1, [r3, #20]
 8007d92:	1d7b      	adds	r3, r7, #5
 8007d94:	33ff      	adds	r3, #255	@ 0xff
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b29c      	uxth	r4, r3
 8007d9a:	183b      	adds	r3, r7, r0
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	0023      	movs	r3, r4
 8007da2:	f000 ff0f 	bl	8008bc4 <USB_WritePMA>
 8007da6:	e1b6      	b.n	8008116 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	1d7a      	adds	r2, r7, #5
 8007dae:	32ff      	adds	r2, #255	@ 0xff
 8007db0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	18d3      	adds	r3, r2, r3
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	2062      	movs	r0, #98	@ 0x62
 8007dc2:	183b      	adds	r3, r7, r0
 8007dc4:	491f      	ldr	r1, [pc, #124]	@ (8007e44 <USB_EPStartXfer+0x754>)
 8007dc6:	400a      	ands	r2, r1
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	18d3      	adds	r3, r2, r3
 8007dd4:	183a      	adds	r2, r7, r0
 8007dd6:	8812      	ldrh	r2, [r2, #0]
 8007dd8:	491b      	ldr	r1, [pc, #108]	@ (8007e48 <USB_EPStartXfer+0x758>)
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2250      	movs	r2, #80	@ 0x50
 8007de8:	5a9b      	ldrh	r3, [r3, r2]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	001a      	movs	r2, r3
 8007dee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	00da      	lsls	r2, r3, #3
 8007dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8007e38 <USB_EPStartXfer+0x748>)
 8007e00:	4694      	mov	ip, r2
 8007e02:	4463      	add	r3, ip
 8007e04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e06:	1d7b      	adds	r3, r7, #5
 8007e08:	33ff      	adds	r3, #255	@ 0xff
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e12:	2076      	movs	r0, #118	@ 0x76
 8007e14:	183b      	adds	r3, r7, r0
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	8912      	ldrh	r2, [r2, #8]
 8007e1a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6959      	ldr	r1, [r3, #20]
 8007e20:	1d7b      	adds	r3, r7, #5
 8007e22:	33ff      	adds	r3, #255	@ 0xff
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	b29c      	uxth	r4, r3
 8007e28:	183b      	adds	r3, r7, r0
 8007e2a:	881a      	ldrh	r2, [r3, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	0023      	movs	r3, r4
 8007e30:	f000 fec8 	bl	8008bc4 <USB_WritePMA>
 8007e34:	e16f      	b.n	8008116 <USB_EPStartXfer+0xa26>
 8007e36:	46c0      	nop			@ (mov r8, r8)
 8007e38:	00000402 	.word	0x00000402
 8007e3c:	ffff8000 	.word	0xffff8000
 8007e40:	00000406 	.word	0x00000406
 8007e44:	ffff8e8f 	.word	0xffff8e8f
 8007e48:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	1d7b      	adds	r3, r7, #5
 8007e52:	33ff      	adds	r3, #255	@ 0xff
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1ad2      	subs	r2, r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	18d3      	adds	r3, r2, r3
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	001a      	movs	r2, r3
 8007e6c:	2340      	movs	r3, #64	@ 0x40
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d100      	bne.n	8007e74 <USB_EPStartXfer+0x784>
 8007e72:	e0a4      	b.n	8007fbe <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d000      	beq.n	8007e82 <USB_EPStartXfer+0x792>
 8007e80:	e070      	b.n	8007f64 <USB_EPStartXfer+0x874>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2250      	movs	r2, #80	@ 0x50
 8007e8a:	5a9b      	ldrh	r3, [r3, r2]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	001a      	movs	r2, r3
 8007e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e92:	189b      	adds	r3, r3, r2
 8007e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	00da      	lsls	r2, r3, #3
 8007e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9e:	18d3      	adds	r3, r2, r3
 8007ea0:	4ada      	ldr	r2, [pc, #872]	@ (800820c <USB_EPStartXfer+0xb1c>)
 8007ea2:	4694      	mov	ip, r2
 8007ea4:	4463      	add	r3, ip
 8007ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	059b      	lsls	r3, r3, #22
 8007eb0:	0d9b      	lsrs	r3, r3, #22
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	1d7b      	adds	r3, r7, #5
 8007eba:	33ff      	adds	r3, #255	@ 0xff
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d108      	bne.n	8007ed4 <USB_EPStartXfer+0x7e4>
 8007ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4ad1      	ldr	r2, [pc, #836]	@ (8008210 <USB_EPStartXfer+0xb20>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	e062      	b.n	8007f9a <USB_EPStartXfer+0x8aa>
 8007ed4:	1d7b      	adds	r3, r7, #5
 8007ed6:	33ff      	adds	r3, #255	@ 0xff
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8007edc:	d81f      	bhi.n	8007f1e <USB_EPStartXfer+0x82e>
 8007ede:	1d7b      	adds	r3, r7, #5
 8007ee0:	33ff      	adds	r3, #255	@ 0xff
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	085b      	lsrs	r3, r3, #1
 8007ee6:	21f0      	movs	r1, #240	@ 0xf0
 8007ee8:	187a      	adds	r2, r7, r1
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	1d7b      	adds	r3, r7, #5
 8007eee:	33ff      	adds	r3, #255	@ 0xff
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <USB_EPStartXfer+0x812>
 8007ef8:	187b      	adds	r3, r7, r1
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	187a      	adds	r2, r7, r1
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	23f0      	movs	r3, #240	@ 0xf0
 8007f0a:	18fb      	adds	r3, r7, r3
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	029b      	lsls	r3, r3, #10
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e03d      	b.n	8007f9a <USB_EPStartXfer+0x8aa>
 8007f1e:	1d7b      	adds	r3, r7, #5
 8007f20:	33ff      	adds	r3, #255	@ 0xff
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	21f0      	movs	r1, #240	@ 0xf0
 8007f28:	187a      	adds	r2, r7, r1
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	1d7b      	adds	r3, r7, #5
 8007f2e:	33ff      	adds	r3, #255	@ 0xff
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	221f      	movs	r2, #31
 8007f34:	4013      	ands	r3, r2
 8007f36:	d104      	bne.n	8007f42 <USB_EPStartXfer+0x852>
 8007f38:	187b      	adds	r3, r7, r1
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	187a      	adds	r2, r7, r1
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	23f0      	movs	r3, #240	@ 0xf0
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	029b      	lsls	r3, r3, #10
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	4aad      	ldr	r2, [pc, #692]	@ (8008210 <USB_EPStartXfer+0xb20>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f60:	801a      	strh	r2, [r3, #0]
 8007f62:	e01a      	b.n	8007f9a <USB_EPStartXfer+0x8aa>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d116      	bne.n	8007f9a <USB_EPStartXfer+0x8aa>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2250      	movs	r2, #80	@ 0x50
 8007f70:	5a9b      	ldrh	r3, [r3, r2]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	001a      	movs	r2, r3
 8007f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f78:	189b      	adds	r3, r3, r2
 8007f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	00da      	lsls	r2, r3, #3
 8007f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	4aa1      	ldr	r2, [pc, #644]	@ (800820c <USB_EPStartXfer+0xb1c>)
 8007f88:	4694      	mov	ip, r2
 8007f8a:	4463      	add	r3, ip
 8007f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f8e:	1d7b      	adds	r3, r7, #5
 8007f90:	33ff      	adds	r3, #255	@ 0xff
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f9a:	2076      	movs	r0, #118	@ 0x76
 8007f9c:	183b      	adds	r3, r7, r0
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	8952      	ldrh	r2, [r2, #10]
 8007fa2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	6959      	ldr	r1, [r3, #20]
 8007fa8:	1d7b      	adds	r3, r7, #5
 8007faa:	33ff      	adds	r3, #255	@ 0xff
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	b29c      	uxth	r4, r3
 8007fb0:	183b      	adds	r3, r7, r0
 8007fb2:	881a      	ldrh	r2, [r3, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	0023      	movs	r3, r4
 8007fb8:	f000 fe04 	bl	8008bc4 <USB_WritePMA>
 8007fbc:	e0ab      	b.n	8008116 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d000      	beq.n	8007fc8 <USB_EPStartXfer+0x8d8>
 8007fc6:	e070      	b.n	80080aa <USB_EPStartXfer+0x9ba>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2250      	movs	r2, #80	@ 0x50
 8007fd0:	5a9b      	ldrh	r3, [r3, r2]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fd8:	189b      	adds	r3, r3, r2
 8007fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	00da      	lsls	r2, r3, #3
 8007fe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fe4:	18d3      	adds	r3, r2, r3
 8007fe6:	4a8b      	ldr	r2, [pc, #556]	@ (8008214 <USB_EPStartXfer+0xb24>)
 8007fe8:	4694      	mov	ip, r2
 8007fea:	4463      	add	r3, ip
 8007fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	059b      	lsls	r3, r3, #22
 8007ff6:	0d9b      	lsrs	r3, r3, #22
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	1d7b      	adds	r3, r7, #5
 8008000:	33ff      	adds	r3, #255	@ 0xff
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <USB_EPStartXfer+0x92a>
 8008008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	4a80      	ldr	r2, [pc, #512]	@ (8008210 <USB_EPStartXfer+0xb20>)
 8008010:	4313      	orrs	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008016:	801a      	strh	r2, [r3, #0]
 8008018:	e06c      	b.n	80080f4 <USB_EPStartXfer+0xa04>
 800801a:	1d7b      	adds	r3, r7, #5
 800801c:	33ff      	adds	r3, #255	@ 0xff
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b3e      	cmp	r3, #62	@ 0x3e
 8008022:	d81f      	bhi.n	8008064 <USB_EPStartXfer+0x974>
 8008024:	1d7b      	adds	r3, r7, #5
 8008026:	33ff      	adds	r3, #255	@ 0xff
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	21ec      	movs	r1, #236	@ 0xec
 800802e:	187a      	adds	r2, r7, r1
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	1d7b      	adds	r3, r7, #5
 8008034:	33ff      	adds	r3, #255	@ 0xff
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	4013      	ands	r3, r2
 800803c:	d004      	beq.n	8008048 <USB_EPStartXfer+0x958>
 800803e:	187b      	adds	r3, r7, r1
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	187a      	adds	r2, r7, r1
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29a      	uxth	r2, r3
 800804e:	23ec      	movs	r3, #236	@ 0xec
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	029b      	lsls	r3, r3, #10
 8008058:	b29b      	uxth	r3, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	b29a      	uxth	r2, r3
 800805e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	e047      	b.n	80080f4 <USB_EPStartXfer+0xa04>
 8008064:	1d7b      	adds	r3, r7, #5
 8008066:	33ff      	adds	r3, #255	@ 0xff
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	21ec      	movs	r1, #236	@ 0xec
 800806e:	187a      	adds	r2, r7, r1
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	1d7b      	adds	r3, r7, #5
 8008074:	33ff      	adds	r3, #255	@ 0xff
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	221f      	movs	r2, #31
 800807a:	4013      	ands	r3, r2
 800807c:	d104      	bne.n	8008088 <USB_EPStartXfer+0x998>
 800807e:	187b      	adds	r3, r7, r1
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3b01      	subs	r3, #1
 8008084:	187a      	adds	r2, r7, r1
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29a      	uxth	r2, r3
 800808e:	23ec      	movs	r3, #236	@ 0xec
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	b29b      	uxth	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b29b      	uxth	r3, r3
 800809e:	4a5c      	ldr	r2, [pc, #368]	@ (8008210 <USB_EPStartXfer+0xb20>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e024      	b.n	80080f4 <USB_EPStartXfer+0xa04>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d120      	bne.n	80080f4 <USB_EPStartXfer+0xa04>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2184      	movs	r1, #132	@ 0x84
 80080b6:	187a      	adds	r2, r7, r1
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2250      	movs	r2, #80	@ 0x50
 80080be:	5a9b      	ldrh	r3, [r3, r2]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	001a      	movs	r2, r3
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	189b      	adds	r3, r3, r2
 80080ca:	187a      	adds	r2, r7, r1
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	00da      	lsls	r2, r3, #3
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	18d3      	adds	r3, r2, r3
 80080da:	4a4e      	ldr	r2, [pc, #312]	@ (8008214 <USB_EPStartXfer+0xb24>)
 80080dc:	4694      	mov	ip, r2
 80080de:	4463      	add	r3, ip
 80080e0:	2180      	movs	r1, #128	@ 0x80
 80080e2:	187a      	adds	r2, r7, r1
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	1d7b      	adds	r3, r7, #5
 80080e8:	33ff      	adds	r3, #255	@ 0xff
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080f4:	2076      	movs	r0, #118	@ 0x76
 80080f6:	183b      	adds	r3, r7, r0
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	8912      	ldrh	r2, [r2, #8]
 80080fc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6959      	ldr	r1, [r3, #20]
 8008102:	1d7b      	adds	r3, r7, #5
 8008104:	33ff      	adds	r3, #255	@ 0xff
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b29c      	uxth	r4, r3
 800810a:	183b      	adds	r3, r7, r0
 800810c:	881a      	ldrh	r2, [r3, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	0023      	movs	r3, r4
 8008112:	f000 fd57 	bl	8008bc4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	18d3      	adds	r3, r2, r3
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29a      	uxth	r2, r3
 8008124:	200a      	movs	r0, #10
 8008126:	183b      	adds	r3, r7, r0
 8008128:	493b      	ldr	r1, [pc, #236]	@ (8008218 <USB_EPStartXfer+0xb28>)
 800812a:	400a      	ands	r2, r1
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	183b      	adds	r3, r7, r0
 8008130:	183a      	adds	r2, r7, r0
 8008132:	8812      	ldrh	r2, [r2, #0]
 8008134:	2110      	movs	r1, #16
 8008136:	404a      	eors	r2, r1
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	183b      	adds	r3, r7, r0
 800813c:	183a      	adds	r2, r7, r0
 800813e:	8812      	ldrh	r2, [r2, #0]
 8008140:	2120      	movs	r1, #32
 8008142:	404a      	eors	r2, r1
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	18d3      	adds	r3, r2, r3
 8008150:	183a      	adds	r2, r7, r0
 8008152:	8812      	ldrh	r2, [r2, #0]
 8008154:	4931      	ldr	r1, [pc, #196]	@ (800821c <USB_EPStartXfer+0xb2c>)
 8008156:	430a      	orrs	r2, r1
 8008158:	b292      	uxth	r2, r2
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	f000 fbe9 	bl	8008932 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	7b1b      	ldrb	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d000      	beq.n	800816a <USB_EPStartXfer+0xa7a>
 8008168:	e0a8      	b.n	80082bc <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	429a      	cmp	r2, r3
 8008174:	d90d      	bls.n	8008192 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	1d7a      	adds	r2, r7, #5
 800817c:	32ff      	adds	r2, #255	@ 0xff
 800817e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	1d7b      	adds	r3, r7, #5
 8008186:	33ff      	adds	r3, #255	@ 0xff
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	619a      	str	r2, [r3, #24]
 8008190:	e007      	b.n	80081a2 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	1d7a      	adds	r2, r7, #5
 8008198:	32ff      	adds	r2, #255	@ 0xff
 800819a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2190      	movs	r1, #144	@ 0x90
 80081a6:	187a      	adds	r2, r7, r1
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2250      	movs	r2, #80	@ 0x50
 80081ae:	5a9b      	ldrh	r3, [r3, r2]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	001a      	movs	r2, r3
 80081b4:	187b      	adds	r3, r7, r1
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	189b      	adds	r3, r3, r2
 80081ba:	187a      	adds	r2, r7, r1
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	00da      	lsls	r2, r3, #3
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	4a10      	ldr	r2, [pc, #64]	@ (800820c <USB_EPStartXfer+0xb1c>)
 80081cc:	4694      	mov	ip, r2
 80081ce:	4463      	add	r3, ip
 80081d0:	218c      	movs	r1, #140	@ 0x8c
 80081d2:	187a      	adds	r2, r7, r1
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	059b      	lsls	r3, r3, #22
 80081e0:	0d9b      	lsrs	r3, r3, #22
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	1d7b      	adds	r3, r7, #5
 80081ec:	33ff      	adds	r3, #255	@ 0xff
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d115      	bne.n	8008220 <USB_EPStartXfer+0xb30>
 80081f4:	187b      	adds	r3, r7, r1
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4a04      	ldr	r2, [pc, #16]	@ (8008210 <USB_EPStartXfer+0xb20>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	187b      	adds	r3, r7, r1
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	e36e      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	00000406 	.word	0x00000406
 8008210:	ffff8000 	.word	0xffff8000
 8008214:	00000402 	.word	0x00000402
 8008218:	ffff8fbf 	.word	0xffff8fbf
 800821c:	ffff8080 	.word	0xffff8080
 8008220:	1d7b      	adds	r3, r7, #5
 8008222:	33ff      	adds	r3, #255	@ 0xff
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b3e      	cmp	r3, #62	@ 0x3e
 8008228:	d822      	bhi.n	8008270 <USB_EPStartXfer+0xb80>
 800822a:	1d7b      	adds	r3, r7, #5
 800822c:	33ff      	adds	r3, #255	@ 0xff
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	21e8      	movs	r1, #232	@ 0xe8
 8008234:	187a      	adds	r2, r7, r1
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	1d7b      	adds	r3, r7, #5
 800823a:	33ff      	adds	r3, #255	@ 0xff
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	4013      	ands	r3, r2
 8008242:	d004      	beq.n	800824e <USB_EPStartXfer+0xb5e>
 8008244:	187b      	adds	r3, r7, r1
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	187a      	adds	r2, r7, r1
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	218c      	movs	r1, #140	@ 0x8c
 8008250:	187b      	adds	r3, r7, r1
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	23e8      	movs	r3, #232	@ 0xe8
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b29a      	uxth	r2, r3
 8008268:	187b      	adds	r3, r7, r1
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	e33b      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
 8008270:	1d7b      	adds	r3, r7, #5
 8008272:	33ff      	adds	r3, #255	@ 0xff
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	21e8      	movs	r1, #232	@ 0xe8
 800827a:	187a      	adds	r2, r7, r1
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	1d7b      	adds	r3, r7, #5
 8008280:	33ff      	adds	r3, #255	@ 0xff
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	221f      	movs	r2, #31
 8008286:	4013      	ands	r3, r2
 8008288:	d104      	bne.n	8008294 <USB_EPStartXfer+0xba4>
 800828a:	187b      	adds	r3, r7, r1
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3b01      	subs	r3, #1
 8008290:	187a      	adds	r2, r7, r1
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	218c      	movs	r1, #140	@ 0x8c
 8008296:	187b      	adds	r3, r7, r1
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29a      	uxth	r2, r3
 800829e:	23e8      	movs	r3, #232	@ 0xe8
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	029b      	lsls	r3, r3, #10
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4ad7      	ldr	r2, [pc, #860]	@ (800860c <USB_EPStartXfer+0xf1c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	187b      	adds	r3, r7, r1
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	801a      	strh	r2, [r3, #0]
 80082ba:	e315      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	78db      	ldrb	r3, [r3, #3]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d000      	beq.n	80082c6 <USB_EPStartXfer+0xbd6>
 80082c4:	e189      	b.n	80085da <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d000      	beq.n	80082d0 <USB_EPStartXfer+0xbe0>
 80082ce:	e07b      	b.n	80083c8 <USB_EPStartXfer+0xcd8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	21ac      	movs	r1, #172	@ 0xac
 80082d4:	187a      	adds	r2, r7, r1
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2250      	movs	r2, #80	@ 0x50
 80082dc:	5a9b      	ldrh	r3, [r3, r2]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	001a      	movs	r2, r3
 80082e2:	187b      	adds	r3, r7, r1
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	187a      	adds	r2, r7, r1
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	00da      	lsls	r2, r3, #3
 80082f2:	187b      	adds	r3, r7, r1
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	18d3      	adds	r3, r2, r3
 80082f8:	4ac5      	ldr	r2, [pc, #788]	@ (8008610 <USB_EPStartXfer+0xf20>)
 80082fa:	4694      	mov	ip, r2
 80082fc:	4463      	add	r3, ip
 80082fe:	21a8      	movs	r1, #168	@ 0xa8
 8008300:	187a      	adds	r2, r7, r1
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	187b      	adds	r3, r7, r1
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	059b      	lsls	r3, r3, #22
 800830e:	0d9b      	lsrs	r3, r3, #22
 8008310:	b29a      	uxth	r2, r3
 8008312:	187b      	adds	r3, r7, r1
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	801a      	strh	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <USB_EPStartXfer+0xc46>
 8008320:	187b      	adds	r3, r7, r1
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	4ab8      	ldr	r2, [pc, #736]	@ (800860c <USB_EPStartXfer+0xf1c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	b29a      	uxth	r2, r3
 800832e:	187b      	adds	r3, r7, r1
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e06c      	b.n	8008410 <USB_EPStartXfer+0xd20>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b3e      	cmp	r3, #62	@ 0x3e
 800833c:	d820      	bhi.n	8008380 <USB_EPStartXfer+0xc90>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	21e4      	movs	r1, #228	@ 0xe4
 8008346:	187a      	adds	r2, r7, r1
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2201      	movs	r2, #1
 8008350:	4013      	ands	r3, r2
 8008352:	d004      	beq.n	800835e <USB_EPStartXfer+0xc6e>
 8008354:	187b      	adds	r3, r7, r1
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	187a      	adds	r2, r7, r1
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	21a8      	movs	r1, #168	@ 0xa8
 8008360:	187b      	adds	r3, r7, r1
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29a      	uxth	r2, r3
 8008368:	23e4      	movs	r3, #228	@ 0xe4
 800836a:	18fb      	adds	r3, r7, r3
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	029b      	lsls	r3, r3, #10
 8008372:	b29b      	uxth	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	187b      	adds	r3, r7, r1
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e047      	b.n	8008410 <USB_EPStartXfer+0xd20>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	21e4      	movs	r1, #228	@ 0xe4
 8008388:	187a      	adds	r2, r7, r1
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	221f      	movs	r2, #31
 8008392:	4013      	ands	r3, r2
 8008394:	d104      	bne.n	80083a0 <USB_EPStartXfer+0xcb0>
 8008396:	187b      	adds	r3, r7, r1
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3b01      	subs	r3, #1
 800839c:	187a      	adds	r2, r7, r1
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	21a8      	movs	r1, #168	@ 0xa8
 80083a2:	187b      	adds	r3, r7, r1
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	23e4      	movs	r3, #228	@ 0xe4
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	029b      	lsls	r3, r3, #10
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	4313      	orrs	r3, r2
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4a94      	ldr	r2, [pc, #592]	@ (800860c <USB_EPStartXfer+0xf1c>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	187b      	adds	r3, r7, r1
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e023      	b.n	8008410 <USB_EPStartXfer+0xd20>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d11f      	bne.n	8008410 <USB_EPStartXfer+0xd20>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	21b4      	movs	r1, #180	@ 0xb4
 80083d4:	187a      	adds	r2, r7, r1
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2250      	movs	r2, #80	@ 0x50
 80083dc:	5a9b      	ldrh	r3, [r3, r2]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	001a      	movs	r2, r3
 80083e2:	187b      	adds	r3, r7, r1
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	189b      	adds	r3, r3, r2
 80083e8:	187a      	adds	r2, r7, r1
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	00da      	lsls	r2, r3, #3
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	18d3      	adds	r3, r2, r3
 80083f8:	4a85      	ldr	r2, [pc, #532]	@ (8008610 <USB_EPStartXfer+0xf20>)
 80083fa:	4694      	mov	ip, r2
 80083fc:	4463      	add	r3, ip
 80083fe:	21b0      	movs	r1, #176	@ 0xb0
 8008400:	187a      	adds	r2, r7, r1
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	b29a      	uxth	r2, r3
 800840a:	187b      	adds	r3, r7, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	801a      	strh	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	22a4      	movs	r2, #164	@ 0xa4
 8008414:	18ba      	adds	r2, r7, r2
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d000      	beq.n	8008422 <USB_EPStartXfer+0xd32>
 8008420:	e07b      	b.n	800851a <USB_EPStartXfer+0xe2a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	219c      	movs	r1, #156	@ 0x9c
 8008426:	187a      	adds	r2, r7, r1
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2250      	movs	r2, #80	@ 0x50
 800842e:	5a9b      	ldrh	r3, [r3, r2]
 8008430:	b29b      	uxth	r3, r3
 8008432:	001a      	movs	r2, r3
 8008434:	187b      	adds	r3, r7, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	189b      	adds	r3, r3, r2
 800843a:	187a      	adds	r2, r7, r1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	00da      	lsls	r2, r3, #3
 8008444:	187b      	adds	r3, r7, r1
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	18d3      	adds	r3, r2, r3
 800844a:	4a72      	ldr	r2, [pc, #456]	@ (8008614 <USB_EPStartXfer+0xf24>)
 800844c:	4694      	mov	ip, r2
 800844e:	4463      	add	r3, ip
 8008450:	2198      	movs	r1, #152	@ 0x98
 8008452:	187a      	adds	r2, r7, r1
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	187b      	adds	r3, r7, r1
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	059b      	lsls	r3, r3, #22
 8008460:	0d9b      	lsrs	r3, r3, #22
 8008462:	b29a      	uxth	r2, r3
 8008464:	187b      	adds	r3, r7, r1
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <USB_EPStartXfer+0xd98>
 8008472:	187b      	adds	r3, r7, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	4a64      	ldr	r2, [pc, #400]	@ (800860c <USB_EPStartXfer+0xf1c>)
 800847c:	4313      	orrs	r3, r2
 800847e:	b29a      	uxth	r2, r3
 8008480:	187b      	adds	r3, r7, r1
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e069      	b.n	800855c <USB_EPStartXfer+0xe6c>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b3e      	cmp	r3, #62	@ 0x3e
 800848e:	d820      	bhi.n	80084d2 <USB_EPStartXfer+0xde2>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	21e0      	movs	r1, #224	@ 0xe0
 8008498:	187a      	adds	r2, r7, r1
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2201      	movs	r2, #1
 80084a2:	4013      	ands	r3, r2
 80084a4:	d004      	beq.n	80084b0 <USB_EPStartXfer+0xdc0>
 80084a6:	187b      	adds	r3, r7, r1
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	187a      	adds	r2, r7, r1
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	2198      	movs	r1, #152	@ 0x98
 80084b2:	187b      	adds	r3, r7, r1
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	23e0      	movs	r3, #224	@ 0xe0
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	187b      	adds	r3, r7, r1
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	e044      	b.n	800855c <USB_EPStartXfer+0xe6c>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	21e0      	movs	r1, #224	@ 0xe0
 80084da:	187a      	adds	r2, r7, r1
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	221f      	movs	r2, #31
 80084e4:	4013      	ands	r3, r2
 80084e6:	d104      	bne.n	80084f2 <USB_EPStartXfer+0xe02>
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	187a      	adds	r2, r7, r1
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	2198      	movs	r1, #152	@ 0x98
 80084f4:	187b      	adds	r3, r7, r1
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	23e0      	movs	r3, #224	@ 0xe0
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	029b      	lsls	r3, r3, #10
 8008506:	b29b      	uxth	r3, r3
 8008508:	4313      	orrs	r3, r2
 800850a:	b29b      	uxth	r3, r3
 800850c:	4a3f      	ldr	r2, [pc, #252]	@ (800860c <USB_EPStartXfer+0xf1c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	b29a      	uxth	r2, r3
 8008512:	187b      	adds	r3, r7, r1
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e020      	b.n	800855c <USB_EPStartXfer+0xe6c>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d11c      	bne.n	800855c <USB_EPStartXfer+0xe6c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2250      	movs	r2, #80	@ 0x50
 8008526:	5a9b      	ldrh	r3, [r3, r2]
 8008528:	b29b      	uxth	r3, r3
 800852a:	001a      	movs	r2, r3
 800852c:	21a4      	movs	r1, #164	@ 0xa4
 800852e:	187b      	adds	r3, r7, r1
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	189b      	adds	r3, r3, r2
 8008534:	187a      	adds	r2, r7, r1
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	00da      	lsls	r2, r3, #3
 800853e:	187b      	adds	r3, r7, r1
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	18d3      	adds	r3, r2, r3
 8008544:	4a33      	ldr	r2, [pc, #204]	@ (8008614 <USB_EPStartXfer+0xf24>)
 8008546:	4694      	mov	ip, r2
 8008548:	4463      	add	r3, ip
 800854a:	21a0      	movs	r1, #160	@ 0xa0
 800854c:	187a      	adds	r2, r7, r1
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	b29a      	uxth	r2, r3
 8008556:	187b      	adds	r3, r7, r1
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d100      	bne.n	8008566 <USB_EPStartXfer+0xe76>
 8008564:	e1c0      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	18d2      	adds	r2, r2, r3
 8008570:	2196      	movs	r1, #150	@ 0x96
 8008572:	187b      	adds	r3, r7, r1
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008578:	187b      	adds	r3, r7, r1
 800857a:	881a      	ldrh	r2, [r3, #0]
 800857c:	2380      	movs	r3, #128	@ 0x80
 800857e:	01db      	lsls	r3, r3, #7
 8008580:	4013      	ands	r3, r2
 8008582:	d004      	beq.n	800858e <USB_EPStartXfer+0xe9e>
 8008584:	187b      	adds	r3, r7, r1
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	2240      	movs	r2, #64	@ 0x40
 800858a:	4013      	ands	r3, r2
 800858c:	d10d      	bne.n	80085aa <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800858e:	2196      	movs	r1, #150	@ 0x96
 8008590:	187b      	adds	r3, r7, r1
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	2380      	movs	r3, #128	@ 0x80
 8008596:	01db      	lsls	r3, r3, #7
 8008598:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800859a:	d000      	beq.n	800859e <USB_EPStartXfer+0xeae>
 800859c:	e1a4      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800859e:	187b      	adds	r3, r7, r1
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	2240      	movs	r2, #64	@ 0x40
 80085a4:	4013      	ands	r3, r2
 80085a6:	d000      	beq.n	80085aa <USB_EPStartXfer+0xeba>
 80085a8:	e19e      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	18d3      	adds	r3, r2, r3
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	2094      	movs	r0, #148	@ 0x94
 80085ba:	183b      	adds	r3, r7, r0
 80085bc:	4916      	ldr	r1, [pc, #88]	@ (8008618 <USB_EPStartXfer+0xf28>)
 80085be:	400a      	ands	r2, r1
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	183a      	adds	r2, r7, r0
 80085ce:	8812      	ldrh	r2, [r2, #0]
 80085d0:	4912      	ldr	r1, [pc, #72]	@ (800861c <USB_EPStartXfer+0xf2c>)
 80085d2:	430a      	orrs	r2, r1
 80085d4:	b292      	uxth	r2, r2
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e186      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	78db      	ldrb	r3, [r3, #3]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d000      	beq.n	80085e4 <USB_EPStartXfer+0xef4>
 80085e2:	e17f      	b.n	80088e4 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d917      	bls.n	8008620 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	1d7a      	adds	r2, r7, #5
 80085f6:	32ff      	adds	r2, #255	@ 0xff
 80085f8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	699a      	ldr	r2, [r3, #24]
 80085fe:	1d7b      	adds	r3, r7, #5
 8008600:	33ff      	adds	r3, #255	@ 0xff
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1ad2      	subs	r2, r2, r3
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	619a      	str	r2, [r3, #24]
 800860a:	e011      	b.n	8008630 <USB_EPStartXfer+0xf40>
 800860c:	ffff8000 	.word	0xffff8000
 8008610:	00000402 	.word	0x00000402
 8008614:	00000406 	.word	0x00000406
 8008618:	ffff8f8f 	.word	0xffff8f8f
 800861c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	1d7a      	adds	r2, r7, #5
 8008626:	32ff      	adds	r2, #255	@ 0xff
 8008628:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d000      	beq.n	800863a <USB_EPStartXfer+0xf4a>
 8008638:	e081      	b.n	800873e <USB_EPStartXfer+0x104e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	21cc      	movs	r1, #204	@ 0xcc
 800863e:	187a      	adds	r2, r7, r1
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2250      	movs	r2, #80	@ 0x50
 8008646:	5a9b      	ldrh	r3, [r3, r2]
 8008648:	b29b      	uxth	r3, r3
 800864a:	001a      	movs	r2, r3
 800864c:	187b      	adds	r3, r7, r1
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	189b      	adds	r3, r3, r2
 8008652:	187a      	adds	r2, r7, r1
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	00da      	lsls	r2, r3, #3
 800865c:	187b      	adds	r3, r7, r1
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	4ab6      	ldr	r2, [pc, #728]	@ (800893c <USB_EPStartXfer+0x124c>)
 8008664:	4694      	mov	ip, r2
 8008666:	4463      	add	r3, ip
 8008668:	21c8      	movs	r1, #200	@ 0xc8
 800866a:	187a      	adds	r2, r7, r1
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	187b      	adds	r3, r7, r1
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	059b      	lsls	r3, r3, #22
 8008678:	0d9b      	lsrs	r3, r3, #22
 800867a:	b29a      	uxth	r2, r3
 800867c:	187b      	adds	r3, r7, r1
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	1d7b      	adds	r3, r7, #5
 8008684:	33ff      	adds	r3, #255	@ 0xff
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <USB_EPStartXfer+0xfb2>
 800868c:	187b      	adds	r3, r7, r1
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	4aaa      	ldr	r2, [pc, #680]	@ (8008940 <USB_EPStartXfer+0x1250>)
 8008696:	4313      	orrs	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	187b      	adds	r3, r7, r1
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e072      	b.n	8008788 <USB_EPStartXfer+0x1098>
 80086a2:	1d7b      	adds	r3, r7, #5
 80086a4:	33ff      	adds	r3, #255	@ 0xff
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80086aa:	d822      	bhi.n	80086f2 <USB_EPStartXfer+0x1002>
 80086ac:	1d7b      	adds	r3, r7, #5
 80086ae:	33ff      	adds	r3, #255	@ 0xff
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	21dc      	movs	r1, #220	@ 0xdc
 80086b6:	187a      	adds	r2, r7, r1
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	1d7b      	adds	r3, r7, #5
 80086bc:	33ff      	adds	r3, #255	@ 0xff
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2201      	movs	r2, #1
 80086c2:	4013      	ands	r3, r2
 80086c4:	d004      	beq.n	80086d0 <USB_EPStartXfer+0xfe0>
 80086c6:	187b      	adds	r3, r7, r1
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	187a      	adds	r2, r7, r1
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	21c8      	movs	r1, #200	@ 0xc8
 80086d2:	187b      	adds	r3, r7, r1
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	23dc      	movs	r3, #220	@ 0xdc
 80086dc:	18fb      	adds	r3, r7, r3
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	029b      	lsls	r3, r3, #10
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4313      	orrs	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	187b      	adds	r3, r7, r1
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	801a      	strh	r2, [r3, #0]
 80086f0:	e04a      	b.n	8008788 <USB_EPStartXfer+0x1098>
 80086f2:	1d7b      	adds	r3, r7, #5
 80086f4:	33ff      	adds	r3, #255	@ 0xff
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	21dc      	movs	r1, #220	@ 0xdc
 80086fc:	187a      	adds	r2, r7, r1
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	1d7b      	adds	r3, r7, #5
 8008702:	33ff      	adds	r3, #255	@ 0xff
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	221f      	movs	r2, #31
 8008708:	4013      	ands	r3, r2
 800870a:	d104      	bne.n	8008716 <USB_EPStartXfer+0x1026>
 800870c:	187b      	adds	r3, r7, r1
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3b01      	subs	r3, #1
 8008712:	187a      	adds	r2, r7, r1
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	21c8      	movs	r1, #200	@ 0xc8
 8008718:	187b      	adds	r3, r7, r1
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29a      	uxth	r2, r3
 8008720:	23dc      	movs	r3, #220	@ 0xdc
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	029b      	lsls	r3, r3, #10
 800872a:	b29b      	uxth	r3, r3
 800872c:	4313      	orrs	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	4a83      	ldr	r2, [pc, #524]	@ (8008940 <USB_EPStartXfer+0x1250>)
 8008732:	4313      	orrs	r3, r2
 8008734:	b29a      	uxth	r2, r3
 8008736:	187b      	adds	r3, r7, r1
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e024      	b.n	8008788 <USB_EPStartXfer+0x1098>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d120      	bne.n	8008788 <USB_EPStartXfer+0x1098>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	21d4      	movs	r1, #212	@ 0xd4
 800874a:	187a      	adds	r2, r7, r1
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2250      	movs	r2, #80	@ 0x50
 8008752:	5a9b      	ldrh	r3, [r3, r2]
 8008754:	b29b      	uxth	r3, r3
 8008756:	001a      	movs	r2, r3
 8008758:	187b      	adds	r3, r7, r1
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	189b      	adds	r3, r3, r2
 800875e:	187a      	adds	r2, r7, r1
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	00da      	lsls	r2, r3, #3
 8008768:	187b      	adds	r3, r7, r1
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	18d3      	adds	r3, r2, r3
 800876e:	4a73      	ldr	r2, [pc, #460]	@ (800893c <USB_EPStartXfer+0x124c>)
 8008770:	4694      	mov	ip, r2
 8008772:	4463      	add	r3, ip
 8008774:	21d0      	movs	r1, #208	@ 0xd0
 8008776:	187a      	adds	r2, r7, r1
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	1d7b      	adds	r3, r7, #5
 800877c:	33ff      	adds	r3, #255	@ 0xff
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	187b      	adds	r3, r7, r1
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	22c4      	movs	r2, #196	@ 0xc4
 800878c:	18ba      	adds	r2, r7, r2
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	785b      	ldrb	r3, [r3, #1]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d000      	beq.n	800879a <USB_EPStartXfer+0x10aa>
 8008798:	e081      	b.n	800889e <USB_EPStartXfer+0x11ae>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	21bc      	movs	r1, #188	@ 0xbc
 800879e:	187a      	adds	r2, r7, r1
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2250      	movs	r2, #80	@ 0x50
 80087a6:	5a9b      	ldrh	r3, [r3, r2]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	001a      	movs	r2, r3
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	189b      	adds	r3, r3, r2
 80087b2:	187a      	adds	r2, r7, r1
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	00da      	lsls	r2, r3, #3
 80087bc:	187b      	adds	r3, r7, r1
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	4a60      	ldr	r2, [pc, #384]	@ (8008944 <USB_EPStartXfer+0x1254>)
 80087c4:	4694      	mov	ip, r2
 80087c6:	4463      	add	r3, ip
 80087c8:	21b8      	movs	r1, #184	@ 0xb8
 80087ca:	187a      	adds	r2, r7, r1
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	187b      	adds	r3, r7, r1
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	059b      	lsls	r3, r3, #22
 80087d8:	0d9b      	lsrs	r3, r3, #22
 80087da:	b29a      	uxth	r2, r3
 80087dc:	187b      	adds	r3, r7, r1
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	801a      	strh	r2, [r3, #0]
 80087e2:	1d7b      	adds	r3, r7, #5
 80087e4:	33ff      	adds	r3, #255	@ 0xff
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <USB_EPStartXfer+0x1112>
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	4a52      	ldr	r2, [pc, #328]	@ (8008940 <USB_EPStartXfer+0x1250>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e072      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
 8008802:	1d7b      	adds	r3, r7, #5
 8008804:	33ff      	adds	r3, #255	@ 0xff
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b3e      	cmp	r3, #62	@ 0x3e
 800880a:	d822      	bhi.n	8008852 <USB_EPStartXfer+0x1162>
 800880c:	1d7b      	adds	r3, r7, #5
 800880e:	33ff      	adds	r3, #255	@ 0xff
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	21d8      	movs	r1, #216	@ 0xd8
 8008816:	187a      	adds	r2, r7, r1
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	1d7b      	adds	r3, r7, #5
 800881c:	33ff      	adds	r3, #255	@ 0xff
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2201      	movs	r2, #1
 8008822:	4013      	ands	r3, r2
 8008824:	d004      	beq.n	8008830 <USB_EPStartXfer+0x1140>
 8008826:	187b      	adds	r3, r7, r1
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	187a      	adds	r2, r7, r1
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	21b8      	movs	r1, #184	@ 0xb8
 8008832:	187b      	adds	r3, r7, r1
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29a      	uxth	r2, r3
 800883a:	23d8      	movs	r3, #216	@ 0xd8
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	b29b      	uxth	r3, r3
 8008842:	029b      	lsls	r3, r3, #10
 8008844:	b29b      	uxth	r3, r3
 8008846:	4313      	orrs	r3, r2
 8008848:	b29a      	uxth	r2, r3
 800884a:	187b      	adds	r3, r7, r1
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e04a      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
 8008852:	1d7b      	adds	r3, r7, #5
 8008854:	33ff      	adds	r3, #255	@ 0xff
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	21d8      	movs	r1, #216	@ 0xd8
 800885c:	187a      	adds	r2, r7, r1
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	1d7b      	adds	r3, r7, #5
 8008862:	33ff      	adds	r3, #255	@ 0xff
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	221f      	movs	r2, #31
 8008868:	4013      	ands	r3, r2
 800886a:	d104      	bne.n	8008876 <USB_EPStartXfer+0x1186>
 800886c:	187b      	adds	r3, r7, r1
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3b01      	subs	r3, #1
 8008872:	187a      	adds	r2, r7, r1
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	21b8      	movs	r1, #184	@ 0xb8
 8008878:	187b      	adds	r3, r7, r1
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29a      	uxth	r2, r3
 8008880:	23d8      	movs	r3, #216	@ 0xd8
 8008882:	18fb      	adds	r3, r7, r3
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	b29b      	uxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b29b      	uxth	r3, r3
 8008890:	4a2b      	ldr	r2, [pc, #172]	@ (8008940 <USB_EPStartXfer+0x1250>)
 8008892:	4313      	orrs	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	187b      	adds	r3, r7, r1
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e024      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d120      	bne.n	80088e8 <USB_EPStartXfer+0x11f8>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2250      	movs	r2, #80	@ 0x50
 80088aa:	5a9b      	ldrh	r3, [r3, r2]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	001a      	movs	r2, r3
 80088b0:	21c4      	movs	r1, #196	@ 0xc4
 80088b2:	187b      	adds	r3, r7, r1
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	187a      	adds	r2, r7, r1
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	00da      	lsls	r2, r3, #3
 80088c2:	187b      	adds	r3, r7, r1
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	18d3      	adds	r3, r2, r3
 80088c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <USB_EPStartXfer+0x1254>)
 80088ca:	4694      	mov	ip, r2
 80088cc:	4463      	add	r3, ip
 80088ce:	21c0      	movs	r1, #192	@ 0xc0
 80088d0:	187a      	adds	r2, r7, r1
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	1d7b      	adds	r3, r7, #5
 80088d6:	33ff      	adds	r3, #255	@ 0xff
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e001      	b.n	80088e8 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e025      	b.n	8008934 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	18d3      	adds	r3, r2, r3
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	208a      	movs	r0, #138	@ 0x8a
 80088f8:	183b      	adds	r3, r7, r0
 80088fa:	4913      	ldr	r1, [pc, #76]	@ (8008948 <USB_EPStartXfer+0x1258>)
 80088fc:	400a      	ands	r2, r1
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	183b      	adds	r3, r7, r0
 8008902:	183a      	adds	r2, r7, r0
 8008904:	8812      	ldrh	r2, [r2, #0]
 8008906:	2180      	movs	r1, #128	@ 0x80
 8008908:	0149      	lsls	r1, r1, #5
 800890a:	404a      	eors	r2, r1
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	183b      	adds	r3, r7, r0
 8008910:	183a      	adds	r2, r7, r0
 8008912:	8812      	ldrh	r2, [r2, #0]
 8008914:	2180      	movs	r1, #128	@ 0x80
 8008916:	0189      	lsls	r1, r1, #6
 8008918:	404a      	eors	r2, r1
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	18d3      	adds	r3, r2, r3
 8008926:	183a      	adds	r2, r7, r0
 8008928:	8812      	ldrh	r2, [r2, #0]
 800892a:	4908      	ldr	r1, [pc, #32]	@ (800894c <USB_EPStartXfer+0x125c>)
 800892c:	430a      	orrs	r2, r1
 800892e:	b292      	uxth	r2, r2
 8008930:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b043      	add	sp, #268	@ 0x10c
 800893a:	bd90      	pop	{r4, r7, pc}
 800893c:	00000402 	.word	0x00000402
 8008940:	ffff8000 	.word	0xffff8000
 8008944:	00000406 	.word	0x00000406
 8008948:	ffffbf8f 	.word	0xffffbf8f
 800894c:	ffff8080 	.word	0xffff8080

08008950 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01d      	beq.n	800899e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	18d3      	adds	r3, r2, r3
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	200c      	movs	r0, #12
 8008972:	183b      	adds	r3, r7, r0
 8008974:	491b      	ldr	r1, [pc, #108]	@ (80089e4 <USB_EPSetStall+0x94>)
 8008976:	400a      	ands	r2, r1
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	183b      	adds	r3, r7, r0
 800897c:	183a      	adds	r2, r7, r0
 800897e:	8812      	ldrh	r2, [r2, #0]
 8008980:	2110      	movs	r1, #16
 8008982:	404a      	eors	r2, r1
 8008984:	801a      	strh	r2, [r3, #0]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	18d3      	adds	r3, r2, r3
 8008990:	183a      	adds	r2, r7, r0
 8008992:	8812      	ldrh	r2, [r2, #0]
 8008994:	4914      	ldr	r1, [pc, #80]	@ (80089e8 <USB_EPSetStall+0x98>)
 8008996:	430a      	orrs	r2, r1
 8008998:	b292      	uxth	r2, r2
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e01d      	b.n	80089da <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	18d3      	adds	r3, r2, r3
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	200e      	movs	r0, #14
 80089ae:	183b      	adds	r3, r7, r0
 80089b0:	490e      	ldr	r1, [pc, #56]	@ (80089ec <USB_EPSetStall+0x9c>)
 80089b2:	400a      	ands	r2, r1
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	183b      	adds	r3, r7, r0
 80089b8:	183a      	adds	r2, r7, r0
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	2180      	movs	r1, #128	@ 0x80
 80089be:	0149      	lsls	r1, r1, #5
 80089c0:	404a      	eors	r2, r1
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	18d3      	adds	r3, r2, r3
 80089ce:	183a      	adds	r2, r7, r0
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	4905      	ldr	r1, [pc, #20]	@ (80089e8 <USB_EPSetStall+0x98>)
 80089d4:	430a      	orrs	r2, r1
 80089d6:	b292      	uxth	r2, r2
 80089d8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b004      	add	sp, #16
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	ffff8fbf 	.word	0xffff8fbf
 80089e8:	ffff8080 	.word	0xffff8080
 80089ec:	ffffbf8f 	.word	0xffffbf8f

080089f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	7b1b      	ldrb	r3, [r3, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d000      	beq.n	8008a04 <USB_EPClearStall+0x14>
 8008a02:	e095      	b.n	8008b30 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d046      	beq.n	8008a9a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	18d2      	adds	r2, r2, r3
 8008a16:	2110      	movs	r1, #16
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	8812      	ldrh	r2, [r2, #0]
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	2240      	movs	r2, #64	@ 0x40
 8008a24:	4013      	ands	r3, r2
 8008a26:	d016      	beq.n	8008a56 <USB_EPClearStall+0x66>
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	18d3      	adds	r3, r2, r3
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	200e      	movs	r0, #14
 8008a38:	183b      	adds	r3, r7, r0
 8008a3a:	4940      	ldr	r1, [pc, #256]	@ (8008b3c <USB_EPClearStall+0x14c>)
 8008a3c:	400a      	ands	r2, r1
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	18d3      	adds	r3, r2, r3
 8008a4a:	183a      	adds	r2, r7, r0
 8008a4c:	8812      	ldrh	r2, [r2, #0]
 8008a4e:	493c      	ldr	r1, [pc, #240]	@ (8008b40 <USB_EPClearStall+0x150>)
 8008a50:	430a      	orrs	r2, r1
 8008a52:	b292      	uxth	r2, r2
 8008a54:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	78db      	ldrb	r3, [r3, #3]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d068      	beq.n	8008b30 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	18d3      	adds	r3, r2, r3
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	200c      	movs	r0, #12
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	4934      	ldr	r1, [pc, #208]	@ (8008b44 <USB_EPClearStall+0x154>)
 8008a72:	400a      	ands	r2, r1
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	183b      	adds	r3, r7, r0
 8008a78:	183a      	adds	r2, r7, r0
 8008a7a:	8812      	ldrh	r2, [r2, #0]
 8008a7c:	2120      	movs	r1, #32
 8008a7e:	404a      	eors	r2, r1
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	18d3      	adds	r3, r2, r3
 8008a8c:	183a      	adds	r2, r7, r0
 8008a8e:	8812      	ldrh	r2, [r2, #0]
 8008a90:	492d      	ldr	r1, [pc, #180]	@ (8008b48 <USB_EPClearStall+0x158>)
 8008a92:	430a      	orrs	r2, r1
 8008a94:	b292      	uxth	r2, r2
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e04a      	b.n	8008b30 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	18d2      	adds	r2, r2, r3
 8008aa4:	2116      	movs	r1, #22
 8008aa6:	187b      	adds	r3, r7, r1
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	881a      	ldrh	r2, [r3, #0]
 8008ab0:	2380      	movs	r3, #128	@ 0x80
 8008ab2:	01db      	lsls	r3, r3, #7
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	d016      	beq.n	8008ae6 <USB_EPClearStall+0xf6>
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	18d3      	adds	r3, r2, r3
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	2014      	movs	r0, #20
 8008ac8:	183b      	adds	r3, r7, r0
 8008aca:	491c      	ldr	r1, [pc, #112]	@ (8008b3c <USB_EPClearStall+0x14c>)
 8008acc:	400a      	ands	r2, r1
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	18d3      	adds	r3, r2, r3
 8008ada:	183a      	adds	r2, r7, r0
 8008adc:	8812      	ldrh	r2, [r2, #0]
 8008ade:	491b      	ldr	r1, [pc, #108]	@ (8008b4c <USB_EPClearStall+0x15c>)
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	b292      	uxth	r2, r2
 8008ae4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	18d3      	adds	r3, r2, r3
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	2012      	movs	r0, #18
 8008af6:	183b      	adds	r3, r7, r0
 8008af8:	4915      	ldr	r1, [pc, #84]	@ (8008b50 <USB_EPClearStall+0x160>)
 8008afa:	400a      	ands	r2, r1
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	183b      	adds	r3, r7, r0
 8008b00:	183a      	adds	r2, r7, r0
 8008b02:	8812      	ldrh	r2, [r2, #0]
 8008b04:	2180      	movs	r1, #128	@ 0x80
 8008b06:	0149      	lsls	r1, r1, #5
 8008b08:	404a      	eors	r2, r1
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	183b      	adds	r3, r7, r0
 8008b0e:	183a      	adds	r2, r7, r0
 8008b10:	8812      	ldrh	r2, [r2, #0]
 8008b12:	2180      	movs	r1, #128	@ 0x80
 8008b14:	0189      	lsls	r1, r1, #6
 8008b16:	404a      	eors	r2, r1
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	18d3      	adds	r3, r2, r3
 8008b24:	183a      	adds	r2, r7, r0
 8008b26:	8812      	ldrh	r2, [r2, #0]
 8008b28:	4907      	ldr	r1, [pc, #28]	@ (8008b48 <USB_EPClearStall+0x158>)
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	b292      	uxth	r2, r2
 8008b2e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	0018      	movs	r0, r3
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b006      	add	sp, #24
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	46c0      	nop			@ (mov r8, r8)
 8008b3c:	ffff8f8f 	.word	0xffff8f8f
 8008b40:	ffff80c0 	.word	0xffff80c0
 8008b44:	ffff8fbf 	.word	0xffff8fbf
 8008b48:	ffff8080 	.word	0xffff8080
 8008b4c:	ffffc080 	.word	0xffffc080
 8008b50:	ffffbf8f 	.word	0xffffbf8f

08008b54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	000a      	movs	r2, r1
 8008b5e:	1cfb      	adds	r3, r7, #3
 8008b60:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8008b62:	1cfb      	adds	r3, r7, #3
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	224c      	movs	r2, #76	@ 0x4c
 8008b6e:	2180      	movs	r1, #128	@ 0x80
 8008b70:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b002      	add	sp, #8
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2258      	movs	r2, #88	@ 0x58
 8008b88:	5a9b      	ldrh	r3, [r3, r2]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ba4 <USB_DevConnect+0x28>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	b299      	uxth	r1, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2258      	movs	r2, #88	@ 0x58
 8008b96:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	b002      	add	sp, #8
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	ffff8000 	.word	0xffff8000

08008ba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2244      	movs	r2, #68	@ 0x44
 8008bb4:	5a9b      	ldrh	r3, [r3, r2]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b004      	add	sp, #16
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	@ 0x28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	0019      	movs	r1, r3
 8008bd0:	1dbb      	adds	r3, r7, #6
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	1d3b      	adds	r3, r7, #4
 8008bd6:	1c0a      	adds	r2, r1, #0
 8008bd8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	3301      	adds	r3, #1
 8008be0:	085b      	lsrs	r3, r3, #1
 8008be2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bec:	1dbb      	adds	r3, r7, #6
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	18d3      	adds	r3, r2, r3
 8008bf4:	2280      	movs	r2, #128	@ 0x80
 8008bf6:	00d2      	lsls	r2, r2, #3
 8008bf8:	4694      	mov	ip, r2
 8008bfa:	4463      	add	r3, ip
 8008bfc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c02:	e021      	b.n	8008c48 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	2112      	movs	r1, #18
 8008c0a:	187b      	adds	r3, r7, r1
 8008c0c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3301      	adds	r3, #1
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b21b      	sxth	r3, r3
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	b21a      	sxth	r2, r3
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	5e1b      	ldrsh	r3, [r3, r0]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	b21a      	sxth	r2, r3
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	187a      	adds	r2, r7, r1
 8008c2c:	8812      	ldrh	r2, [r2, #0]
 8008c2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	3302      	adds	r3, #2
 8008c34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	3b01      	subs	r3, #1
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1da      	bne.n	8008c04 <USB_WritePMA+0x40>
  }
}
 8008c4e:	46c0      	nop			@ (mov r8, r8)
 8008c50:	46c0      	nop			@ (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b00a      	add	sp, #40	@ 0x28
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	@ 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	0019      	movs	r1, r3
 8008c64:	1dbb      	adds	r3, r7, #6
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	1d3b      	adds	r3, r7, #4
 8008c6a:	1c0a      	adds	r2, r1, #0
 8008c6c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c6e:	1d3b      	adds	r3, r7, #4
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c80:	1dbb      	adds	r3, r7, #6
 8008c82:	881a      	ldrh	r2, [r3, #0]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	2280      	movs	r2, #128	@ 0x80
 8008c8a:	00d2      	lsls	r2, r2, #3
 8008c8c:	4694      	mov	ip, r2
 8008c8e:	4463      	add	r3, ip
 8008c90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c96:	e018      	b.n	8008cca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e3      	bne.n	8008c98 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008cd0:	1d3b      	adds	r3, r7, #4
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	701a      	strb	r2, [r3, #0]
  }
}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	b00a      	add	sp, #40	@ 0x28
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008cf6:	b590      	push	{r4, r7, lr}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	000a      	movs	r2, r1
 8008d00:	1cfb      	adds	r3, r7, #3
 8008d02:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008d04:	240f      	movs	r4, #15
 8008d06:	193b      	adds	r3, r7, r4
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	2340      	movs	r3, #64	@ 0x40
 8008d10:	2203      	movs	r2, #3
 8008d12:	2181      	movs	r1, #129	@ 0x81
 8008d14:	f001 ff8d 	bl	800ac32 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	2340      	movs	r3, #64	@ 0x40
 8008d22:	2203      	movs	r2, #3
 8008d24:	2101      	movs	r1, #1
 8008d26:	f001 ff84 	bl	800ac32 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	23b6      	movs	r3, #182	@ 0xb6
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	2101      	movs	r1, #1
 8008d32:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008d34:	2054      	movs	r0, #84	@ 0x54
 8008d36:	f002 f8fd 	bl	800af34 <USBD_static_malloc>
 8008d3a:	0001      	movs	r1, r0
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	23ae      	movs	r3, #174	@ 0xae
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	23ae      	movs	r3, #174	@ 0xae
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	58d3      	ldr	r3, [r2, r3]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <USBD_CUSTOM_HID_Init+0x62>
  {
    ret = 1U;
 8008d50:	193b      	adds	r3, r7, r4
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	e014      	b.n	8008d82 <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	23ae      	movs	r3, #174	@ 0xae
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	58d3      	ldr	r3, [r2, r3]
 8008d60:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2250      	movs	r2, #80	@ 0x50
 8008d66:	2100      	movs	r1, #0
 8008d68:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	23af      	movs	r3, #175	@ 0xaf
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	58d3      	ldr	r3, [r2, r3]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	2340      	movs	r3, #64	@ 0x40
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	f002 f8a2 	bl	800aec6 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008d82:	230f      	movs	r3, #15
 8008d84:	18fb      	adds	r3, r7, r3
 8008d86:	781b      	ldrb	r3, [r3, #0]
}
 8008d88:	0018      	movs	r0, r3
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	b005      	add	sp, #20
 8008d8e:	bd90      	pop	{r4, r7, pc}

08008d90 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	000a      	movs	r2, r1
 8008d9a:	1cfb      	adds	r3, r7, #3
 8008d9c:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2181      	movs	r1, #129	@ 0x81
 8008da2:	0018      	movs	r0, r3
 8008da4:	f001 ff7c 	bl	800aca0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2101      	movs	r1, #1
 8008db2:	0018      	movs	r0, r3
 8008db4:	f001 ff74 	bl	800aca0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	23b6      	movs	r3, #182	@ 0xb6
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	23ae      	movs	r3, #174	@ 0xae
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	58d3      	ldr	r3, [r2, r3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d011      	beq.n	8008df2 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	23af      	movs	r3, #175	@ 0xaf
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	58d3      	ldr	r3, [r2, r3]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	23ae      	movs	r3, #174	@ 0xae
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	58d3      	ldr	r3, [r2, r3]
 8008de2:	0018      	movs	r0, r3
 8008de4:	f002 f8b2 	bl	800af4c <USBD_static_free>
    pdev->pClassData = NULL;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	23ae      	movs	r3, #174	@ 0xae
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	2100      	movs	r1, #0
 8008df0:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b002      	add	sp, #8
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	23ae      	movs	r3, #174	@ 0xae
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	58d3      	ldr	r3, [r2, r3]
 8008e0e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008e10:	231e      	movs	r3, #30
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	2200      	movs	r2, #0
 8008e16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008e1c:	230e      	movs	r3, #14
 8008e1e:	18fb      	adds	r3, r7, r3
 8008e20:	2200      	movs	r2, #0
 8008e22:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008e24:	2317      	movs	r3, #23
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	001a      	movs	r2, r3
 8008e32:	2360      	movs	r3, #96	@ 0x60
 8008e34:	4013      	ands	r3, r2
 8008e36:	d044      	beq.n	8008ec2 <USBD_CUSTOM_HID_Setup+0xc6>
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d000      	beq.n	8008e3e <USBD_CUSTOM_HID_Setup+0x42>
 8008e3c:	e0d8      	b.n	8008ff0 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b0b      	cmp	r3, #11
 8008e44:	d831      	bhi.n	8008eaa <USBD_CUSTOM_HID_Setup+0xae>
 8008e46:	009a      	lsls	r2, r3, #2
 8008e48:	4b72      	ldr	r3, [pc, #456]	@ (8009014 <USBD_CUSTOM_HID_Setup+0x218>)
 8008e4a:	18d3      	adds	r3, r2, r3
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	001a      	movs	r2, r3
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8008e5c:	e030      	b.n	8008ec0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3340      	adds	r3, #64	@ 0x40
 8008e62:	0019      	movs	r1, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f001 fb24 	bl	800a4b6 <USBD_CtlSendData>
          break;
 8008e6e:	e027      	b.n	8008ec0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	885b      	ldrh	r3, [r3, #2]
 8008e74:	0a1b      	lsrs	r3, r3, #8
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	001a      	movs	r2, r3
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8008e80:	e01e      	b.n	8008ec0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	3344      	adds	r3, #68	@ 0x44
 8008e86:	0019      	movs	r1, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f001 fb12 	bl	800a4b6 <USBD_CtlSendData>
          break;
 8008e92:	e015      	b.n	8008ec0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2201      	movs	r2, #1
 8008e98:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008e9a:	6939      	ldr	r1, [r7, #16]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88da      	ldrh	r2, [r3, #6]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f001 fb3a 	bl	800a51c <USBD_CtlPrepareRx>
          break;
 8008ea8:	e00a      	b.n	8008ec0 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	0011      	movs	r1, r2
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f001 fa82 	bl	800a3ba <USBD_CtlError>
          ret = USBD_FAIL;
 8008eb6:	2317      	movs	r3, #23
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	2202      	movs	r2, #2
 8008ebc:	701a      	strb	r2, [r3, #0]
          break;
 8008ebe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008ec0:	e0a1      	b.n	8009006 <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	2b0b      	cmp	r3, #11
 8008ec8:	d100      	bne.n	8008ecc <USBD_CUSTOM_HID_Setup+0xd0>
 8008eca:	e06d      	b.n	8008fa8 <USBD_CUSTOM_HID_Setup+0x1ac>
 8008ecc:	dd00      	ble.n	8008ed0 <USBD_CUSTOM_HID_Setup+0xd4>
 8008ece:	e083      	b.n	8008fd8 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008ed0:	2b0a      	cmp	r3, #10
 8008ed2:	d04f      	beq.n	8008f74 <USBD_CUSTOM_HID_Setup+0x178>
 8008ed4:	dd00      	ble.n	8008ed8 <USBD_CUSTOM_HID_Setup+0xdc>
 8008ed6:	e07f      	b.n	8008fd8 <USBD_CUSTOM_HID_Setup+0x1dc>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <USBD_CUSTOM_HID_Setup+0xe6>
 8008edc:	2b06      	cmp	r3, #6
 8008ede:	d019      	beq.n	8008f14 <USBD_CUSTOM_HID_Setup+0x118>
 8008ee0:	e07a      	b.n	8008fd8 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	23a7      	movs	r3, #167	@ 0xa7
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	5cd3      	ldrb	r3, [r2, r3]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d107      	bne.n	8008efe <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008eee:	230e      	movs	r3, #14
 8008ef0:	18f9      	adds	r1, r7, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f001 fadd 	bl	800a4b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008efc:	e077      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f001 fa58 	bl	800a3ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008f0a:	2317      	movs	r3, #23
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	2202      	movs	r2, #2
 8008f10:	701a      	strb	r2, [r3, #0]
          break;
 8008f12:	e06c      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	885b      	ldrh	r3, [r3, #2]
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b22      	cmp	r3, #34	@ 0x22
 8008f1e:	d10f      	bne.n	8008f40 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	88db      	ldrh	r3, [r3, #6]
 8008f24:	221e      	movs	r2, #30
 8008f26:	18ba      	adds	r2, r7, r2
 8008f28:	b299      	uxth	r1, r3
 8008f2a:	29be      	cmp	r1, #190	@ 0xbe
 8008f2c:	d900      	bls.n	8008f30 <USBD_CUSTOM_HID_Setup+0x134>
 8008f2e:	23be      	movs	r3, #190	@ 0xbe
 8008f30:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	23af      	movs	r3, #175	@ 0xaf
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	58d3      	ldr	r3, [r2, r3]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	e010      	b.n	8008f62 <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	0a1b      	lsrs	r3, r3, #8
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b21      	cmp	r3, #33	@ 0x21
 8008f4a:	d10a      	bne.n	8008f62 <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008f4c:	4b32      	ldr	r3, [pc, #200]	@ (8009018 <USBD_CUSTOM_HID_Setup+0x21c>)
 8008f4e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	88db      	ldrh	r3, [r3, #6]
 8008f54:	221e      	movs	r2, #30
 8008f56:	18ba      	adds	r2, r7, r2
 8008f58:	b299      	uxth	r1, r3
 8008f5a:	2909      	cmp	r1, #9
 8008f5c:	d900      	bls.n	8008f60 <USBD_CUSTOM_HID_Setup+0x164>
 8008f5e:	2309      	movs	r3, #9
 8008f60:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008f62:	231e      	movs	r3, #30
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	881a      	ldrh	r2, [r3, #0]
 8008f68:	69b9      	ldr	r1, [r7, #24]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f001 faa2 	bl	800a4b6 <USBD_CtlSendData>
          break;
 8008f72:	e03c      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	23a7      	movs	r3, #167	@ 0xa7
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	5cd3      	ldrb	r3, [r2, r3]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d108      	bne.n	8008f92 <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	3348      	adds	r3, #72	@ 0x48
 8008f84:	0019      	movs	r1, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f001 fa93 	bl	800a4b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f90:	e02d      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	0011      	movs	r1, r2
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f001 fa0e 	bl	800a3ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008f9e:	2317      	movs	r3, #23
 8008fa0:	18fb      	adds	r3, r7, r3
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	701a      	strb	r2, [r3, #0]
          break;
 8008fa6:	e022      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	23a7      	movs	r3, #167	@ 0xa7
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	5cd3      	ldrb	r3, [r2, r3]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d106      	bne.n	8008fc2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	885b      	ldrh	r3, [r3, #2]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	001a      	movs	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fc0:	e015      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	0011      	movs	r1, r2
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f001 f9f6 	bl	800a3ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008fce:	2317      	movs	r3, #23
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	701a      	strb	r2, [r3, #0]
          break;
 8008fd6:	e00a      	b.n	8008fee <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	0011      	movs	r1, r2
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f001 f9eb 	bl	800a3ba <USBD_CtlError>
          ret = USBD_FAIL;
 8008fe4:	2317      	movs	r3, #23
 8008fe6:	18fb      	adds	r3, r7, r3
 8008fe8:	2202      	movs	r2, #2
 8008fea:	701a      	strb	r2, [r3, #0]
          break;
 8008fec:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008fee:	e00a      	b.n	8009006 <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f001 f9df 	bl	800a3ba <USBD_CtlError>
      ret = USBD_FAIL;
 8008ffc:	2317      	movs	r3, #23
 8008ffe:	18fb      	adds	r3, r7, r3
 8009000:	2202      	movs	r2, #2
 8009002:	701a      	strb	r2, [r3, #0]
      break;
 8009004:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8009006:	2317      	movs	r3, #23
 8009008:	18fb      	adds	r3, r7, r3
 800900a:	781b      	ldrb	r3, [r3, #0]
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b008      	add	sp, #32
 8009012:	bd80      	pop	{r7, pc}
 8009014:	0800b164 	.word	0x0800b164
 8009018:	20000464 	.word	0x20000464

0800901c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	1dbb      	adds	r3, r7, #6
 8009028:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	23ae      	movs	r3, #174	@ 0xae
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	58d3      	ldr	r3, [r2, r3]
 8009032:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	23a7      	movs	r3, #167	@ 0xa7
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	5cd3      	ldrb	r3, [r2, r3]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d112      	bne.n	8009066 <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2250      	movs	r2, #80	@ 0x50
 8009044:	5c9b      	ldrb	r3, [r3, r2]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10b      	bne.n	8009062 <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2250      	movs	r2, #80	@ 0x50
 800904e:	2101      	movs	r1, #1
 8009050:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8009052:	1dbb      	adds	r3, r7, #6
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	2181      	movs	r1, #129	@ 0x81
 800905c:	f001 fefc 	bl	800ae58 <USBD_LL_Transmit>
 8009060:	e001      	b.n	8009066 <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	0018      	movs	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	b006      	add	sp, #24
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2229      	movs	r2, #41	@ 0x29
 800907c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800907e:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b002      	add	sp, #8
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200003e0 	.word	0x200003e0

0800908c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2229      	movs	r2, #41	@ 0x29
 8009098:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800909a:	4b02      	ldr	r3, [pc, #8]	@ (80090a4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b002      	add	sp, #8
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	2000040c 	.word	0x2000040c

080090a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2229      	movs	r2, #41	@ 0x29
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80090b6:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b002      	add	sp, #8
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000438 	.word	0x20000438

080090c4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	000a      	movs	r2, r1
 80090ce:	1cfb      	adds	r3, r7, #3
 80090d0:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	23ae      	movs	r3, #174	@ 0xae
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	58d3      	ldr	r3, [r2, r3]
 80090da:	2250      	movs	r2, #80	@ 0x50
 80090dc:	2100      	movs	r1, #0
 80090de:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b002      	add	sp, #8
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	000a      	movs	r2, r1
 80090f4:	1cfb      	adds	r3, r7, #3
 80090f6:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	23ae      	movs	r3, #174	@ 0xae
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	58d3      	ldr	r3, [r2, r3]
 8009100:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	23af      	movs	r3, #175	@ 0xaf
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	58d3      	ldr	r3, [r2, r3]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	7810      	ldrb	r0, [r2, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	7852      	ldrb	r2, [r2, #1]
 8009114:	0011      	movs	r1, r2
 8009116:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	2340      	movs	r3, #64	@ 0x40
 800911e:	2101      	movs	r1, #1
 8009120:	f001 fed1 	bl	800aec6 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	0018      	movs	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	b004      	add	sp, #16
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	23ae      	movs	r3, #174	@ 0xae
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	58d3      	ldr	r3, [r2, r3]
 800913e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d10d      	bne.n	8009164 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	23af      	movs	r3, #175	@ 0xaf
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	58d3      	ldr	r3, [r2, r3]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	7810      	ldrb	r0, [r2, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	7852      	ldrb	r2, [r2, #1]
 800915a:	0011      	movs	r1, r2
 800915c:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	0018      	movs	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	b004      	add	sp, #16
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220a      	movs	r2, #10
 800917c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800917e:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8009180:	0018      	movs	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20000470 	.word	0x20000470

0800918c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009196:	200f      	movs	r0, #15
 8009198:	183b      	adds	r3, r7, r0
 800919a:	2202      	movs	r2, #2
 800919c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	23af      	movs	r3, #175	@ 0xaf
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80091ae:	183b      	adds	r3, r7, r0
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80091b4:	230f      	movs	r3, #15
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	781b      	ldrb	r3, [r3, #0]
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b004      	add	sp, #16
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	60b9      	str	r1, [r7, #8]
 80091cc:	1dfb      	adds	r3, r7, #7
 80091ce:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091d6:	2302      	movs	r3, #2
 80091d8:	e020      	b.n	800921c <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	23ad      	movs	r3, #173	@ 0xad
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	58d3      	ldr	r3, [r2, r3]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	23ad      	movs	r3, #173	@ 0xad
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	2100      	movs	r1, #0
 80091ee:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	23ac      	movs	r3, #172	@ 0xac
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	23a7      	movs	r3, #167	@ 0xa7
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	2101      	movs	r1, #1
 8009208:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1dfa      	adds	r2, r7, #7
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	0018      	movs	r0, r3
 8009216:	f001 fc8f 	bl	800ab38 <USBD_LL_Init>

  return USBD_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	0018      	movs	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	b004      	add	sp, #16
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800922e:	200f      	movs	r0, #15
 8009230:	183b      	adds	r3, r7, r0
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d008      	beq.n	800924e <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	23ad      	movs	r3, #173	@ 0xad
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009246:	183b      	adds	r3, r7, r0
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
 800924c:	e003      	b.n	8009256 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800924e:	230f      	movs	r3, #15
 8009250:	18fb      	adds	r3, r7, r3
 8009252:	2202      	movs	r2, #2
 8009254:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009256:	230f      	movs	r3, #15
 8009258:	18fb      	adds	r3, r7, r3
 800925a:	781b      	ldrb	r3, [r3, #0]
}
 800925c:	0018      	movs	r0, r3
 800925e:	46bd      	mov	sp, r7
 8009260:	b004      	add	sp, #16
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	0018      	movs	r0, r3
 8009270:	f001 fcba 	bl	800abe8 <USBD_LL_Start>

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	0018      	movs	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	b002      	add	sp, #8
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	0018      	movs	r0, r3
 800928a:	46bd      	mov	sp, r7
 800928c:	b002      	add	sp, #8
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	000a      	movs	r2, r1
 800929a:	1cfb      	adds	r3, r7, #3
 800929c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800929e:	240f      	movs	r4, #15
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	2202      	movs	r2, #2
 80092a4:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	23ad      	movs	r3, #173	@ 0xad
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	58d3      	ldr	r3, [r2, r3]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00e      	beq.n	80092d0 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	23ad      	movs	r3, #173	@ 0xad
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	58d3      	ldr	r3, [r2, r3]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	1cfa      	adds	r2, r7, #3
 80092be:	7811      	ldrb	r1, [r2, #0]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	0010      	movs	r0, r2
 80092c4:	4798      	blx	r3
 80092c6:	1e03      	subs	r3, r0, #0
 80092c8:	d102      	bne.n	80092d0 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	2200      	movs	r2, #0
 80092ce:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80092d0:	230f      	movs	r3, #15
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	781b      	ldrb	r3, [r3, #0]
}
 80092d6:	0018      	movs	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	b005      	add	sp, #20
 80092dc:	bd90      	pop	{r4, r7, pc}

080092de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	000a      	movs	r2, r1
 80092e8:	1cfb      	adds	r3, r7, #3
 80092ea:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	23ad      	movs	r3, #173	@ 0xad
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	58d3      	ldr	r3, [r2, r3]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	1cfa      	adds	r2, r7, #3
 80092f8:	7811      	ldrb	r1, [r2, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	0010      	movs	r0, r2
 80092fe:	4798      	blx	r3

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	0018      	movs	r0, r3
 8009304:	46bd      	mov	sp, r7
 8009306:	b002      	add	sp, #8
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	22aa      	movs	r2, #170	@ 0xaa
 800931a:	0092      	lsls	r2, r2, #2
 800931c:	4694      	mov	ip, r2
 800931e:	4463      	add	r3, ip
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	0011      	movs	r1, r2
 8009324:	0018      	movs	r0, r3
 8009326:	f001 f810 	bl	800a34a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	23a5      	movs	r3, #165	@ 0xa5
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	2101      	movs	r1, #1
 8009332:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a23      	ldr	r2, [pc, #140]	@ (80093c4 <USBD_LL_SetupStage+0xb8>)
 8009338:	5a9b      	ldrh	r3, [r3, r2]
 800933a:	0019      	movs	r1, r3
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	23a6      	movs	r3, #166	@ 0xa6
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	23aa      	movs	r3, #170	@ 0xaa
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	5cd3      	ldrb	r3, [r2, r3]
 800934c:	001a      	movs	r2, r3
 800934e:	231f      	movs	r3, #31
 8009350:	4013      	ands	r3, r2
 8009352:	2b02      	cmp	r3, #2
 8009354:	d019      	beq.n	800938a <USBD_LL_SetupStage+0x7e>
 8009356:	d822      	bhi.n	800939e <USBD_LL_SetupStage+0x92>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <USBD_LL_SetupStage+0x56>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d00a      	beq.n	8009376 <USBD_LL_SetupStage+0x6a>
 8009360:	e01d      	b.n	800939e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	22aa      	movs	r2, #170	@ 0xaa
 8009366:	0092      	lsls	r2, r2, #2
 8009368:	189a      	adds	r2, r3, r2
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	0011      	movs	r1, r2
 800936e:	0018      	movs	r0, r3
 8009370:	f000 fa10 	bl	8009794 <USBD_StdDevReq>
      break;
 8009374:	e020      	b.n	80093b8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	22aa      	movs	r2, #170	@ 0xaa
 800937a:	0092      	lsls	r2, r2, #2
 800937c:	189a      	adds	r2, r3, r2
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	0011      	movs	r1, r2
 8009382:	0018      	movs	r0, r3
 8009384:	f000 fa78 	bl	8009878 <USBD_StdItfReq>
      break;
 8009388:	e016      	b.n	80093b8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	22aa      	movs	r2, #170	@ 0xaa
 800938e:	0092      	lsls	r2, r2, #2
 8009390:	189a      	adds	r2, r3, r2
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	0011      	movs	r1, r2
 8009396:	0018      	movs	r0, r3
 8009398:	f000 fac5 	bl	8009926 <USBD_StdEPReq>
      break;
 800939c:	e00c      	b.n	80093b8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	23aa      	movs	r3, #170	@ 0xaa
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	5cd3      	ldrb	r3, [r2, r3]
 80093a6:	227f      	movs	r2, #127	@ 0x7f
 80093a8:	4393      	bics	r3, r2
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	0011      	movs	r1, r2
 80093b0:	0018      	movs	r0, r3
 80093b2:	f001 fca0 	bl	800acf6 <USBD_LL_StallEP>
      break;
 80093b6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	0018      	movs	r0, r3
 80093bc:	46bd      	mov	sp, r7
 80093be:	b002      	add	sp, #8
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			@ (mov r8, r8)
 80093c4:	000002ae 	.word	0x000002ae

080093c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	607a      	str	r2, [r7, #4]
 80093d2:	200b      	movs	r0, #11
 80093d4:	183b      	adds	r3, r7, r0
 80093d6:	1c0a      	adds	r2, r1, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093da:	183b      	adds	r3, r7, r0
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d154      	bne.n	800948c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3355      	adds	r3, #85	@ 0x55
 80093e6:	33ff      	adds	r3, #255	@ 0xff
 80093e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	23a5      	movs	r3, #165	@ 0xa5
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	58d3      	ldr	r3, [r2, r3]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d139      	bne.n	800946a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d919      	bls.n	8009436 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009418:	429a      	cmp	r2, r3
 800941a:	d203      	bcs.n	8009424 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009420:	b29b      	uxth	r3, r3
 8009422:	e002      	b.n	800942a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009428:	b29b      	uxth	r3, r3
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	001a      	movs	r2, r3
 8009430:	f001 f898 	bl	800a564 <USBD_CtlContinueRx>
 8009434:	e045      	b.n	80094c2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	23ad      	movs	r3, #173	@ 0xad
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	58d3      	ldr	r3, [r2, r3]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	23a7      	movs	r3, #167	@ 0xa7
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800944c:	2b03      	cmp	r3, #3
 800944e:	d107      	bne.n	8009460 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	23ad      	movs	r3, #173	@ 0xad
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	58d3      	ldr	r3, [r2, r3]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	0010      	movs	r0, r2
 800945e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	0018      	movs	r0, r3
 8009464:	f001 f891 	bl	800a58a <USBD_CtlSendStatus>
 8009468:	e02b      	b.n	80094c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	23a5      	movs	r3, #165	@ 0xa5
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	58d3      	ldr	r3, [r2, r3]
 8009472:	2b05      	cmp	r3, #5
 8009474:	d125      	bne.n	80094c2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	23a5      	movs	r3, #165	@ 0xa5
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	2100      	movs	r1, #0
 800947e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2100      	movs	r1, #0
 8009484:	0018      	movs	r0, r3
 8009486:	f001 fc36 	bl	800acf6 <USBD_LL_StallEP>
 800948a:	e01a      	b.n	80094c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	23ad      	movs	r3, #173	@ 0xad
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	58d3      	ldr	r3, [r2, r3]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	23a7      	movs	r3, #167	@ 0xa7
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d10b      	bne.n	80094be <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	23ad      	movs	r3, #173	@ 0xad
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	58d3      	ldr	r3, [r2, r3]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	220b      	movs	r2, #11
 80094b2:	18ba      	adds	r2, r7, r2
 80094b4:	7811      	ldrb	r1, [r2, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	0010      	movs	r0, r2
 80094ba:	4798      	blx	r3
 80094bc:	e001      	b.n	80094c2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094be:	2302      	movs	r3, #2
 80094c0:	e000      	b.n	80094c4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	0018      	movs	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b006      	add	sp, #24
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	200b      	movs	r0, #11
 80094d8:	183b      	adds	r3, r7, r0
 80094da:	1c0a      	adds	r2, r1, #0
 80094dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094de:	183b      	adds	r3, r7, r0
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d000      	beq.n	80094e8 <USBD_LL_DataInStage+0x1c>
 80094e6:	e08e      	b.n	8009606 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3314      	adds	r3, #20
 80094ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	23a5      	movs	r3, #165	@ 0xa5
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	58d3      	ldr	r3, [r2, r3]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d164      	bne.n	80095c4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	429a      	cmp	r2, r3
 8009504:	d915      	bls.n	8009532 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	b29a      	uxth	r2, r3
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	0018      	movs	r0, r3
 8009520:	f000 ffe9 	bl	800a4f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	2300      	movs	r3, #0
 8009528:	2200      	movs	r2, #0
 800952a:	2100      	movs	r1, #0
 800952c:	f001 fccb 	bl	800aec6 <USBD_LL_PrepareReceive>
 8009530:	e059      	b.n	80095e6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	0019      	movs	r1, r3
 800953c:	0010      	movs	r0, r2
 800953e:	f7f6 fe69 	bl	8000214 <__aeabi_uidivmod>
 8009542:	1e0b      	subs	r3, r1, #0
 8009544:	d11f      	bne.n	8009586 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800954e:	429a      	cmp	r2, r3
 8009550:	d319      	bcc.n	8009586 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	23a6      	movs	r3, #166	@ 0xa6
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800955e:	429a      	cmp	r2, r3
 8009560:	d211      	bcs.n	8009586 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	2100      	movs	r1, #0
 8009568:	0018      	movs	r0, r3
 800956a:	f000 ffc4 	bl	800a4f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	23a6      	movs	r3, #166	@ 0xa6
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	2100      	movs	r1, #0
 8009576:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	2300      	movs	r3, #0
 800957c:	2200      	movs	r2, #0
 800957e:	2100      	movs	r1, #0
 8009580:	f001 fca1 	bl	800aec6 <USBD_LL_PrepareReceive>
 8009584:	e02f      	b.n	80095e6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	23ad      	movs	r3, #173	@ 0xad
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	58d3      	ldr	r3, [r2, r3]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00d      	beq.n	80095b0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	23a7      	movs	r3, #167	@ 0xa7
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800959c:	2b03      	cmp	r3, #3
 800959e:	d107      	bne.n	80095b0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	23ad      	movs	r3, #173	@ 0xad
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	58d3      	ldr	r3, [r2, r3]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	0010      	movs	r0, r2
 80095ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	0018      	movs	r0, r3
 80095b6:	f001 fb9e 	bl	800acf6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	0018      	movs	r0, r3
 80095be:	f000 fff8 	bl	800a5b2 <USBD_CtlReceiveStatus>
 80095c2:	e010      	b.n	80095e6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	23a5      	movs	r3, #165	@ 0xa5
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	58d3      	ldr	r3, [r2, r3]
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d005      	beq.n	80095dc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	23a5      	movs	r3, #165	@ 0xa5
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2180      	movs	r1, #128	@ 0x80
 80095e0:	0018      	movs	r0, r3
 80095e2:	f001 fb88 	bl	800acf6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	23a8      	movs	r3, #168	@ 0xa8
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	5cd3      	ldrb	r3, [r2, r3]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d124      	bne.n	800963c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7ff fe42 	bl	800927e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	23a8      	movs	r3, #168	@ 0xa8
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	2100      	movs	r1, #0
 8009602:	54d1      	strb	r1, [r2, r3]
 8009604:	e01a      	b.n	800963c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	23ad      	movs	r3, #173	@ 0xad
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	58d3      	ldr	r3, [r2, r3]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d011      	beq.n	8009638 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	23a7      	movs	r3, #167	@ 0xa7
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800961c:	2b03      	cmp	r3, #3
 800961e:	d10b      	bne.n	8009638 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	23ad      	movs	r3, #173	@ 0xad
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	58d3      	ldr	r3, [r2, r3]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	220b      	movs	r2, #11
 800962c:	18ba      	adds	r2, r7, r2
 800962e:	7811      	ldrb	r1, [r2, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	0010      	movs	r0, r2
 8009634:	4798      	blx	r3
 8009636:	e001      	b.n	800963c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009638:	2302      	movs	r3, #2
 800963a:	e000      	b.n	800963e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	0018      	movs	r0, r3
 8009640:	46bd      	mov	sp, r7
 8009642:	b006      	add	sp, #24
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	2340      	movs	r3, #64	@ 0x40
 8009652:	2200      	movs	r2, #0
 8009654:	2100      	movs	r1, #0
 8009656:	f001 faec 	bl	800ac32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	23ac      	movs	r3, #172	@ 0xac
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	2101      	movs	r1, #1
 8009662:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	23b2      	movs	r3, #178	@ 0xb2
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	2140      	movs	r1, #64	@ 0x40
 800966c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	2340      	movs	r3, #64	@ 0x40
 8009672:	2200      	movs	r2, #0
 8009674:	2180      	movs	r1, #128	@ 0x80
 8009676:	f001 fadc 	bl	800ac32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2240      	movs	r2, #64	@ 0x40
 8009684:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	23a7      	movs	r3, #167	@ 0xa7
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	2101      	movs	r1, #1
 800968e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	23a5      	movs	r3, #165	@ 0xa5
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	2100      	movs	r1, #0
 8009698:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	23a9      	movs	r3, #169	@ 0xa9
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	2100      	movs	r1, #0
 80096a8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	23ae      	movs	r3, #174	@ 0xae
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	58d3      	ldr	r3, [r2, r3]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	23ad      	movs	r3, #173	@ 0xad
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	58d3      	ldr	r3, [r2, r3]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	b2d9      	uxtb	r1, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	0018      	movs	r0, r3
 80096ca:	4790      	blx	r2
  }

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b002      	add	sp, #8
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	000a      	movs	r2, r1
 80096e0:	1cfb      	adds	r3, r7, #3
 80096e2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	1cfa      	adds	r2, r7, #3
 80096e8:	7812      	ldrb	r2, [r2, #0]
 80096ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	0018      	movs	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	b002      	add	sp, #8
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	23a7      	movs	r3, #167	@ 0xa7
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	5cd1      	ldrb	r1, [r2, r3]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a06      	ldr	r2, [pc, #24]	@ (8009724 <USBD_LL_Suspend+0x2c>)
 800970c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	23a7      	movs	r3, #167	@ 0xa7
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	2104      	movs	r1, #4
 8009716:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	0018      	movs	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	b002      	add	sp, #8
 8009720:	bd80      	pop	{r7, pc}
 8009722:	46c0      	nop			@ (mov r8, r8)
 8009724:	0000029d 	.word	0x0000029d

08009728 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	23a7      	movs	r3, #167	@ 0xa7
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	5cd3      	ldrb	r3, [r2, r3]
 8009738:	2b04      	cmp	r3, #4
 800973a:	d106      	bne.n	800974a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a05      	ldr	r2, [pc, #20]	@ (8009754 <USBD_LL_Resume+0x2c>)
 8009740:	5c99      	ldrb	r1, [r3, r2]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	23a7      	movs	r3, #167	@ 0xa7
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	0018      	movs	r0, r3
 800974e:	46bd      	mov	sp, r7
 8009750:	b002      	add	sp, #8
 8009752:	bd80      	pop	{r7, pc}
 8009754:	0000029d 	.word	0x0000029d

08009758 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	23a7      	movs	r3, #167	@ 0xa7
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	5cd3      	ldrb	r3, [r2, r3]
 8009768:	2b03      	cmp	r3, #3
 800976a:	d10e      	bne.n	800978a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	23ad      	movs	r3, #173	@ 0xad
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	58d3      	ldr	r3, [r2, r3]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d007      	beq.n	800978a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	23ad      	movs	r3, #173	@ 0xad
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	58d3      	ldr	r3, [r2, r3]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	0010      	movs	r0, r2
 8009788:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	0018      	movs	r0, r3
 800978e:	46bd      	mov	sp, r7
 8009790:	b002      	add	sp, #8
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979e:	230f      	movs	r3, #15
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	001a      	movs	r2, r3
 80097ac:	2360      	movs	r3, #96	@ 0x60
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b40      	cmp	r3, #64	@ 0x40
 80097b2:	d004      	beq.n	80097be <USBD_StdDevReq+0x2a>
 80097b4:	d84f      	bhi.n	8009856 <USBD_StdDevReq+0xc2>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <USBD_StdDevReq+0x3e>
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d14b      	bne.n	8009856 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	23ad      	movs	r3, #173	@ 0xad
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	58d3      	ldr	r3, [r2, r3]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	0010      	movs	r0, r2
 80097ce:	4798      	blx	r3
      break;
 80097d0:	e048      	b.n	8009864 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b09      	cmp	r3, #9
 80097d8:	d835      	bhi.n	8009846 <USBD_StdDevReq+0xb2>
 80097da:	009a      	lsls	r2, r3, #2
 80097dc:	4b25      	ldr	r3, [pc, #148]	@ (8009874 <USBD_StdDevReq+0xe0>)
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	0011      	movs	r1, r2
 80097ea:	0018      	movs	r0, r3
 80097ec:	f000 fa52 	bl	8009c94 <USBD_GetDescriptor>
          break;
 80097f0:	e030      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	0011      	movs	r1, r2
 80097f8:	0018      	movs	r0, r3
 80097fa:	f000 fbfd 	bl	8009ff8 <USBD_SetAddress>
          break;
 80097fe:	e029      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	0011      	movs	r1, r2
 8009806:	0018      	movs	r0, r3
 8009808:	f000 fc4a 	bl	800a0a0 <USBD_SetConfig>
          break;
 800980c:	e022      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	0011      	movs	r1, r2
 8009814:	0018      	movs	r0, r3
 8009816:	f000 fce7 	bl	800a1e8 <USBD_GetConfig>
          break;
 800981a:	e01b      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	0011      	movs	r1, r2
 8009822:	0018      	movs	r0, r3
 8009824:	f000 fd1b 	bl	800a25e <USBD_GetStatus>
          break;
 8009828:	e014      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	0011      	movs	r1, r2
 8009830:	0018      	movs	r0, r3
 8009832:	f000 fd4e 	bl	800a2d2 <USBD_SetFeature>
          break;
 8009836:	e00d      	b.n	8009854 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	0011      	movs	r1, r2
 800983e:	0018      	movs	r0, r3
 8009840:	f000 fd5d 	bl	800a2fe <USBD_ClrFeature>
          break;
 8009844:	e006      	b.n	8009854 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	0011      	movs	r1, r2
 800984c:	0018      	movs	r0, r3
 800984e:	f000 fdb4 	bl	800a3ba <USBD_CtlError>
          break;
 8009852:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009854:	e006      	b.n	8009864 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	0011      	movs	r1, r2
 800985c:	0018      	movs	r0, r3
 800985e:	f000 fdac 	bl	800a3ba <USBD_CtlError>
      break;
 8009862:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009864:	230f      	movs	r3, #15
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b004      	add	sp, #16
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	0800b194 	.word	0x0800b194

08009878 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009878:	b5b0      	push	{r4, r5, r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009882:	230f      	movs	r3, #15
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	001a      	movs	r2, r3
 8009890:	2360      	movs	r3, #96	@ 0x60
 8009892:	4013      	ands	r3, r2
 8009894:	2b40      	cmp	r3, #64	@ 0x40
 8009896:	d004      	beq.n	80098a2 <USBD_StdItfReq+0x2a>
 8009898:	d839      	bhi.n	800990e <USBD_StdItfReq+0x96>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <USBD_StdItfReq+0x2a>
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d135      	bne.n	800990e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	23a7      	movs	r3, #167	@ 0xa7
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	5cd3      	ldrb	r3, [r2, r3]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d825      	bhi.n	80098fc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	889b      	ldrh	r3, [r3, #4]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d819      	bhi.n	80098ee <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	23ad      	movs	r3, #173	@ 0xad
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	58d3      	ldr	r3, [r2, r3]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	250f      	movs	r5, #15
 80098c6:	197c      	adds	r4, r7, r5
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	0010      	movs	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	0003      	movs	r3, r0
 80098d2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	88db      	ldrh	r3, [r3, #6]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d116      	bne.n	800990a <USBD_StdItfReq+0x92>
 80098dc:	197b      	adds	r3, r7, r5
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d112      	bne.n	800990a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0018      	movs	r0, r3
 80098e8:	f000 fe4f 	bl	800a58a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098ec:	e00d      	b.n	800990a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	0011      	movs	r1, r2
 80098f4:	0018      	movs	r0, r3
 80098f6:	f000 fd60 	bl	800a3ba <USBD_CtlError>
          break;
 80098fa:	e006      	b.n	800990a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	0011      	movs	r1, r2
 8009902:	0018      	movs	r0, r3
 8009904:	f000 fd59 	bl	800a3ba <USBD_CtlError>
          break;
 8009908:	e000      	b.n	800990c <USBD_StdItfReq+0x94>
          break;
 800990a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800990c:	e006      	b.n	800991c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	0011      	movs	r1, r2
 8009914:	0018      	movs	r0, r3
 8009916:	f000 fd50 	bl	800a3ba <USBD_CtlError>
      break;
 800991a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	0018      	movs	r0, r3
 8009920:	46bd      	mov	sp, r7
 8009922:	b004      	add	sp, #16
 8009924:	bdb0      	pop	{r4, r5, r7, pc}

08009926 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009926:	b5b0      	push	{r4, r5, r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009930:	230f      	movs	r3, #15
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	889a      	ldrh	r2, [r3, #4]
 800993c:	230e      	movs	r3, #14
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	001a      	movs	r2, r3
 8009948:	2360      	movs	r3, #96	@ 0x60
 800994a:	4013      	ands	r3, r2
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	d006      	beq.n	800995e <USBD_StdEPReq+0x38>
 8009950:	d900      	bls.n	8009954 <USBD_StdEPReq+0x2e>
 8009952:	e190      	b.n	8009c76 <USBD_StdEPReq+0x350>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00c      	beq.n	8009972 <USBD_StdEPReq+0x4c>
 8009958:	2b20      	cmp	r3, #32
 800995a:	d000      	beq.n	800995e <USBD_StdEPReq+0x38>
 800995c:	e18b      	b.n	8009c76 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	23ad      	movs	r3, #173	@ 0xad
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	58d3      	ldr	r3, [r2, r3]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	0010      	movs	r0, r2
 800996e:	4798      	blx	r3
      break;
 8009970:	e188      	b.n	8009c84 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	001a      	movs	r2, r3
 8009978:	2360      	movs	r3, #96	@ 0x60
 800997a:	4013      	ands	r3, r2
 800997c:	2b20      	cmp	r3, #32
 800997e:	d10f      	bne.n	80099a0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	23ad      	movs	r3, #173	@ 0xad
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	58d3      	ldr	r3, [r2, r3]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	250f      	movs	r5, #15
 800998c:	197c      	adds	r4, r7, r5
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	0010      	movs	r0, r2
 8009994:	4798      	blx	r3
 8009996:	0003      	movs	r3, r0
 8009998:	7023      	strb	r3, [r4, #0]

        return ret;
 800999a:	197b      	adds	r3, r7, r5
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	e174      	b.n	8009c8a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	785b      	ldrb	r3, [r3, #1]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d007      	beq.n	80099b8 <USBD_StdEPReq+0x92>
 80099a8:	dd00      	ble.n	80099ac <USBD_StdEPReq+0x86>
 80099aa:	e15c      	b.n	8009c66 <USBD_StdEPReq+0x340>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d100      	bne.n	80099b2 <USBD_StdEPReq+0x8c>
 80099b0:	e092      	b.n	8009ad8 <USBD_StdEPReq+0x1b2>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d04b      	beq.n	8009a4e <USBD_StdEPReq+0x128>
 80099b6:	e156      	b.n	8009c66 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	23a7      	movs	r3, #167	@ 0xa7
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	5cd3      	ldrb	r3, [r2, r3]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d002      	beq.n	80099ca <USBD_StdEPReq+0xa4>
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d01d      	beq.n	8009a04 <USBD_StdEPReq+0xde>
 80099c8:	e039      	b.n	8009a3e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ca:	220e      	movs	r2, #14
 80099cc:	18bb      	adds	r3, r7, r2
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d010      	beq.n	80099f6 <USBD_StdEPReq+0xd0>
 80099d4:	18bb      	adds	r3, r7, r2
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b80      	cmp	r3, #128	@ 0x80
 80099da:	d00c      	beq.n	80099f6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099dc:	18bb      	adds	r3, r7, r2
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	0011      	movs	r1, r2
 80099e4:	0018      	movs	r0, r3
 80099e6:	f001 f986 	bl	800acf6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2180      	movs	r1, #128	@ 0x80
 80099ee:	0018      	movs	r0, r3
 80099f0:	f001 f981 	bl	800acf6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099f4:	e02a      	b.n	8009a4c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	0011      	movs	r1, r2
 80099fc:	0018      	movs	r0, r3
 80099fe:	f000 fcdc 	bl	800a3ba <USBD_CtlError>
              break;
 8009a02:	e023      	b.n	8009a4c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	885b      	ldrh	r3, [r3, #2]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d113      	bne.n	8009a34 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009a0c:	220e      	movs	r2, #14
 8009a0e:	18bb      	adds	r3, r7, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00e      	beq.n	8009a34 <USBD_StdEPReq+0x10e>
 8009a16:	18bb      	adds	r3, r7, r2
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b80      	cmp	r3, #128	@ 0x80
 8009a1c:	d00a      	beq.n	8009a34 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	88db      	ldrh	r3, [r3, #6]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009a26:	18bb      	adds	r3, r7, r2
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	0011      	movs	r1, r2
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f001 f961 	bl	800acf6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0018      	movs	r0, r3
 8009a38:	f000 fda7 	bl	800a58a <USBD_CtlSendStatus>

              break;
 8009a3c:	e006      	b.n	8009a4c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	0011      	movs	r1, r2
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 fcb8 	bl	800a3ba <USBD_CtlError>
              break;
 8009a4a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009a4c:	e112      	b.n	8009c74 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	23a7      	movs	r3, #167	@ 0xa7
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	5cd3      	ldrb	r3, [r2, r3]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d002      	beq.n	8009a60 <USBD_StdEPReq+0x13a>
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d01d      	beq.n	8009a9a <USBD_StdEPReq+0x174>
 8009a5e:	e032      	b.n	8009ac6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a60:	220e      	movs	r2, #14
 8009a62:	18bb      	adds	r3, r7, r2
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d010      	beq.n	8009a8c <USBD_StdEPReq+0x166>
 8009a6a:	18bb      	adds	r3, r7, r2
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b80      	cmp	r3, #128	@ 0x80
 8009a70:	d00c      	beq.n	8009a8c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a72:	18bb      	adds	r3, r7, r2
 8009a74:	781a      	ldrb	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	0011      	movs	r1, r2
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f001 f93b 	bl	800acf6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2180      	movs	r1, #128	@ 0x80
 8009a84:	0018      	movs	r0, r3
 8009a86:	f001 f936 	bl	800acf6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a8a:	e024      	b.n	8009ad6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0011      	movs	r1, r2
 8009a92:	0018      	movs	r0, r3
 8009a94:	f000 fc91 	bl	800a3ba <USBD_CtlError>
              break;
 8009a98:	e01d      	b.n	8009ad6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d118      	bne.n	8009ad4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009aa2:	210e      	movs	r1, #14
 8009aa4:	187b      	adds	r3, r7, r1
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	227f      	movs	r2, #127	@ 0x7f
 8009aaa:	4013      	ands	r3, r2
 8009aac:	d006      	beq.n	8009abc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aae:	187b      	adds	r3, r7, r1
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	0011      	movs	r1, r2
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f001 f948 	bl	800ad4c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f000 fd63 	bl	800a58a <USBD_CtlSendStatus>
              }
              break;
 8009ac4:	e006      	b.n	8009ad4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	0011      	movs	r1, r2
 8009acc:	0018      	movs	r0, r3
 8009ace:	f000 fc74 	bl	800a3ba <USBD_CtlError>
              break;
 8009ad2:	e000      	b.n	8009ad6 <USBD_StdEPReq+0x1b0>
              break;
 8009ad4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009ad6:	e0cd      	b.n	8009c74 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	23a7      	movs	r3, #167	@ 0xa7
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	5cd3      	ldrb	r3, [r2, r3]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d002      	beq.n	8009aea <USBD_StdEPReq+0x1c4>
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d03c      	beq.n	8009b62 <USBD_StdEPReq+0x23c>
 8009ae8:	e0b5      	b.n	8009c56 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aea:	220e      	movs	r2, #14
 8009aec:	18bb      	adds	r3, r7, r2
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <USBD_StdEPReq+0x1e4>
 8009af4:	18bb      	adds	r3, r7, r2
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b80      	cmp	r3, #128	@ 0x80
 8009afa:	d006      	beq.n	8009b0a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	0011      	movs	r1, r2
 8009b02:	0018      	movs	r0, r3
 8009b04:	f000 fc59 	bl	800a3ba <USBD_CtlError>
                break;
 8009b08:	e0ac      	b.n	8009c64 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b0a:	220e      	movs	r2, #14
 8009b0c:	18bb      	adds	r3, r7, r2
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da0c      	bge.n	8009b30 <USBD_StdEPReq+0x20a>
 8009b16:	18bb      	adds	r3, r7, r2
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	227f      	movs	r2, #127	@ 0x7f
 8009b1c:	401a      	ands	r2, r3
 8009b1e:	0013      	movs	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	189b      	adds	r3, r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	3310      	adds	r3, #16
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	18d3      	adds	r3, r2, r3
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	e00d      	b.n	8009b4c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b30:	230e      	movs	r3, #14
 8009b32:	18fb      	adds	r3, r7, r3
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	227f      	movs	r2, #127	@ 0x7f
 8009b38:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b3a:	0013      	movs	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	189b      	adds	r3, r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	3351      	adds	r3, #81	@ 0x51
 8009b44:	33ff      	adds	r3, #255	@ 0xff
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	18d3      	adds	r3, r2, r3
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	f000 fcab 	bl	800a4b6 <USBD_CtlSendData>
              break;
 8009b60:	e080      	b.n	8009c64 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b62:	220e      	movs	r2, #14
 8009b64:	18bb      	adds	r3, r7, r2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	b25b      	sxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	da14      	bge.n	8009b98 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b6e:	18bb      	adds	r3, r7, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	220f      	movs	r2, #15
 8009b74:	401a      	ands	r2, r3
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	0013      	movs	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	189b      	adds	r3, r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	18cb      	adds	r3, r1, r3
 8009b82:	3318      	adds	r3, #24
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d11e      	bne.n	8009bc8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	0011      	movs	r1, r2
 8009b90:	0018      	movs	r0, r3
 8009b92:	f000 fc12 	bl	800a3ba <USBD_CtlError>
                  break;
 8009b96:	e065      	b.n	8009c64 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b98:	230e      	movs	r3, #14
 8009b9a:	18fb      	adds	r3, r7, r3
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	220f      	movs	r2, #15
 8009ba0:	401a      	ands	r2, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	23ac      	movs	r3, #172	@ 0xac
 8009ba6:	0059      	lsls	r1, r3, #1
 8009ba8:	0013      	movs	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	189b      	adds	r3, r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	18c3      	adds	r3, r0, r3
 8009bb2:	185b      	adds	r3, r3, r1
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	0011      	movs	r1, r2
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f000 fbfa 	bl	800a3ba <USBD_CtlError>
                  break;
 8009bc6:	e04d      	b.n	8009c64 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc8:	220e      	movs	r2, #14
 8009bca:	18bb      	adds	r3, r7, r2
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b25b      	sxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da0c      	bge.n	8009bee <USBD_StdEPReq+0x2c8>
 8009bd4:	18bb      	adds	r3, r7, r2
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	227f      	movs	r2, #127	@ 0x7f
 8009bda:	401a      	ands	r2, r3
 8009bdc:	0013      	movs	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	189b      	adds	r3, r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	3310      	adds	r3, #16
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	18d3      	adds	r3, r2, r3
 8009bea:	3304      	adds	r3, #4
 8009bec:	e00d      	b.n	8009c0a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bee:	230e      	movs	r3, #14
 8009bf0:	18fb      	adds	r3, r7, r3
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	227f      	movs	r2, #127	@ 0x7f
 8009bf6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf8:	0013      	movs	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	189b      	adds	r3, r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	3351      	adds	r3, #81	@ 0x51
 8009c02:	33ff      	adds	r3, #255	@ 0xff
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	18d3      	adds	r3, r2, r3
 8009c08:	3304      	adds	r3, #4
 8009c0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c0c:	220e      	movs	r2, #14
 8009c0e:	18bb      	adds	r3, r7, r2
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <USBD_StdEPReq+0x2f8>
 8009c16:	18bb      	adds	r3, r7, r2
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b80      	cmp	r3, #128	@ 0x80
 8009c1c:	d103      	bne.n	8009c26 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	e010      	b.n	8009c48 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009c26:	230e      	movs	r3, #14
 8009c28:	18fb      	adds	r3, r7, r3
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	0011      	movs	r1, r2
 8009c30:	0018      	movs	r0, r3
 8009c32:	f001 f8b6 	bl	800ada2 <USBD_LL_IsStallEP>
 8009c36:	1e03      	subs	r3, r0, #0
 8009c38:	d003      	beq.n	8009c42 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e002      	b.n	8009c48 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f000 fc31 	bl	800a4b6 <USBD_CtlSendData>
              break;
 8009c54:	e006      	b.n	8009c64 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	0011      	movs	r1, r2
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f000 fbac 	bl	800a3ba <USBD_CtlError>
              break;
 8009c62:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009c64:	e006      	b.n	8009c74 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	0011      	movs	r1, r2
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f000 fba4 	bl	800a3ba <USBD_CtlError>
          break;
 8009c72:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009c74:	e006      	b.n	8009c84 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	0011      	movs	r1, r2
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f000 fb9c 	bl	800a3ba <USBD_CtlError>
      break;
 8009c82:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009c84:	230f      	movs	r3, #15
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	781b      	ldrb	r3, [r3, #0]
}
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	b004      	add	sp, #16
 8009c90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c9e:	2308      	movs	r3, #8
 8009ca0:	18fb      	adds	r3, r7, r3
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009caa:	230b      	movs	r3, #11
 8009cac:	18fb      	adds	r3, r7, r3
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	0a1b      	lsrs	r3, r3, #8
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b07      	cmp	r3, #7
 8009cbc:	d900      	bls.n	8009cc0 <USBD_GetDescriptor+0x2c>
 8009cbe:	e159      	b.n	8009f74 <USBD_GetDescriptor+0x2e0>
 8009cc0:	009a      	lsls	r2, r3, #2
 8009cc2:	4bcb      	ldr	r3, [pc, #812]	@ (8009ff0 <USBD_GetDescriptor+0x35c>)
 8009cc4:	18d3      	adds	r3, r2, r3
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	23ac      	movs	r3, #172	@ 0xac
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	58d3      	ldr	r3, [r2, r3]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7c12      	ldrb	r2, [r2, #16]
 8009cd8:	2108      	movs	r1, #8
 8009cda:	1879      	adds	r1, r7, r1
 8009cdc:	0010      	movs	r0, r2
 8009cde:	4798      	blx	r3
 8009ce0:	0003      	movs	r3, r0
 8009ce2:	60fb      	str	r3, [r7, #12]
      break;
 8009ce4:	e153      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7c1b      	ldrb	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10f      	bne.n	8009d0e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	23ad      	movs	r3, #173	@ 0xad
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	58d3      	ldr	r3, [r2, r3]
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf8:	2208      	movs	r2, #8
 8009cfa:	18ba      	adds	r2, r7, r2
 8009cfc:	0010      	movs	r0, r2
 8009cfe:	4798      	blx	r3
 8009d00:	0003      	movs	r3, r0
 8009d02:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3301      	adds	r3, #1
 8009d08:	2202      	movs	r2, #2
 8009d0a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d0c:	e13f      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	23ad      	movs	r3, #173	@ 0xad
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	58d3      	ldr	r3, [r2, r3]
 8009d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d18:	2208      	movs	r2, #8
 8009d1a:	18ba      	adds	r2, r7, r2
 8009d1c:	0010      	movs	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	0003      	movs	r3, r0
 8009d22:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3301      	adds	r3, #1
 8009d28:	2202      	movs	r2, #2
 8009d2a:	701a      	strb	r2, [r3, #0]
      break;
 8009d2c:	e12f      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	885b      	ldrh	r3, [r3, #2]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b05      	cmp	r3, #5
 8009d36:	d900      	bls.n	8009d3a <USBD_GetDescriptor+0xa6>
 8009d38:	e0d0      	b.n	8009edc <USBD_GetDescriptor+0x248>
 8009d3a:	009a      	lsls	r2, r3, #2
 8009d3c:	4bad      	ldr	r3, [pc, #692]	@ (8009ff4 <USBD_GetDescriptor+0x360>)
 8009d3e:	18d3      	adds	r3, r2, r3
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	23ac      	movs	r3, #172	@ 0xac
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	58d3      	ldr	r3, [r2, r3]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00d      	beq.n	8009d6e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	23ac      	movs	r3, #172	@ 0xac
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	58d3      	ldr	r3, [r2, r3]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	7c12      	ldrb	r2, [r2, #16]
 8009d60:	2108      	movs	r1, #8
 8009d62:	1879      	adds	r1, r7, r1
 8009d64:	0010      	movs	r0, r2
 8009d66:	4798      	blx	r3
 8009d68:	0003      	movs	r3, r0
 8009d6a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6c:	e0c3      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	0011      	movs	r1, r2
 8009d74:	0018      	movs	r0, r3
 8009d76:	f000 fb20 	bl	800a3ba <USBD_CtlError>
            err++;
 8009d7a:	210b      	movs	r1, #11
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	3201      	adds	r2, #1
 8009d84:	701a      	strb	r2, [r3, #0]
          break;
 8009d86:	e0b6      	b.n	8009ef6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	23ac      	movs	r3, #172	@ 0xac
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	58d3      	ldr	r3, [r2, r3]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00d      	beq.n	8009db2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	23ac      	movs	r3, #172	@ 0xac
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	58d3      	ldr	r3, [r2, r3]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	2108      	movs	r1, #8
 8009da6:	1879      	adds	r1, r7, r1
 8009da8:	0010      	movs	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	0003      	movs	r3, r0
 8009dae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009db0:	e0a1      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	0011      	movs	r1, r2
 8009db8:	0018      	movs	r0, r3
 8009dba:	f000 fafe 	bl	800a3ba <USBD_CtlError>
            err++;
 8009dbe:	210b      	movs	r1, #11
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	781a      	ldrb	r2, [r3, #0]
 8009dc4:	187b      	adds	r3, r7, r1
 8009dc6:	3201      	adds	r2, #1
 8009dc8:	701a      	strb	r2, [r3, #0]
          break;
 8009dca:	e094      	b.n	8009ef6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	23ac      	movs	r3, #172	@ 0xac
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	58d3      	ldr	r3, [r2, r3]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00d      	beq.n	8009df6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	23ac      	movs	r3, #172	@ 0xac
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	58d3      	ldr	r3, [r2, r3]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	7c12      	ldrb	r2, [r2, #16]
 8009de8:	2108      	movs	r1, #8
 8009dea:	1879      	adds	r1, r7, r1
 8009dec:	0010      	movs	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	0003      	movs	r3, r0
 8009df2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009df4:	e07f      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	0011      	movs	r1, r2
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	f000 fadc 	bl	800a3ba <USBD_CtlError>
            err++;
 8009e02:	210b      	movs	r1, #11
 8009e04:	187b      	adds	r3, r7, r1
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	187b      	adds	r3, r7, r1
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]
          break;
 8009e0e:	e072      	b.n	8009ef6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	23ac      	movs	r3, #172	@ 0xac
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	58d3      	ldr	r3, [r2, r3]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00d      	beq.n	8009e3a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	23ac      	movs	r3, #172	@ 0xac
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	58d3      	ldr	r3, [r2, r3]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	7c12      	ldrb	r2, [r2, #16]
 8009e2c:	2108      	movs	r1, #8
 8009e2e:	1879      	adds	r1, r7, r1
 8009e30:	0010      	movs	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	0003      	movs	r3, r0
 8009e36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e38:	e05d      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	0011      	movs	r1, r2
 8009e40:	0018      	movs	r0, r3
 8009e42:	f000 faba 	bl	800a3ba <USBD_CtlError>
            err++;
 8009e46:	210b      	movs	r1, #11
 8009e48:	187b      	adds	r3, r7, r1
 8009e4a:	781a      	ldrb	r2, [r3, #0]
 8009e4c:	187b      	adds	r3, r7, r1
 8009e4e:	3201      	adds	r2, #1
 8009e50:	701a      	strb	r2, [r3, #0]
          break;
 8009e52:	e050      	b.n	8009ef6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	23ac      	movs	r3, #172	@ 0xac
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	58d3      	ldr	r3, [r2, r3]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00d      	beq.n	8009e7e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	23ac      	movs	r3, #172	@ 0xac
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	58d3      	ldr	r3, [r2, r3]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	2108      	movs	r1, #8
 8009e72:	1879      	adds	r1, r7, r1
 8009e74:	0010      	movs	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	0003      	movs	r3, r0
 8009e7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7c:	e03b      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	0011      	movs	r1, r2
 8009e84:	0018      	movs	r0, r3
 8009e86:	f000 fa98 	bl	800a3ba <USBD_CtlError>
            err++;
 8009e8a:	210b      	movs	r1, #11
 8009e8c:	187b      	adds	r3, r7, r1
 8009e8e:	781a      	ldrb	r2, [r3, #0]
 8009e90:	187b      	adds	r3, r7, r1
 8009e92:	3201      	adds	r2, #1
 8009e94:	701a      	strb	r2, [r3, #0]
          break;
 8009e96:	e02e      	b.n	8009ef6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	23ac      	movs	r3, #172	@ 0xac
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	58d3      	ldr	r3, [r2, r3]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00d      	beq.n	8009ec2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	23ac      	movs	r3, #172	@ 0xac
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	58d3      	ldr	r3, [r2, r3]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7c12      	ldrb	r2, [r2, #16]
 8009eb4:	2108      	movs	r1, #8
 8009eb6:	1879      	adds	r1, r7, r1
 8009eb8:	0010      	movs	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec0:	e019      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0011      	movs	r1, r2
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f000 fa76 	bl	800a3ba <USBD_CtlError>
            err++;
 8009ece:	210b      	movs	r1, #11
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	781a      	ldrb	r2, [r3, #0]
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	3201      	adds	r2, #1
 8009ed8:	701a      	strb	r2, [r3, #0]
          break;
 8009eda:	e00c      	b.n	8009ef6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	0011      	movs	r1, r2
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	f000 fa69 	bl	800a3ba <USBD_CtlError>
          err++;
 8009ee8:	210b      	movs	r1, #11
 8009eea:	187b      	adds	r3, r7, r1
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	187b      	adds	r3, r7, r1
 8009ef0:	3201      	adds	r2, #1
 8009ef2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009ef4:	e04b      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>
 8009ef6:	e04a      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7c1b      	ldrb	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	23ad      	movs	r3, #173	@ 0xad
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	58d3      	ldr	r3, [r2, r3]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	2208      	movs	r2, #8
 8009f0c:	18ba      	adds	r2, r7, r2
 8009f0e:	0010      	movs	r0, r2
 8009f10:	4798      	blx	r3
 8009f12:	0003      	movs	r3, r0
 8009f14:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f16:	e03a      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	0011      	movs	r1, r2
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f000 fa4b 	bl	800a3ba <USBD_CtlError>
        err++;
 8009f24:	210b      	movs	r1, #11
 8009f26:	187b      	adds	r3, r7, r1
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	187b      	adds	r3, r7, r1
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	701a      	strb	r2, [r3, #0]
      break;
 8009f30:	e02d      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7c1b      	ldrb	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10f      	bne.n	8009f5a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	23ad      	movs	r3, #173	@ 0xad
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f44:	2208      	movs	r2, #8
 8009f46:	18ba      	adds	r2, r7, r2
 8009f48:	0010      	movs	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	2207      	movs	r2, #7
 8009f56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f58:	e019      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	0011      	movs	r1, r2
 8009f60:	0018      	movs	r0, r3
 8009f62:	f000 fa2a 	bl	800a3ba <USBD_CtlError>
        err++;
 8009f66:	210b      	movs	r1, #11
 8009f68:	187b      	adds	r3, r7, r1
 8009f6a:	781a      	ldrb	r2, [r3, #0]
 8009f6c:	187b      	adds	r3, r7, r1
 8009f6e:	3201      	adds	r2, #1
 8009f70:	701a      	strb	r2, [r3, #0]
      break;
 8009f72:	e00c      	b.n	8009f8e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	0011      	movs	r1, r2
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f000 fa1d 	bl	800a3ba <USBD_CtlError>
      err++;
 8009f80:	210b      	movs	r1, #11
 8009f82:	187b      	adds	r3, r7, r1
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	187b      	adds	r3, r7, r1
 8009f88:	3201      	adds	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]
      break;
 8009f8c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8009f8e:	230b      	movs	r3, #11
 8009f90:	18fb      	adds	r3, r7, r3
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d127      	bne.n	8009fe8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009f98:	2108      	movs	r1, #8
 8009f9a:	187b      	adds	r3, r7, r1
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d019      	beq.n	8009fd6 <USBD_GetDescriptor+0x342>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	88db      	ldrh	r3, [r3, #6]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d015      	beq.n	8009fd6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	88da      	ldrh	r2, [r3, #6]
 8009fae:	187b      	adds	r3, r7, r1
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	1c18      	adds	r0, r3, #0
 8009fb4:	1c11      	adds	r1, r2, #0
 8009fb6:	b28a      	uxth	r2, r1
 8009fb8:	b283      	uxth	r3, r0
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d900      	bls.n	8009fc0 <USBD_GetDescriptor+0x32c>
 8009fbe:	1c01      	adds	r1, r0, #0
 8009fc0:	b28a      	uxth	r2, r1
 8009fc2:	2108      	movs	r1, #8
 8009fc4:	187b      	adds	r3, r7, r1
 8009fc6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fc8:	187b      	adds	r3, r7, r1
 8009fca:	881a      	ldrh	r2, [r3, #0]
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f000 fa70 	bl	800a4b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d105      	bne.n	8009fea <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f000 fad2 	bl	800a58a <USBD_CtlSendStatus>
 8009fe6:	e000      	b.n	8009fea <USBD_GetDescriptor+0x356>
    return;
 8009fe8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8009fea:	46bd      	mov	sp, r7
 8009fec:	b004      	add	sp, #16
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	0800b1bc 	.word	0x0800b1bc
 8009ff4:	0800b1dc 	.word	0x0800b1dc

08009ff8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	889b      	ldrh	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d13d      	bne.n	800a086 <USBD_SetAddress+0x8e>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d139      	bne.n	800a086 <USBD_SetAddress+0x8e>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	2b7f      	cmp	r3, #127	@ 0x7f
 800a018:	d835      	bhi.n	800a086 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	230f      	movs	r3, #15
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	217f      	movs	r1, #127	@ 0x7f
 800a026:	400a      	ands	r2, r1
 800a028:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	23a7      	movs	r3, #167	@ 0xa7
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	5cd3      	ldrb	r3, [r2, r3]
 800a032:	2b03      	cmp	r3, #3
 800a034:	d106      	bne.n	800a044 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	0011      	movs	r1, r2
 800a03c:	0018      	movs	r0, r3
 800a03e:	f000 f9bc 	bl	800a3ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a042:	e027      	b.n	800a094 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	240f      	movs	r4, #15
 800a048:	193a      	adds	r2, r7, r4
 800a04a:	4914      	ldr	r1, [pc, #80]	@ (800a09c <USBD_SetAddress+0xa4>)
 800a04c:	7812      	ldrb	r2, [r2, #0]
 800a04e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a050:	193b      	adds	r3, r7, r4
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	0011      	movs	r1, r2
 800a058:	0018      	movs	r0, r3
 800a05a:	f000 fed2 	bl	800ae02 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0018      	movs	r0, r3
 800a062:	f000 fa92 	bl	800a58a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a066:	193b      	adds	r3, r7, r4
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	23a7      	movs	r3, #167	@ 0xa7
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	2102      	movs	r1, #2
 800a076:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a078:	e00c      	b.n	800a094 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	23a7      	movs	r3, #167	@ 0xa7
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	2101      	movs	r1, #1
 800a082:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a084:	e006      	b.n	800a094 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	0011      	movs	r1, r2
 800a08c:	0018      	movs	r0, r3
 800a08e:	f000 f994 	bl	800a3ba <USBD_CtlError>
  }
}
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	46c0      	nop			@ (mov r8, r8)
 800a096:	46bd      	mov	sp, r7
 800a098:	b005      	add	sp, #20
 800a09a:	bd90      	pop	{r4, r7, pc}
 800a09c:	0000029e 	.word	0x0000029e

0800a0a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	4b4c      	ldr	r3, [pc, #304]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a0b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d906      	bls.n	800a0ca <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	0011      	movs	r1, r2
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f000 f979 	bl	800a3ba <USBD_CtlError>
 800a0c8:	e088      	b.n	800a1dc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	23a7      	movs	r3, #167	@ 0xa7
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	5cd3      	ldrb	r3, [r2, r3]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d002      	beq.n	800a0dc <USBD_SetConfig+0x3c>
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d029      	beq.n	800a12e <USBD_SetConfig+0x8e>
 800a0da:	e071      	b.n	800a1c0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0dc:	4b41      	ldr	r3, [pc, #260]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01f      	beq.n	800a124 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a0e4:	4b3f      	ldr	r3, [pc, #252]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	001a      	movs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	23a7      	movs	r3, #167	@ 0xa7
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	2103      	movs	r1, #3
 800a0f6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0f8:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	0011      	movs	r1, r2
 800a100:	0018      	movs	r0, r3
 800a102:	f7ff f8c5 	bl	8009290 <USBD_SetClassConfig>
 800a106:	0003      	movs	r3, r0
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d106      	bne.n	800a11a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0011      	movs	r1, r2
 800a112:	0018      	movs	r0, r3
 800a114:	f000 f951 	bl	800a3ba <USBD_CtlError>
            return;
 800a118:	e060      	b.n	800a1dc <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	0018      	movs	r0, r3
 800a11e:	f000 fa34 	bl	800a58a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a122:	e05b      	b.n	800a1dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	0018      	movs	r0, r3
 800a128:	f000 fa2f 	bl	800a58a <USBD_CtlSendStatus>
        break;
 800a12c:	e056      	b.n	800a1dc <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a12e:	4b2d      	ldr	r3, [pc, #180]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d115      	bne.n	800a162 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	23a7      	movs	r3, #167	@ 0xa7
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	2102      	movs	r1, #2
 800a13e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a140:	4b28      	ldr	r3, [pc, #160]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	001a      	movs	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a14a:	4b26      	ldr	r3, [pc, #152]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0011      	movs	r1, r2
 800a152:	0018      	movs	r0, r3
 800a154:	f7ff f8c3 	bl	80092de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	0018      	movs	r0, r3
 800a15c:	f000 fa15 	bl	800a58a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a160:	e03c      	b.n	800a1dc <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a162:	4b20      	ldr	r3, [pc, #128]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	001a      	movs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d022      	beq.n	800a1b6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	b2da      	uxtb	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	0011      	movs	r1, r2
 800a17a:	0018      	movs	r0, r3
 800a17c:	f7ff f8af 	bl	80092de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a180:	4b18      	ldr	r3, [pc, #96]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	001a      	movs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a18a:	4b16      	ldr	r3, [pc, #88]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	0011      	movs	r1, r2
 800a192:	0018      	movs	r0, r3
 800a194:	f7ff f87c 	bl	8009290 <USBD_SetClassConfig>
 800a198:	0003      	movs	r3, r0
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d106      	bne.n	800a1ac <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	0011      	movs	r1, r2
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f000 f908 	bl	800a3ba <USBD_CtlError>
            return;
 800a1aa:	e017      	b.n	800a1dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 f9eb 	bl	800a58a <USBD_CtlSendStatus>
        break;
 800a1b4:	e012      	b.n	800a1dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f000 f9e6 	bl	800a58a <USBD_CtlSendStatus>
        break;
 800a1be:	e00d      	b.n	800a1dc <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	0011      	movs	r1, r2
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f000 f8f7 	bl	800a3ba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1cc:	4b05      	ldr	r3, [pc, #20]	@ (800a1e4 <USBD_SetConfig+0x144>)
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	0011      	movs	r1, r2
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7ff f882 	bl	80092de <USBD_ClrClassConfig>
        break;
 800a1da:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b002      	add	sp, #8
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	20000948 	.word	0x20000948

0800a1e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	88db      	ldrh	r3, [r3, #6]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d006      	beq.n	800a208 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	0011      	movs	r1, r2
 800a200:	0018      	movs	r0, r3
 800a202:	f000 f8da 	bl	800a3ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a206:	e026      	b.n	800a256 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	23a7      	movs	r3, #167	@ 0xa7
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	5cd3      	ldrb	r3, [r2, r3]
 800a210:	2b02      	cmp	r3, #2
 800a212:	dc02      	bgt.n	800a21a <USBD_GetConfig+0x32>
 800a214:	2b00      	cmp	r3, #0
 800a216:	dc03      	bgt.n	800a220 <USBD_GetConfig+0x38>
 800a218:	e016      	b.n	800a248 <USBD_GetConfig+0x60>
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d00c      	beq.n	800a238 <USBD_GetConfig+0x50>
 800a21e:	e013      	b.n	800a248 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3308      	adds	r3, #8
 800a22a:	0019      	movs	r1, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	0018      	movs	r0, r3
 800a232:	f000 f940 	bl	800a4b6 <USBD_CtlSendData>
        break;
 800a236:	e00e      	b.n	800a256 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1d19      	adds	r1, r3, #4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	0018      	movs	r0, r3
 800a242:	f000 f938 	bl	800a4b6 <USBD_CtlSendData>
        break;
 800a246:	e006      	b.n	800a256 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	0011      	movs	r1, r2
 800a24e:	0018      	movs	r0, r3
 800a250:	f000 f8b3 	bl	800a3ba <USBD_CtlError>
        break;
 800a254:	46c0      	nop			@ (mov r8, r8)
}
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	46bd      	mov	sp, r7
 800a25a:	b002      	add	sp, #8
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	23a7      	movs	r3, #167	@ 0xa7
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	5cd3      	ldrb	r3, [r2, r3]
 800a270:	3b01      	subs	r3, #1
 800a272:	2b02      	cmp	r3, #2
 800a274:	d822      	bhi.n	800a2bc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d006      	beq.n	800a28c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	0011      	movs	r1, r2
 800a284:	0018      	movs	r0, r3
 800a286:	f000 f898 	bl	800a3ba <USBD_CtlError>
        break;
 800a28a:	e01e      	b.n	800a2ca <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	23a9      	movs	r3, #169	@ 0xa9
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	58d3      	ldr	r3, [r2, r3]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	330c      	adds	r3, #12
 800a2ae:	0019      	movs	r1, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 f8fe 	bl	800a4b6 <USBD_CtlSendData>
      break;
 800a2ba:	e006      	b.n	800a2ca <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	0011      	movs	r1, r2
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f000 f879 	bl	800a3ba <USBD_CtlError>
      break;
 800a2c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	b002      	add	sp, #8
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	885b      	ldrh	r3, [r3, #2]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d108      	bne.n	800a2f6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	23a9      	movs	r3, #169	@ 0xa9
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 f94a 	bl	800a58a <USBD_CtlSendStatus>
  }
}
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	23a7      	movs	r3, #167	@ 0xa7
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	5cd3      	ldrb	r3, [r2, r3]
 800a310:	3b01      	subs	r3, #1
 800a312:	2b02      	cmp	r3, #2
 800a314:	d80d      	bhi.n	800a332 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d110      	bne.n	800a340 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	23a9      	movs	r3, #169	@ 0xa9
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	2100      	movs	r1, #0
 800a326:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	0018      	movs	r0, r3
 800a32c:	f000 f92d 	bl	800a58a <USBD_CtlSendStatus>
      }
      break;
 800a330:	e006      	b.n	800a340 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	0011      	movs	r1, r2
 800a338:	0018      	movs	r0, r3
 800a33a:	f000 f83e 	bl	800a3ba <USBD_CtlError>
      break;
 800a33e:	e000      	b.n	800a342 <USBD_ClrFeature+0x44>
      break;
 800a340:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a342:	46c0      	nop			@ (mov r8, r8)
 800a344:	46bd      	mov	sp, r7
 800a346:	b002      	add	sp, #8
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781a      	ldrb	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	785a      	ldrb	r2, [r3, #1]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	3302      	adds	r3, #2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	001a      	movs	r2, r3
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	3303      	adds	r3, #3
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	b29b      	uxth	r3, r3
 800a376:	18d3      	adds	r3, r2, r3
 800a378:	b29a      	uxth	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	3304      	adds	r3, #4
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	001a      	movs	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	3305      	adds	r3, #5
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	b29b      	uxth	r3, r3
 800a390:	18d3      	adds	r3, r2, r3
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	3306      	adds	r3, #6
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	001a      	movs	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3307      	adds	r3, #7
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	18d3      	adds	r3, r2, r3
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	80da      	strh	r2, [r3, #6]

}
 800a3b2:	46c0      	nop			@ (mov r8, r8)
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b002      	add	sp, #8
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2180      	movs	r1, #128	@ 0x80
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 fc94 	bl	800acf6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 fc8f 	bl	800acf6 <USBD_LL_StallEP>
}
 800a3d8:	46c0      	nop			@ (mov r8, r8)
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	b002      	add	sp, #8
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3ec:	2417      	movs	r4, #23
 800a3ee:	193b      	adds	r3, r7, r4
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d03c      	beq.n	800a474 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f000 f83d 	bl	800a47c <USBD_GetLen>
 800a402:	0003      	movs	r3, r0
 800a404:	3301      	adds	r3, #1
 800a406:	b29b      	uxth	r3, r3
 800a408:	18db      	adds	r3, r3, r3
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a410:	193b      	adds	r3, r7, r4
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	193a      	adds	r2, r7, r4
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	7011      	strb	r1, [r2, #0]
 800a41a:	001a      	movs	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	189b      	adds	r3, r3, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a426:	193b      	adds	r3, r7, r4
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	193a      	adds	r2, r7, r4
 800a42c:	1c59      	adds	r1, r3, #1
 800a42e:	7011      	strb	r1, [r2, #0]
 800a430:	001a      	movs	r2, r3
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	189b      	adds	r3, r3, r2
 800a436:	2203      	movs	r2, #3
 800a438:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a43a:	e017      	b.n	800a46c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	60fa      	str	r2, [r7, #12]
 800a442:	2417      	movs	r4, #23
 800a444:	193a      	adds	r2, r7, r4
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	1939      	adds	r1, r7, r4
 800a44a:	1c50      	adds	r0, r2, #1
 800a44c:	7008      	strb	r0, [r1, #0]
 800a44e:	0011      	movs	r1, r2
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	1852      	adds	r2, r2, r1
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a458:	193b      	adds	r3, r7, r4
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	193a      	adds	r2, r7, r4
 800a45e:	1c59      	adds	r1, r3, #1
 800a460:	7011      	strb	r1, [r2, #0]
 800a462:	001a      	movs	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	189b      	adds	r3, r3, r2
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e3      	bne.n	800a43c <USBD_GetString+0x5c>
    }
  }
}
 800a474:	46c0      	nop			@ (mov r8, r8)
 800a476:	46bd      	mov	sp, r7
 800a478:	b007      	add	sp, #28
 800a47a:	bd90      	pop	{r4, r7, pc}

0800a47c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a484:	230f      	movs	r3, #15
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a48c:	e008      	b.n	800a4a0 <USBD_GetLen+0x24>
  {
    len++;
 800a48e:	210f      	movs	r1, #15
 800a490:	187b      	adds	r3, r7, r1
 800a492:	781a      	ldrb	r2, [r3, #0]
 800a494:	187b      	adds	r3, r7, r1
 800a496:	3201      	adds	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
    buf++;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3301      	adds	r3, #1
 800a49e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1f2      	bne.n	800a48e <USBD_GetLen+0x12>
  }

  return len;
 800a4a8:	230f      	movs	r3, #15
 800a4aa:	18fb      	adds	r3, r7, r3
 800a4ac:	781b      	ldrb	r3, [r3, #0]
}
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b004      	add	sp, #16
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	1dbb      	adds	r3, r7, #6
 800a4c2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	23a5      	movs	r3, #165	@ 0xa5
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	2102      	movs	r1, #2
 800a4cc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a4ce:	1dbb      	adds	r3, r7, #6
 800a4d0:	881a      	ldrh	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4d6:	1dbb      	adds	r3, r7, #6
 800a4d8:	881a      	ldrh	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4de:	1dbb      	adds	r3, r7, #6
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	f000 fcb6 	bl	800ae58 <USBD_LL_Transmit>

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b004      	add	sp, #16
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	1dbb      	adds	r3, r7, #6
 800a502:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a504:	1dbb      	adds	r3, r7, #6
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	2100      	movs	r1, #0
 800a50e:	f000 fca3 	bl	800ae58 <USBD_LL_Transmit>

  return USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	0018      	movs	r0, r3
 800a516:	46bd      	mov	sp, r7
 800a518:	b004      	add	sp, #16
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	1dbb      	adds	r3, r7, #6
 800a528:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	23a5      	movs	r3, #165	@ 0xa5
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	2103      	movs	r1, #3
 800a532:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a534:	1dbb      	adds	r3, r7, #6
 800a536:	8819      	ldrh	r1, [r3, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	23ae      	movs	r3, #174	@ 0xae
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a540:	1dbb      	adds	r3, r7, #6
 800a542:	8819      	ldrh	r1, [r3, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	23b0      	movs	r3, #176	@ 0xb0
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54c:	1dbb      	adds	r3, r7, #6
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	2100      	movs	r1, #0
 800a556:	f000 fcb6 	bl	800aec6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	0018      	movs	r0, r3
 800a55e:	46bd      	mov	sp, r7
 800a560:	b004      	add	sp, #16
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	1dbb      	adds	r3, r7, #6
 800a570:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a572:	1dbb      	adds	r3, r7, #6
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	2100      	movs	r1, #0
 800a57c:	f000 fca3 	bl	800aec6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	0018      	movs	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	b004      	add	sp, #16
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	23a5      	movs	r3, #165	@ 0xa5
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	2104      	movs	r1, #4
 800a59a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	f000 fc58 	bl	800ae58 <USBD_LL_Transmit>

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b002      	add	sp, #8
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	23a5      	movs	r3, #165	@ 0xa5
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	2105      	movs	r1, #5
 800a5c2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	f000 fc7b 	bl	800aec6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5e0:	4914      	ldr	r1, [pc, #80]	@ (800a634 <MX_USB_DEVICE_Init+0x58>)
 800a5e2:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <MX_USB_DEVICE_Init+0x5c>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f7fe fdeb 	bl	80091c2 <USBD_Init>
 800a5ec:	1e03      	subs	r3, r0, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5f0:	f7f7 f904 	bl	80017fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a5f4:	4a11      	ldr	r2, [pc, #68]	@ (800a63c <MX_USB_DEVICE_Init+0x60>)
 800a5f6:	4b10      	ldr	r3, [pc, #64]	@ (800a638 <MX_USB_DEVICE_Init+0x5c>)
 800a5f8:	0011      	movs	r1, r2
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f7fe fe12 	bl	8009224 <USBD_RegisterClass>
 800a600:	1e03      	subs	r3, r0, #0
 800a602:	d001      	beq.n	800a608 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a604:	f7f7 f8fa 	bl	80017fc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a608:	4a0d      	ldr	r2, [pc, #52]	@ (800a640 <MX_USB_DEVICE_Init+0x64>)
 800a60a:	4b0b      	ldr	r3, [pc, #44]	@ (800a638 <MX_USB_DEVICE_Init+0x5c>)
 800a60c:	0011      	movs	r1, r2
 800a60e:	0018      	movs	r0, r3
 800a610:	f7fe fdbc 	bl	800918c <USBD_CUSTOM_HID_RegisterInterface>
 800a614:	1e03      	subs	r3, r0, #0
 800a616:	d001      	beq.n	800a61c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a618:	f7f7 f8f0 	bl	80017fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a61c:	4b06      	ldr	r3, [pc, #24]	@ (800a638 <MX_USB_DEVICE_Init+0x5c>)
 800a61e:	0018      	movs	r0, r3
 800a620:	f7fe fe20 	bl	8009264 <USBD_Start>
 800a624:	1e03      	subs	r3, r0, #0
 800a626:	d001      	beq.n	800a62c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a628:	f7f7 f8e8 	bl	80017fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a62c:	46c0      	nop			@ (mov r8, r8)
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	2000054c 	.word	0x2000054c
 800a638:	2000094c 	.word	0x2000094c
 800a63c:	200003a8 	.word	0x200003a8
 800a640:	2000053c 	.word	0x2000053c

0800a644 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a648:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a64a:	0018      	movs	r0, r3
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a654:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a656:	0018      	movs	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	0002      	movs	r2, r0
 800a664:	1dfb      	adds	r3, r7, #7
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	1dbb      	adds	r3, r7, #6
 800a66a:	1c0a      	adds	r2, r1, #0
 800a66c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a66e:	4a20      	ldr	r2, [pc, #128]	@ (800a6f0 <CUSTOM_HID_OutEvent_FS+0x94>)
 800a670:	23ae      	movs	r3, #174	@ 0xae
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	58d3      	ldr	r3, [r2, r3]
 800a676:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL) return USBD_FAIL;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <CUSTOM_HID_OutEvent_FS+0x26>
 800a67e:	2302      	movs	r3, #2
 800a680:	e031      	b.n	800a6e6 <CUSTOM_HID_OutEvent_FS+0x8a>

	memcpy(rxBuffer, hhid->Report_buf, REPORT_SIZE);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a686:	0010      	movs	r0, r2
 800a688:	0019      	movs	r1, r3
 800a68a:	2340      	movs	r3, #64	@ 0x40
 800a68c:	001a      	movs	r2, r3
 800a68e:	f000 fccf 	bl	800b030 <memcpy>

	switch(rxBuffer[0])
 800a692:	4b18      	ldr	r3, [pc, #96]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b06      	cmp	r3, #6
 800a698:	d01d      	beq.n	800a6d6 <CUSTOM_HID_OutEvent_FS+0x7a>
 800a69a:	dc23      	bgt.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>
 800a69c:	2b05      	cmp	r3, #5
 800a69e:	d013      	beq.n	800a6c8 <CUSTOM_HID_OutEvent_FS+0x6c>
 800a6a0:	dc20      	bgt.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d002      	beq.n	800a6ac <CUSTOM_HID_OutEvent_FS+0x50>
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d007      	beq.n	800a6ba <CUSTOM_HID_OutEvent_FS+0x5e>
 800a6aa:	e01b      	b.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>
	{
	case ID_CONFIG_2_FN:
		Write_KeyConfig_To_Flash(CONFIG_2_FN_FLASH_ADDRESS, rxBuffer);
 800a6ac:	4b11      	ldr	r3, [pc, #68]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6ae:	4a12      	ldr	r2, [pc, #72]	@ (800a6f8 <CUSTOM_HID_OutEvent_FS+0x9c>)
 800a6b0:	0019      	movs	r1, r3
 800a6b2:	0010      	movs	r0, r2
 800a6b4:	f7f6 fa4e 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6b8:	e014      	b.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_2_ALT:
		Write_KeyConfig_To_Flash(CONFIG_2_ALT_FLASH_ADDRESS, rxBuffer);
 800a6ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a6fc <CUSTOM_HID_OutEvent_FS+0xa0>)
 800a6be:	0019      	movs	r1, r3
 800a6c0:	0010      	movs	r0, r2
 800a6c2:	f7f6 fa47 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6c6:	e00d      	b.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_3_FN:
		Write_KeyConfig_To_Flash(CONFIG_3_FN_FLASH_ADDRESS, rxBuffer);
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a700 <CUSTOM_HID_OutEvent_FS+0xa4>)
 800a6cc:	0019      	movs	r1, r3
 800a6ce:	0010      	movs	r0, r2
 800a6d0:	f7f6 fa40 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6d4:	e006      	b.n	800a6e4 <CUSTOM_HID_OutEvent_FS+0x88>

	case ID_CONFIG_3_ALT:
		Write_KeyConfig_To_Flash(CONFIG_3_ALT_FLASH_ADDRESS, rxBuffer);
 800a6d6:	4b07      	ldr	r3, [pc, #28]	@ (800a6f4 <CUSTOM_HID_OutEvent_FS+0x98>)
 800a6d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a704 <CUSTOM_HID_OutEvent_FS+0xa8>)
 800a6da:	0019      	movs	r1, r3
 800a6dc:	0010      	movs	r0, r2
 800a6de:	f7f6 fa39 	bl	8000b54 <Write_KeyConfig_To_Flash>
		break;
 800a6e2:	46c0      	nop			@ (mov r8, r8)
	}


  return (USBD_OK);
 800a6e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	b004      	add	sp, #16
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	46c0      	nop			@ (mov r8, r8)
 800a6f0:	2000094c 	.word	0x2000094c
 800a6f4:	20000c10 	.word	0x20000c10
 800a6f8:	0801e000 	.word	0x0801e000
 800a6fc:	0801e800 	.word	0x0801e800
 800a700:	0801f000 	.word	0x0801f000
 800a704:	0801f800 	.word	0x0801f800

0800a708 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	0002      	movs	r2, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	1dfb      	adds	r3, r7, #7
 800a714:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2212      	movs	r2, #18
 800a71a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a71c:	4b02      	ldr	r3, [pc, #8]	@ (800a728 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a71e:	0018      	movs	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	b002      	add	sp, #8
 800a724:	bd80      	pop	{r7, pc}
 800a726:	46c0      	nop			@ (mov r8, r8)
 800a728:	20000568 	.word	0x20000568

0800a72c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	0002      	movs	r2, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	1dfb      	adds	r3, r7, #7
 800a738:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2204      	movs	r2, #4
 800a73e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a740:	4b02      	ldr	r3, [pc, #8]	@ (800a74c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a742:	0018      	movs	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	b002      	add	sp, #8
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	46c0      	nop			@ (mov r8, r8)
 800a74c:	2000057c 	.word	0x2000057c

0800a750 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	0002      	movs	r2, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	1dfb      	adds	r3, r7, #7
 800a75c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a75e:	1dfb      	adds	r3, r7, #7
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	4908      	ldr	r1, [pc, #32]	@ (800a78c <USBD_FS_ProductStrDescriptor+0x3c>)
 800a76a:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <USBD_FS_ProductStrDescriptor+0x40>)
 800a76c:	0018      	movs	r0, r3
 800a76e:	f7ff fe37 	bl	800a3e0 <USBD_GetString>
 800a772:	e005      	b.n	800a780 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	4905      	ldr	r1, [pc, #20]	@ (800a78c <USBD_FS_ProductStrDescriptor+0x3c>)
 800a778:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <USBD_FS_ProductStrDescriptor+0x40>)
 800a77a:	0018      	movs	r0, r3
 800a77c:	f7ff fe30 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a780:	4b02      	ldr	r3, [pc, #8]	@ (800a78c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a782:	0018      	movs	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	b002      	add	sp, #8
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	20000c50 	.word	0x20000c50
 800a790:	0800b05c 	.word	0x0800b05c

0800a794 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	0002      	movs	r2, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	1dfb      	adds	r3, r7, #7
 800a7a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	4904      	ldr	r1, [pc, #16]	@ (800a7b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7a6:	4b05      	ldr	r3, [pc, #20]	@ (800a7bc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f7ff fe19 	bl	800a3e0 <USBD_GetString>
  return USBD_StrDesc;
 800a7ae:	4b02      	ldr	r3, [pc, #8]	@ (800a7b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	b002      	add	sp, #8
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000c50 	.word	0x20000c50
 800a7bc:	0800b06c 	.word	0x0800b06c

0800a7c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	0002      	movs	r2, r0
 800a7c8:	6039      	str	r1, [r7, #0]
 800a7ca:	1dfb      	adds	r3, r7, #7
 800a7cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	221a      	movs	r2, #26
 800a7d2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7d4:	f000 f84c 	bl	800a870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7d8:	4b02      	ldr	r3, [pc, #8]	@ (800a7e4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b002      	add	sp, #8
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	20000580 	.word	0x20000580

0800a7e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	0002      	movs	r2, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	1dfb      	adds	r3, r7, #7
 800a7f4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a7f6:	1dfb      	adds	r3, r7, #7
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4908      	ldr	r1, [pc, #32]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a802:	4b09      	ldr	r3, [pc, #36]	@ (800a828 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a804:	0018      	movs	r0, r3
 800a806:	f7ff fdeb 	bl	800a3e0 <USBD_GetString>
 800a80a:	e005      	b.n	800a818 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	4905      	ldr	r1, [pc, #20]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a810:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a812:	0018      	movs	r0, r3
 800a814:	f7ff fde4 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a818:	4b02      	ldr	r3, [pc, #8]	@ (800a824 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a81a:	0018      	movs	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b002      	add	sp, #8
 800a820:	bd80      	pop	{r7, pc}
 800a822:	46c0      	nop			@ (mov r8, r8)
 800a824:	20000c50 	.word	0x20000c50
 800a828:	0800b078 	.word	0x0800b078

0800a82c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	0002      	movs	r2, r0
 800a834:	6039      	str	r1, [r7, #0]
 800a836:	1dfb      	adds	r3, r7, #7
 800a838:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a83a:	1dfb      	adds	r3, r7, #7
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4908      	ldr	r1, [pc, #32]	@ (800a868 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a846:	4b09      	ldr	r3, [pc, #36]	@ (800a86c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a848:	0018      	movs	r0, r3
 800a84a:	f7ff fdc9 	bl	800a3e0 <USBD_GetString>
 800a84e:	e005      	b.n	800a85c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	4905      	ldr	r1, [pc, #20]	@ (800a868 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a854:	4b05      	ldr	r3, [pc, #20]	@ (800a86c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a856:	0018      	movs	r0, r3
 800a858:	f7ff fdc2 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a85c:	4b02      	ldr	r3, [pc, #8]	@ (800a868 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	b002      	add	sp, #8
 800a864:	bd80      	pop	{r7, pc}
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	20000c50 	.word	0x20000c50
 800a86c:	0800b08c 	.word	0x0800b08c

0800a870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a876:	4b10      	ldr	r3, [pc, #64]	@ (800a8b8 <Get_SerialNum+0x48>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a87c:	4b0f      	ldr	r3, [pc, #60]	@ (800a8bc <Get_SerialNum+0x4c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a882:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c0 <Get_SerialNum+0x50>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	18d3      	adds	r3, r2, r3
 800a88e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a896:	490b      	ldr	r1, [pc, #44]	@ (800a8c4 <Get_SerialNum+0x54>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2208      	movs	r2, #8
 800a89c:	0018      	movs	r0, r3
 800a89e:	f000 f815 	bl	800a8cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8a2:	4909      	ldr	r1, [pc, #36]	@ (800a8c8 <Get_SerialNum+0x58>)
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f000 f80f 	bl	800a8cc <IntToUnicode>
  }
}
 800a8ae:	46c0      	nop			@ (mov r8, r8)
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b004      	add	sp, #16
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	46c0      	nop			@ (mov r8, r8)
 800a8b8:	1ffff7ac 	.word	0x1ffff7ac
 800a8bc:	1ffff7b0 	.word	0x1ffff7b0
 800a8c0:	1ffff7b4 	.word	0x1ffff7b4
 800a8c4:	20000582 	.word	0x20000582
 800a8c8:	20000592 	.word	0x20000592

0800a8cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	1dfb      	adds	r3, r7, #7
 800a8d8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a8da:	2117      	movs	r1, #23
 800a8dc:	187b      	adds	r3, r7, r1
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a8e2:	187b      	adds	r3, r7, r1
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	e02f      	b.n	800a94a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	0f1b      	lsrs	r3, r3, #28
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d80d      	bhi.n	800a90e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	0f1b      	lsrs	r3, r3, #28
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	2317      	movs	r3, #23
 800a8fa:	18fb      	adds	r3, r7, r3
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	0019      	movs	r1, r3
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	185b      	adds	r3, r3, r1
 800a906:	3230      	adds	r2, #48	@ 0x30
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
 800a90c:	e00c      	b.n	800a928 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	0f1b      	lsrs	r3, r3, #28
 800a912:	b2da      	uxtb	r2, r3
 800a914:	2317      	movs	r3, #23
 800a916:	18fb      	adds	r3, r7, r3
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	0019      	movs	r1, r3
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	185b      	adds	r3, r3, r1
 800a922:	3237      	adds	r2, #55	@ 0x37
 800a924:	b2d2      	uxtb	r2, r2
 800a926:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a92e:	2117      	movs	r1, #23
 800a930:	187b      	adds	r3, r7, r1
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	3301      	adds	r3, #1
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	18d3      	adds	r3, r2, r3
 800a93c:	2200      	movs	r2, #0
 800a93e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a940:	187b      	adds	r3, r7, r1
 800a942:	781a      	ldrb	r2, [r3, #0]
 800a944:	187b      	adds	r3, r7, r1
 800a946:	3201      	adds	r2, #1
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	2317      	movs	r3, #23
 800a94c:	18fa      	adds	r2, r7, r3
 800a94e:	1dfb      	adds	r3, r7, #7
 800a950:	7812      	ldrb	r2, [r2, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d3c8      	bcc.n	800a8ea <IntToUnicode+0x1e>
  }
}
 800a958:	46c0      	nop			@ (mov r8, r8)
 800a95a:	46c0      	nop			@ (mov r8, r8)
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b006      	add	sp, #24
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0e      	ldr	r2, [pc, #56]	@ (800a9ac <HAL_PCD_MspInit+0x48>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d115      	bne.n	800a9a2 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a976:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b0 <HAL_PCD_MspInit+0x4c>)
 800a978:	69da      	ldr	r2, [r3, #28]
 800a97a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <HAL_PCD_MspInit+0x4c>)
 800a97c:	2180      	movs	r1, #128	@ 0x80
 800a97e:	0409      	lsls	r1, r1, #16
 800a980:	430a      	orrs	r2, r1
 800a982:	61da      	str	r2, [r3, #28]
 800a984:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b0 <HAL_PCD_MspInit+0x4c>)
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	2380      	movs	r3, #128	@ 0x80
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	4013      	ands	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a992:	2200      	movs	r2, #0
 800a994:	2100      	movs	r1, #0
 800a996:	201f      	movs	r0, #31
 800a998:	f7f7 fc5a 	bl	8002250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a99c:	201f      	movs	r0, #31
 800a99e:	f7f7 fc6c 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	b004      	add	sp, #16
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	40005c00 	.word	0x40005c00
 800a9b0:	40021000 	.word	0x40021000

0800a9b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	23b6      	movs	r3, #182	@ 0xb6
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	58d2      	ldr	r2, [r2, r3]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	21a6      	movs	r1, #166	@ 0xa6
 800a9c8:	0089      	lsls	r1, r1, #2
 800a9ca:	468c      	mov	ip, r1
 800a9cc:	4463      	add	r3, ip
 800a9ce:	0019      	movs	r1, r3
 800a9d0:	0010      	movs	r0, r2
 800a9d2:	f7fe fc9b 	bl	800930c <USBD_LL_SetupStage>
}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b002      	add	sp, #8
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9de:	b590      	push	{r4, r7, lr}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	000a      	movs	r2, r1
 800a9e8:	1cfb      	adds	r3, r7, #3
 800a9ea:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	23b6      	movs	r3, #182	@ 0xb6
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	58d4      	ldr	r4, [r2, r3]
 800a9f4:	1cfb      	adds	r3, r7, #3
 800a9f6:	781a      	ldrb	r2, [r3, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	23b2      	movs	r3, #178	@ 0xb2
 800a9fc:	0059      	lsls	r1, r3, #1
 800a9fe:	0013      	movs	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	189b      	adds	r3, r3, r2
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	18c3      	adds	r3, r0, r3
 800aa08:	185b      	adds	r3, r3, r1
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	1cfb      	adds	r3, r7, #3
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	0019      	movs	r1, r3
 800aa12:	0020      	movs	r0, r4
 800aa14:	f7fe fcd8 	bl	80093c8 <USBD_LL_DataOutStage>
}
 800aa18:	46c0      	nop			@ (mov r8, r8)
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bd90      	pop	{r4, r7, pc}

0800aa20 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	000a      	movs	r2, r1
 800aa2a:	1cfb      	adds	r3, r7, #3
 800aa2c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	23b6      	movs	r3, #182	@ 0xb6
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	58d0      	ldr	r0, [r2, r3]
 800aa36:	1cfb      	adds	r3, r7, #3
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	0013      	movs	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	189b      	adds	r3, r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	18cb      	adds	r3, r1, r3
 800aa46:	3324      	adds	r3, #36	@ 0x24
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	1cfb      	adds	r3, r7, #3
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	0019      	movs	r1, r3
 800aa50:	f7fe fd3c 	bl	80094cc <USBD_LL_DataInStage>
}
 800aa54:	46c0      	nop			@ (mov r8, r8)
 800aa56:	46bd      	mov	sp, r7
 800aa58:	b002      	add	sp, #8
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	23b6      	movs	r3, #182	@ 0xb6
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	58d3      	ldr	r3, [r2, r3]
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f7fe fe73 	bl	8009758 <USBD_LL_SOF>
}
 800aa72:	46c0      	nop			@ (mov r8, r8)
 800aa74:	46bd      	mov	sp, r7
 800aa76:	b002      	add	sp, #8
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa82:	230f      	movs	r3, #15
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	2201      	movs	r2, #1
 800aa88:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	795b      	ldrb	r3, [r3, #5]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d001      	beq.n	800aa96 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800aa92:	f7f6 feb3 	bl	80017fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	23b6      	movs	r3, #182	@ 0xb6
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	58d2      	ldr	r2, [r2, r3]
 800aa9e:	230f      	movs	r3, #15
 800aaa0:	18fb      	adds	r3, r7, r3
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	0019      	movs	r1, r3
 800aaa6:	0010      	movs	r0, r2
 800aaa8:	f7fe fe15 	bl	80096d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	23b6      	movs	r3, #182	@ 0xb6
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	58d3      	ldr	r3, [r2, r3]
 800aab4:	0018      	movs	r0, r3
 800aab6:	f7fe fdc6 	bl	8009646 <USBD_LL_Reset>
}
 800aaba:	46c0      	nop			@ (mov r8, r8)
 800aabc:	46bd      	mov	sp, r7
 800aabe:	b004      	add	sp, #16
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	23b6      	movs	r3, #182	@ 0xb6
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	58d3      	ldr	r3, [r2, r3]
 800aad4:	0018      	movs	r0, r3
 800aad6:	f7fe fe0f 	bl	80096f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7a5b      	ldrb	r3, [r3, #9]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d005      	beq.n	800aaee <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aae2:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <HAL_PCD_SuspendCallback+0x34>)
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	4b04      	ldr	r3, [pc, #16]	@ (800aaf8 <HAL_PCD_SuspendCallback+0x34>)
 800aae8:	2106      	movs	r1, #6
 800aaea:	430a      	orrs	r2, r1
 800aaec:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800aaee:	46c0      	nop			@ (mov r8, r8)
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b002      	add	sp, #8
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	e000ed00 	.word	0xe000ed00

0800aafc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7a5b      	ldrb	r3, [r3, #9]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab0c:	4b09      	ldr	r3, [pc, #36]	@ (800ab34 <HAL_PCD_ResumeCallback+0x38>)
 800ab0e:	691a      	ldr	r2, [r3, #16]
 800ab10:	4b08      	ldr	r3, [pc, #32]	@ (800ab34 <HAL_PCD_ResumeCallback+0x38>)
 800ab12:	2106      	movs	r1, #6
 800ab14:	438a      	bics	r2, r1
 800ab16:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ab18:	f000 fa20 	bl	800af5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	23b6      	movs	r3, #182	@ 0xb6
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	58d3      	ldr	r3, [r2, r3]
 800ab24:	0018      	movs	r0, r3
 800ab26:	f7fe fdff 	bl	8009728 <USBD_LL_Resume>
}
 800ab2a:	46c0      	nop			@ (mov r8, r8)
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	b002      	add	sp, #8
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	46c0      	nop			@ (mov r8, r8)
 800ab34:	e000ed00 	.word	0xe000ed00

0800ab38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab40:	4a27      	ldr	r2, [pc, #156]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab42:	23b6      	movs	r3, #182	@ 0xb6
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	23b0      	movs	r3, #176	@ 0xb0
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4923      	ldr	r1, [pc, #140]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab52:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ab54:	4b22      	ldr	r3, [pc, #136]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab56:	4a23      	ldr	r2, [pc, #140]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab5a:	4b21      	ldr	r3, [pc, #132]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab60:	4b1f      	ldr	r3, [pc, #124]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab62:	2202      	movs	r2, #2
 800ab64:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab66:	4b1e      	ldr	r3, [pc, #120]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab68:	2202      	movs	r2, #2
 800ab6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab6c:	4b1c      	ldr	r3, [pc, #112]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab72:	4b1b      	ldr	r3, [pc, #108]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab78:	4b19      	ldr	r3, [pc, #100]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab7e:	4b18      	ldr	r3, [pc, #96]	@ (800abe0 <USBD_LL_Init+0xa8>)
 800ab80:	0018      	movs	r0, r3
 800ab82:	f7f8 f945 	bl	8002e10 <HAL_PCD_Init>
 800ab86:	1e03      	subs	r3, r0, #0
 800ab88:	d001      	beq.n	800ab8e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800ab8a:	f7f6 fe37 	bl	80017fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	23b0      	movs	r3, #176	@ 0xb0
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	58d0      	ldr	r0, [r2, r3]
 800ab96:	2318      	movs	r3, #24
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f7f9 fede 	bl	800495c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	23b0      	movs	r3, #176	@ 0xb0
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	58d0      	ldr	r0, [r2, r3]
 800aba8:	2358      	movs	r3, #88	@ 0x58
 800abaa:	2200      	movs	r2, #0
 800abac:	2180      	movs	r1, #128	@ 0x80
 800abae:	f7f9 fed5 	bl	800495c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	23b0      	movs	r3, #176	@ 0xb0
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	58d0      	ldr	r0, [r2, r3]
 800abba:	2398      	movs	r3, #152	@ 0x98
 800abbc:	2200      	movs	r2, #0
 800abbe:	2181      	movs	r1, #129	@ 0x81
 800abc0:	f7f9 fecc 	bl	800495c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	23b0      	movs	r3, #176	@ 0xb0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	58d0      	ldr	r0, [r2, r3]
 800abcc:	23d8      	movs	r3, #216	@ 0xd8
 800abce:	2200      	movs	r2, #0
 800abd0:	2101      	movs	r1, #1
 800abd2:	f7f9 fec3 	bl	800495c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	0018      	movs	r0, r3
 800abda:	46bd      	mov	sp, r7
 800abdc:	b002      	add	sp, #8
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000e50 	.word	0x20000e50
 800abe4:	40005c00 	.word	0x40005c00

0800abe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf0:	210f      	movs	r1, #15
 800abf2:	187b      	adds	r3, r7, r1
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	260e      	movs	r6, #14
 800abfa:	19bb      	adds	r3, r7, r6
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	23b0      	movs	r3, #176	@ 0xb0
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	58d3      	ldr	r3, [r2, r3]
 800ac08:	000d      	movs	r5, r1
 800ac0a:	187c      	adds	r4, r7, r1
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	f7f8 f9f3 	bl	8002ff8 <HAL_PCD_Start>
 800ac12:	0003      	movs	r3, r0
 800ac14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac16:	19bc      	adds	r4, r7, r6
 800ac18:	197b      	adds	r3, r7, r5
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f000 f9a4 	bl	800af6a <USBD_Get_USB_Status>
 800ac22:	0003      	movs	r3, r0
 800ac24:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac26:	19bb      	adds	r3, r7, r6
 800ac28:	781b      	ldrb	r3, [r3, #0]
}
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	b005      	add	sp, #20
 800ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	000c      	movs	r4, r1
 800ac3c:	0010      	movs	r0, r2
 800ac3e:	0019      	movs	r1, r3
 800ac40:	1cfb      	adds	r3, r7, #3
 800ac42:	1c22      	adds	r2, r4, #0
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	1cbb      	adds	r3, r7, #2
 800ac48:	1c02      	adds	r2, r0, #0
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	003b      	movs	r3, r7
 800ac4e:	1c0a      	adds	r2, r1, #0
 800ac50:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac52:	260f      	movs	r6, #15
 800ac54:	19bb      	adds	r3, r7, r6
 800ac56:	2200      	movs	r2, #0
 800ac58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5a:	250e      	movs	r5, #14
 800ac5c:	197b      	adds	r3, r7, r5
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	23b0      	movs	r3, #176	@ 0xb0
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	58d0      	ldr	r0, [r2, r3]
 800ac6a:	19bc      	adds	r4, r7, r6
 800ac6c:	1cbb      	adds	r3, r7, #2
 800ac6e:	781d      	ldrb	r5, [r3, #0]
 800ac70:	003b      	movs	r3, r7
 800ac72:	881a      	ldrh	r2, [r3, #0]
 800ac74:	1cfb      	adds	r3, r7, #3
 800ac76:	7819      	ldrb	r1, [r3, #0]
 800ac78:	002b      	movs	r3, r5
 800ac7a:	f7f8 fb51 	bl	8003320 <HAL_PCD_EP_Open>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac82:	250e      	movs	r5, #14
 800ac84:	197c      	adds	r4, r7, r5
 800ac86:	19bb      	adds	r3, r7, r6
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f000 f96d 	bl	800af6a <USBD_Get_USB_Status>
 800ac90:	0003      	movs	r3, r0
 800ac92:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac94:	197b      	adds	r3, r7, r5
 800ac96:	781b      	ldrb	r3, [r3, #0]
}
 800ac98:	0018      	movs	r0, r3
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b005      	add	sp, #20
 800ac9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aca0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	000a      	movs	r2, r1
 800acaa:	1cfb      	adds	r3, r7, #3
 800acac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acae:	210f      	movs	r1, #15
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	2200      	movs	r2, #0
 800acb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb6:	260e      	movs	r6, #14
 800acb8:	19bb      	adds	r3, r7, r6
 800acba:	2200      	movs	r2, #0
 800acbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	23b0      	movs	r3, #176	@ 0xb0
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	58d2      	ldr	r2, [r2, r3]
 800acc6:	000d      	movs	r5, r1
 800acc8:	187c      	adds	r4, r7, r1
 800acca:	1cfb      	adds	r3, r7, #3
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	0019      	movs	r1, r3
 800acd0:	0010      	movs	r0, r2
 800acd2:	f7f8 fb94 	bl	80033fe <HAL_PCD_EP_Close>
 800acd6:	0003      	movs	r3, r0
 800acd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acda:	19bc      	adds	r4, r7, r6
 800acdc:	197b      	adds	r3, r7, r5
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	0018      	movs	r0, r3
 800ace2:	f000 f942 	bl	800af6a <USBD_Get_USB_Status>
 800ace6:	0003      	movs	r3, r0
 800ace8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800acea:	19bb      	adds	r3, r7, r6
 800acec:	781b      	ldrb	r3, [r3, #0]
}
 800acee:	0018      	movs	r0, r3
 800acf0:	46bd      	mov	sp, r7
 800acf2:	b005      	add	sp, #20
 800acf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acf6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	000a      	movs	r2, r1
 800ad00:	1cfb      	adds	r3, r7, #3
 800ad02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad04:	210f      	movs	r1, #15
 800ad06:	187b      	adds	r3, r7, r1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0c:	260e      	movs	r6, #14
 800ad0e:	19bb      	adds	r3, r7, r6
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	23b0      	movs	r3, #176	@ 0xb0
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	58d2      	ldr	r2, [r2, r3]
 800ad1c:	000d      	movs	r5, r1
 800ad1e:	187c      	adds	r4, r7, r1
 800ad20:	1cfb      	adds	r3, r7, #3
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	0019      	movs	r1, r3
 800ad26:	0010      	movs	r0, r2
 800ad28:	f7f8 fc2d 	bl	8003586 <HAL_PCD_EP_SetStall>
 800ad2c:	0003      	movs	r3, r0
 800ad2e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad30:	19bc      	adds	r4, r7, r6
 800ad32:	197b      	adds	r3, r7, r5
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	0018      	movs	r0, r3
 800ad38:	f000 f917 	bl	800af6a <USBD_Get_USB_Status>
 800ad3c:	0003      	movs	r3, r0
 800ad3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad40:	19bb      	adds	r3, r7, r6
 800ad42:	781b      	ldrb	r3, [r3, #0]
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	b005      	add	sp, #20
 800ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad4c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	000a      	movs	r2, r1
 800ad56:	1cfb      	adds	r3, r7, #3
 800ad58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5a:	210f      	movs	r1, #15
 800ad5c:	187b      	adds	r3, r7, r1
 800ad5e:	2200      	movs	r2, #0
 800ad60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad62:	260e      	movs	r6, #14
 800ad64:	19bb      	adds	r3, r7, r6
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	23b0      	movs	r3, #176	@ 0xb0
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	58d2      	ldr	r2, [r2, r3]
 800ad72:	000d      	movs	r5, r1
 800ad74:	187c      	adds	r4, r7, r1
 800ad76:	1cfb      	adds	r3, r7, #3
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	0019      	movs	r1, r3
 800ad7c:	0010      	movs	r0, r2
 800ad7e:	f7f8 fc5e 	bl	800363e <HAL_PCD_EP_ClrStall>
 800ad82:	0003      	movs	r3, r0
 800ad84:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad86:	19bc      	adds	r4, r7, r6
 800ad88:	197b      	adds	r3, r7, r5
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 f8ec 	bl	800af6a <USBD_Get_USB_Status>
 800ad92:	0003      	movs	r3, r0
 800ad94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad96:	19bb      	adds	r3, r7, r6
 800ad98:	781b      	ldrb	r3, [r3, #0]
}
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b005      	add	sp, #20
 800ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	000a      	movs	r2, r1
 800adac:	1cfb      	adds	r3, r7, #3
 800adae:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	23b0      	movs	r3, #176	@ 0xb0
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	58d3      	ldr	r3, [r2, r3]
 800adb8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adba:	1cfb      	adds	r3, r7, #3
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da0c      	bge.n	800adde <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adc4:	1cfb      	adds	r3, r7, #3
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	227f      	movs	r2, #127	@ 0x7f
 800adca:	401a      	ands	r2, r3
 800adcc:	68f9      	ldr	r1, [r7, #12]
 800adce:	0013      	movs	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	189b      	adds	r3, r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	18cb      	adds	r3, r1, r3
 800add8:	3312      	adds	r3, #18
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	e00d      	b.n	800adfa <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adde:	1cfb      	adds	r3, r7, #3
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	227f      	movs	r2, #127	@ 0x7f
 800ade4:	401a      	ands	r2, r3
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	23a9      	movs	r3, #169	@ 0xa9
 800adea:	0059      	lsls	r1, r3, #1
 800adec:	0013      	movs	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	189b      	adds	r3, r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	18c3      	adds	r3, r0, r3
 800adf6:	185b      	adds	r3, r3, r1
 800adf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b004      	add	sp, #16
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae04:	b085      	sub	sp, #20
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	000a      	movs	r2, r1
 800ae0c:	1cfb      	adds	r3, r7, #3
 800ae0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae10:	210f      	movs	r1, #15
 800ae12:	187b      	adds	r3, r7, r1
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae18:	260e      	movs	r6, #14
 800ae1a:	19bb      	adds	r3, r7, r6
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	23b0      	movs	r3, #176	@ 0xb0
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	58d2      	ldr	r2, [r2, r3]
 800ae28:	000d      	movs	r5, r1
 800ae2a:	187c      	adds	r4, r7, r1
 800ae2c:	1cfb      	adds	r3, r7, #3
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	0019      	movs	r1, r3
 800ae32:	0010      	movs	r0, r2
 800ae34:	f7f8 fa4a 	bl	80032cc <HAL_PCD_SetAddress>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3c:	19bc      	adds	r4, r7, r6
 800ae3e:	197b      	adds	r3, r7, r5
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 f891 	bl	800af6a <USBD_Get_USB_Status>
 800ae48:	0003      	movs	r3, r0
 800ae4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae4c:	19bb      	adds	r3, r7, r6
 800ae4e:	781b      	ldrb	r3, [r3, #0]
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b005      	add	sp, #20
 800ae56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	0008      	movs	r0, r1
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	0019      	movs	r1, r3
 800ae66:	230b      	movs	r3, #11
 800ae68:	18fb      	adds	r3, r7, r3
 800ae6a:	1c02      	adds	r2, r0, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	2408      	movs	r4, #8
 800ae70:	193b      	adds	r3, r7, r4
 800ae72:	1c0a      	adds	r2, r1, #0
 800ae74:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae76:	2117      	movs	r1, #23
 800ae78:	187b      	adds	r3, r7, r1
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae7e:	2516      	movs	r5, #22
 800ae80:	197b      	adds	r3, r7, r5
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	23b0      	movs	r3, #176	@ 0xb0
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	58d0      	ldr	r0, [r2, r3]
 800ae8e:	193b      	adds	r3, r7, r4
 800ae90:	881d      	ldrh	r5, [r3, #0]
 800ae92:	000e      	movs	r6, r1
 800ae94:	187c      	adds	r4, r7, r1
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	230b      	movs	r3, #11
 800ae9a:	18fb      	adds	r3, r7, r3
 800ae9c:	7819      	ldrb	r1, [r3, #0]
 800ae9e:	002b      	movs	r3, r5
 800aea0:	f7f8 fb35 	bl	800350e <HAL_PCD_EP_Transmit>
 800aea4:	0003      	movs	r3, r0
 800aea6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea8:	2516      	movs	r5, #22
 800aeaa:	197c      	adds	r4, r7, r5
 800aeac:	19bb      	adds	r3, r7, r6
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f000 f85a 	bl	800af6a <USBD_Get_USB_Status>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aeba:	197b      	adds	r3, r7, r5
 800aebc:	781b      	ldrb	r3, [r3, #0]
}
 800aebe:	0018      	movs	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b007      	add	sp, #28
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aec6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec8:	b087      	sub	sp, #28
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	0008      	movs	r0, r1
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	0019      	movs	r1, r3
 800aed4:	230b      	movs	r3, #11
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	1c02      	adds	r2, r0, #0
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	2408      	movs	r4, #8
 800aede:	193b      	adds	r3, r7, r4
 800aee0:	1c0a      	adds	r2, r1, #0
 800aee2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee4:	2117      	movs	r1, #23
 800aee6:	187b      	adds	r3, r7, r1
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeec:	2516      	movs	r5, #22
 800aeee:	197b      	adds	r3, r7, r5
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	23b0      	movs	r3, #176	@ 0xb0
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	58d0      	ldr	r0, [r2, r3]
 800aefc:	193b      	adds	r3, r7, r4
 800aefe:	881d      	ldrh	r5, [r3, #0]
 800af00:	000e      	movs	r6, r1
 800af02:	187c      	adds	r4, r7, r1
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	230b      	movs	r3, #11
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	7819      	ldrb	r1, [r3, #0]
 800af0c:	002b      	movs	r3, r5
 800af0e:	f7f8 fac7 	bl	80034a0 <HAL_PCD_EP_Receive>
 800af12:	0003      	movs	r3, r0
 800af14:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af16:	2516      	movs	r5, #22
 800af18:	197c      	adds	r4, r7, r5
 800af1a:	19bb      	adds	r3, r7, r6
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	0018      	movs	r0, r3
 800af20:	f000 f823 	bl	800af6a <USBD_Get_USB_Status>
 800af24:	0003      	movs	r3, r0
 800af26:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800af28:	197b      	adds	r3, r7, r5
 800af2a:	781b      	ldrb	r3, [r3, #0]
}
 800af2c:	0018      	movs	r0, r3
 800af2e:	46bd      	mov	sp, r7
 800af30:	b007      	add	sp, #28
 800af32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800af3c:	4b02      	ldr	r3, [pc, #8]	@ (800af48 <USBD_static_malloc+0x14>)
}
 800af3e:	0018      	movs	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	b002      	add	sp, #8
 800af44:	bd80      	pop	{r7, pc}
 800af46:	46c0      	nop			@ (mov r8, r8)
 800af48:	2000112c 	.word	0x2000112c

0800af4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]

}
 800af54:	46c0      	nop			@ (mov r8, r8)
 800af56:	46bd      	mov	sp, r7
 800af58:	b002      	add	sp, #8
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af60:	f7f6 faab 	bl	80014ba <SystemClock_Config>
}
 800af64:	46c0      	nop			@ (mov r8, r8)
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	0002      	movs	r2, r0
 800af72:	1dfb      	adds	r3, r7, #7
 800af74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af76:	230f      	movs	r3, #15
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800af7e:	1dfb      	adds	r3, r7, #7
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b03      	cmp	r3, #3
 800af84:	d017      	beq.n	800afb6 <USBD_Get_USB_Status+0x4c>
 800af86:	dc1b      	bgt.n	800afc0 <USBD_Get_USB_Status+0x56>
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d00f      	beq.n	800afac <USBD_Get_USB_Status+0x42>
 800af8c:	dc18      	bgt.n	800afc0 <USBD_Get_USB_Status+0x56>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <USBD_Get_USB_Status+0x2e>
 800af92:	2b01      	cmp	r3, #1
 800af94:	d005      	beq.n	800afa2 <USBD_Get_USB_Status+0x38>
 800af96:	e013      	b.n	800afc0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af98:	230f      	movs	r3, #15
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	2200      	movs	r2, #0
 800af9e:	701a      	strb	r2, [r3, #0]
    break;
 800afa0:	e013      	b.n	800afca <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afa2:	230f      	movs	r3, #15
 800afa4:	18fb      	adds	r3, r7, r3
 800afa6:	2202      	movs	r2, #2
 800afa8:	701a      	strb	r2, [r3, #0]
    break;
 800afaa:	e00e      	b.n	800afca <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afac:	230f      	movs	r3, #15
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	2201      	movs	r2, #1
 800afb2:	701a      	strb	r2, [r3, #0]
    break;
 800afb4:	e009      	b.n	800afca <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afb6:	230f      	movs	r3, #15
 800afb8:	18fb      	adds	r3, r7, r3
 800afba:	2202      	movs	r2, #2
 800afbc:	701a      	strb	r2, [r3, #0]
    break;
 800afbe:	e004      	b.n	800afca <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800afc0:	230f      	movs	r3, #15
 800afc2:	18fb      	adds	r3, r7, r3
 800afc4:	2202      	movs	r2, #2
 800afc6:	701a      	strb	r2, [r3, #0]
    break;
 800afc8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800afca:	230f      	movs	r3, #15
 800afcc:	18fb      	adds	r3, r7, r3
 800afce:	781b      	ldrb	r3, [r3, #0]
}
 800afd0:	0018      	movs	r0, r3
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b004      	add	sp, #16
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <memset>:
 800afd8:	0003      	movs	r3, r0
 800afda:	1882      	adds	r2, r0, r2
 800afdc:	4293      	cmp	r3, r2
 800afde:	d100      	bne.n	800afe2 <memset+0xa>
 800afe0:	4770      	bx	lr
 800afe2:	7019      	strb	r1, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	e7f9      	b.n	800afdc <memset+0x4>

0800afe8 <__libc_init_array>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	2600      	movs	r6, #0
 800afec:	4c0c      	ldr	r4, [pc, #48]	@ (800b020 <__libc_init_array+0x38>)
 800afee:	4d0d      	ldr	r5, [pc, #52]	@ (800b024 <__libc_init_array+0x3c>)
 800aff0:	1b64      	subs	r4, r4, r5
 800aff2:	10a4      	asrs	r4, r4, #2
 800aff4:	42a6      	cmp	r6, r4
 800aff6:	d109      	bne.n	800b00c <__libc_init_array+0x24>
 800aff8:	2600      	movs	r6, #0
 800affa:	f000 f823 	bl	800b044 <_init>
 800affe:	4c0a      	ldr	r4, [pc, #40]	@ (800b028 <__libc_init_array+0x40>)
 800b000:	4d0a      	ldr	r5, [pc, #40]	@ (800b02c <__libc_init_array+0x44>)
 800b002:	1b64      	subs	r4, r4, r5
 800b004:	10a4      	asrs	r4, r4, #2
 800b006:	42a6      	cmp	r6, r4
 800b008:	d105      	bne.n	800b016 <__libc_init_array+0x2e>
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	00b3      	lsls	r3, r6, #2
 800b00e:	58eb      	ldr	r3, [r5, r3]
 800b010:	4798      	blx	r3
 800b012:	3601      	adds	r6, #1
 800b014:	e7ee      	b.n	800aff4 <__libc_init_array+0xc>
 800b016:	00b3      	lsls	r3, r6, #2
 800b018:	58eb      	ldr	r3, [r5, r3]
 800b01a:	4798      	blx	r3
 800b01c:	3601      	adds	r6, #1
 800b01e:	e7f2      	b.n	800b006 <__libc_init_array+0x1e>
 800b020:	0800b1f4 	.word	0x0800b1f4
 800b024:	0800b1f4 	.word	0x0800b1f4
 800b028:	0800b1f8 	.word	0x0800b1f8
 800b02c:	0800b1f4 	.word	0x0800b1f4

0800b030 <memcpy>:
 800b030:	2300      	movs	r3, #0
 800b032:	b510      	push	{r4, lr}
 800b034:	429a      	cmp	r2, r3
 800b036:	d100      	bne.n	800b03a <memcpy+0xa>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	5ccc      	ldrb	r4, [r1, r3]
 800b03c:	54c4      	strb	r4, [r0, r3]
 800b03e:	3301      	adds	r3, #1
 800b040:	e7f8      	b.n	800b034 <memcpy+0x4>
	...

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	46c0      	nop			@ (mov r8, r8)
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
